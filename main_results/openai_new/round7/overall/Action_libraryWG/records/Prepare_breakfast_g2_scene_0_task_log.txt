From agent.py
Reset goals: The sub-goals are: 
['1. Crack and whisk the eggs.', '2. Heat the frying pan and add oil.', '3. Pour the eggs into the frying pan and scramble them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
def has_bowl_on_kitchen_counter(kitchen_counter:item):
    symbol has_bowl=exists o: item : (is_bowl(o) and on(o, kitchen_counter))
    return has_bowl

behavior crack_egg(egg: item, bowl: item):
    body:
        achieve_once dirty(bowl)
        # Indicates that the egg is cracked into the bowl, making it dirty

behavior whisk(whisk: item, bowl: item):
    body:
        achieve_once dirty(bowl)
        # Indicates that the egg is being whisked in the bowl, making it dirty

behavior __goal__():
    body:
        if exists kitchen_counter: item : (is_kitchen_counter(kitchen_counter) and has_bowl_on_kitchen_counter(kitchen_counter)):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_bowl_on_kitchen_counter(kitchen_counter)
            bind bowl: item where:
                is_bowl(bowl) and on(bowl, kitchen_counter)
            bind egg: item where:
                is_food_egg(egg)
            bind whisk: item where:
                is_food_vegetable(whisk)

            crack_egg(egg, bowl)
            whisk(whisk, bowl)

        else:
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check if there is a bowl on the kitchen counter")
#goal_representation_end

##############################
From agent.py->reset_goal
def has_bowl_on_kitchen_counter(kitchen_counter:item):
    symbol has_bowl=exists o: item : (is_bowl(o) and on(o, kitchen_counter))
    return has_bowl

behavior crack_egg(egg: item, bowl: item):
    body:
        achieve_once dirty(bowl)
        # Indicates that the egg is cracked into the bowl, making it dirty

behavior whisk(whisk: item, bowl: item):
    body:
        achieve_once dirty(bowl)
        # Indicates that the egg is being whisked in the bowl, making it dirty

behavior __goal__():
    body:
        if exists kitchen_counter: item : (is_kitchen_counter(kitchen_counter) and has_bowl_on_kitchen_counter(kitchen_counter)):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_bowl_on_kitchen_counter(kitchen_counter)
            bind bowl: item where:
                is_bowl(bowl) and on(bowl, kitchen_counter)
            bind egg: item where:
                is_food_egg(egg)
            bind whisk: item where:
                is_food_vegetable(whisk)

            crack_egg(egg, bowl)
            whisk(whisk, bowl)

        else:
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check if there is a bowl on the kitchen counter")
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check if there is a bowl on the kitchen counter)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(kitchen_counter_230, Check if there is a bowl on the kitchen counter)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to identify and interact with a bowl on the kitchen counter. This involves finding a bowl, cracking the eggs into it, and whisking them. After locating a bowl, perform these actions to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to identify and interact with a bowl on the kitchen counter. This involves finding a bowl, cracking the eggs into it, and whisking them. After locating a bowl, perform these actions to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check if there is a bowl on the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_eggs_in_bowl(bowl: item):
    symbol has_eggs = exists o: item : (is_food_egg(o) and inside(o, bowl))
    return has_eggs

behavior __goal__():
    body:
        if exists bowl: item : (is_bowl(bowl) and has_eggs_in_bowl(bowl)):
            # If a bowl with eggs already exists, approach it
            bind bowl: item where:
                is_bowl(bowl) and has_eggs_in_bowl(bowl)
            achieve close_char(char, bowl)
        else:
            # Search for a bowl to crack the eggs into
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Check if there are any eggs in the bowl")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_eggs_in_bowl(bowl: item):
    symbol has_eggs = exists o: item : (is_food_egg(o) and inside(o, bowl))
    return has_eggs

behavior __goal__():
    body:
        if exists bowl: item : (is_bowl(bowl) and has_eggs_in_bowl(bowl)):
            # If a bowl with eggs already exists, approach it
            bind bowl: item where:
                is_bowl(bowl) and has_eggs_in_bowl(bowl)
            achieve close_char(char, bowl)
        else:
            # Search for a bowl to crack the eggs into
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Check if there are any eggs in the bowl")

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(bowl_2071, coffee_table_2068)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(coffee_table_2068)exp(bowl_2072, coffee_table_2068)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(bowl_2071, coffee_table_2068)
Fail to find bowl_2071 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_380)exp(bowl_2071, closetdrawer_380)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(closetdrawer_380)exp(bowl_2072, closetdrawer_380)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(closetdrawer_380)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_380)
Fail to find bowl_2071 around closetdrawer_380. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_380)exp(bowl_2071, closetdrawer_380)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(closetdrawer_380)exp(bowl_2072, closetdrawer_380)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(closetdrawer_380)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_380)
Fail to find bowl_2071 around closetdrawer_380. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_380)exp(bowl_2071, closetdrawer_380)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(closetdrawer_380)exp(bowl_2072, closetdrawer_380)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(closetdrawer_380)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_380)
Fail to find bowl_2071 around closetdrawer_380. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_380)exp(bowl_2071, closetdrawer_380)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(closetdrawer_380)exp(bowl_2072, closetdrawer_380)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(closetdrawer_380)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_380)
Fail to find bowl_2071 around closetdrawer_380. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: To find bowl_2071, go to dining_room_201. The bowl is on top of table_226, which is close to the bowl as well. Look for the table, and the bowl should be directly on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to identify and interact with a bowl on the kitchen counter. This involves finding a bowl, cracking the eggs into it, and whisking them. After locating a bowl, perform these actions to complete the sub-task.
To find bowl_2071, go to dining_room_201. The bowl is on top of table_226, which is close to the bowl as well. Look for the table, and the bowl should be directly on it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check if there is a bowl on the kitchen counter.
Action 3: Walk to coffee_table_2068.
Action 4: look for bowl_2071 around coffee_table_2068.
Action 5: Walk to closetdrawer_380.
Action 6: look for bowl_2071 around closetdrawer_380.
Action 7: Walk to closetdrawer_380.
Action 8: look for bowl_2071 around closetdrawer_380.
Action 9: Walk to closetdrawer_380.
Action 10: look for bowl_2071 around closetdrawer_380.
Action 11: Walk to closetdrawer_380.
Action 12: look for bowl_2071 around closetdrawer_380.
Action 13: Walk to cupboard_229.
Action 14: Open cupboard_229.

##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(bowl_2071, wallshelf_234)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(wallshelf_234)exp(bowl_2072, wallshelf_234)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(bowl_2071, wallshelf_234)
Fail to find bowl_2071 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)obs(bowl_2071, Check if there are any eggs in the bowl)walk_executor(bowl_2072)obs(bowl_2072, Check if there are any eggs in the bowl)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
obs(bowl_2071, Check if there are any eggs in the bowl)
Get this information:  bowl_2071 is close to table_226. bowl_2071 is close to character_65. bowl_2071 is on table_226. bowl_2071 is inside dining_room_201. bowl_2071 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2072. 
##############################
From agent.py
obs(bowl_2072, Check if there are any eggs in the bowl)
Get this information:  bowl_2072 is close to table_226. bowl_2072 is close to character_65. bowl_2072 is on table_226. bowl_2072 is inside dining_room_201. bowl_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to find eggs and crack them into the bowl, then whisk the eggs. Currently, the robot has identified that both bowls near the table are dirty but has not found nor cracked any eggs into them, and it has not whisked the eggs.
##############################
From agent.py
Human Instruction: The robot needs to find eggs and crack them into the bowl, then whisk the eggs. Currently, the robot has identified that both bowls near the table are dirty but has not found nor cracked any eggs into them, and it has not whisked the eggs.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check if there is a bowl on the kitchen counter.
Action 3: Walk to coffee_table_2068.
Action 4: look for bowl_2071 around coffee_table_2068.
Action 5: Walk to closetdrawer_380.
Action 6: look for bowl_2071 around closetdrawer_380.
Action 7: Walk to closetdrawer_380.
Action 8: look for bowl_2071 around closetdrawer_380.
Action 9: Walk to closetdrawer_380.
Action 10: look for bowl_2071 around closetdrawer_380.
Action 11: Walk to closetdrawer_380.
Action 12: look for bowl_2071 around closetdrawer_380.
Action 13: Walk to cupboard_229.
Action 14: Open cupboard_229.
Action 15: look for bowl_2071 around cupboard_229.
Action 16: Walk to wallshelf_234.
Action 17: look for bowl_2071 around wallshelf_234.
Action 18: Walk to table_226.
Action 19: look for bowl_2071 around table_226.
Action 20: Walk to bowl_2071.
Action 21: Observe around bowl_2071 with the question of Check if there are any eggs in the bowl.
Action 22: Walk to bowl_2072.
Action 23: Observe around bowl_2072 with the question of Check if there are any eggs in the bowl.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior crack_and_whisk_eggs(egg:item,bowl:item):
    body:
        achieve_once inhand(egg)
        achieve_once inside(egg, bowl)
        # Crack and place egg inside the bowl 
        # Here, we assume that the robot can figure out to break the egg itself
        achieve whisked(egg)
        # Whisk the eggs in the bowl

behavior identify_clean_bowl_and_egg():
    body:
        if exists bowl:item: is_bowl(bowl) and clean(bowl) and not dirty(bowl):
            bind bowl: item where: 
                is_bowl(bowl) and clean(bowl)
                # Select a clean bowl from the known location
                bind egg:item where:
                    is_food_egg(egg) 
                # Select an egg to crack from the known location
                crack_and_whisk_eggs(egg, bowl)
        else:
            foreach bowl:item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl,"Check if bowl is empty and clean")

__goal__():
    body:
        identify_clean_bowl_and_egg()
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', '__goal__') at line 5744, column 1.
Expected one of: 
	* OBJECTS
	* IMPORT
	* TYPEDEF
	* FEATURE
	* _NEWLINE
	* DOMAIN
	* $END
	* INCLUDE
	* BEHAVIOR
	* INIT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* GOAL
	* GENERATOR
	* _PRAGMA_KEYWORD
Previous tokens: [Token('_NEWLINE', '\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_380(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
def has_eggs_in_bowl(bowl:item):
    symbol has_eggs=exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return has_eggs

behavior crack_and_whisk_eggs(egg:item, bowl:item):
    body:
        achieve_once inhand(egg)
        achieve_once inside(egg, bowl)
        achieve whisked(egg)

behavior identify_clean_bowl_and_egg():
    body:
        if exists bowl:item: is_bowl(bowl) and clean(bowl) and not dirty(bowl):
            bind bowl: item where: 
                is_bowl(bowl) and clean(bowl) and not dirty(bowl)
            bind egg:item where:
                is_food_egg(egg)
            crack_and_whisk_eggs(egg, bowl)
        else:
            foreach bowl:item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Check if bowl is empty and clean")

behavior __goal__():
    body:
        identify_clean_bowl_and_egg()
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function whisked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
def has_eggs_in_bowl(bowl:item):
    symbol has_eggs=exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return has_eggs

behavior crack_and_whisk_eggs(egg:item, bowl:item):
    body:
        achieve_once inhand(egg)
        achieve_once inside(egg, bowl)
        achieve_once on(egg, whisk)

behavior identify_clean_bowl_and_egg():
    body:
        if exists bowl:item: is_bowl(bowl) and clean(bowl) and not dirty(bowl):
            bind bowl: item where: 
                is_bowl(bowl) and clean(bowl) and not dirty(bowl)
            bind egg:item where:
                is_food_egg(egg)
            crack_and_whisk_eggs(egg, bowl)
        else:
            foreach bowl:item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Check if bowl is empty and clean")

behavior __goal__():
    body:
        identify_clean_bowl_and_egg()
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_egg_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)

behavior whisk_eggs(bowl:item):
    body:
        achieve whisked(bowl)

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1] == 2071
        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2072
        
        bind egg: item where:
            is_food_egg(egg)

        if exists bowl: item : (dirty(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2)):
            foreach bowl: item:
                if is_bowl(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2) and dirty(bowl):
                    wash(bowl)
        
        if exists bowl: item : ((id[bowl] == bowl1 or id[bowl] == bowl2) and clean(bowl)):
            bind clean_bowl: item where:
                (id[clean_bowl] == bowl1 or id[clean_bowl] == bowl2) and clean(clean_bowl)
            crack_egg_into_bowl(egg, clean_bowl)
            whisk_eggs(clean_bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function whisked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
behavior crack_egg_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)

behavior whisk_eggs(bowl:item):
    body:
        achieve is_clean(bowl) # Ensure the bowl is clean before whisking
        achieve inside(egg, bowl) # Ensure eggs are in the bowl
        # Note: You dont need to use a custom predicate like whisked here

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1] == 2071
        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2072
        
        bind egg: item where:
            is_food_egg(egg)

        if exists bowl: item : (dirty(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2)):
            foreach bowl: item:
                if is_bowl(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2) and dirty(bowl):
                    wash(bowl)
        
        if exists bowl: item : ((id[bowl] == bowl1 or id[bowl] == bowl2) and clean(bowl)):
            bind clean_bowl: item where:
                (id[clean_bowl] == bowl1 or id[clean_bowl] == bowl2) and clean(clean_bowl)
            crack_egg_into_bowl(egg, clean_bowl)
            whisk_eggs(clean_bowl)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_clean not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
behavior crack_egg_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)

behavior whisk_eggs(bowl:item):
    body:
        achieve clean(bowl) # Ensure the bowl is clean before whisking
        achieve inside(egg, bowl) # Ensure eggs are in the bowl

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1] == 2071
        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2072
        
        bind egg: item where:
            is_food_egg(egg)

        if exists bowl: item : (dirty(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2)):
            foreach bowl: item:
                if is_bowl(bowl) and (id[bowl] == bowl1 or id[bowl] == bowl2) and dirty(bowl):
                    wash(bowl)
        
        if exists bowl: item : ((id[bowl] == bowl1 or id[bowl] == bowl2) and clean(bowl)):
            bind clean_bowl: item where:
                (id[clean_bowl] == bowl1 or id[clean_bowl] == bowl2) and clean(clean_bowl)
            crack_egg_into_bowl(egg, clean_bowl)
            whisk_eggs(clean_bowl)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
def check_objects_in_bowls(bowl: item):
    # Function to check if there are any eggs in a bowl
    symbol has_eggs = exists o: item : (is_food_egg(o) and inside(o, bowl))
    return has_eggs

behavior clean_bowl(bowl: item):
    body:
        achieve_once clean(bowl)

behavior crack_egg(egg: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl

behavior whisk_egg_in_bowl(bowl: item):
    body:
        achieve_once close_char(char, bowl)
        achieve_once clean(bowl)
        # Whisk the eggs inside the bowl

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1] == 2071
        
        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2072
        
        if dirty(bowl1):
            clean_bowl(bowl1)
        if dirty(bowl2):
            clean_bowl(bowl2)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                bind target_bowl: item where:
                    is_bowl(target_bowl) and clean(target_bowl) and not check_objects_in_bowls(target_bowl)
                crack_egg(egg, target_bowl)

        foreach bowl: item:
            if is_bowl(bowl) and check_objects_in_bowls(bowl):
                whisk_egg_in_bowl(bowl)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def check_objects_in_bowls(bowl: item):
    # Function to check if there are any eggs in a bowl
    symbol has_eggs = exists o: item : (is_food_egg(o) and inside(o, bowl))
    return has_eggs

behavior clean_bowl(bowl: item):
    body:
        achieve_once clean(bowl)

behavior crack_egg(egg: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl

behavior whisk_egg_in_bowl(bowl: item):
    body:
        achieve_once close_char(char, bowl)
        achieve_once clean(bowl)
        # Whisk the eggs inside the bowl

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1] == 2071
        
        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2072
        
        if dirty(bowl1):
            clean_bowl(bowl1)
        if dirty(bowl2):
            clean_bowl(bowl2)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                bind target_bowl: item where:
                    is_bowl(target_bowl) and clean(target_bowl) and not check_objects_in_bowls(target_bowl)
                crack_egg(egg, target_bowl)

        foreach bowl: item:
            if is_bowl(bowl) and check_objects_in_bowls(bowl):
                whisk_egg_in_bowl(bowl)
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(kitchen_counter_230)put_executor(bowl_2071, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(bowl_2072)switchoff_executor(faucet_232)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. bowl_2071 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
grab_executor(bowl_2072)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the table_226. Grabbing bowl_2072 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(bowl_2071, kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. bowl_2071 is close kitchen_counter_230. bowl_2071 is on kitchen_counter_230. kitchen_counter_230 is close bowl_2071. bowl_2071 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(bowl_2072)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. bowl_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the bowl_2071. Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the bowl_2072. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the bowl_2072. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the bowl_2072. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, bowl_2072)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2072. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2072)
Robot find: Robot is close to the bowl_2072. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. bowl_2072 is close food_egg_2020. food_egg_2020 is inside bowl_2072. food_egg_2020 is close bowl_2072. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to continue by cracking more eggs into the bowl if there are multiple eggs to add and then proceed to whisk the eggs. So far, only one egg has been placed in the bowl, and the whisking has not yet been performed.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_closetdrawer_380(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_pan_and_add_oil(pan:item, oil:item):
    body:
        achieve clean(pan)
        achieve_once inside(oil, pan)

behavior heat_frying_pan_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        clean_pan_and_add_oil(frying_pan, oil)
        heat_frying_pan_stove(frying_pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_pan_and_add_oil(pan:item, oil:item):
    body:
        achieve clean(pan)
        achieve_once inside(oil, pan)

behavior heat_frying_pan_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        clean_pan_and_add_oil(frying_pan, oil)
        heat_frying_pan_stove(frying_pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the bowl_2072. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_mat_236(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==236
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(vacuum_cleaner,mat_instance)
        else:
            exp(vacuum_cleaner,mat_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,mat_instance]=True
        close[mat_instance,vacuum_cleaner]=True
    

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
def pour_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

def scramble_eggs_in_pan(eggs:item, pan:item):
    body:
        achieve cut(eggs)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, bowl_2072)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        pour_eggs_into_pan(eggs, fryingpan)
        scramble_eggs_in_pan(eggs, fryingpan)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5863, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#goal_representation
 
def pour_eggs_into_pan(eggs: item, pan: item):
    body:
        achieve_once inside(eggs, pan)

def scramble_eggs_in_pan(eggs: item, pan: item):
    body:
        achieve cut(eggs)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, bowl_2072)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        pour_eggs_into_pan(eggs, fryingpan)
        scramble_eggs_in_pan(eggs, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5864, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hairbrush_2002_around_closetdrawer_384(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

#goal_representation
def pour_eggs_into_pan(eggs: item, pan: item):
    body:
        achieve_once inside(eggs, pan)

def scramble_eggs_in_pan(eggs: item):
    body:
        achieve cut(eggs)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, bowl_2072)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        pour_eggs_into_pan(eggs, fryingpan)
        scramble_eggs_in_pan(eggs)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_headset_2062_around_closetdrawer_380(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def is_spotless(fryingpan:item):
    # Function to check if the frying pan is clean
    symbol spotless= is_food_food(fryingpan)
    return spotless

behavior pour_eggs_and_scramble(fryingpan:item, eggs:item):
    body:
        achieve_once inside(eggs, fryingpan)

behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            
        if exists fryingpan: item : (is_fryingpan(fryingpan) and not is_spotless(fryingpan)):
            clean_fryingpan(fryingpan)
            
        bind eggs: item where:
            is_food_egg(eggs)
            
        pour_eggs_and_scramble(fryingpan, eggs)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_spotless(fryingpan:item):
    # Function to check if the frying pan is clean
    symbol spotless= is_food_food(fryingpan)
    return spotless

behavior pour_eggs_and_scramble(fryingpan:item, eggs:item):
    body:
        achieve_once inside(eggs, fryingpan)

behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            
        if exists fryingpan: item : (is_fryingpan(fryingpan) and not is_spotless(fryingpan)):
            clean_fryingpan(fryingpan)
            
        bind eggs: item where:
            is_food_egg(eggs)
            
        pour_eggs_and_scramble(fryingpan, eggs)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2072. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2072. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2072. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the bowl_2072. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to scramble the eggs in the frying pan. Ensure that you perform an action that indicates the eggs are scrambled (e.g., a mixing motion).
##############################
From agent.py
Human Instruction: You need to scramble the eggs in the frying pan. Ensure that you perform an action that indicates the eggs are scrambled (e.g., a mixing motion).

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check if there is a bowl on the kitchen counter.
Action 3: Walk to coffee_table_2068.
Action 4: look for bowl_2071 around coffee_table_2068.
Action 5: Walk to closetdrawer_380.
Action 6: look for bowl_2071 around closetdrawer_380.
Action 7: Walk to closetdrawer_380.
Action 8: look for bowl_2071 around closetdrawer_380.
Action 9: Walk to closetdrawer_380.
Action 10: look for bowl_2071 around closetdrawer_380.
Action 11: Walk to closetdrawer_380.
Action 12: look for bowl_2071 around closetdrawer_380.
Action 13: Walk to cupboard_229.
Action 14: Open cupboard_229.
Action 15: look for bowl_2071 around cupboard_229.
Action 16: Walk to wallshelf_234.
Action 17: look for bowl_2071 around wallshelf_234.
Action 18: Walk to table_226.
Action 19: look for bowl_2071 around table_226.
Action 20: Walk to bowl_2071.
Action 21: Observe around bowl_2071 with the question of Check if there are any eggs in the bowl.
Action 22: Walk to bowl_2072.
Action 23: Observe around bowl_2072 with the question of Check if there are any eggs in the bowl.
Action 24: Walk to bowl_2071.
Action 25: Grab bowl_2071.
Action 26: Walk to faucet_43.
Action 27: Switch on faucet_43.
Action 28: Wash bowl_2071.
Action 29: Switch off faucet_43.
Action 30: Walk to bowl_2072.
Action 31: Grab bowl_2072.
Action 32: Walk to kitchen_counter_230.
Action 33: Put bowl_2071 on kitchen_counter_230.
Action 34: Switch on faucet_232.
Action 35: Wash bowl_2072.
Action 36: Switch off faucet_232.
Action 37: Walk to fridge_289.
Action 38: Switch off fridge_289.
Action 39: Open fridge_289.
Action 40: look for food_egg_2020 around fridge_289.
Action 41: Grab food_egg_2020.
Action 42: Put food_egg_2020 into bowl_2072.
Action 43: Walk to oil_2079.
Action 44: Grab oil_2079.
Action 45: Walk to fryingpan_2083.
Action 46: Put oil_2079 into fryingpan_2083.
Action 47: Grab fryingpan_2083.
Action 48: Walk to stove_2065.
Action 49: Put fryingpan_2083 on stove_2065.
Action 50: Switch on stove_2065.
Action 51: Walk to food_egg_2020.
Action 52: Grab food_egg_2020.
Action 53: Walk to fryingpan_2083.
Action 54: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
behavior observe_and_scramble_eggs(fryingpan:item, eggs:item):
    body:
        observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")
        achieve_once on(fryingpan, stove_2065) # Ensure the frying pan is on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)  # Bind the frying pan thats already on the stove
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)  # Bind the eggs that are already in the frying pan 
        observe_and_scramble_eggs(fryingpan, eggs)  # Perform the observe_and_scramble_eggs behavior
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>, Variable<eggs: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2090_around_closetdrawer_382(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(toilet_paper,closetdrawer_instance)
        else:
            exp(toilet_paper,closetdrawer_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,closetdrawer_instance]=True
        close[closetdrawer_instance,toilet_paper]=True
    

#goal_representation
behavior observe_and_scramble_eggs(fryingpan:item, eggs:item, stove:item):
    body:
        observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")
        achieve_once on(fryingpan, stove) # Ensure the frying pan is on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        bind stove: item where:
            is_stove(stove)
        observe_and_scramble_eggs(fryingpan, eggs, stove) # Perform the observe_and_scramble_eggs behavior
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#goal_representation
behavior observe_and_scramble_eggs(fryingpan:item, eggs:item, stove:item):
    body:
        observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")
        achieve_once on(fryingpan, stove) # Ensure the frying pan is on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        observe_and_scramble_eggs(fryingpan, eggs, stove) # Perform the observe_and_scramble_eggs behavior
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior observe_and_scramble_eggs(fryingpan:item, eggs:item, stove:item):
    body:
        observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")
        achieve_once on(fryingpan, stove) # Ensure the frying pan is on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        observe_and_scramble_eggs(fryingpan, eggs, stove) # Perform the observe_and_scramble_eggs behavior
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed)
##############################
From agent.py
obs(fryingpan_2083, Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform an action that indicates the eggs are scrambled (e.g., a mixing motion) in the frying pan. This step has not been completed yet based on the actions taken.
##############################
From agent.py
Human Instruction: You need to perform an action that indicates the eggs are scrambled (e.g., a mixing motion) in the frying pan. This step has not been completed yet based on the actions taken.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check if there is a bowl on the kitchen counter.
Action 3: Walk to coffee_table_2068.
Action 4: look for bowl_2071 around coffee_table_2068.
Action 5: Walk to closetdrawer_380.
Action 6: look for bowl_2071 around closetdrawer_380.
Action 7: Walk to closetdrawer_380.
Action 8: look for bowl_2071 around closetdrawer_380.
Action 9: Walk to closetdrawer_380.
Action 10: look for bowl_2071 around closetdrawer_380.
Action 11: Walk to closetdrawer_380.
Action 12: look for bowl_2071 around closetdrawer_380.
Action 13: Walk to cupboard_229.
Action 14: Open cupboard_229.
Action 15: look for bowl_2071 around cupboard_229.
Action 16: Walk to wallshelf_234.
Action 17: look for bowl_2071 around wallshelf_234.
Action 18: Walk to table_226.
Action 19: look for bowl_2071 around table_226.
Action 20: Walk to bowl_2071.
Action 21: Observe around bowl_2071 with the question of Check if there are any eggs in the bowl.
Action 22: Walk to bowl_2072.
Action 23: Observe around bowl_2072 with the question of Check if there are any eggs in the bowl.
Action 24: Walk to bowl_2071.
Action 25: Grab bowl_2071.
Action 26: Walk to faucet_43.
Action 27: Switch on faucet_43.
Action 28: Wash bowl_2071.
Action 29: Switch off faucet_43.
Action 30: Walk to bowl_2072.
Action 31: Grab bowl_2072.
Action 32: Walk to kitchen_counter_230.
Action 33: Put bowl_2071 on kitchen_counter_230.
Action 34: Switch on faucet_232.
Action 35: Wash bowl_2072.
Action 36: Switch off faucet_232.
Action 37: Walk to fridge_289.
Action 38: Switch off fridge_289.
Action 39: Open fridge_289.
Action 40: look for food_egg_2020 around fridge_289.
Action 41: Grab food_egg_2020.
Action 42: Put food_egg_2020 into bowl_2072.
Action 43: Walk to oil_2079.
Action 44: Grab oil_2079.
Action 45: Walk to fryingpan_2083.
Action 46: Put oil_2079 into fryingpan_2083.
Action 47: Grab fryingpan_2083.
Action 48: Walk to stove_2065.
Action 49: Put fryingpan_2083 on stove_2065.
Action 50: Switch on stove_2065.
Action 51: Walk to food_egg_2020.
Action 52: Grab food_egg_2020.
Action 53: Walk to fryingpan_2083.
Action 54: Put food_egg_2020 into fryingpan_2083.
Action 55: Observe around fryingpan_2083 with the question of Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
def are_eggs_scrambled(fryingpan:item):
    # Check if the eggs are properly scrambled in the frying pan
    symbol scrambled=exists o: item : (is_food_egg(o) and on(o, fryingpan) and cut(o))
    return scrambled

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        if not are_eggs_scrambled(fryingpan):
            observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
def are_eggs_scrambled(fryingpan:item):
    # Check if the eggs are properly scrambled in the frying pan
    symbol scrambled=exists o: item : (is_food_egg(o) and on(o, fryingpan) and cut(o))
    return scrambled

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        if not are_eggs_scrambled(fryingpan):
            observe(fryingpan, "Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed")

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed)
##############################
From agent.py
obs(fryingpan_2083, Check if the eggs are properly scrambled in the frying pan and a mixing motion is performed)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform an action that indicates the eggs are scrambled (e.g., a mixing motion) in the frying pan.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(coffee_table_2068)', 'walk_executor(closetdrawer_380)', 'walk_executor(closetdrawer_380)', 'walk_executor(closetdrawer_380)', 'walk_executor(closetdrawer_380)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'walk_executor(bowl_2072)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(bowl_2071)', 'switchoff_executor(faucet_43)', 'walk_executor(bowl_2072)', 'grab_executor(bowl_2072)', 'walk_executor(kitchen_counter_230)', 'put_executor(bowl_2071, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(bowl_2072)', 'switchoff_executor(faucet_232)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, bowl_2072)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 408 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 148
goal generate times: 10
goal correct times: 2
action_num: 42

Task complete rate:
1
Scene_id: 0
##############################
