From agent.py
Reset goals: The sub-goals are: 
['1. Wash and cut the vegetables as needed.', '2. Boil the vegetables in the pot.', '3. Store the pot with boiled vegetables in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable) 
        achieve cut(vegetable)

behavior __goal__():
    body:
        bind vegetable_carrot: item where:
            is_food_carrot(vegetable_carrot)
        bind vegetable_onion: item where:
            is_food_onion(vegetable_onion)
        bind vegetable_potato: item where:
            is_food_potato(vegetable_potato)
        wash_and_cut_vegetables(vegetable_carrot)
        wash_and_cut_vegetables(vegetable_onion)
        wash_and_cut_vegetables(vegetable_potato)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_and_cut_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable) 
        achieve cut(vegetable)

behavior __goal__():
    body:
        bind vegetable_carrot: item where:
            is_food_carrot(vegetable_carrot)
        bind vegetable_onion: item where:
            is_food_onion(vegetable_onion)
        bind vegetable_potato: item where:
            is_food_potato(vegetable_potato)
        wash_and_cut_vegetables(vegetable_carrot)
        wash_and_cut_vegetables(vegetable_onion)
        wash_and_cut_vegetables(vegetable_potato)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_carrot_2014, kitchen_counter_230)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_carrot_2014, kitchen_counter_230)
Fail to find food_carrot_2014 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_carrot_2014, cupboard_229)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(cupboard_229)exp(food_onion_2032, cupboard_229)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(cupboard_229)exp(food_potato_2035, cupboard_229)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_carrot_2014, cupboard_229)
Fail to find food_carrot_2014 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)exp(food_carrot_2014, cutting_board_2051)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(cutting_board_2051)exp(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(pot_2069)open_executor(pot_2069)exp(food_potato_2035, pot_2069)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_carrot_2014, cutting_board_2051)
Fail to find food_carrot_2014 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_carrot_2014, fridge_289)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(sink_231)exp(food_onion_2032, sink_231)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(pot_2069)open_executor(pot_2069)exp(food_potato_2035, pot_2069)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_carrot_2014, fridge_289)
Find food_carrot_2014. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_carrot_2014)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_carrot_2014)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_carrot_2014 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_carrot_2014)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_carrot_2014 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_carrot_2014, cutting_board_2051)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_carrot_2014. food_carrot_2014 is close cutting_board_2051. food_carrot_2014 is on cutting_board_2051. food_carrot_2014 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. 
##############################
From agent.py
cut_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_onion_2032, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_onion_2032. food_onion_2032 is close cutting_board_2051. food_onion_2032 is on cutting_board_2051. food_onion_2032 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutcarrot_in_pot(pot:item):
    symbol has_cutcarrot=exists o: item : (is_food_carrot(o) and cut(o) and inside(o, pot))
    return has_cutcarrot

def has_cutonion_in_pot(pot:item):
    symbol has_cutonion=exists o: item : (is_food_onion(o) and cut(o) and inside(o, pot))
    return has_cutonion

def has_cutpotato_in_pot(pot:item):
    symbol has_cutpotato=exists o: item : (is_food_potato(o) and cut(o) and inside(o, pot))
    return has_cutpotato

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve plugged(stove)
        achieve is_on(stove)
        achieve inside(stove, pot)
        achieve has_water(pot)
        achieve is_on(stove) 
        achieve has_cutcarrot_in_pot(pot)
        achieve has_cutonion_in_pot(pot)
        achieve has_cutpotato_in_pot(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __process_carrot__(food_carrot:item, pot:item, stove:item):
    body:
        achieve_once inside(food_carrot, pot)
        # Place carrot inside the pot
        achieve close(food_carrot, stove)
        # Ensure carrot and pot together is close to the stove

behavior __process_onion__(food_onion:item, pot:item):
    body:
        achieve_once inside(food_onion, pot)
        # Place onion inside the pot

behavior __process_potato__(food_potato:item, pot:item):
    body:
        achieve_once inside(food_potato, pot)
        # Place potato inside the pot

behavior __boil_vegetables__(pot:item, stove:item):
    body:
        achieve has_water(pot) 
        # Ensure the pot contains water
        achieve plugged(stove) 
        # Ensure the stove is plugged in
        achieve is_on(stove) 
        # Ensure the stove is turned on
        achieve inside(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind food_carrot: item where:
            is_food_carrot(food_carrot)

        bind food_onion: item where:
            is_food_onion(food_onion)

        bind food_potato: item where:
            is_food_potato(food_potato)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        __process_carrot__(food_carrot, pot, stove)
        __process_onion__(food_onion, pot)
        __process_potato__(food_potato, pot)
        __boil_vegetables__(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(pot:item, vegetables:list):
    body:
        achieve has_water(pot) # Ensure the pot has water before boiling
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inhand(vegetable):
                achieve_once inside(vegetable, pot)
        achieve is_on(pot) # Assume this starts boiling the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and cut(vegetable):
                achieve_once inhand(vegetable)
        boil_vegetables_in_pot(pot, [vegetable])

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation

behavior boil_vegetables_in_pot(pot:item, vegetables:list):
    body:
        achieve has_water(pot) 
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inhand(vegetable):
                achieve_once inside(vegetable, pot)
        achieve is_on(pot) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and cut(vegetable):
                achieve_once inhand(vegetable)
        boil_vegetables_in_pot(pot, [vegetable])


This corrected representation maintains the original intentions while changing the declaration of vegetables in boil_vegetables_in_pot to avoid the error related to the type list, which is not recognized Instead, you should directly handle the individual items within foreach
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'This') at line 5841, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation

behavior boil_vegetables_in_pot(pot:item, vegetables:item):
    body:
        achieve has_water(pot) 
        if is_food_vegetable(vegetables) and inhand(vegetables):
            achieve_once inside(vegetables, pot)
        achieve is_on(pot) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        achieve_once inhand(vegetable)
        boil_vegetables_in_pot(pot, vegetable)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. boil the vegetables in the pot." ?
Answer: Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once inside(food_vegetables, pot)
        achieve_once closed(stove) # Ensure the pot is covered
        achieve_once is_on(stove) # Turn on the stove
        observe(pot, "Check if the water is boiling") # Optional, to check boiling status

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil vegetables

        fill_pot_water(pot, faucet)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetables; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_mouse_413_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
behavior fill_pot_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetables:item):
    body:
        achieve_once inside(food_vegetables, pot)
        achieve_once closed(stove) # Ensure the pot is covered
        achieve_once is_on(stove) # Turn on the stove
        observe(pot, "Check if the water is boiling") # Optional, to check boiling status

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil vegetables

        bind food_vegetables: item where:
            is_food_vegetable(food_vegetables)
        # Select a vegetable to boil

        fill_pot_water(pot, faucet)
        boil_vegetables(pot, stove, food_vegetables)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetables:item):
    body:
        achieve_once inside(food_vegetables, pot)
        achieve_once closed(stove) # Ensure the pot is covered
        achieve_once is_on(stove) # Turn on the stove
        observe(pot, "Check if the water is boiling") # Optional, to check boiling status

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil vegetables

        bind food_vegetables: item where:
            is_food_vegetable(food_vegetables)
        # Select a vegetable to boil

        fill_pot_water(pot, faucet)
        boil_vegetables(pot, stove, food_vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(pot_2069)obs(pot_2069, Check if the water is boiling)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_pencil_2001_around_table_107(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        
behavior put_vegetables_inside_pot(vegetable: item, pot: item):
    body:
        achieve_once inside(vegetable, pot)

behavior boil_vegetables_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        achieve is_off(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetable1: item where:
            is_food_vegetable(vegetable1) and cut(vegetable1)
        bind vegetable2: item where:
            is_food_carrot(vegetable2) and cut(vegetable2)
        bind vegetable3: item where:
            is_food_onion(vegetable3) and cut(vegetable3)
        bind vegetable4: item where:
            is_food_potato(vegetable4) and cut(vegetable4)

        fill_pot_with_water(pot, faucet)
        
        put_vegetables_inside_pot(vegetable1, pot)
        put_vegetables_inside_pot(vegetable2, pot)
        put_vegetables_inside_pot(vegetable3, pot)
        put_vegetables_inside_pot(vegetable4, pot)
        
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior boil_vegetables_in_pot(pot: item, vegetables: list):
    body:
        foreach vegetable: item in vegetables:
            # Place each vegetable into the pot for boiling
            achieve_once inside(vegetable, pot)
        # Goal is to boil vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_with_water(pot)
        
        turn_on_stove(stove)
        
        # Define the vegetables to be boiled in the pot
        symbol vegetables = [food_carrot_2014, food_onion_2032, food_potato_2035]
        
        boil_vegetables_in_pot(pot, vegetables)
        
        turn_off_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5825, column 33.
Expected one of: 
	* LSQB
	* COMMA
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation

behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior boil_vegetables_in_pot(pot: item, vegetables: list):
    body:
        foreach vegetable in vegetables:
            # Place each vegetable into the pot for boiling
            achieve_once inside(vegetable, pot)
        # Goal is to boil vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_with_water(pot)
        
        turn_on_stove(stove)
        
        # Define the vegetables to be boiled in the pot
        symbol vegetables = [food_carrot_2014, food_onion_2032, food_potato_2035]
        
        boil_vegetables_in_pot(pot, vegetables)
        
        turn_off_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_headset_2076_around_computer_417(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#goal_representation
 
behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior boil_vegetables_in_pot(pot: item, vegetables: item):
    body:
        # Place the vegetables inside the pot for boiling
        achieve_once inside(vegetables, pot)
        # Goal is to boil vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_with_water(pot)
        
        turn_on_stove(stove)
        
        # There are multiple vegetables to be boiled, handle each as a separate instance
        bind carrot: item where:
            is_food_carrot(carrot)

        bind onion: item where:
            is_food_onion(onion)

        bind potato: item where:
            is_food_potato(potato)

        # Boil each vegetable in the pot individually
        boil_vegetables_in_pot(pot, carrot)
        boil_vegetables_in_pot(pot, onion)
        boil_vegetables_in_pot(pot, potato)
        
        turn_off_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior boil_vegetables_in_pot(pot: item, vegetables: item):
    body:
        # Place the vegetables inside the pot for boiling
        achieve_once inside(vegetables, pot)
        # Goal is to boil vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_with_water(pot)
        
        turn_on_stove(stove)
        
        # There are multiple vegetables to be boiled, handle each as a separate instance
        bind carrot: item where:
            is_food_carrot(carrot)

        bind onion: item where:
            is_food_onion(onion)

        bind potato: item where:
            is_food_potato(potato)

        # Boil each vegetable in the pot individually
        boil_vegetables_in_pot(pot, carrot)
        boil_vegetables_in_pot(pot, onion)
        boil_vegetables_in_pot(pot, potato)
        
        turn_off_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(stove_2065)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(pot_2069)putin_executor(food_carrot_2014, pot_2069)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(pot_2069)putin_executor(food_onion_2032, pot_2069)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(pot_2069)putin_executor(food_potato_2035, pot_2069)walk_executor(stove_2065)switchoff_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the pot_2069. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the pot_2069. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. Grabbing food_carrot_2014 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(food_carrot_2014, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_carrot_2014. food_carrot_2014 is close pot_2069. food_carrot_2014 is inside pot_2069. pot_2069 is close food_carrot_2014. food_carrot_2014 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the pot_2069. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the pot_2069. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_onion_2032. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(food_onion_2032, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_onion_2032. Robot is close to the food_carrot_2014. food_onion_2032 is inside pot_2069. pot_2069 is close food_onion_2032. food_onion_2032 is close pot_2069. food_onion_2032 released by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the pot_2069. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the pot_2069. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_potato_2035. Robot is close to the food_onion_2032. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(food_potato_2035, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_potato_2035. Robot is close to the food_onion_2032. Robot is close to the food_carrot_2014. food_potato_2035 is inside pot_2069. pot_2069 is close food_potato_2035. food_potato_2035 is close pot_2069. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind fridge: item where:
            is_fridge(fridge)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind fridge: item where:
            is_fridge(fridge)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(pot_2069, fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is inside fridge_289. pot_2069 is close fridge_289. fridge_289 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
close_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(cutting_board_2051)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_carrot_2014)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_carrot_2014)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_carrot_2014, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_carrot_2014)', 'cut_executor(food_carrot_2014)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(cutting_board_2051)', 'put_executor(food_onion_2032, cutting_board_2051)', 'walk_executor(food_onion_2032)', 'cut_executor(food_onion_2032)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'switchon_executor(stove_2065)', 'walk_executor(food_carrot_2014)', 'grab_executor(food_carrot_2014)', 'walk_executor(pot_2069)', 'putin_executor(food_carrot_2014, pot_2069)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(pot_2069)', 'putin_executor(food_onion_2032, pot_2069)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(pot_2069)', 'putin_executor(food_potato_2035, pot_2069)', 'walk_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'walk_executor(fridge_289)', 'putin_executor(pot_2069, fridge_289)', 'close_executor(fridge_289)']
Time info:
Time consume: 421 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 22
goal generate times: 8
goal correct times: 5
action_num: 58

Task complete rate:
Keystate: k1 - Requires: 9 steps
Keystate: k2 - Requires: 13 steps
Keystate: k3 - Requires: 3 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
