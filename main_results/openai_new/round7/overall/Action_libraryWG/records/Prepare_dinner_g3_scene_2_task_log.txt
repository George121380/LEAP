From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon with the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
## Output:
behavior cook_bacon(fryingpan:item, stove:item, bacon:item):
    body:
        achieve inside(bacon, fryingpan)
        # Ensure bacon is inside the frying pan
        achieve on(fryingpan, stove)
        # Ensure frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select bacon

        cook_bacon(fryingpan, stove, bacon)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
def in_hand_state(item:item):
    # Function to check if the item is in hand
    symbol in_hand = exists o: item : (inhand(o))
    return in_hand

behavior put_item_on_stove(obj:item, stove:item):
    body:
        if in_hand_state(obj):
            achieve_once on(obj, stove)
        else:
            achieve_once inhand(obj)
            achieve_once on(obj, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind pan: item where:
            is_fryingpan(pan)

        bind bacon: item where:
            is_food_bacon(bacon)

        put_item_on_stove(pan, stove)
        put_item_on_stove(bacon, pan)
        turn_on_stove(stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_to_cook(fryingpan:item, stove:item, bacon: item):
    body:
        achieve_once inside(bacon, fryingpan)
        achieve_once on(fryingpan, stove)

behavior start_cooking(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        prepare_to_ccook(fryingpan, stove, bacon)
        start_cooking(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function prepare_to_ccook not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_cupboard_130(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#goal_representation
behavior prepare_to_cook(fryingpan:item, stove:item, bacon: item):
    body:
        achieve_once inside(bacon, fryingpan)
        achieve_once on(fryingpan, stove)

behavior start_cooking(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        prepare_to_cook(fryingpan, stove, bacon)
        start_cooking(stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cook the bacon with the frying pan." ?
Answer: Put oil in the pan. Put the pan on the stove and turn on the stove. Put the bacon in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item, stove:item, bacon:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve_once on(bacon, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        cook_bacon(fryingpan, stove, bacon)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
def oil_in_the_pan(oil: item, pan: item):
    body:
        achieve_once inside(oil, pan)

def bacon_in_the_pan(bacon: item, pan: item):
    body:
        achieve_once inside(bacon, pan)

def place_on_stove(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind bacon: item where:
            is_food_bacon(bacon)
        oil_in_the_pan(oil, pan)
        place_on_stove(pan, stove)
        bacon_in_the_pan(bacon, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5788, column 9.
Expected one of: 
	* STAR
	* LESSTHAN
	* GREATER_EQ
	* __ANON_1
	* __ANON_4
	* AMPERSAND
	* COMMA
	* LESS_EQ
	* __ANON_7
	* RSHIFT
	* __ANON_0
	* __ANON_2
	* CIRCUMFLEX
	* _NEWLINE
	* __ANON_8
	* NOT_EQ
	* FLOORDIV
	* MORETHAN
	* __ANON_5
	* PLUS
	* IF
	* VBAR
	* AND
	* DOUBLE_EQUAL
	* PERCENT
	* SLASH
	* AT
	* MINUS
	* LSHIFT
	* EQUAL
	* SEMICOLON
	* OR
	* __ANON_6
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
def oil_in_the_pan(oil: item, pan: item):
    body:
        achieve_once inside(oil, pan)

def bacon_in_the_pan(bacon: item, pan: item):
    body:
        achieve_once inside(bacon, pan)

def place_on_stove(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind bacon: item where:
            is_food_bacon(bacon)
        oil_in_the_pan(oil, pan)
        place_on_stove(pan, stove)
        bacon_in_the_pan(bacon, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5788, column 9.
Expected one of: 
	* STAR
	* LESSTHAN
	* GREATER_EQ
	* __ANON_1
	* __ANON_4
	* AMPERSAND
	* COMMA
	* LESS_EQ
	* __ANON_7
	* RSHIFT
	* __ANON_0
	* __ANON_2
	* CIRCUMFLEX
	* _NEWLINE
	* __ANON_8
	* NOT_EQ
	* FLOORDIV
	* MORETHAN
	* __ANON_5
	* PLUS
	* IF
	* VBAR
	* AND
	* DOUBLE_EQUAL
	* PERCENT
	* SLASH
	* AT
	* MINUS
	* LSHIFT
	* EQUAL
	* SEMICOLON
	* OR
	* __ANON_6
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
 
def oil_in_the_pan(oil: item, pan: item):
    body:
        achieve_once inside(oil, pan)

def bacon_in_the_pan(bacon: item, pan: item):
    body:
        achieve_once inside(bacon, pan)

def place_on_stove(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind bacon: item where:
            is_food_bacon(bacon)
        oil_in_the_pan(oil, pan)
        place_on_stove(pan, stove)
        bacon_in_the_pan(bacon, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2044_around_fridge_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind bacon: item where:
            is_food_bacon(bacon)
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)

        achieve_once inside(oil, pan)
        achieve_once on(pan, stove)
        achieve_once is_on(stove)
        achieve_once inside(bacon, pan)
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(fryingpan_2107, cupboard_130)exp(oil_2102, cupboard_130)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)putin_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(fryingpan_2107, cupboard_130)
Fail to find fryingpan_2107 around cupboard_130. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put oil in the pan.', '2. Put the pan on the stove and turn on the stove.', '3. Put the bacon in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_129(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_fryingpan_2107_around_oven_141(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        achieve_once inside(oil, pan)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        achieve_once inside(oil, pan)
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(fryingpan_2107, oven_141)walk_executor(kitchen_counter_128)exp(oil_2102, kitchen_counter_128)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(fryingpan_2107, oven_141)
Fail to find fryingpan_2107 around oven_141. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(kitchen_counter_129)exp(oil_2102, kitchen_counter_129)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. oil_2102 is close fryingpan_2107. oil_2102 is inside fryingpan_2107. fryingpan_2107 is close oil_2102. oil_2102 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2044_around_fridge_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)
##############################
From agent.py-> find a plan in act()
grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2044_around_fridge_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior put_bacon_in_pan(bacon:item, frying_pan:item):
    body:
        achieve_once on(bacon, frying_pan)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        put_bacon_in_pan(bacon, frying_pan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior put_bacon_in_pan(bacon:item, frying_pan:item):
    body:
        achieve_once on(bacon, frying_pan)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        put_bacon_in_pan(bacon, frying_pan)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_bacon_2044, fridge_140)
Find food_bacon_2044. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
grab_executor(food_bacon_2044)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_bacon_2044 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_bacon_2044. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_bacon_2044, fryingpan_2107)
Robot find: Robot is close to the food_bacon_2044. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_bacon_2044 is close fryingpan_2107. fryingpan_2107 is close food_bacon_2044. food_bacon_2044 is on fryingpan_2107. food_bacon_2044 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook bacon with the frying pan.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(fryingpan_2107)', 'putin_executor(oil_2102, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_bacon_2044)', 'walk_executor(fryingpan_2107)', 'put_executor(food_bacon_2044, fryingpan_2107)']
Time info:
Time consume: 228 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 134
goal generate times: 9
goal correct times: 1
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
