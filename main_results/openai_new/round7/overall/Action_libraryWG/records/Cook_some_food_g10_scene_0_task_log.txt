From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_walllamp_27(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==27
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_chicken,walllamp_instance)
        else:
            exp(food_chicken,walllamp_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,walllamp_instance]=True
        close[walllamp_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_fridge_289(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_and_chicken_location(location:item):
    # Function to check if there are noodles and chicken at a specified location
    symbol has_noodles_and_chicken=exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, location))
    return has_noodles_and_chicken

behavior __goal__():
    body:
        if exists location: item : (has_noodles_and_chicken_location(location)):
            # If we have already found the location with noodles and chicken, we can directly approach it
            bind location: item where:
                has_noodles_and_chicken_location(location)
            achieve close_char(char, location)

        else:
            # Check all locations in the scene that have not been visited
            foreach location: item:
                if not visited(location):
                    observe(location, "Check for noodles and chicken at this location")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_fridge_289(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
# Checking for chicken or noodles in the known scene items If not found, explore unvisited areas
def has_noodles(item: item):
    symbol is_noodles_found = exists o: item : (is_food_noodles(o) and close(o, item))
    return is_noodles_found

def has_chicken(item: item):
    symbol is_chicken_found = exists o: item : (is_food_chicken(o) and close(o, item))
    return is_chicken_found

behavior __goal__():
    body:
        # Step 1: Check if the chicken or noodles can be found in the known information
        if exists place: item : (has_noodles(place) or has_chicken(place)):
            # If any of the required items are found, move character close to them
            bind place: item where:
                has_noodles(place) or has_chicken(place)
            achieve close_char(char, place)

        else: 
            # If neither item is found, explore all unvisited areas to find the items
            foreach place: item:
                if not visited(place):
                    observe(place, "Check if there is any noodles or chicken around")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_table_107(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_noodles,table_instance)
        else:
            exp(food_noodles,table_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,table_instance]=True
        close[table_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def find_noodles_and_chicken():
    # Function to check if both noodles and chicken are found
    symbol has_noodles_and_chicken = exists noodles: item : (is_food_noodles(noodles) and visited(noodles)) and exists chicken: item : (is_food_chicken(chicken) and visited(chicken))
    return has_noodles_and_chicken

behavior __goal__():
    body:
        if find_noodles_and_chicken():
            # If both noodles and chicken have been found in the known environment
            bind noodles: item where:
                is_food_noodles(noodles) and visited(noodles)
            # Bind to the previously visited noodles item
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            # Bind to the previously visited chicken item
            achieve close_char(char, noodles)
            achieve close_char(char, chicken)
            # Move closer to the noodles and chicken

        else:
            # If noodles and chicken have not been located, begin exploration
            foreach o: item:
                if (is_food_noodles(o) or is_food_chicken(o)) and not visited(o):
                    # Inspect all unvisited items that might be noodles or chicken
                    observe(o, "Check if it is noodles or chicken and its current location")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chicken') at line 5670, column 120.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

#goal_representation
 
def find_noodles_and_chicken():
    # Function to check if both noodles and chicken are found
    symbol has_noodles_and_chicken = (exists noodles: item : (is_food_noodles(noodles) and visited(noodles)) 
                                      and exists chicken: item : (is_food_chicken(chicken) and visited(chicken)))
    return has_noodles_and_chicken

behavior __goal__():
    body:
        if find_noodles_and_chicken():
            # If both noodles and chicken have been found in the known environment
            bind noodles: item where:
                is_food_noodles(noodles) and visited(noodles)
            # Bind to the previously visited noodles item
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            # Bind to the previously visited chicken item
            achieve close_char(char, noodles)
            achieve close_char(char, chicken)
            # Move closer to the noodles and chicken

        else:
            # If noodles and chicken have not been located, begin exploration
            foreach o: item:
                if (is_food_noodles(o) or is_food_chicken(o)) and not visited(o):
                    # Inspect all unvisited items that might be noodles or chicken
                    observe(o, "Check if it is noodles or chicken and its current location")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chicken') at line 5671, column 50.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_kitchen_counter_230(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

#goal_representation
 
def find_noodles_and_chicken():
    # Function to check if both noodles and chicken are found
    symbol has_noodles_and_chicken = (exists n: item : (is_food_noodles(n) and visited(n)) 
                                      and exists c: item : (is_food_chicken(c) and visited(c)))
    return has_noodles_and_chicken

behavior __goal__():
    body:
        if find_noodles_and_chicken():
            # If both noodles and chicken have been found in the known environment
            bind noodles: item where:
                is_food_noodles(noodles) and visited(noodles)
            # Bind to the previously visited noodles item
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            # Bind to the previously visited chicken item
            achieve close_char(char, noodles)
            achieve close_char(char, chicken)
            # Move closer to the noodles and chicken

        else:
            # If noodles and chicken have not been located, begin exploration
            foreach o: item:
                if (is_food_noodles(o) or is_food_chicken(o)) and not visited(o):
                    # Inspect all unvisited items that might be noodles or chicken
                    observe(o, "Check if it is noodles or chicken and its current location")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the noodles and chicken." ?
Answer: Find the noodles and chicken.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_oven_295(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_noodles,oven_instance)
        else:
            exp(food_noodles,oven_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,oven_instance]=True
        close[oven_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_noodles(noodles:item):
    body:
        achieve_once visited(noodles)

behavior locate_chicken(chicken:item):
    body:
        achieve_once visited(chicken)

behavior __goal__():
    body:
        if exists noodles: item : (is_food_noodles(noodles)):
            bind noodles: item where:
                is_food_noodles(noodles)
            locate_noodles(noodles)
        else:
            foreach item: item:
                if is_food_noodles(item) and not visited(item):
                    observe(item, "Check for noodles")

        if exists chicken: item : (is_food_chicken(chicken)):
            bind chicken: item where:
                is_food_chicken(chicken)
            locate_chicken(chicken)
        else:
            foreach item: item:
                if is_food_chicken(item) and not visited(item):
                    observe(item, "Check for chicken")

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(food_noodles_2029, oven_295)walk_executor(food_noodles_2029)obs(food_noodles_2029, look around this place)walk_executor(microwave_297)open_executor(microwave_297)exp(food_chicken_2017, microwave_297)walk_executor(food_chicken_2017)obs(food_chicken_2017, look around this place)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(food_noodles_2029, oven_295)
Fail to find food_noodles_2029 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_noodles_2029, fridge_289)walk_executor(food_noodles_2029)obs(food_noodles_2029, look around this place)walk_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)obs(food_chicken_2017, look around this place)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_noodles_2029, fridge_289)
Find food_noodles_2029. 
##############################
From agent.py-> find a plan in act()
obs(food_noodles_2029, look around this place)obs(food_chicken_2017, look around this place)
##############################
From agent.py
obs(food_noodles_2029, look around this place)
Get this information:  food_noodles_2029 is close to fridge_289. food_noodles_2029 is close to character_65. food_noodles_2029 is inside fridge_289. food_noodles_2029 is inside dining_room_201. food_noodles_2029 is CLEAN.
##############################
From agent.py
obs(food_chicken_2017, look around this place)
Get this information:  food_chicken_2017 is inside fridge_289. food_chicken_2017 is inside dining_room_201. food_chicken_2017 is close to fridge_289. food_chicken_2017 is close to character_65. food_chicken_2017 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_phone_2077_around_walllamp_27(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==27
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(phone,walllamp_instance)
        else:
            exp(phone,walllamp_instance)
    eff:
        unknown[phone]=False
        close[phone,walllamp_instance]=True
        close[walllamp_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(pot: item, stove: item, food_noodles: item, food_chicken: item):
    body:
        achieve_once inside(food_noodles, pot)
        # Place noodles inside the pot
        achieve_once inside(food_chicken, pot)
        # Place chicken inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove to use for cooking
        
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select noodles for the task
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken for the task
        
        boil_noodles_and_chicken(pot, stove, food_noodles, food_chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_noodles_and_chicken(pot: item, stove: item, food_noodles: item, food_chicken: item):
    body:
        achieve_once inside(food_noodles, pot)
        # Place noodles inside the pot
        achieve_once inside(food_chicken, pot)
        # Place chicken inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove to use for cooking
        
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select noodles for the task
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken for the task
        
        boil_noodles_and_chicken(pot, stove, food_noodles, food_chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_noodles_2029)grab_executor(food_noodles_2029)walk_executor(pot_2069)putin_executor(food_noodles_2029, pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_noodles_2029)grab_executor(food_noodles_2029)walk_executor(pot_2069)putin_executor(food_noodles_2029, pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_noodles_2029)
Robot find: Robot is close to the fridge_289. Robot is close to the food_noodles_2029. 
##############################
From agent.py
grab_executor(food_noodles_2029)
Robot find: Robot is close to the fridge_289. Robot is close to the food_noodles_2029. Grabbing food_noodles_2029 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_noodles_2029, pot_2069)
Robot find: Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_noodles_2029 is close pot_2069. pot_2069 is close food_noodles_2029. food_noodles_2029 is inside pot_2069. food_noodles_2029 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_noodles_2029)', 'grab_executor(food_noodles_2029)', 'walk_executor(pot_2069)', 'putin_executor(food_noodles_2029, pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 178 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 121
goal generate times: 5
goal correct times: 2
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
