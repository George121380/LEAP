From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and a knife.', '2. Slice the chicken.', '3. Give the sliced chicken to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_sink_42(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
def observe_location(item:item):
    observe(item, "Check the items current location and find out if its the item Im searching for")

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        observe_location(knife)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        observe_location(chicken)
        
        achieve close_char(char, knife)
        achieve close_char(char, chicken)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_fridge_289(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(knife,fridge_instance)
        else:
            exp(knife,fridge_instance)
    eff:
        unknown[knife]=False
        close[knife,fridge_instance]=True
        close[fridge_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def observe_location(item:item):
    observe(item, "Check the items current location and find out if its the item Im searching for")

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        observe_location(knife)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        observe_location(chicken)
        
        achieve close_char(char, knife)
        achieve close_char(char, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_bathroom_counter_41(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(knife,bathroom_counter_instance)
        else:
            exp(knife,bathroom_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_counter_instance]=True
        close[bathroom_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
def find_knife(knife: item):
    observe(knife, "Check the items current location and find out if its the item Im searching for")

def find_chicken(chicken: item):
    observe(chicken, "Check the items current location and find out if its the item Im searching for")

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        find_knife(knife)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        find_chicken(chicken)
        
        achieve close_char(char, knife)
        achieve close_char(char, chicken)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_bathroom_counter_41(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(knife,bathroom_counter_instance)
        else:
            exp(knife,bathroom_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_counter_instance]=True
        close[bathroom_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior find_item(target:item, condition: string):
    body:
        foreach o: item:
            if not visited(o):
                observe(o, "condition")

behavior check_knife():
    body:
        bind target: item where:
            is_knife(target)
        achieve close_char(char, target)

def has_food_chicken(obj: item):
    symbol has_chicken = exists food: item : (is_food_chicken(food) and inside(food, obj))
    return has_chicken

behavior __goal__():
    body:
        # Check if there is chicken in the fridge
        if exists fridge: item : (is_fridge(fridge) and has_food_chicken(fridge)):
            bind fridge: item where:
                is_fridge(fridge) and has_food_chicken(fridge)
            achieve_once close_char(char, fridge)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if there is any chicken inside")

        check_knife()

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_item(target:item, condition: string):
    body:
        foreach o: item:
            if not visited(o):
                observe(o, "condition")

behavior check_knife():
    body:
        bind target: item where:
            is_knife(target)
        achieve close_char(char, target)

def has_food_chicken(obj: item):
    symbol has_chicken = exists food: item : (is_food_chicken(food) and inside(food, obj))
    return has_chicken

behavior __goal__():
    body:
        # Check if there is chicken in the fridge
        if exists fridge: item : (is_fridge(fridge) and has_food_chicken(fridge)):
            bind fridge: item where:
                is_fridge(fridge) and has_food_chicken(fridge)
            achieve_once close_char(char, fridge)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if there is any chicken inside")

        check_knife()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)obs(fridge_289, Check if there is any chicken inside)walk_executor(bathroom_counter_41)exp(knife_2050, bathroom_counter_41)walk_executor(knife_2050)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
obs(fridge_289, Check if there is any chicken inside)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is CLEAN. fridge_289 is OFF. fridge_289 is OPEN.
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(knife_2050, bathroom_counter_41)
Fail to find knife_2050 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)walk_executor(oven_295)open_executor(oven_295)exp(knife_2050, oven_295)walk_executor(knife_2050)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_238, Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(knife_2050, oven_295)
Fail to find knife_2050 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(knife_2050, bathroom_cabinet_40)walk_executor(knife_2050)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. 
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. bathroom_cabinet_40 is opened. 
##############################
From agent.py
exp(knife_2050, bathroom_cabinet_40)
Fail to find knife_2050 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)walk_executor(cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)walk_executor(knife_2050)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def check_has_knife():
    symbol has_knife = exists knife: item: (is_knife(knife))
    return has_knife

behavior slice_chicken(chicken: item, knife: item, cutting_board: item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind knife: item:
            if check_has_knife():
                bind knife: item where:
                    is_knife(knife)
            else:
                foreach k: item:
                    if is_knife(k) and not visited(k):
                        observe(k, "Check if it is a knife and its current location")
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        slice_chicken(chicken, knife, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5853, column 25.
Expected one of: 
	* WHERE
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_cup_2063(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(bowl,cup_instance)
        else:
            exp(bowl,cup_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cup_instance]=True
        close[cup_instance,bowl]=True
    

#goal_representation
def check_has_knife():
    symbol has_knife = exists knife: item: (is_knife(knife))
    return has_knife

behavior slice_chicken(chicken: item, knife: item, cutting_board: item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        if check_has_knife():
            bind knife: item where:
                is_knife(knife)
        else:
            foreach k: item:
                if is_knife(k) and not visited(k):
                    observe(k, "Check if it is a knife and its current location")
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        slice_chicken(chicken, knife, cutting_board)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: knife; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_fork_2080_around_fryingpan_2083(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(fork,fryingpan_instance)
        else:
            exp(fork,fryingpan_instance)
    eff:
        unknown[fork]=False
        close[fork,fryingpan_instance]=True
        close[fryingpan_instance,fork]=True
    

#goal_representation
 
def check_has_knife():
    symbol has_knife = exists knife: item: (is_knife(knife))
    return has_knife

behavior slice_chicken(chicken: item, knife: item, cutting_board: item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        if check_has_knife():
            bind knife: item where:
                is_knife(knife)
        else:
            foreach k: item:
                if is_knife(k) and not visited(k):
                    observe(k, "Check if it is a knife and its current location")
        slice_chicken(chicken, knife, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_computer_417(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
symbol chicken_cut=exists food_chicken: item: (cut(food_chicken))

behavior cut_chicken(food:item, knife:item, board:item):
    body:
        achieve_once on(food, board)
        achieve_once cut(food)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        bind board: item where:
            is_cutting_board(board)
        cut_chicken(food_chicken, knife, board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('SYMBOL', 'symbol') at line 5840, column 1.
Expected one of: 
	* BEHAVIOR
	* TYPEDEF
	* $END
	* FEATURE
	* IMPORT
	* GENERATOR
	* INIT
	* GOAL
	* UNDIRECTED_GENERATOR
	* DEF
	* _NEWLINE
	* DOMAIN
	* INCLUDE
	* OBJECTS
	* CONTROLLER
	* _PRAGMA_KEYWORD
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#goal_representation
behavior cut_chicken(food:item, knife:item, board:item):
    body:
        achieve_once on(food, board)
        achieve_once cut(food)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        bind board: item where:
            is_cutting_board(board)
        cut_chicken(food_chicken, knife, board)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_chicken(food:item, knife:item, board:item):
    body:
        achieve_once on(food, board)
        achieve_once cut(food)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        bind board: item where:
            is_cutting_board(board)
        cut_chicken(food_chicken, knife, board)
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_chicken_2017. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_couch_352(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind chicken: item where:
            is_food_chicken(chicken)
            # Select the chicken

        # Goal: give the sliced chicken to the cat
        achieve_once on(chicken, cat)
        # Place the chicken on the cat, implying giving the chicken to the cat

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind chicken: item where:
            is_food_chicken(chicken)
            # Select the chicken

        # Goal: give the sliced chicken to the cat
        achieve_once on(chicken, cat)
        # Place the chicken on the cat, implying giving the chicken to the cat

##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)exp(cat_2055, couch_352)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cat_2055)put_executor(food_chicken_2017, cat_2055)
##############################
From agent.py
walk_executor(couch_352)
Robot find: mat_401, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, pillow_406, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the knife_2050. Robot is close to the couch_352. Robot is close to the mat_401. 
##############################
From agent.py
exp(cat_2055, couch_352)
Find cat_2055. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cat_2055)put_executor(food_chicken_2017, cat_2055)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cat_2055)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the couch_352. Robot is close to the cat_2055. 
##############################
From agent.py
put_executor(food_chicken_2017, cat_2055)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the couch_352. Robot is close to the cat_2055. cat_2055 is close food_chicken_2017. food_chicken_2017 is close cat_2055. food_chicken_2017 is on cat_2055. food_chicken_2017 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Slice some chicken and give it to my cat.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(bathroom_counter_41)', 'walk_executor(fridge_289)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(fridge_289)', 'walk_executor(bathroom_cabinet_40)', 'open_executor(bathroom_cabinet_40)', 'walk_executor(fridge_289)', 'walk_executor(cutting_board_2051)', 'walk_executor(fridge_289)', 'walk_executor(knife_2050)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_chicken_2017)', 'cut_executor(food_chicken_2017)', 'walk_executor(couch_352)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cat_2055)', 'put_executor(food_chicken_2017, cat_2055)']
Time info:
Time consume: 260 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 132
goal generate times: 5
goal correct times: 1
action_num: 27

Task complete rate:
1
Scene_id: 0
##############################
