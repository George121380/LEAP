From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior pour_water_into_coffee_maker(water:item, coffee_maker:item):
    body:
        achieve_once inside(water, coffee_maker)

behavior add_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)

behavior add_coffee_grounds(coffee_grounds:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_grounds, coffee_maker)

behavior start_brewing(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee:item, cup:item):
    body:
        achieve_once inside(coffee, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            has_water(water)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        bind coffee_grounds: item where:
            inside(coffee_grounds, kitchen_counter)
        bind cup: item where:
            is_cup(cup)
        
        turn_on_coffee_maker(coffee_maker)
        pour_water_into_coffee_maker(water, coffee_maker)
        add_coffee_filter(coffee_filter, coffee_maker)
        add_coffee_grounds(coffee_grounds, coffee_maker)
        start_brewing(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<coffee_grounds: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2006_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior pour_water_into_coffee_maker(water:item, coffee_maker:item):
    body:
        achieve_once inside(water, coffee_maker)

behavior add_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)

behavior add_coffee_grounds(coffee_grounds:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_grounds, coffee_maker)

behavior start_brewing(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee:item, cup:item):
    body:
        achieve_once inside(coffee, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            has_water(water)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        bind coffee_grounds: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        
        turn_on_coffee_maker(coffee_maker)
        pour_water_into_coffee_maker(water, coffee_maker)
        add_coffee_filter(coffee_filter, coffee_maker)
        add_coffee_grounds(coffee_grounds, coffee_maker)
        start_brewing(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cleaning_solution_2098_around_fridge_140(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cleaning_solution,fridge_instance)
        else:
            exp(cleaning_solution,fridge_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,fridge_instance]=True
        close[fridge_instance,cleaning_solution]=True
    

behavior find_tea_bag_2017_around_wallshelf_191(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(tea_bag,wallshelf_instance)
        else:
            exp(tea_bag,wallshelf_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,wallshelf_instance]=True
        close[wallshelf_instance,tea_bag]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve_once clean(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior observe_coffee_maker():
    body:
        foreach obj: item:
            if is_coffe_maker(obj) and not visited(obj):
                observe(obj, "Check the state of the coffee maker")

behavior __goal__():
    body:
        observe_coffee_maker()

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
    
        prepare_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve_once clean(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior observe_coffee_maker():
    body:
        foreach obj: item:
            if is_coffe_maker(obj) and not visited(obj):
                observe(obj, "Check the state of the coffee maker")

behavior __goal__():
    body:
        observe_coffee_maker()

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
    
        prepare_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check the state of the coffee maker)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check the state of the coffee maker)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is OPEN. coffe_maker_147 is CLEAN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to add water to the coffee maker.
##############################
From agent.py
Human Instruction: The robot needs to add water to the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check the state of the coffee maker.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_kitchen_counter_128(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
def clean_and_fill(coffee_maker: item):
    body:
        if dirty(coffee_maker):
            wash(coffee_maker)
        achieve_once has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        clean_and_fill(coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5765, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2070_around_wallshelf_191(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_sugar,wallshelf_instance)
        else:
            exp(food_sugar,wallshelf_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,wallshelf_instance]=True
        close[wallshelf_instance,food_sugar]=True
    

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#goal_representation
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        clean_and_fill(coffee_maker)

def clean_and_fill(coffee_maker: item):
    body:
        if dirty(coffee_maker):
            wash(coffee_maker)
        achieve_once has_water(coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5789, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cleaning_solution_2098_around_wallshelf_187(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cleaning_solution,wallshelf_instance)
        else:
            exp(cleaning_solution,wallshelf_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,wallshelf_instance]=True
        close[wallshelf_instance,cleaning_solution]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#goal_representation
def clean_and_fill(coffee_maker: item):
    body:
        if dirty(coffee_maker):
            wash(coffee_maker)
        achieve_once has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        clean_and_fill(coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_wallshelf_191(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_sugar,wallshelf_instance)
        else:
            exp(food_sugar,wallshelf_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,wallshelf_instance]=True
        close[wallshelf_instance,food_sugar]=True
    

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_plate_2105_around_wallshelf_187(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_coffe_maker(coffee_maker: item, faucet: item):
    body:
        achieve_once close_char(char, coffee_maker)
        achieve_once open(coffee_maker)
        observe(coffee_maker, "Check water reservoir")
        achieve_once has_water(coffee_maker)
        achieve_once closed(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        bind faucet: item where:
            is_faucet(faucet)
        add_water_to_coffe_maker(coffee_maker, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_coffe_maker(coffee_maker: item, faucet: item):
    body:
        achieve_once close_char(char, coffee_maker)
        achieve_once open(coffee_maker)
        observe(coffee_maker, "Check water reservoir")
        achieve_once has_water(coffee_maker)
        achieve_once closed(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        bind faucet: item where:
            is_faucet(faucet)
        add_water_to_coffe_maker(coffee_maker, faucet)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check water reservoir)close_executor(coffe_maker_147)
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check water reservoir)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is OPEN. coffe_maker_147 is CLEAN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to add water to the coffee maker. Ensure the coffee maker's reservoir has water in it before closing it.
##############################
From agent.py
Human Instruction: The robot needs to add water to the coffee maker. Ensure the coffee maker's reservoir has water in it before closing it.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check the state of the coffee maker.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.
Action 6: Switch off coffe_maker_147.
Action 7: Open coffe_maker_147.
Action 8: Observe around coffe_maker_147 with the question of Check water reservoir.
Action 9: Close coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior check_water_reservoir(coffee_maker:item):
    body:
        observe(coffee_maker, "Check water reservoir")
        
behavior fill_water(coffee_maker:item):
    body:
        achieve_once open(coffee_maker)
        check_water_reservoir(coffee_maker)
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        fill_water(coffee_maker)
        achieve is_on(coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
## Output:

behavior check_water_reservoir(coffee_maker:item):
    body:
        observe(coffee_maker, "Check water reservoir")
        
behavior fill_water(coffee_maker:item):
    body:
        achieve_once open(coffee_maker)
        check_water_reservoir(coffee_maker)
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        fill_water(coffee_maker)
        achieve is_on(coffee_maker)
##############################
From agent.py-> find a plan in act()
open_executor(coffe_maker_147)obs(coffe_maker_147, Check water reservoir)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check water reservoir)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is OPEN. coffe_maker_147 is CLEAN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the coffee maker's reservoir has water in it before closing it. The robot did not perform any action to add water to the coffee maker, which is required as per the human instruction. Open the coffee maker, check if the water reservoir is empty, and if needed, add water. Then close the coffee maker and switch it on again.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)']
Time info:
Time consume: 200 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 142
goal generate times: 5
goal correct times: 0
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
