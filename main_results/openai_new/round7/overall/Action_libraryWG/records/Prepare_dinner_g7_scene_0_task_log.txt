From agent.py
Reset goals: The sub-goals are: 
['1. Find the fish and any necessary ingredients for the soup.', '2. Prepare and clean the fish and ingredients as needed.', '3. Cook the fish and ingredients together in a pot to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients():
    symbol found_fish=exists item1: item : (is_food_fish(item1))
    symbol found_vegetables=exists item2: item : (is_food_vegetable(item2))
    return found_fish and found_vegetables

behavior __goal__():
    body:
        if has_ingredients():
            # If both fish and vegetables are already found
            bind fish: item where:
                is_food_fish(fish)
            bind vegetables: item where:
                is_food_vegetable(vegetables)
            achieve_once close_char(char, fish)
            achieve_once close_char(char, vegetables)

        else:
            # If either fish or vegetables are missing, observe to find them
            foreach item: item:
                if (is_food_fish(item) or is_food_vegetable(item)) and not visited(item):
                    observe(item, "Check item for soup ingredients")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ingredients():
    symbol found_fish=exists item1: item : (is_food_fish(item1))
    symbol found_vegetables=exists item2: item : (is_food_vegetable(item2))
    return found_fish and found_vegetables

behavior __goal__():
    body:
        if has_ingredients():
            # If both fish and vegetables are already found
            bind fish: item where:
                is_food_fish(fish)
            bind vegetables: item where:
                is_food_vegetable(vegetables)
            achieve_once close_char(char, fish)
            achieve_once close_char(char, vegetables)

        else:
            # If either fish or vegetables are missing, observe to find them
            foreach item: item:
                if (is_food_fish(item) or is_food_vegetable(item)) and not visited(item):
                    observe(item, "Check item for soup ingredients")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the necessary ingredients for the fish soup near the stove, ensuring proper storage if any are perishable.', '2. Clean and prepare the fish and any vegetables for the soup.', '3. Cook the soup by boiling the fish and vegetables in water and adding any necessary seasonings.', '4. Serve the soup into bowls.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_stove_2065(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def find_fish_around_fridge(fridge: item):
    # Function to check if food_fish is around the specified fridge
    symbol has_food_fish = exists o: item: (is_food_fish(o) and close(o, fridge))
    return has_food_fish

behavior __goal__():
    body:
        # Bind the fridge based on the provided ID
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        
        # Check if the food_fish is found around the fridge
        if not find_fish_around_fridge(fridge):
            # Observe the surrounding area around the fridge to confirm the presence of food_fish
            observe(fridge, "Check for food_fish around the fridge")
        
        # Achieve the switchedoff state for the fridge
        achieve is_off(fridge)
        achieve open(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_stove_2065(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredient(ingredient:item, fridge:item, stove:item):
    body:
        if is_food(ingredient) and not plugged(stove):
            achieve inside(ingredient, fridge)
            # The food ingredient will be stored back in the fridge if the stove is not plugged in to keep it fresh
        else:
            achieve close_char(char, stove) and achieve inside(ingredient, stove)
            # If the stove is plugged in, gather the necessary ingredient close to the stove

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Retrieve the fridge instance with a defined ID
        
        bind stove: item where:
            is_stove(stove)
        # Assume the stove is already known in the environment Retrieve the stove instance
        
        foreach ingredient: item:
            if is_food_fish(ingredient):
                gather_ingredient(ingredient, fridge, stove)
        # Gather the necessary fish ingredients near the stove, ensuring proper storage if any are perishable

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5863, column 57.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2079_around_stove_2065(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#goal_representation

behavior gather_ingredient(ingredient:item, fridge:item, stove:item):
    body:
        if is_food(ingredient) and not plugged(stove):
            achieve inside(ingredient, fridge)
        else:
            achieve close_char(char, stove)
            achieve inside(ingredient, stove)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289

        bind stove: item where:
            is_stove(stove)

        foreach ingredient: item:
            if is_food_fish(ingredient):
                gather_ingredient(ingredient, fridge, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_stove_2065(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation

def check_for_fish(fridge:item):
    # Function to check if there is fish in a specified fridge
    symbol has_fish=exists o: item : (is_food_fish(o) and inside(o, fridge))
    return has_fish

behavior gather_ingredients_around_stove(fridge:item, stove:item):
    body:
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)
        # Select the fish item inside the fridge
        achieve_once close_char(char, fridge)
        # Ensure that the character is close to the fridge
        achieve_once inhand(fish)
        # Temporarily pick up the fish to move it
        achieve_once close_char(char, stove)
        # Ensure that the character is close to the stove
        achieve_once on(fish, stove)
        # Place the fish on the stove
        if is_off(fridge):
            achieve_once closed(fridge)
            # Ensure the fridge is closed if it was turned off

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if check_for_fish(fridge):
            # If fish is inside the fridge, gather it near the stove
            gather_ingredients_around_stove(fridge, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

def check_for_fish(fridge:item):
    # Function to check if there is fish in a specified fridge
    symbol has_fish=exists o: item : (is_food_fish(o) and inside(o, fridge))
    return has_fish

behavior gather_ingredients_around_stove(fridge:item, stove:item):
    body:
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)
        # Select the fish item inside the fridge
        achieve_once close_char(char, fridge)
        # Ensure that the character is close to the fridge
        achieve_once inhand(fish)
        # Temporarily pick up the fish to move it
        achieve_once close_char(char, stove)
        # Ensure that the character is close to the stove
        achieve_once on(fish, stove)
        # Place the fish on the stove
        if is_off(fridge):
            achieve_once closed(fridge)
            # Ensure the fridge is closed if it was turned off

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if check_for_fish(fridge):
            # If fish is inside the fridge, gather it near the stove
            gather_ingredients_around_stove(fridge, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(stove_2065)put_executor(food_fish_2021, stove_2065)walk_executor(fridge_289)close_executor(fridge_289)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_fish_2021. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_fish_2021, stove_2065)
Robot find: Robot is close to the food_fish_2021. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. food_fish_2021 is close stove_2065. stove_2065 is close food_fish_2021. food_fish_2021 is on stove_2065. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
close_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable_for_soup(stove:item):
    symbol has_vegetable=exists o: item : (is_food_vegetable(o) and on(o, stove))
    return has_vegetable

def has_food_fish_2021_on_stove(stove:item):
    symbol has_fish=exists o: item : (id[o] == 2021 and is_food_fish(o) and on(o, stove))
    return has_fish

def needs_cleaning(fish:item):
    symbol dirty_state=exists s: state : (dirty(s) and id[fish]==2021)
    return dirty_state

def needs_cleaning_vegetable(vegetable:item):
    symbol dirty_state=exists s: state : (dirty(s) and is_food_vegetable(vegetable))
    return dirty_state

behavior wash_fish(fish:item):
    body:
        achieve clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve cut(fish)

behavior scrub_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)

behavior cut_vegetable(vegetable:item):
    body:
        achieve cut(vegetable)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_food_fish_2021_on_stove(stove)
        bind fish: item where:
            id[fish] == 2021 and is_food_fish(fish) and on(fish, stove)
        
        if needs_cleaning(fish):
            wash_fish(fish)
        
        cut_fish(fish)
        
        if has_vegetable_for_soup(stove):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and on(vegetable, stove):
                    if needs_cleaning_vegetable(vegetable):
                        scrub_vegetable(vegetable)
                    cut_vegetable(vegetable)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: state, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation
 
def has_vegetable_for_soup(stove:item):
    symbol has_vegetable=exists o: item : (is_food_vegetable(o) and on(o, stove))
    return has_vegetable

def has_food_fish_2021_on_stove(stove:item):
    symbol has_fish=exists o: item : (id[o] == 2021 and is_food_fish(o) and on(o, stove))
    return has_fish

def needs_cleaning(fish:item):
    symbol dirty_state=dirty(fish)
    return dirty_state

def needs_cleaning_vegetable(vegetable:item):
    symbol dirty_state=dirty(vegetable)
    return dirty_state

behavior wash_fish(fish:item):
    body:
        achieve clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve cut(fish)

behavior scrub_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)

behavior cut_vegetable(vegetable:item):
    body:
        achieve cut(vegetable)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_food_fish_2021_on_stove(stove)
        bind fish: item where:
            id[fish] == 2021 and is_food_fish(fish) and on(fish, stove)
        
        if needs_cleaning(fish):
            wash_fish(fish)
        
        cut_fish(fish)
        
        if has_vegetable_for_soup(stove):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and on(vegetable, stove):
                    if needs_cleaning_vegetable(vegetable):
                        scrub_vegetable(vegetable)
                    cut_vegetable(vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetable_for_soup(stove:item):
    symbol has_vegetable=exists o: item : (is_food_vegetable(o) and on(o, stove))
    return has_vegetable

def has_food_fish_2021_on_stove(stove:item):
    symbol has_fish=exists o: item : (id[o] == 2021 and is_food_fish(o) and on(o, stove))
    return has_fish

def needs_cleaning(fish:item):
    symbol dirty_state=dirty(fish)
    return dirty_state

def needs_cleaning_vegetable(vegetable:item):
    symbol dirty_state=dirty(vegetable)
    return dirty_state

behavior wash_fish(fish:item):
    body:
        achieve clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve cut(fish)

behavior scrub_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)

behavior cut_vegetable(vegetable:item):
    body:
        achieve cut(vegetable)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_food_fish_2021_on_stove(stove)
        bind fish: item where:
            id[fish] == 2021 and is_food_fish(fish) and on(fish, stove)
        
        if needs_cleaning(fish):
            wash_fish(fish)
        
        cut_fish(fish)
        
        if has_vegetable_for_soup(stove):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and on(vegetable, stove):
                    if needs_cleaning_vegetable(vegetable):
                        scrub_vegetable(vegetable)
                    cut_vegetable(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_fish_2021, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_fish_2021)cut_executor(food_fish_2021)
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the stove_2065. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the stove_2065. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_fish_2021, cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_fish_2021 is close cutting_board_2051. cutting_board_2051 is close food_fish_2021. food_fish_2021 is on cutting_board_2051. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
cut_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to clean and prepare any vegetables as part of the soup preparation. Only the fish has been handled and processed so far. You should locate, wash, and cut the vegetables for the soup.
##############################
From agent.py
Human Instruction: The robot needs to clean and prepare any vegetables as part of the soup preparation. Only the fish has been handled and processed so far. You should locate, wash, and cut the vegetables for the soup.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to stove_2065.
Action 7: Put food_fish_2021 on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Close fridge_289.
Action 10: Walk to food_fish_2021.
Action 11: Grab food_fish_2021.
Action 12: Walk to faucet_43.
Action 13: Switch on faucet_43.
Action 14: Wash food_fish_2021.
Action 15: Switch off faucet_43.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_fish_2021 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_fish_2021.
Action 21: Cut food_fish_2021.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_cleaning_solution_2073_around_cupboard_229(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(item:item):
    # Function to check if an item is a vegetable
    return is_food_vegetable(item) or is_food_carrot(item) or is_food_onion(item) or is_food_potato(item)

behavior wash_and_cut_vegetables(vegetable:item, faucet:item, cutting_board:item, knife:item):
    body:
        achieve_once clean(vegetable) # Ensure the vegetable is clean
        achieve_once cut(vegetable) # Slice the vegetable

behavior wash_and_cut_all_vegetables(faucet:item, cutting_board:item, knife:item):
    body:
        foreach vegetable: item:
            if is_vegetable(vegetable):
                wash_and_cut_vegetables(vegetable, faucet, cutting_board, knife)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        wash_and_cut_all_vegetables(faucet, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vegetable(item:item):
    # Function to check if an item is a vegetable
    return is_food_vegetable(item) or is_food_carrot(item) or is_food_onion(item) or is_food_potato(item)

behavior wash_and_cut_vegetables(vegetable:item, faucet:item, cutting_board:item, knife:item):
    body:
        achieve_once clean(vegetable) # Ensure the vegetable is clean
        achieve_once cut(vegetable) # Slice the vegetable

behavior wash_and_cut_all_vegetables(faucet:item, cutting_board:item, knife:item):
    body:
        foreach vegetable: item:
            if is_vegetable(vegetable):
                wash_and_cut_vegetables(vegetable, faucet, cutting_board, knife)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        wash_and_cut_all_vegetables(faucet, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)open_executor(fridge_289)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_carrot_2014)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_carrot_2014, cutting_board_2051)walk_executor(food_carrot_2014)cut_executor(food_carrot_2014)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_carrot_2014. Grabbing food_carrot_2014 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_carrot_2014 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_carrot_2014, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_carrot_2014. food_carrot_2014 is close cutting_board_2051. food_carrot_2014 is on cutting_board_2051. food_carrot_2014 released by left hand. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_onion_2032, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_onion_2032. food_onion_2032 is close cutting_board_2051. food_onion_2032 is on cutting_board_2051. food_onion_2032 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def in_pot(item: item):
    # Function to check if the item is inside the pot
    symbol inside_pot = exists pot: item : (is_pot(pot) and inside(item, pot))
    return inside_pot

behavior add_ingredients_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior add_water_to_pot(pot:item):
    body:
        achieve has_water(pot)

behavior season_soup(pot:item, seasoning:item):
    body:
        achieve inside(seasoning, pot)

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_on is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and in_pot(food_fish_2021) and in_pot(food_carrot_2014) and in_pot(food_onion_2032) and in_pot(food_potato_2035) and in_pot(food_vegetable_2041)
        
        add_water_to_pot(pot) 
        
        # Assuming necessary seasonings are already defined
        foreach seasoning: item:
            if is_sauce(seasoning):  # assuming seasonings are categorized as sauce
                season_soup(pot, seasoning) 

        bind stove: item where:
            is_stove(stove)

        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_on') at line 5868, column 20.
Expected one of: 
	* OR
	* __ANON_3
	* COMMA
	* __ANON_8
	* _NEWLINE
	* LESS_EQ
	* SLASH
	* PERCENT
	* AND
	* __ANON_4
	* IF
	* SEMICOLON
	* __ANON_1
	* __ANON_2
	* MINUS
	* GREATER_EQ
	* AT
	* __ANON_5
	* STAR
	* VBAR
	* DOUBLE_EQUAL
	* LESSTHAN
	* CIRCUMFLEX
	* AMPERSAND
	* FLOORDIV
	* MORETHAN
	* EQUAL
	* __ANON_7
	* __ANON_6
	* NOT_EQ
	* __ANON_0
	* RSHIFT
	* PLUS
	* LSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def in_pot(item: item):
    # Function to check if the item is inside the pot
    symbol inside_pot = exists pot: item : (is_pot(pot) and inside(item, pot))
    return inside_pot

behavior add_ingredients_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior add_water_to_pot(pot:item):
    body:
        achieve has_water(pot)

behavior season_soup(pot:item, seasoning:item):
    body:
        achieve inside(seasoning, pot)

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and in_pot(food_fish_2021) and in_pot(food_carrot_2014) and in_pot(food_onion_2032) and in_pot(food_potato_2035) and in_pot(food_vegetable_2041)
        
        add_water_to_pot(pot) 
        
        # Assuming necessary seasonings are already defined
        foreach seasoning: item:
            if is_sauce(seasoning):  # assuming seasonings are categorized as sauce
                season_soup(pot, seasoning) 

        bind stove: item where:
            is_stove(stove)

        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_fish_2021; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def in_pot(item: item):
    # Function to check if the item is inside the pot
    symbol inside_pot = exists pot: item : (is_pot(pot) and inside(item, pot))
    return inside_pot

behavior add_ingredients_to_pot(ingredient: item, pot: item):
    body:
        achieve_once inside(ingredient, pot)

behavior add_water_to_pot(pot: item):
    body:
        achieve has_water(pot)

behavior season_soup(pot: item, seasoning: item):
    body:
        achieve inside(seasoning, pot)

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind ingredient_fish: item where:
            id[ingredient_fish] == 2021
        bind ingredient_carrot: item where:
            id[ingredient_carrot] == 2014
        bind ingredient_onion: item where:
            id[ingredient_onion] == 2032
        bind ingredient_potato: item where:
            id[ingredient_potato] == 2035
        bind ingredient_vegetable: item where:
            id[ingredient_vegetable] == 2041
        
        add_ingredients_to_pot(ingredient_fish, pot)
        add_ingredients_to_pot(ingredient_carrot, pot)
        add_ingredients_to_pot(ingredient_onion, pot)
        add_ingredients_to_pot(ingredient_potato, pot)
        add_ingredients_to_pot(ingredient_vegetable, pot)
        
        add_water_to_pot(pot)
        
        # Assuming necessary seasonings are already defined
        foreach seasoning: item:
            if is_sauce(seasoning):  # assuming seasonings are categorized as sauce
                season_soup(pot, seasoning)

        bind stove: item where:
            is_stove(stove)
        
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_pot(item: item):
    # Function to check if the item is inside the pot
    symbol inside_pot = exists pot: item : (is_pot(pot) and inside(item, pot))
    return inside_pot

behavior add_ingredients_to_pot(ingredient: item, pot: item):
    body:
        achieve_once inside(ingredient, pot)

behavior add_water_to_pot(pot: item):
    body:
        achieve has_water(pot)

behavior season_soup(pot: item, seasoning: item):
    body:
        achieve inside(seasoning, pot)

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind ingredient_fish: item where:
            id[ingredient_fish] == 2021
        bind ingredient_carrot: item where:
            id[ingredient_carrot] == 2014
        bind ingredient_onion: item where:
            id[ingredient_onion] == 2032
        bind ingredient_potato: item where:
            id[ingredient_potato] == 2035
        bind ingredient_vegetable: item where:
            id[ingredient_vegetable] == 2041
        
        add_ingredients_to_pot(ingredient_fish, pot)
        add_ingredients_to_pot(ingredient_carrot, pot)
        add_ingredients_to_pot(ingredient_onion, pot)
        add_ingredients_to_pot(ingredient_potato, pot)
        add_ingredients_to_pot(ingredient_vegetable, pot)
        
        add_water_to_pot(pot)
        
        # Assuming necessary seasonings are already defined
        foreach seasoning: item:
            if is_sauce(seasoning):  # assuming seasonings are categorized as sauce
                season_soup(pot, seasoning)

        bind stove: item where:
            is_stove(stove)
        
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(pot_2069)putin_executor(food_fish_2021, pot_2069)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(pot_2069)putin_executor(food_carrot_2014, pot_2069)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(pot_2069)putin_executor(food_onion_2032, pot_2069)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(pot_2069)putin_executor(food_potato_2035, pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(pot_2069)putin_executor(sauce_2078, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_fish_2021, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_fish_2021 is inside pot_2069. food_fish_2021 is close pot_2069. pot_2069 is close food_fish_2021. food_fish_2021 released by left hand. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. Grabbing food_carrot_2014 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_carrot_2014, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_carrot_2014 is close pot_2069. food_carrot_2014 is inside pot_2069. pot_2069 is close food_carrot_2014. food_carrot_2014 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_onion_2032, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. food_onion_2032 is inside pot_2069. pot_2069 is close food_onion_2032. food_onion_2032 is close pot_2069. food_onion_2032 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(food_potato_2035, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. food_potato_2035 is inside pot_2069. pot_2069 is close food_potato_2035. food_potato_2035 is close pot_2069. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(sauce_2078)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the sauce_2078. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet) # Move closer to the faucet
        achieve open(pot) # Ensure the pot is open
        achieve_once hold_and_position_pot(pot, faucet) # Temporarily hold the pot and position it at the faucet
        achieve is_on(faucet) # Turn on the faucet to let water flow
        achieve has_water(pot) # Fill the pot with water
        achieve is_off(faucet) # Turn off the faucet when done

behavior add_ingredients_to_pot(ingredients: list[item], pot: item):
    body:
        foreach ingredient: item in ingredients:
            achieve_once close_char(char, ingredient) # Move closer to the ingredient
            achieve_once inside(ingredient, pot) # Place the ingredient inside the pot

behavior add_seasonings_to_pot(seasonings: list[item], pot: item):
    body:
        foreach seasoning: item in seasonings:
            achieve_once close_char(char, seasoning) # Move closer to the seasoning
            achieve_once inside(seasoning, pot) # Place the seasoning inside the pot

behavior cook_soup(pot: item, stove: item):
    body:
        achieve_once close_char(char, stove) # Move closer to the stove
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) # Select a pot
        bind faucet: item where:
            is_faucet(faucet) # Select a faucet
        bind stove: item where:
            is_stove(stove) # Select a stove

         Collect previously prepared and cut ingredients
        bind fish: item where:
            is_food_fish(fish) and cut(fish) # Select cut fish
        bind carrot: item where:
            is_food_carrot(carrot) and cut(carrot) # Select cut carrot
        bind onion: item where:
            is_food_onion(onion) and cut(onion) # Select cut onion
        bind potato: item where:
            is_food_potato(potato) and cut(potato) # Select cut potato
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable) # Select another cut vegetable

        fill_pot_with_water(pot, faucet)
        add_ingredients_to_pot([fish, carrot, onion, potato, vegetable], pot)

         Adding seasonings
        bind salt: item where:
            is_food_salt(salt) # Select salt where available
        add_seasonings_to_pot([salt], pot)

        cook_soup(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5843, column 34.
Expected one of: 
	* LSQB
	* COMMA
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet) # Move closer to the faucet
        achieve_once open(pot) # Ensure the pot is open
        achieve_once hold_and_position_pot(pot, faucet) # Temporarily hold the pot and position it at the faucet
        achieve is_on(faucet) # Turn on the faucet to let water flow
        achieve has_water(pot) # Fill the pot with water
        achieve is_off(faucet) # Turn off the faucet when done

behavior add_ingredients_to_pot(ingredients: list[item], pot: item):
    body:
        foreach ingredient: item in ingredients:
            achieve_once close_char(char, ingredient) # Move closer to the ingredient
            achieve_once inside(ingredient, pot) # Place the ingredient inside the pot

behavior add_seasonings_to_pot(seasonings: list[item], pot: item):
    body:
        foreach seasoning: item in seasonings:
            achieve_once close_char(char, seasoning) # Move closer to the seasoning
            achieve_once inside(seasoning, pot) # Place the seasoning inside the pot

behavior cook_soup(pot: item, stove: item):
    body:
        achieve_once close_char(char, stove) # Move closer to the stove
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) # Select a pot
        bind faucet: item where:
            is_faucet(faucet) # Select a faucet
        bind stove: item where:
            is_stove(stove) # Select a stove

        # Collect previously prepared and cut ingredients
        bind fish: item where:
            is_food_fish(fish) and cut(fish) # Select cut fish
        bind carrot: item where:
            is_food_carrot(carrot) and cut(carrot) # Select cut carrot
        bind onion: item where:
            is_food_onion(onion) and cut(onion) # Select cut onion
        bind potato: item where:
            is_food_potato(potato) and cut(potato) # Select cut potato
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable) # Select another cut vegetable

        fill_pot_with_water(pot, faucet)
        add_ingredients_to_pot([fish, carrot, onion, potato, vegetable], pot)

        # Adding seasonings
        bind salt: item where:
            is_food_salt(salt) # Select salt where available
        add_seasonings_to_pot([salt], pot)

        cook_soup(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5862, column 34.
Expected one of: 
	* LSQB
	* COMMA
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet) # Move closer to the faucet
        achieve_once open(pot) # Ensure the pot is open
        achieve_once hold_and_position_pot(pot, faucet) # Temporarily hold the pot and position it at the faucet
        achieve is_on(faucet) # Turn on the faucet to let water flow
        achieve has_water(pot) # Fill the pot with water
        achieve is_off(faucet) # Turn off the faucet when done

behavior add_ingredients_to_pot(ingredients: list[item], pot: item):
    body:
        foreach ingredient in ingredients:
            achieve_once close_char(char, ingredient) # Move closer to the ingredient
            achieve_once inside(ingredient, pot) # Place the ingredient inside the pot

behavior add_seasonings_to_pot(seasonings: list[item], pot: item):
    body:
        foreach seasoning in seasonings:
            achieve_once close_char(char, seasoning) # Move closer to the seasoning
            achieve_once inside(seasoning, pot) # Place the seasoning inside the pot

behavior cook_soup(pot: item, stove: item):
    body:
        achieve_once close_char(char, stove) # Move closer to the stove
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) # Select a pot
        bind faucet: item where:
            is_faucet(faucet) # Select a faucet
        bind stove: item where:
            is_stove(stove) # Select a stove

        # Collect previously prepared and cut ingredients
        bind fish: item where:
            is_food_fish(fish) and cut(fish) # Select cut fish
        bind carrot: item where:
            is_food_carrot(carrot) and cut(carrot) # Select cut carrot
        bind onion: item where:
            is_food_onion(onion) and cut(onion) # Select cut onion
        bind potato: item where:
            is_food_potato(potato) and cut(potato) # Select cut potato
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable) # Select another cut vegetable

        fill_pot_with_water(pot, faucet)
        add_ingredients_to_pot([fish, carrot, onion, potato, vegetable], pot)

        # Adding seasonings
        bind salt: item where:
            is_food_salt(salt) # Select salt where available
        add_seasonings_to_pot([salt], pot)

        cook_soup(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_detergent_2084_around_cupboard_229(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior cook_soup_with_water_and_vegetables(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior add_seasonings(pot:item):
    body:
        achieve_once inside(sauce_2078, pot)
        # Temporarily add the necessary seasonings to the pot

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        cook_soup_with_water_and_vegetables(pot)
        add_seasonings(pot)
        start_boiling(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sauce_2078; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior cook_soup_with_water_and_vegetables(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior add_seasonings(pot:item, sauce:item):
    body:
        achieve_once inside(sauce, pot)
        # Temporarily add the necessary seasonings to the pot

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind sauce: item where:
            is_sauce(sauce)
        cook_soup_with_water_and_vegetables(pot)
        add_seasonings(pot, sauce)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_soup_with_water_and_vegetables(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior add_seasonings(pot:item, sauce:item):
    body:
        achieve_once inside(sauce, pot)
        # Temporarily add the necessary seasonings to the pot

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind sauce: item where:
            is_sauce(sauce)
        cook_soup_with_water_and_vegetables(pot)
        add_seasonings(pot, sauce)
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(pot_2069)putin_executor(sauce_2078, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
walk_executor(sauce_2078)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the sauce_2078. 
##############################
From agent.py
grab_executor(sauce_2078)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the sauce_2078. Grabbing sauce_2078 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. 
##############################
From agent.py
putin_executor(sauce_2078, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. pot_2069 is close sauce_2078. sauce_2078 is inside pot_2069. sauce_2078 is close pot_2069. sauce_2078 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior serve_soup_into_bowls(pot:item, bowl:item):
    body:
        achieve_once inside(soup_contents, bowl)
        # Pouring the soup contents from the pot into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on the stove
        
        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                serve_soup_into_bowls(pot, bowl)
                # Serve soup into each bowl
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: soup_contents; available variables: [Variable<pot: item>, Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior serve_soup_into_bowls(pot:item, bowl:item):
    body:
        achieve_once inside(soup:item, bowl)
        # Pouring the soup contents from the pot into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on the stove
        
        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                serve_soup_into_bowls(pot, bowl)
                # Serve soup into each bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5817, column 33.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior serve_soup_into_bowls(pot:item, bowl:item):
    body:
        achieve_once inside(soup, bowl)
        # Pouring the soup contents from the pot into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on the stove
        
        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                serve_soup_into_bowls(pot, bowl)
                # Serve soup into each bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior serve_soup(pot: item, bowl: item):
    body:
        achieve_once inside(pot, bowl)  # Ladle soup from the pot into each bowl

def has_soup_inside(pot: item):
    # Check if there is soup inside a pot Since the pot has just been used in cooking soup, there should be soup inside This function can help confirm whether the pot is ready to serve
    symbol has_soup=exists o: item : (inside(o, pot) and is_food(o))
    return has_soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_soup_inside(pot)
        # Select the pot containing soup
        foreach bowl: item:
        # Serve soup into each bowl
            if is_bowl(bowl):
                serve_soup(pot, bowl)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior serve_soup(pot: item, bowl: item):
    body:
        achieve_once inside(pot, bowl)  # Ladle soup from the pot into each bowl

def has_soup_inside(pot: item):
    # Check if there is soup inside a pot Since the pot has just been used in cooking soup, there should be soup inside This function can help confirm whether the pot is ready to serve
    symbol has_soup=exists o: item : (inside(o, pot) and is_food(o))
    return has_soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_soup_inside(pot)
        # Select the pot containing soup
        foreach bowl: item:
        # Serve soup into each bowl
            if is_bowl(bowl):
                serve_soup(pot, bowl)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(dishwasher_1001)exp(bowl_2072, dishwasher_1001)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Fail to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2071, sink_42)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(sink_42)exp(bowl_2072, sink_42)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(bowl_2071, sink_42)
Fail to find bowl_2071 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(powersocket_246)exp(bowl_2071, powersocket_246)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(powersocket_246)exp(bowl_2072, powersocket_246)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(powersocket_246)
Robot find: phone_247, wall_clock_249, Robot is close to the powersocket_246. 
##############################
From agent.py
exp(bowl_2071, powersocket_246)
Fail to find bowl_2071 around powersocket_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(bowl_2071, sink_231)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(sink_231)exp(bowl_2072, sink_231)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(bowl_2071, sink_231)
Fail to find bowl_2071 around sink_231. 
##############################
From agent.py-> find a plan in act()
walk_executor(orchid_178)exp(bowl_2071, orchid_178)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(orchid_178)exp(bowl_2072, orchid_178)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(orchid_178)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the orchid_178. Robot is close to the table_107. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to dining_room_201. Locate table_226, and you will find bowl_2071 on top of this table. It should be close by on the surface.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot needs to clean and prepare any vegetables as part of the soup preparation. Only the fish has been handled and processed so far. You should locate, wash, and cut the vegetables for the soup.
Go to dining_room_201. Locate table_226, and you will find bowl_2071 on top of this table. It should be close by on the surface.

Trial and Error: You can not grab sauce_2078
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to stove_2065.
Action 7: Put food_fish_2021 on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Close fridge_289.
Action 10: Walk to food_fish_2021.
Action 11: Grab food_fish_2021.
Action 12: Walk to faucet_43.
Action 13: Switch on faucet_43.
Action 14: Wash food_fish_2021.
Action 15: Switch off faucet_43.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_fish_2021 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_fish_2021.
Action 21: Cut food_fish_2021.
Action 22: Walk to fridge_289.
Action 23: Open fridge_289.
Action 24: Walk to food_carrot_2014.
Action 25: Grab food_carrot_2014.
Action 26: Walk to faucet_43.
Action 27: Switch on faucet_43.
Action 28: Wash food_carrot_2014.
Action 29: Switch off faucet_43.
Action 30: Walk to cutting_board_2051.
Action 31: Put food_carrot_2014 on cutting_board_2051.
Action 32: Walk to food_carrot_2014.
Action 33: Cut food_carrot_2014.
Action 34: Walk to food_onion_2032.
Action 35: Grab food_onion_2032.
Action 36: Walk to cutting_board_2051.
Action 37: Put food_onion_2032 on cutting_board_2051.
Action 38: Walk to food_onion_2032.
Action 39: Cut food_onion_2032.
Action 40: Walk to food_potato_2035.
Action 41: Grab food_potato_2035.
Action 42: Walk to cutting_board_2051.
Action 43: Put food_potato_2035 on cutting_board_2051.
Action 44: Walk to food_potato_2035.
Action 45: Cut food_potato_2035.
Action 46: Walk to food_vegetable_2041.
Action 47: Grab food_vegetable_2041.
Action 48: Walk to faucet_43.
Action 49: Switch on faucet_43.
Action 50: Wash food_vegetable_2041.
Action 51: Switch off faucet_43.
Action 52: Walk to cutting_board_2051.
Action 53: Put food_vegetable_2041 on cutting_board_2051.
Action 54: Walk to food_vegetable_2041.
Action 55: Cut food_vegetable_2041.
Action 56: Walk to pot_2069.
Action 57: Open pot_2069.
Action 58: Walk to food_fish_2021.
Action 59: Grab food_fish_2021.
Action 60: Walk to pot_2069.
Action 61: Put food_fish_2021 into pot_2069.
Action 62: Walk to food_carrot_2014.
Action 63: Grab food_carrot_2014.
Action 64: Walk to pot_2069.
Action 65: Put food_carrot_2014 into pot_2069.
Action 66: Walk to food_onion_2032.
Action 67: Grab food_onion_2032.
Action 68: Walk to pot_2069.
Action 69: Put food_onion_2032 into pot_2069.
Action 70: Walk to food_potato_2035.
Action 71: Grab food_potato_2035.
Action 72: Walk to pot_2069.
Action 73: Put food_potato_2035 into pot_2069.
Action 74: Walk to food_vegetable_2041.
Action 75: Grab food_vegetable_2041.
Action 76: Walk to pot_2069.
Action 77: Put food_vegetable_2041 into pot_2069.
Action 78: Grab pot_2069.
Action 79: Walk to faucet_43.
Action 80: Switch on faucet_43.
Action 81: Switch off faucet_43.
Action 82: Walk to sauce_2078.
Action 83: Walk to kitchen_counter_230.
Action 84: Put knife_2050 on kitchen_counter_230.
Action 85: Walk to sauce_2078.
Action 86: Grab sauce_2078.
Action 87: Walk to pot_2069.
Action 88: Put sauce_2078 into pot_2069.
Action 89: Walk to stove_2065.
Action 90: Put pot_2069 on stove_2065.
Action 91: Switch on stove_2065.
Action 92: Walk to cupboard_229.
Action 93: Open cupboard_229.
Action 94: look for bowl_2071 around cupboard_229.
Action 95: Walk to dishwasher_1001.
Action 96: Open dishwasher_1001.
Action 97: look for bowl_2071 around dishwasher_1001.
Action 98: Walk to sink_42.
Action 99: look for bowl_2071 around sink_42.
Action 100: Walk to powersocket_246.
Action 101: look for bowl_2071 around powersocket_246.
Action 102: Walk to sink_231.
Action 103: look for bowl_2071 around sink_231.
Action 104: Walk to orchid_178.

##############################
From agent.py
exp(bowl_2071, orchid_178)
Fail to find bowl_2071 around orchid_178. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the stove_2065. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the stove_2065. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. bowl_2071 is close pot_2069. pot_2069 is inside bowl_2071. pot_2069 is close bowl_2071. pot_2069 released by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. pot_2069 is inside bowl_2072. pot_2069 is close bowl_2072. bowl_2072 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ladle soup from the pot into each bowl. The action of putting the entire pot into the bowls does not satisfy the sub-task requirements. Ensure the soup is served inside each bowl properly.
##############################
From agent.py
Human Instruction: The robot needs to ladle soup from the pot into each bowl. The action of putting the entire pot into the bowls does not satisfy the sub-task requirements. Ensure the soup is served inside each bowl properly.

Trial and Error: You can not grab sauce_2078
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to stove_2065.
Action 7: Put food_fish_2021 on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Close fridge_289.
Action 10: Walk to food_fish_2021.
Action 11: Grab food_fish_2021.
Action 12: Walk to faucet_43.
Action 13: Switch on faucet_43.
Action 14: Wash food_fish_2021.
Action 15: Switch off faucet_43.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_fish_2021 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_fish_2021.
Action 21: Cut food_fish_2021.
Action 22: Walk to fridge_289.
Action 23: Open fridge_289.
Action 24: Walk to food_carrot_2014.
Action 25: Grab food_carrot_2014.
Action 26: Walk to faucet_43.
Action 27: Switch on faucet_43.
Action 28: Wash food_carrot_2014.
Action 29: Switch off faucet_43.
Action 30: Walk to cutting_board_2051.
Action 31: Put food_carrot_2014 on cutting_board_2051.
Action 32: Walk to food_carrot_2014.
Action 33: Cut food_carrot_2014.
Action 34: Walk to food_onion_2032.
Action 35: Grab food_onion_2032.
Action 36: Walk to cutting_board_2051.
Action 37: Put food_onion_2032 on cutting_board_2051.
Action 38: Walk to food_onion_2032.
Action 39: Cut food_onion_2032.
Action 40: Walk to food_potato_2035.
Action 41: Grab food_potato_2035.
Action 42: Walk to cutting_board_2051.
Action 43: Put food_potato_2035 on cutting_board_2051.
Action 44: Walk to food_potato_2035.
Action 45: Cut food_potato_2035.
Action 46: Walk to food_vegetable_2041.
Action 47: Grab food_vegetable_2041.
Action 48: Walk to faucet_43.
Action 49: Switch on faucet_43.
Action 50: Wash food_vegetable_2041.
Action 51: Switch off faucet_43.
Action 52: Walk to cutting_board_2051.
Action 53: Put food_vegetable_2041 on cutting_board_2051.
Action 54: Walk to food_vegetable_2041.
Action 55: Cut food_vegetable_2041.
Action 56: Walk to pot_2069.
Action 57: Open pot_2069.
Action 58: Walk to food_fish_2021.
Action 59: Grab food_fish_2021.
Action 60: Walk to pot_2069.
Action 61: Put food_fish_2021 into pot_2069.
Action 62: Walk to food_carrot_2014.
Action 63: Grab food_carrot_2014.
Action 64: Walk to pot_2069.
Action 65: Put food_carrot_2014 into pot_2069.
Action 66: Walk to food_onion_2032.
Action 67: Grab food_onion_2032.
Action 68: Walk to pot_2069.
Action 69: Put food_onion_2032 into pot_2069.
Action 70: Walk to food_potato_2035.
Action 71: Grab food_potato_2035.
Action 72: Walk to pot_2069.
Action 73: Put food_potato_2035 into pot_2069.
Action 74: Walk to food_vegetable_2041.
Action 75: Grab food_vegetable_2041.
Action 76: Walk to pot_2069.
Action 77: Put food_vegetable_2041 into pot_2069.
Action 78: Grab pot_2069.
Action 79: Walk to faucet_43.
Action 80: Switch on faucet_43.
Action 81: Switch off faucet_43.
Action 82: Walk to sauce_2078.
Action 83: Walk to kitchen_counter_230.
Action 84: Put knife_2050 on kitchen_counter_230.
Action 85: Walk to sauce_2078.
Action 86: Grab sauce_2078.
Action 87: Walk to pot_2069.
Action 88: Put sauce_2078 into pot_2069.
Action 89: Walk to stove_2065.
Action 90: Put pot_2069 on stove_2065.
Action 91: Switch on stove_2065.
Action 92: Walk to cupboard_229.
Action 93: Open cupboard_229.
Action 94: look for bowl_2071 around cupboard_229.
Action 95: Walk to dishwasher_1001.
Action 96: Open dishwasher_1001.
Action 97: look for bowl_2071 around dishwasher_1001.
Action 98: Walk to sink_42.
Action 99: look for bowl_2071 around sink_42.
Action 100: Walk to powersocket_246.
Action 101: look for bowl_2071 around powersocket_246.
Action 102: Walk to sink_231.
Action 103: look for bowl_2071 around sink_231.
Action 104: Walk to orchid_178.
Action 105: look for bowl_2071 around orchid_178.
Action 106: Walk to table_226.
Action 107: look for bowl_2071 around table_226.
Action 108: Walk to pot_2069.
Action 109: Grab pot_2069.
Action 110: Walk to bowl_2071.
Action 111: Put pot_2069 into bowl_2071.
Action 112: Walk to pot_2069.
Action 113: Grab pot_2069.
Action 114: Walk to bowl_2072.
Action 115: Put pot_2069 into bowl_2072.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior ladle_soup(soup_pot: item, bowl: item):
    body:
        achieve_once inside(soup_pot, bowl)

behavior serve_soup():
    body:
        bind soup_pot: item where:
            is_pot(soup_pot)
        # Select the soup pot
        foreach bowl: item:
            if is_bowl(bowl):
                ladle_soup(soup_pot, bowl)
        # Serve the soup into each bowl

behavior __goal__():
    body:
        serve_soup()
        # Execute serving of the soup into the bowls
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior ladle_soup(soup_pot: item, bowl: item):
    body:
        achieve_once inside(soup_pot, bowl)

behavior serve_soup():
    body:
        bind soup_pot: item where:
            is_pot(soup_pot)
        # Select the soup pot
        foreach bowl: item:
            if is_bowl(bowl):
                ladle_soup(soup_pot, bowl)
        # Serve the soup into each bowl

behavior __goal__():
    body:
        serve_soup()
        # Execute serving of the soup into the bowls
##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. pot_2069 is inside bowl_2071. pot_2069 is close bowl_2071. pot_2069 released by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. pot_2069 is inside bowl_2072. pot_2069 is close bowl_2072. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot must ladle soup from the pot into each bowl individually; simply placing the entire pot into the bowls does not fulfill the requirement. Adjust the actions to correctly serve soup from the pot into the bowls.
##############################
From agent.py
Human Instruction: The robot must ladle soup from the pot into each bowl individually; simply placing the entire pot into the bowls does not fulfill the requirement. Adjust the actions to correctly serve soup from the pot into the bowls.

Trial and Error: You can not grab sauce_2078
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to stove_2065.
Action 7: Put food_fish_2021 on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Close fridge_289.
Action 10: Walk to food_fish_2021.
Action 11: Grab food_fish_2021.
Action 12: Walk to faucet_43.
Action 13: Switch on faucet_43.
Action 14: Wash food_fish_2021.
Action 15: Switch off faucet_43.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_fish_2021 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_fish_2021.
Action 21: Cut food_fish_2021.
Action 22: Walk to fridge_289.
Action 23: Open fridge_289.
Action 24: Walk to food_carrot_2014.
Action 25: Grab food_carrot_2014.
Action 26: Walk to faucet_43.
Action 27: Switch on faucet_43.
Action 28: Wash food_carrot_2014.
Action 29: Switch off faucet_43.
Action 30: Walk to cutting_board_2051.
Action 31: Put food_carrot_2014 on cutting_board_2051.
Action 32: Walk to food_carrot_2014.
Action 33: Cut food_carrot_2014.
Action 34: Walk to food_onion_2032.
Action 35: Grab food_onion_2032.
Action 36: Walk to cutting_board_2051.
Action 37: Put food_onion_2032 on cutting_board_2051.
Action 38: Walk to food_onion_2032.
Action 39: Cut food_onion_2032.
Action 40: Walk to food_potato_2035.
Action 41: Grab food_potato_2035.
Action 42: Walk to cutting_board_2051.
Action 43: Put food_potato_2035 on cutting_board_2051.
Action 44: Walk to food_potato_2035.
Action 45: Cut food_potato_2035.
Action 46: Walk to food_vegetable_2041.
Action 47: Grab food_vegetable_2041.
Action 48: Walk to faucet_43.
Action 49: Switch on faucet_43.
Action 50: Wash food_vegetable_2041.
Action 51: Switch off faucet_43.
Action 52: Walk to cutting_board_2051.
Action 53: Put food_vegetable_2041 on cutting_board_2051.
Action 54: Walk to food_vegetable_2041.
Action 55: Cut food_vegetable_2041.
Action 56: Walk to pot_2069.
Action 57: Open pot_2069.
Action 58: Walk to food_fish_2021.
Action 59: Grab food_fish_2021.
Action 60: Walk to pot_2069.
Action 61: Put food_fish_2021 into pot_2069.
Action 62: Walk to food_carrot_2014.
Action 63: Grab food_carrot_2014.
Action 64: Walk to pot_2069.
Action 65: Put food_carrot_2014 into pot_2069.
Action 66: Walk to food_onion_2032.
Action 67: Grab food_onion_2032.
Action 68: Walk to pot_2069.
Action 69: Put food_onion_2032 into pot_2069.
Action 70: Walk to food_potato_2035.
Action 71: Grab food_potato_2035.
Action 72: Walk to pot_2069.
Action 73: Put food_potato_2035 into pot_2069.
Action 74: Walk to food_vegetable_2041.
Action 75: Grab food_vegetable_2041.
Action 76: Walk to pot_2069.
Action 77: Put food_vegetable_2041 into pot_2069.
Action 78: Grab pot_2069.
Action 79: Walk to faucet_43.
Action 80: Switch on faucet_43.
Action 81: Switch off faucet_43.
Action 82: Walk to sauce_2078.
Action 83: Walk to kitchen_counter_230.
Action 84: Put knife_2050 on kitchen_counter_230.
Action 85: Walk to sauce_2078.
Action 86: Grab sauce_2078.
Action 87: Walk to pot_2069.
Action 88: Put sauce_2078 into pot_2069.
Action 89: Walk to stove_2065.
Action 90: Put pot_2069 on stove_2065.
Action 91: Switch on stove_2065.
Action 92: Walk to cupboard_229.
Action 93: Open cupboard_229.
Action 94: look for bowl_2071 around cupboard_229.
Action 95: Walk to dishwasher_1001.
Action 96: Open dishwasher_1001.
Action 97: look for bowl_2071 around dishwasher_1001.
Action 98: Walk to sink_42.
Action 99: look for bowl_2071 around sink_42.
Action 100: Walk to powersocket_246.
Action 101: look for bowl_2071 around powersocket_246.
Action 102: Walk to sink_231.
Action 103: look for bowl_2071 around sink_231.
Action 104: Walk to orchid_178.
Action 105: look for bowl_2071 around orchid_178.
Action 106: Walk to table_226.
Action 107: look for bowl_2071 around table_226.
Action 108: Walk to pot_2069.
Action 109: Grab pot_2069.
Action 110: Walk to bowl_2071.
Action 111: Put pot_2069 into bowl_2071.
Action 112: Walk to pot_2069.
Action 113: Grab pot_2069.
Action 114: Walk to bowl_2072.
Action 115: Put pot_2069 into bowl_2072.
Action 116: Grab pot_2069.
Action 117: Walk to bowl_2071.
Action 118: Put pot_2069 into bowl_2071.
Action 119: Walk to pot_2069.
Action 120: Grab pot_2069.
Action 121: Walk to bowl_2072.
Action 122: Put pot_2069 into bowl_2072.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior ladle_soup_into_bowls(pot:item, bowl:item):
    body:
        achieve_once inside(pot, bowl)
        # Serve the soup from the pot into a bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot of soup
        bind bowl_1: item where:
            is_bowl(bowl_1) and id[bowl_1] == 2071
        # Select the first bowl with ID 2071
        bind bowl_2: item where:
            is_bowl(bowl_2) and id[bowl_2] == 2072
        # Select the second bowl with ID 2072
        
        ladle_soup_into_bowls(pot, bowl_1)
        # Serve soup into bowl_1
        
        ladle_soup_into_bowls(pot, bowl_2)
        # Serve soup into bowl_2

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ladle_soup_into_bowls(pot:item, bowl:item):
    body:
        achieve_once inside(pot, bowl)
        # Serve the soup from the pot into a bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot of soup
        bind bowl_1: item where:
            is_bowl(bowl_1) and id[bowl_1] == 2071
        # Select the first bowl with ID 2071
        bind bowl_2: item where:
            is_bowl(bowl_2) and id[bowl_2] == 2072
        # Select the second bowl with ID 2072
        
        ladle_soup_into_bowls(pot, bowl_1)
        # Serve soup into bowl_1
        
        ladle_soup_into_bowls(pot, bowl_2)
        # Serve soup into bowl_2

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(bowl_2071)putin_executor(pot_2069, bowl_2071)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(bowl_2072)putin_executor(pot_2069, bowl_2072)
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2071)
Robot find: Robot is close to the pot_2069. Robot is close to the table_226. Robot is close to the bowl_2071. pot_2069 is inside bowl_2071. pot_2069 is close bowl_2071. pot_2069 released by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2071. Robot is close to the food_fish_2021. Robot is close to the food_onion_2032. Robot is close to the food_potato_2035. Robot is close to the sauce_2078. Robot is close to the food_vegetable_2041. Robot is close to the food_carrot_2014. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(pot_2069, bowl_2072)
Robot find: Robot is close to the pot_2069. Robot is close to the bowl_2072. Robot is close to the table_226. pot_2069 is inside bowl_2072. pot_2069 is close bowl_2072. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot incorrectly placed the entire pot into the bowls rather than ladling the soup from the pot into the bowls individually. You need to have the robot serve the soup from the pot into each bowl separately, as specified.
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(stove_2065)', 'put_executor(food_fish_2021, stove_2065)', 'walk_executor(fridge_289)', 'close_executor(fridge_289)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_fish_2021, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_fish_2021)', 'cut_executor(food_fish_2021)', 'walk_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(food_carrot_2014)', 'grab_executor(food_carrot_2014)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_carrot_2014)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_carrot_2014, cutting_board_2051)', 'walk_executor(food_carrot_2014)', 'cut_executor(food_carrot_2014)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(cutting_board_2051)', 'put_executor(food_onion_2032, cutting_board_2051)', 'walk_executor(food_onion_2032)', 'cut_executor(food_onion_2032)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(pot_2069)', 'putin_executor(food_fish_2021, pot_2069)', 'walk_executor(food_carrot_2014)', 'grab_executor(food_carrot_2014)', 'walk_executor(pot_2069)', 'putin_executor(food_carrot_2014, pot_2069)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(pot_2069)', 'putin_executor(food_onion_2032, pot_2069)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(pot_2069)', 'putin_executor(food_potato_2035, pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(sauce_2078)', 'grab_executor(sauce_2078) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(sauce_2078)', 'grab_executor(sauce_2078)', 'walk_executor(pot_2069)', 'putin_executor(sauce_2078, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(sink_42)', 'walk_executor(powersocket_246)', 'walk_executor(sink_231)', 'walk_executor(orchid_178)', 'walk_executor(table_226)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2071)', 'putin_executor(pot_2069, bowl_2071)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2072)', 'putin_executor(pot_2069, bowl_2072)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2071)', 'putin_executor(pot_2069, bowl_2071)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2072)', 'putin_executor(pot_2069, bowl_2072)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2071)', 'putin_executor(pot_2069, bowl_2071)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(bowl_2072)', 'putin_executor(pot_2069, bowl_2072)']
Time info:
Time consume: 732 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 26
goal generate times: 13
goal correct times: 4
action_num: 122

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
