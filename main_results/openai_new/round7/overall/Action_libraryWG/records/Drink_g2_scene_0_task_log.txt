From agent.py
Reset goals: The sub-goals are: 
['1. Get a cup of water.', '2. Put the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2087_around_closetdrawer_382(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_water_from_sink(cup: item, faucet: item):
    body:
        achieve_once inhand(cup)
        achieve_once is_on(faucet)
        achieve_once has_water(cup)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind cup: item where:
            is_cup(cup) and close_char(char, cup)
        get_water_from_sink(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
output
behavior get_cup_from_location(location:item):
    body:
        foreach item: item:
            if is_cup(item) and inside(item, location):
                achieve_once inhand(item)

behavior __goal__():
    body:
        foreach location: item:
            if can_open(location) and not visited(location):
                observe(location, "Check for cups inside")
                move(location)
                if exists cup: item: (is_cup(cup) and inside(cup, location)):
                    get_cup_from_location(location)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'output') at line 5649, column 1.
Expected one of: 
	* OBJECTS
	* IMPORT
	* TYPEDEF
	* FEATURE
	* _NEWLINE
	* DOMAIN
	* $END
	* INCLUDE
	* BEHAVIOR
	* INIT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* GOAL
	* GENERATOR
	* _PRAGMA_KEYWORD
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#goal_representation
behavior get_cup_from_location(location:item):
    body:
        foreach item: item:
            if is_cup(item) and inside(item, location):
                achieve_once inhand(item)

behavior __goal__():
    body:
        foreach location: item:
            if can_open(location) and not visited(location):
                observe(location, "Check for cups inside")
                move(location)
                if exists cup: item: (is_cup(cup) and inside(cup, location)):
                    get_cup_from_location(location)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2087_around_closetdrawer_382(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and has_water(cup)):
            # If a cup with water is found, move closer to it
            bind cup: item where:
                is_cup(cup) and has_water(cup)
            achieve close_char(char, cup)

        else:
            # Check all unvisited cups that do not have water
            foreach cup: item:
                if is_cup(cup) and not visited(cup) and not has_water(cup):
                    observe(cup, "Check if this cup can hold water")

            # Once a cup is found, fill it with water
            bind cup: item where:
                is_cup(cup) and not has_water(cup)
            bind faucet: item where:
                is_faucet(faucet)
            grab_the_cup(cup)
            fill_cup_with_water(cup, faucet)

behavior grab_the_cup(cup: item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve_once has_water(cup)
        achieve_once is_off(faucet)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function grab_the_cup not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_clothes_socks_2087_around_closetdrawer_380(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

#goal_representation
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve_once has_water(cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and has_water(cup)):
            bind cup: item where:
                is_cup(cup) and has_water(cup)
            achieve close_char(char, cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup) and not has_water(cup):
                    observe(cup, "Check if this cup can hold water")
            bind cup: item where:
                is_cup(cup) and not has_water(cup)
            bind faucet: item where:
                is_faucet(faucet)
            achieve_once inhand(cup)
            fill_cup_with_water(cup, faucet)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve_once has_water(cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and has_water(cup)):
            bind cup: item where:
                is_cup(cup) and has_water(cup)
            achieve close_char(char, cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup) and not has_water(cup):
                    observe(cup, "Check if this cup can hold water")
            bind cup: item where:
                is_cup(cup) and not has_water(cup)
            bind faucet: item where:
                is_faucet(faucet)
            achieve_once inhand(cup)
            fill_cup_with_water(cup, faucet)
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)obs(cup_2063, Check if this cup can hold water)walk_executor(coffee_table_2068)exp(cup_2064, coffee_table_2068)walk_executor(cup_2064)obs(cup_2064, Check if this cup can hold water)grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Fail to find cup_2063 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(cup_2063, table_107)walk_executor(cup_2063)obs(cup_2063, Check if this cup can hold water)walk_executor(table_107)exp(cup_2064, table_107)walk_executor(cup_2064)obs(cup_2064, Check if this cup can hold water)grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(cup_2063, table_107)
Fail to find cup_2063 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(cup_2063, fridge_289)walk_executor(cup_2063)obs(cup_2063, Check if this cup can hold water)walk_executor(fridge_289)exp(cup_2064, fridge_289)walk_executor(cup_2064)obs(cup_2064, Check if this cup can hold water)grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(cup_2063, fridge_289)
Fail to find cup_2063 around fridge_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(cup_2063, sink_231)walk_executor(cup_2063)obs(cup_2063, Check if this cup can hold water)walk_executor(sink_231)exp(cup_2064, sink_231)walk_executor(cup_2064)obs(cup_2064, Check if this cup can hold water)grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(sink_231)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(cup_2063, sink_231)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)obs(cup_2063, Check if this cup can hold water)walk_executor(cup_2064)obs(cup_2064, Check if this cup can hold water)grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Check if this cup can hold water)
Get this information:  cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230. cup_2063 is inside dining_room_201.
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
obs(cup_2064, Check if this cup can hold water)
Get this information:  cup_2064 is inside dining_room_201. cup_2064 is close to kitchen_counter_230. cup_2064 is close to character_65. cup_2064 is on kitchen_counter_230.
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_doorjamb_347(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==347
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(fork,doorjamb_instance)
        else:
            exp(fork,doorjamb_instance)
    eff:
        unknown[fork]=False
        close[fork,doorjamb_instance]=True
        close[doorjamb_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_water_in_freezer(cup: item, freezer: item):
    body:
        achieve_once inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind freezer: item where:
            is_fridge(freezer)
        put_water_in_freezer(cup, freezer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_water_in_freezer(cup: item, freezer: item):
    body:
        achieve_once inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind freezer: item where:
            is_fridge(freezer)
        put_water_in_freezer(cup, freezer)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)putin_executor(cup_2064, fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the cup_2064. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(cup_2064, fridge_289)
Robot find: Robot is close to the cup_2064. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. cup_2064 is inside fridge_289. cup_2064 is close fridge_289. fridge_289 is close cup_2064. cup_2064 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and freeze it.
Action History:
['walk_executor(coffee_table_2068)', 'walk_executor(table_107)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(sink_231)', 'walk_executor(cup_2063)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'putin_executor(cup_2064, fridge_289)']
Time info:
Time consume: 135 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 147
goal generate times: 4
goal correct times: 1
action_num: 14

Task complete rate:
1
Scene_id: 0
##############################
