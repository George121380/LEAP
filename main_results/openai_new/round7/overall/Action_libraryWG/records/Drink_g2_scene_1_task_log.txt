From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup, fill it with water, and place it in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup()  item:
    body:
        if exists cup: item : (is_cup(cup)):
            # If we have already found a cup, we can directly interact with it
            bind cup: item where:
                is_cup(cup)
            return cup

        else:
            # Check all potential locations to locate a cup
            foreach location: item:
                observe(location, "Is there a cup on this location")
            # Return a cup if located
            bind cup: item where:
                is_cup(cup)
            return cup

behavior find_faucet()  item:
    body:
        if exists faucet: item : (is_faucet(faucet)):
            # If we have already found a faucet, we can directly interact with it
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

        else:
            # Check all potential locations for a faucet
            foreach location: item:
                observe(location, "Is there a faucet at this location")
            # Return a faucet if located
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior find_freezer()  item:
    body:
        if exists freezer: item : (is_dining_room(freezer)): # examples might not perfectly map to reality, pick the closest option
            # If a freezer is found, approach it
            bind freezer: item where:
                is_dining_room(freezer)
            return freezer

        else:
            # Check all unvisited fridgelike locations
            foreach location: item:
                observe(location, "Is this a freezer location to place cup inside")
            # Return a freezer if located
            bind freezer: item where:
                is_dining_room(freezer)
            return freezer

behavior place_cup_in_freezer(cup:item, freezer:item):
    body:
        achieve_once inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        # Get a cup and fill it with water
        fill_cup_with_water(cup, find_faucet())
        
        # Find a freezer location and place the cup
        bind freezer: item where:
            is_dining_room(freezer)
        place_cup_in_freezer(cup, freezer)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'item') at line 5188, column 22.
Expected one of: 
	* COLON
Previous tokens: [Token('RPAR', ')')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_cupboard_117(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(measuring_cup,cupboard_instance)
        else:
            exp(measuring_cup,cupboard_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cupboard_instance]=True
        close[cupboard_instance,measuring_cup]=True
    

behavior find_cup_2049_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation

behavior find_cup() item:
    body:
        if exists cup: item : (is_cup(cup)):
            # If we have already found a cup, we can directly interact with it
            bind cup: item where:
                is_cup(cup)
            return cup

        else:
            # Check all potential locations to locate a cup
            foreach location: item:
                observe(location, "Is there a cup on this location")
            # Return a cup if located
            bind cup: item where:
                is_cup(cup)
            return cup

behavior find_faucet() item:
    body:
        if exists faucet: item : (is_faucet(faucet)):
            # If we have already found a faucet, we can directly interact with it
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

        else:
            # Check all potential locations for a faucet
            foreach location: item:
                observe(location, "Is there a faucet at this location")
            # Return a faucet if located
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior find_freezer() item:
    body:
        if exists freezer: item : (is_fridge(freezer)): # Freezer is more likely part of a fridge, we update category
            # If a freezer is found, approach it
            bind freezer: item where:
                is_fridge(freezer)
            return freezer

        else:
            # Check all unvisited fridgelike locations
            foreach location: item:
                observe(location, "Is this a freezer location to place cup inside")
            # Return a freezer if located
            bind freezer: item where:
                is_fridge(freezer)
            return freezer

behavior place_cup_in_freezer(cup:item, freezer:item):
    body:
        achieve_once inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        # Get a cup and fill it with water
        fill_cup_with_water(cup, find_faucet())
        
        # Find a freezer location and place the cup
        bind freezer: item where:
            is_fridge(freezer)
        place_cup_in_freezer(cup, freezer)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'item') at line 5206, column 21.
Expected one of: 
	* COLON
Previous tokens: [Token('RPAR', ')')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_drawing_202_around_bookshelf_124(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(drawing,bookshelf_instance)
        else:
            exp(drawing,bookshelf_instance)
    eff:
        unknown[drawing]=False
        close[drawing,bookshelf_instance]=True
        close[bookshelf_instance,drawing]=True
    

behavior find_cup_2049_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
behavior find_cup():
    body:
        if exists cup: item : (is_cup(cup)):
            # If we have already found a cup, we can directly interact with it
            bind cup: item where:
                is_cup(cup)
            return cup

        else:
            # Check all potential locations to locate a cup
            foreach location: item:
                observe(location, "Is there a cup on this location")
            # Return a cup if located
            bind cup: item where:
                is_cup(cup)
            return cup

behavior find_faucet():
    body:
        if exists faucet: item : (is_faucet(faucet)):
            # If we have already found a faucet, we can directly interact with it
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

        else:
            # Check all potential locations for a faucet
            foreach location: item:
                observe(location, "Is there a faucet at this location")
            # Return a faucet if located
            bind faucet: item where:
                is_faucet(faucet)
            return faucet

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior find_freezer():
    body:
        if exists freezer: item : (is_fridge(freezer)): # Freezer is more likely part of a fridge, we update category
            # If a freezer is found, approach it
            bind freezer: item where:
                is_fridge(freezer)
            return freezer

        else:
            # Check all unvisited fridgelike locations
            foreach location: item:
                observe(location, "Is this a freezer location to place cup inside")
            # Return a freezer if located
            bind freezer: item where:
                is_fridge(freezer)
            return freezer

behavior place_cup_in_freezer(cup:item, freezer:item):
    body:
        achieve_once inside(cup, freezer)

behavior __goal__():
    body:
        cup = find_cup()
        # Get a cup and fill it with water
        fill_cup_with_water(cup, find_faucet())
        
        # Find a freezer location and place the cup
        freezer = find_freezer()
        place_cup_in_freezer(cup, freezer)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_cup_2133_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior place_in_freezer(cup:item, freezer:item):
    body:
        achieve_once inside(cup, freezer) # Place the cup inside the freezer

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Find a cup in the environment

        bind freezer: item where:
            is_fridge(freezer) and can_open(freezer) # Select a feasible freezer in the environment

        bind faucet: item where:
            is_faucet(faucet) # Select a faucet in the environment

        fill_cup_with_water(cup, faucet)
        place_in_freezer(cup, freezer)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior place_in_freezer(cup:item, freezer:item):
    body:
        achieve_once inside(cup, freezer) # Place the cup inside the freezer

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Find a cup in the environment

        bind freezer: item where:
            is_fridge(freezer) and can_open(freezer) # Select a feasible freezer in the environment

        bind faucet: item where:
            is_faucet(faucet) # Select a faucet in the environment

        fill_cup_with_water(cup, faucet)
        place_in_freezer(cup, freezer)


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)putin_executor(cup_2132, fridge_126)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)putin_executor(cup_2132, fridge_126)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)putin_executor(cup_2132, fridge_126)
##############################
From agent.py
walk_executor(sink_120)
Robot find: fork_2150, bowl_2142, food_salt_2041, soap_2126, soap_2010, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, sink_120)
Fail to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)putin_executor(cup_2132, fridge_126)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)putin_executor(cup_2132, fridge_126)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the cup_2132. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the cup_2132. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the cup_2132. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
putin_executor(cup_2132, fridge_126)
Robot find: Robot is close to the cup_2132. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. cup_2132 is inside fridge_126. cup_2132 is close fridge_126. fridge_126 is close cup_2132. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and freeze it.
Action History:
['walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(sink_120)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'putin_executor(cup_2132, fridge_126)']
Time info:
Time consume: 162 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 46
goal generate times: 2
goal correct times: 0
action_num: 14

Task complete rate:
1
Scene_id: 1
##############################
