From agent.py
Reset goals: The sub-goals are: 
['1. Find the necessary ingredients for fish soup.', '2. Prepare and clean the ingredients.', '3. Cook the ingredients together in a pot to make the fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_cupboard_130(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_salt_2068_around_cupboard_130(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_for_fish_soup(item:item):
    # Function to check if an item is an ingredient for fish soup
    return is_food_fish(item) or is_food_potato(item) or is_food_carrot(item) or is_food_onion(item) or is_food_salt(item) or is_oil(item) or is_water(item)

behavior __goal__():
    body:
        # Define the ingredients
        foreach ingredient: item:
            if is_ingredient_for_fish_soup(ingredient) and not visited(ingredient):
                observe(ingredient, "Check if it is an ingredient for fish soup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient_for_fish_soup(item:item):
    # Function to check if an item is an ingredient for fish soup
    return is_food_fish(item) or is_food_potato(item) or is_food_carrot(item) or is_food_onion(item) or is_food_salt(item) or is_oil(item) or is_water(item)

behavior __goal__():
    body:
        # Define the ingredients
        foreach ingredient: item:
            if is_ingredient_for_fish_soup(ingredient) and not visited(ingredient):
                observe(ingredient, "Check if it is an ingredient for fish soup")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_carrot_2047, fridge_140)walk_executor(food_carrot_2047)obs(food_carrot_2047, Check if it is an ingredient for fish soup)walk_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(food_potato_2066, cupboard_130)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(food_salt_2068, cupboard_130)walk_executor(food_salt_2068)obs(food_salt_2068, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(oil_2102, cupboard_130)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(oil_2005, cupboard_130)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_carrot_2047, fridge_140)
Find food_carrot_2047. 
##############################
From agent.py-> find a plan in act()
obs(food_carrot_2047, Check if it is an ingredient for fish soup)obs(food_fish_2054, Check if it is an ingredient for fish soup)obs(food_potato_2066, Check if it is an ingredient for fish soup)obs(food_salt_2068, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(oil_2102, cupboard_130)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(oil_2005, cupboard_130)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
obs(food_carrot_2047, Check if it is an ingredient for fish soup)
Get this information:  food_carrot_2047 is inside dining_room_1. food_carrot_2047 is inside fridge_140. food_carrot_2047 is close to fridge_140. food_carrot_2047 is close to character_219. food_carrot_2047 is DIRTY.
##############################
From agent.py
obs(food_fish_2054, Check if it is an ingredient for fish soup)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
obs(food_potato_2066, Check if it is an ingredient for fish soup)
Get this information:  food_potato_2066 is inside dining_room_1. food_potato_2066 is inside fridge_140. food_potato_2066 is close to fridge_140. food_potato_2066 is close to character_219. food_potato_2066 is CLEAN.
##############################
From agent.py
obs(food_salt_2068, Check if it is an ingredient for fish soup)
Get this information:  food_salt_2068 is inside dining_room_1. food_salt_2068 is inside fridge_140. food_salt_2068 is close to fridge_140. food_salt_2068 is close to character_219. food_salt_2068 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(oil_2102, cupboard_130)
Fail to find oil_2102 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(oil_2102, cupboard_131)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(cupboard_131)exp(oil_2005, cupboard_131)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(oil_2102, cupboard_131)
Fail to find oil_2102 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(oil_2102, kitchen_counter_128)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_128)exp(oil_2005, kitchen_counter_128)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_128)exp(food_onion_2026, kitchen_counter_128)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(oil_2102, kitchen_counter_128)
Fail to find oil_2102 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(oil_2102, kitchen_counter_132)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_132)exp(oil_2005, kitchen_counter_132)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(oil_2102, kitchen_counter_132)
Fail to find oil_2102 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(oil_2102, kitchen_counter_129)walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_129)exp(oil_2005, kitchen_counter_129)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(sink_133)exp(food_onion_2026, sink_133)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(oil_2102, kitchen_counter_129)
Find oil_2102. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)obs(oil_2102, Check if it is an ingredient for fish soup)walk_executor(kitchen_counter_129)exp(oil_2005, kitchen_counter_129)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(sink_133)exp(food_onion_2026, sink_133)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
obs(oil_2102, Check if it is an ingredient for fish soup)
Get this information:  oil_2102 is close to kitchen_counter_129. oil_2102 is close to character_219. oil_2102 is inside dining_room_1. oil_2102 is on kitchen_counter_129.
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(oil_2005, kitchen_counter_129)
Fail to find oil_2005 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(oil_2005, stove_2090)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(sink_133)exp(food_onion_2026, sink_133)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2005 ?
Answer: To find oil_2005, go to home_office_161. Once inside, locate table_193. You will find oil_2005 on table_193.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find oil_2005, go to home_office_161. Once inside, locate table_193. You will find oil_2005 on table_193.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_carrot_2047 around fridge_140.
Action 5: Observe around food_carrot_2047 with the question of Check if it is an ingredient for fish soup.
Action 6: Observe around food_fish_2054 with the question of Check if it is an ingredient for fish soup.
Action 7: Observe around food_potato_2066 with the question of Check if it is an ingredient for fish soup.
Action 8: Observe around food_salt_2068 with the question of Check if it is an ingredient for fish soup.
Action 9: Walk to cupboard_130.
Action 10: look for oil_2102 around cupboard_130.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for oil_2102 around cupboard_131.
Action 14: Walk to kitchen_counter_128.
Action 15: look for oil_2102 around kitchen_counter_128.
Action 16: Walk to kitchen_counter_132.
Action 17: look for oil_2102 around kitchen_counter_132.
Action 18: Walk to kitchen_counter_129.
Action 19: look for oil_2102 around kitchen_counter_129.
Action 20: Walk to oil_2102.
Action 21: Observe around oil_2102 with the question of Check if it is an ingredient for fish soup.
Action 22: Walk to kitchen_counter_129.
Action 23: look for oil_2005 around kitchen_counter_129.
Action 24: Walk to stove_2090.
Action 25: Open stove_2090.

##############################
From agent.py
exp(oil_2005, stove_2090)
Fail to find oil_2005 around stove_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_193)exp(oil_2005, table_193)walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(sink_133)exp(food_onion_2026, sink_133)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
exp(oil_2005, table_193)
Find oil_2005. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2005)obs(oil_2005, Check if it is an ingredient for fish soup)walk_executor(sink_133)exp(food_onion_2026, sink_133)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(oil_2005)
Robot find: Robot is close to the table_193. Robot is close to the oil_2005. 
##############################
From agent.py
obs(oil_2005, Check if it is an ingredient for fish soup)
Get this information:  oil_2005 is inside home_office_161. oil_2005 is on table_193. oil_2005 is close to table_193. oil_2005 is close to character_219. oil_2005 is CLEAN.
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(food_onion_2026, sink_133)
Fail to find food_onion_2026 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(food_onion_2026, wallshelf_190)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(food_onion_2026, wallshelf_190)
Fail to find food_onion_2026 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_373)exp(food_onion_2026, nightstand_373)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(nightstand_373)
Robot find: drawing_389, coin_2004, mat_386, pillow_368, Robot is close to the nightstand_373. 
##############################
From agent.py
exp(food_onion_2026, nightstand_373)
Fail to find food_onion_2026 around nightstand_373. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_392)open_executor(curtain_392)exp(food_onion_2026, curtain_392)walk_executor(food_onion_2026)obs(food_onion_2026, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(curtain_392)
Robot find: drawing_388, Robot is close to the curtain_392. 
##############################
From agent.py
open_executor(curtain_392)
Robot find: Robot is close to the curtain_392. curtain_392 is opened. 
##############################
From agent.py
exp(food_onion_2026, curtain_392)
Fail to find food_onion_2026 around curtain_392. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients needed for the fish soup.', '2. Cook the fish and other ingredients in a pot to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_for_fish_soup(item: item):
    symbol is_ingredient=exists o: item : ( (id[o] == id[item]) and (id[o] == 2102 or id[o] == 2005 or id[o] == 2047 or id[o] == 2054 or id[o] == 2066 or id[o] == 2068 or id[o] == 2026) )
    return is_ingredient

behavior observe_ingredient(item: item):
    body:
        observe(item, "Check if it is an ingredient for fish soup")

behavior __goal__():
    body:
        foreach item: item:
            if not visited(item):
                observe_ingredient(item)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_bookshelf_137(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_onion,bookshelf_instance)
        else:
            exp(food_onion,bookshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bookshelf_instance]=True
        close[bookshelf_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
def is_ingredient_needed_for_fish_soup(ingredient: item):
    symbol needed = is_food_fish(ingredient) or 
                    is_food_potato(ingredient) or 
                    is_food_carrot(ingredient) or 
                    is_food_salt(ingredient) or 
                    is_oil(ingredient)
    return needed

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food(ingredient) or is_oil(ingredient):
                if not visited(ingredient):
                    observe(ingredient, "Check if it is an ingredient for fish soup")
        bind oil: item where:
            id[oil] == 2005
        achieve_once visited(oil)
vq_7325
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n                    ') at line 5927, column 49.
Expected one of: 
	* OCT_NUMBER
	* ELLIPSIS
	* DO
	* STRING
	* NONE
	* VARNAME
	* PLUS
	* BIN_NUMBER
	* COLON
	* LSQB
	* TRUE
	* LPAR
	* MINUS
	* NOT
	* TILDE
	* LONG_STRING
	* HEX_NUMBER
	* IMAG_NUMBER
	* DEC_NUMBER
	* FLOAT_NUMBER
	* FALSE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_home_office_161(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(food_onion,home_office_instance)
        else:
            exp(food_onion,home_office_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,home_office_instance]=True
        close[home_office_instance,food_onion]=True
    

#goal_representation
 
def is_ingredient_needed_for_fish_soup(ingredient: item):
    symbol needed = exists item: item: (is_food_fish(ingredient) or 
                                        is_food_potato(ingredient) or 
                                        is_food_carrot(ingredient) or 
                                        is_food_salt(ingredient) or 
                                        is_oil(ingredient))
    return needed

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food(ingredient) or is_oil(ingredient):
                if not visited(ingredient):
                    observe(ingredient, "Check if it is an ingredient for fish soup")
        bind oil: item where:
            id[oil] == 2005
        achieve_once visited(oil)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_bed_264(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(food_onion,bed_instance)
        else:
            exp(food_onion,bed_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bed_instance]=True
        close[bed_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_for_fish_soup(item: item):
    # Function to check if an item is an ingredient for fish soup
    return is_food_fish(item) or is_food_potato(item) or is_food_carrot(item) or is_food_salt(item) or is_oil(item)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food_fish(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_potato(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_carrot(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_salt(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_oil(ingredient) and inside(ingredient, table_193):
                observe(ingredient, "Check if it is an ingredient for fish soup")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_140; available variables: [Variable<ingredient: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_glue_2013_around_home_office_161(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(glue,home_office_instance)
        else:
            exp(glue,home_office_instance)
    eff:
        unknown[glue]=False
        close[glue,home_office_instance]=True
        close[home_office_instance,glue]=True
    

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_food_onion_2026_around_bookshelf_137(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_onion,bookshelf_instance)
        else:
            exp(food_onion,bookshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bookshelf_instance]=True
        close[bookshelf_instance,food_onion]=True
    

#goal_representation
 
def is_ingredient_for_fish_soup(item: item):
    # Function to check if an item is an ingredient for fish soup
    return is_food_fish(item) or is_food_potato(item) or is_food_carrot(item) or is_food_salt(item) or is_oil(item)

behavior __goal__():
    body:
        bind fridge_140: item where:
            is_fridge(fridge_140)
        foreach ingredient: item:
            if is_food_fish(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_potato(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_carrot(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_salt(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
        bind table_193: item where:
            is_table(table_193)
        foreach ingredient: item:
            if is_oil(ingredient) and inside(ingredient, table_193):
                observe(ingredient, "Check if it is an ingredient for fish soup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient_for_fish_soup(item: item):
    # Function to check if an item is an ingredient for fish soup
    return is_food_fish(item) or is_food_potato(item) or is_food_carrot(item) or is_food_salt(item) or is_oil(item)

behavior __goal__():
    body:
        bind fridge_140: item where:
            is_fridge(fridge_140)
        foreach ingredient: item:
            if is_food_fish(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_potato(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_carrot(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
            if is_food_salt(ingredient) and inside(ingredient, fridge_140):
                observe(ingredient, "Check if it is an ingredient for fish soup")
                
        bind table_193: item where:
            is_table(table_193)
        foreach ingredient: item:
            if is_oil(ingredient) and inside(ingredient, table_193):
                observe(ingredient, "Check if it is an ingredient for fish soup")

##############################
From agent.py-> find a plan in act()
walk_executor(food_carrot_2047)obs(food_carrot_2047, Check if it is an ingredient for fish soup)walk_executor(food_fish_2054)obs(food_fish_2054, Check if it is an ingredient for fish soup)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is an ingredient for fish soup)walk_executor(food_salt_2068)obs(food_salt_2068, Check if it is an ingredient for fish soup)
##############################
From agent.py
walk_executor(food_carrot_2047)
Robot find: Robot is close to the fridge_140. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(food_carrot_2047, Check if it is an ingredient for fish soup)
Get this information:  food_carrot_2047 is inside dining_room_1. food_carrot_2047 is inside fridge_140. food_carrot_2047 is close to fridge_140. food_carrot_2047 is close to character_219. food_carrot_2047 is DIRTY.
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. 
##############################
From agent.py
obs(food_fish_2054, Check if it is an ingredient for fish soup)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the fridge_140. Robot is close to the food_potato_2066. 
##############################
From agent.py
obs(food_potato_2066, Check if it is an ingredient for fish soup)
Get this information:  food_potato_2066 is inside dining_room_1. food_potato_2066 is inside fridge_140. food_potato_2066 is close to fridge_140. food_potato_2066 is close to character_219. food_potato_2066 is CLEAN.
##############################
From agent.py
walk_executor(food_salt_2068)
Robot find: Robot is close to the fridge_140. Robot is close to the food_salt_2068. 
##############################
From agent.py
obs(food_salt_2068, Check if it is an ingredient for fish soup)
Get this information:  food_salt_2068 is inside dining_room_1. food_salt_2068 is inside fridge_140. food_salt_2068 is close to fridge_140. food_salt_2068 is close to character_219. food_salt_2068 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_curtain_198(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_onion,curtain_instance)
        else:
            exp(food_onion,curtain_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,curtain_instance]=True
        close[curtain_instance,food_onion]=True
    

behavior find_bowl_2095_around_oven_141(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior cook_fish_and_ingredients(pot:item, fish:item, ingredients: list):
    body:
        achieve_once inside(fish, pot)
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, pot)

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        bind ingredients: list where:
            is_food(potato) or is_food(carrot) or is_food(onion) or is_salt(salt)

        cook_fish_and_ingredients(pot, fish, ingredients)
        start_cooking(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5968, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_table_127(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_onion,table_instance)
        else:
            exp(food_onion,table_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,table_instance]=True
        close[table_instance,food_onion]=True
    

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#goal_representation

behavior cook_fish_and_ingredients(pot:item, fish:item, ingredients: list):
    body:
        achieve_once inside(fish, pot)
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, pot)

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        bind potato: item where:
            is_food_potato(potato)
        bind carrot: item where:
            is_food_carrot(carrot)
        bind onion: item where:
            is_food_onion(onion)
        bind salt: item where:
            is_food_salt(salt)
        bind ingredients: list where:
            (ingredient1 in [potato, carrot, onion, salt]) and (ingredient1 is not null)

        cook_fish_and_ingredients(pot, fish, ingredients)
        start_cooking(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5968, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_food_bread_2016_around_oven_141(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_bread,oven_instance)
        else:
            exp(food_bread,oven_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,oven_instance]=True
        close[oven_instance,food_bread]=True
    

behavior find_food_onion_2026_around_home_office_161(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(food_onion,home_office_instance)
        else:
            exp(food_onion,home_office_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,home_office_instance]=True
        close[home_office_instance,food_onion]=True
    

#goal_representation
behavior cook_fish_and_ingredients(pot:item, fish:item, ingredients: list):
    body:
        achieve_once inside(fish, pot)
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, pot)

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        bind potato: item where:
            is_food_potato(potato)
        bind carrot: item where:
            is_food_carrot(carrot)
        bind onion: item where:
            is_food_onion(onion)
        bind salt: item where:
            is_food_salt(salt)
        bind ingredients: list where:
            (potato in ingredients) or (carrot in ingredients) or (onion in ingredients) or (salt in ingredients)
        cook_fish_and_ingredients(pot, fish, ingredients)
        start_cooking(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_table_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_food_onion_2026_around_oven_141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_onion,oven_instance)
        else:
            exp(food_onion,oven_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,oven_instance]=True
        close[oven_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

behavior cook_ingredients(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind potato: item where:
            is_food_potato(potato)
        bind carrot: item where:
            is_food_carrot(carrot)
        bind salt: item where:
            is_food_salt(salt)
        bind onion: item where:
            is_food_onion(onion)
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        
        achieve_once inside(fish, pot)
        achieve_once inside(potato, pot)
        achieve_once inside(carrot, pot)
        achieve_once inside(salt, pot)
        achieve_once inside(onion, pot)

        cook_ingredients(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior cook_ingredients(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind potato: item where:
            is_food_potato(potato)
        bind carrot: item where:
            is_food_carrot(carrot)
        bind salt: item where:
            is_food_salt(salt)
        bind onion: item where:
            is_food_onion(onion)
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        
        achieve_once inside(fish, pot)
        achieve_once inside(potato, pot)
        achieve_once inside(carrot, pot)
        achieve_once inside(salt, pot)
        achieve_once inside(onion, pot)

        cook_ingredients(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(pot_54)putin_executor(food_potato_2066, pot_54)walk_executor(food_carrot_2047)grab_executor(food_carrot_2047)walk_executor(pot_54)putin_executor(food_carrot_2047, pot_54)walk_executor(food_salt_2068)grab_executor(food_salt_2068)walk_executor(pot_54)putin_executor(food_salt_2068, pot_54)walk_executor(oven_141)open_executor(oven_141)exp(food_onion_2026, oven_141)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(pot_54)putin_executor(food_onion_2026, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the food_potato_2066. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the food_potato_2066. Robot is close to the fridge_140. Grabbing food_potato_2066 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_potato_2066. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_fish_2054. 
##############################
From agent.py
putin_executor(food_potato_2066, pot_54)
Robot find: Robot is close to the food_potato_2066. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_fish_2054. pot_54 is close food_potato_2066. food_potato_2066 is inside pot_54. food_potato_2066 is close pot_54. food_potato_2066 released by right hand. 
##############################
From agent.py
walk_executor(food_carrot_2047)
Robot find: Robot is close to the fridge_140. Robot is close to the food_carrot_2047. 
##############################
From agent.py
grab_executor(food_carrot_2047)
Robot find: Robot is close to the fridge_140. Robot is close to the food_carrot_2047. Grabbing food_carrot_2047 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_carrot_2047. Robot is close to the food_potato_2066. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_fish_2054. 
##############################
From agent.py
putin_executor(food_carrot_2047, pot_54)
Robot find: Robot is close to the food_carrot_2047. Robot is close to the food_potato_2066. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_fish_2054. pot_54 is close food_carrot_2047. food_carrot_2047 is inside pot_54. food_carrot_2047 is close pot_54. food_carrot_2047 released by right hand. 
##############################
From agent.py
walk_executor(food_salt_2068)
Robot find: Robot is close to the fridge_140. Robot is close to the food_salt_2068. 
##############################
From agent.py
grab_executor(food_salt_2068)
Robot find: Robot is close to the fridge_140. Robot is close to the food_salt_2068. Grabbing food_salt_2068 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_salt_2068. Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the food_potato_2066. Robot is close to the pot_54. Robot is close to the food_carrot_2047. 
##############################
From agent.py
putin_executor(food_salt_2068, pot_54)
Robot find: Robot is close to the food_salt_2068. Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the food_potato_2066. Robot is close to the pot_54. Robot is close to the food_carrot_2047. food_salt_2068 is inside pot_54. pot_54 is close food_salt_2068. food_salt_2068 is close pot_54. food_salt_2068 released by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, food_onion_2026, dough_2021, tray_142, Robot is close to the oven_141. Robot is close to the food_butter_2018. Robot is close to the food_onion_2026. Robot is close to the dough_2021. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(food_onion_2026, oven_141)
Find food_onion_2026. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_onion_2026)walk_executor(pot_54)putin_executor(food_onion_2026, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_onion_2026)
Robot find: Robot is close to the oven_141. Robot is close to the food_butter_2018. Robot is close to the food_onion_2026. Robot is close to the dough_2021. Robot is close to the tray_142. Grabbing food_onion_2026 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. Robot is close to the food_fish_2054. Robot is close to the food_potato_2066. Robot is close to the food_salt_2068. Robot is close to the pot_54. Robot is close to the food_carrot_2047. 
##############################
From agent.py
putin_executor(food_onion_2026, pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. Robot is close to the food_fish_2054. Robot is close to the food_potato_2066. Robot is close to the food_salt_2068. Robot is close to the pot_54. Robot is close to the food_carrot_2047. pot_54 is close food_onion_2026. food_onion_2026 is close pot_54. food_onion_2026 is inside pot_54. food_onion_2026 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. Robot is close to the food_fish_2054. Robot is close to the food_potato_2066. Robot is close to the food_salt_2068. Robot is close to the pot_54. Robot is close to the food_carrot_2047. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_129)', 'walk_executor(oil_2102)', 'walk_executor(kitchen_counter_129)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(table_193)', 'walk_executor(oil_2005)', 'walk_executor(sink_133)', 'walk_executor(wallshelf_190)', 'walk_executor(nightstand_373)', 'walk_executor(curtain_392)', 'open_executor(curtain_392)', 'walk_executor(food_carrot_2047)', 'walk_executor(food_fish_2054)', 'walk_executor(food_potato_2066)', 'walk_executor(food_salt_2068)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(pot_54)', 'putin_executor(food_potato_2066, pot_54)', 'walk_executor(food_carrot_2047)', 'grab_executor(food_carrot_2047)', 'walk_executor(pot_54)', 'putin_executor(food_carrot_2047, pot_54)', 'walk_executor(food_salt_2068)', 'grab_executor(food_salt_2068)', 'walk_executor(pot_54)', 'putin_executor(food_salt_2068, pot_54)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'grab_executor(food_onion_2026)', 'walk_executor(pot_54)', 'putin_executor(food_onion_2026, pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)']
Time info:
Time consume: 380 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 129
goal generate times: 6
goal correct times: 1
action_num: 51

Task complete rate:
Keystate: k1 - Requires: 25 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
