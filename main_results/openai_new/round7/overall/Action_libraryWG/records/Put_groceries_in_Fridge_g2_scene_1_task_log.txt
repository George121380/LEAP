From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Identify one of the tables in the dining room.', '3. Put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_rag_2025_around_shower_16(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(rag,shower_instance)
        else:
            exp(rag,shower_instance)
    eff:
        unknown[rag]=False
        close[rag,shower_instance]=True
        close[shower_instance,rag]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_114(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_plate_2152_around_table_114(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
            
        foreach table: item:
            if is_table(table) and inside(table, dining_room) and not visited(table):
                observe(table,"Check if this table is in the dining room")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
            
        foreach table: item:
            if is_table(table) and inside(table, dining_room) and not visited(table):
                observe(table,"Check if this table is in the dining room")

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(table_114, Check if this table is in the dining room)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(table_114, Check if this table is in the dining room)
Get this information:  cup_2049 is on table_114. box_2038 is on table_114. clothes_hat_2117 is on table_114. table_114 is inside dining_room_41. milk_2115 is on table_114. cup_2134 is on table_114. table_114 is facing drawing_110. table_114 is facing drawing_111. check_2058 is on table_114. clothes_gloves_2118 is on table_114. table_114 is close to cup_2049. table_114 is close to check_2058. table_114 is close to food_bread_2084. table_114 is close to floor_44. table_114 is close to floor_47. table_114 is close to floor_48. table_114 is close to floor_50. table_114 is close to dry_pasta_2114. table_114 is close to milk_2115. table_114 is close to clothes_hat_2117. table_114 is close to clothes_gloves_2118. table_114 is close to knife_2122. table_114 is close to cup_2132. table_114 is close to cup_2133. table_114 is close to cup_2134. table_114 is close to table_cloth_2005. table_114 is close to food_food_2021. table_114 is close to mat_102. table_114 is close to pillow_103. table_114 is close to pillow_104. table_114 is close to pillow_105. table_114 is close to pillow_106. table_114 is close to bench_113. table_114 is close to bench_115. table_114 is close to box_2038. table_114 is close to character_240. cup_2132 is on table_114. table_114 is on mat_102. table_114 is on floor_47. food_food_2021 is on table_114. knife_2122 is on table_114. cup_2133 is on table_114. table_cloth_2005 is on table_114. food_bread_2084 is on table_114. dry_pasta_2114 is on table_114. table_114 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2075_around_cupboard_118(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(check,cupboard_instance)
        else:
            exp(check,cupboard_instance)
    eff:
        unknown[check]=False
        close[check,cupboard_instance]=True
        close[cupboard_instance,check]=True
    

behavior find_towel_2128_around_shower_16(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_1)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        # Place all selected items on the chosen table
        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_1; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the milk on the table in the dining room. All other items have been placed.
##############################
From agent.py
Human Instruction: You need to put the milk on the table in the dining room. All other items have been placed.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Grab food_fish_2093.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Wash food_fish_2093.
Action 9: Switch off faucet_20.
Action 10: Walk to table_114.
Action 11: Observe around table_114 with the question of Check if this table is in the dining room.
Action 12: Walk to food_turkey_2112.
Action 13: Grab food_turkey_2112.
Action 14: Walk to table_114.
Action 15: Put food_turkey_2112 on table_114.
Action 16: Walk to food_egg_2092.
Action 17: Grab food_egg_2092.
Action 18: Walk to table_114.
Action 19: Put food_egg_2092 on table_114.
Action 20: Put food_fish_2093 on table_114.
Action 21: Walk to food_chicken_2089.
Action 22: Grab food_chicken_2089.
Action 23: Walk to table_114.
Action 24: Put food_chicken_2089 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_# Ensure table is inside a dining room

        bind milk: item where:
            is_milk(milk)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5400, column 9.
Expected one of: 
	* COMMA
	* RPAR
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_chair_194_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#goal_representation

behavior place_milk_on_table(milk: item, table: item, dining_room: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Bind milk
        
        place_on_table(milk, table)
        # Place milk on the table
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Bind milk
        
        place_on_table(milk, table)
        # Place milk on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) # Locate the table, which is determined as inside the dining room
        # Bind the table instance as it has already been identified

        bind milk: item where:
            is_milk(milk)
        # Identify the milk item

        place_on_table(milk, table)
        # Place the milk on the identified table in the dining room where necessary items have been already put
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure the dining room is defined

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Locate the table, which is already in the dining room

        bind milk: item where:
            is_milk(milk)
        # Identify the milk item

        place_on_table(milk, table)
        # Place the milk on the identified table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o: item, table: item):
    body:
        achieve_once on(o, table) # Place the item on the chosen table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, is_dining_room) 
        # A table inside the dining room is chosen

        bind milk: item where:
            is_milk(milk)
        # Bind to the milk instance

        put_on_table(milk, table)
        # Since the instruction states only milk should be handled, only it will be placed on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: is_dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_on_table(o: item, table: item):
    body:
        achieve_once on(o, table) # Place the item on the chosen table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # A table inside the dining room is chosen

        bind milk: item where:
            is_milk(milk)
        # Bind to the milk instance

        put_on_table(milk, table)
        # Since the instruction states only milk should be handled, only it will be placed on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5398, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior put_on_table(o: item, table: item):
    body:
        achieve_once on(o, table) # Place the item on the chosen table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # A table inside the dining room is chosen

        bind milk: item where:
            is_milk(milk)
        # Bind to the milk instance

        put_on_table(milk, table)
        # Since the instruction states only milk should be handled, only it will be placed on the table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior put_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)
        # Place the food item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        put_food_on_table(milk, table)
        # Place the milk on the table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room
        
        put_on_table(milk, table)
        # Put the milk on the table
        
        put_on_table(turkey, table)
        # Put the turkey on the table

        put_on_table(egg, table)
        # Put the egg on the table

        put_on_table(fish, table)
        # Put the fish on the table

        put_on_table(chicken, table)
        # Put the chicken on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room
        
        put_on_table(milk, table)
        # Put the milk on the table
        
        put_on_table(turkey, table)
        # Put the turkey on the table

        put_on_table(egg, table)
        # Put the egg on the table

        put_on_table(fish, table)
        # Put the fish on the table

        put_on_table(chicken, table)
        # Put the chicken on the table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and visited(table)
        
        bind milk: item where:
            is_milk(milk)
        # Assuming milk is the only item not placed yet

        achieve on(milk, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table) # Place the item on the table

def is_empty_table_in_dining_room(table:item):
    # Function to check if the table has only a single item which is milk
    return exists o: item: (is_table(table) and inside(table, dining_room) and is_milk(o) and on(o, table) and id[o] = id[table])

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge

behavior __goal__():
    body:
        bind table: item where:
            # Select the dining room table, that already has the milk set on it
            is_empty_table_in_dining_room(table)
        
        bind fridge: item where:
            is_fridge(fridge)
        
        # Use remaining turkey, egg, fish, chicken
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)

        # Put all items on the table
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)
        
        # Close the fridge
        close_the_fridge(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5451, column 118.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_2068_around_cupboard_118(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table) # Place the item on the table

def is_empty_table_in_dining_room(table:item):
    # Function to check if the table has only a single item which is milk
    return exists o: item: (is_table(table) and inside(table, dining_room) and is_milk(o) and on(o, table) and id[o] == id[table])

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge

behavior __goal__():
    body:
        bind table: item where:
            # Select the dining room table, that already has the milk set on it
            is_empty_table_in_dining_room(table)
        
        bind fridge: item where:
            is_fridge(fridge)
        
        # Use remaining turkey, egg, fish, chicken
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)

        # Put all items on the table
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)
        
        # Close the fridge
        close_the_fridge(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_empty_table_in_dining_room(table:item):
    # Function to check if the table has only milk on it or is empty
    return exists o: item: (is_table(table) and inside(table, dining_room) and (not exists o1: item: (is_milk(o1) or is_food(o1) and on(o1, table))))

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room) and is_empty_table_in_dining_room(table)
            # Select the dining room table
    
        bind fridge: item where:
            is_fridge(fridge)
        
        # Use remaining turkey, egg, fish, chicken
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)

        # Put all items on the table
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)
        
        # Close the fridge
        close_the_fridge(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        put_on_table(milk, table)
        # Since the other items are already on the table, only the milk needs to be placed
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind table: item where:
            is_table(table) and is_dining_room(dining_room) and inside(table, dining_room)
        # Select a table inside the dining room

        put_on_table(milk, table)
        # Since the other items are already on the table, only the milk needs to be placed

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Declare the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        put_on_table(milk, table)
        # Since the other items are already on the table, only the milk needs to be placed

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_food_on_table(table: item):
    # Function to check if there is food on the specified table
    symbol has_food = exists o: item : (is_food(o) and on(o, table))
    return has_food

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and visited(table) and inside(table, dining_room)
        # Bind the identified table that is in the dining room and has been observed

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Bind the milk that is not yet on the table

        if is_dining_room(dining_room) and on(food_turkey_2112, table) and on(food_egg_2092, table) and on(food_fish_2093, table) and on(food_chicken_2089, table):
            # Everything except milk is already on the table
            achieve_once on(milk, table)
        else:
            if not is_dining_room(dining_room):
                # Check if there is a dining room recognized in the scene
                foreach table: item:
                    if is_table(table) and not visited(table):
                        # Check all unvisited tables in search for a dining room table
                        observe(table, "Check if the table is in the dining room")

            foreach item: item:
                # Check for the specific food items that need to be placed on the table in the dining room
                if is_milk(item):
                    achieve_once on(item, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure dining_room variable is defined and bound

        bind table: item where:
            is_table(table) and visited(table) and inside(table, dining_room)
        # Bind the identified table that is in the dining room and has been observed

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Bind the milk that is not yet on the table

        if is_dining_room(dining_room) and on(food_turkey_2112, table) and on(food_egg_2092, table) and on(food_fish_2093, table) and on(food_chicken_2089, table):
            # Everything except milk is already on the table
            achieve_once on(milk, table)
        else:
            if not is_dining_room(dining_room):
                # Check if there is a dining room recognized in the scene
                foreach table: item:
                    if is_table(table) and not visited(table):
                        # Check all unvisited tables in search for a dining room table
                        observe(table, "Check if the table is in the dining room")

            foreach item: item:
                # Check for the specific food items that need to be placed on the table in the dining room
                if is_milk(item):
                    achieve_once on(item, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_remote_control_2124_around_television_281(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and inside(table, dining_room_1)
        # Select a table that is inside the dining room
        
        achieve on(milk, table)
        # Place the milk item on the selected table
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_1; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table that is inside the dining room
        
        achieve on(milk, table)
        # Place the milk item on the selected table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and exists d: item : (is_dining_room(d) and inside(table, d))
        # Select a table that is inside the dining room
        
        achieve on(milk, table)
        # Place the milk item on the selected table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)
        
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        foreach item: item:
            if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not on(item, table):
                place_on_table(item, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)
        
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        foreach item: item:
            if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not on(item, table):
                place_on_table(item, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def item_on_table(item: item, table: item):
    # Function to check if a specified item is on the table
    return on(item, table)

behavior __goal__(table: item):
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)

        # Since human instructions state all items except milk are already placed,
        # focus on placing the milk on the table
        if not item_on_table(milk, table):
            # Only if milk is not on the table, place it there
            achieve_once on(milk, table)

#goal_representation_end

##############################
Error is:
'table'
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

def inside_dining_table(room:item):
    # Determines whether the table is in a dining room
    symbol in_dining_room= exists table: item : (is_table(table) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside_dining_table(table)
            # Selects a table that is inside the dining room

        bind milk: item where:
            is_milk(milk)
            # Selects milk

        bind turkey: item where:
            is_food_turkey(turkey)
            # Selects turkey

        bind egg: item where:
            is_food_egg(egg)
            # Selects egg

        bind fish: item where:
            is_food_fish(fish)
            # Selects fish

        bind chicken: item where:
            is_food_chicken(chicken)
            # Selects chicken

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        place_on_table(milk, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind table: item where:
            is_table(table) and exists dining_room: item : (is_dining_room(dining_room) and inside(table, dining_room))
        
        place_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'dining_room') at line 5400, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind table: item where:
            is_table(table) and exists dining_room: item : (is_dining_room(dining_room) and inside(table, dining_room))
        
        place_on_table(milk, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the milk, turkey, eggs, fish, and chicken on the chosen table in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Temporarily place the item on the specified table in the dining room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        put_on_table(milk, table)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        put_on_table(turkey, table)

        bind eggs: item where:
            is_food_egg(eggs)
        put_on_table(eggs, table)
        
        bind fish: item where:
            is_food_fish(fish)
        put_on_table(fish, table)

        bind chicken: item where:
            is_food_chicken(chicken)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Temporarily place the item on the specified table in the dining room

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Define a dining room if needed

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        put_on_table(milk, table)

        bind turkey: item where:
            is_food_turkey(turkey)
        put_on_table(turkey, table)

        bind eggs: item where:
            is_food_egg(eggs)
        put_on_table(eggs, table)

        bind fish: item where:
            is_food_fish(fish)
        put_on_table(fish, table)

        bind chicken: item where:
            is_food_chicken(chicken)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # The selected table is inside a dining room
        achieve_once on(milk, table)
        # Place milk on the selected table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # The selected table is inside a dining room
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Define the dining_room item
        achieve_once on(milk, table)
        # Place milk on the selected table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # The selected table is inside a dining room
        achieve_once on(milk, table)
        # Place milk on the selected table in the dining room

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        # Bind the milk in the scene
        bind milk: item where:
            is_milk(milk) and close_char(char, milk)
        
        # Bind the chosen table in the dining room
        bind table: item where:
            is_table(table) and visited(table)

        # Place the milk on the chosen table in the dining room
        achieve_once on(milk, table)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind milk item
        
        bind table: item where:
            is_table(table)
        # Bind table to put milk

        put_milk_on_table(milk, table)
        # Put the milk on the table in the dining room

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def food_are_on_table(tbl: item):
    # Check if specified foods are on the table
    symbol all_items_on_table = exists o1: item : (is_milk(o1) and on(o1, tbl)) and
                                 exists o2: item : (is_food_turkey(o2) and on(o2, tbl)) and
                                 exists o3: item : (is_food_egg(o3) and on(o3, tbl)) and
                                 exists o4: item : (is_food_fish(o4) and on(o4, tbl)) and
                                 exists o5: item : (is_food_chicken(o5) and on(o5, tbl))
    return all_items_on_table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) and food_are_on_table(table)
        # No additional actions needed since all items, including milk, are on the dining table already

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n                                 ') at line 5393, column 84.
Expected one of: 
	* FALSE
	* FLOAT_NUMBER
	* COLON
	* DO
	* LONG_STRING
	* DEC_NUMBER
	* BIN_NUMBER
	* PLUS
	* STRING
	* VARNAME
	* TILDE
	* LPAR
	* HEX_NUMBER
	* ELLIPSIS
	* LSQB
	* NONE
	* TRUE
	* NOT
	* MINUS
	* OCT_NUMBER
	* IMAG_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def food_are_on_table(tbl: item):
    # Check if specified foods are on the table
    symbol all_items_on_table = (exists o1: item : (is_milk(o1) and on(o1, tbl)) and
                                 exists o2: item : (is_food_turkey(o2) and on(o2, tbl)) and
                                 exists o3: item : (is_food_egg(o3) and on(o3, tbl)) and
                                 exists o4: item : (is_food_fish(o4) and on(o4, tbl)) and
                                 exists o5: item : (is_food_chicken(o5) and on(o5, tbl)))
    return all_items_on_table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) and food_are_on_table(table)
        # No additional actions needed since all items, including milk, are on the dining table already

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5394, column 41.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def food_are_on_table(tbl: item):
    # Check if specified foods are on the table
    symbol all_items_on_table = (exists o1: item : (is_milk(o1) and on(o1, tbl)) and
                                 exists o2: item : (is_food_turkey(o2) and on(o2, tbl)) and
                                 exists o3: item : (is_food_egg(o3) and on(o3, tbl)) and
                                 exists o4: item : (is_food_fish(o4) and on(o4, tbl)) and
                                 exists o5: item : (is_food_chicken(o5) and on(o5, tbl)))
    return all_items_on_table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) and food_are_on_table(table)
        # No additional actions needed since all items, including milk, are on the dining table already

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)
        # Put item obj on the table

behavior __goal__():
    body:
        # Retrieve and define table instance
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        # Place milk on the table according to the gathered information
        bind milk: item where:
            is_milk(milk)

        put_on_table(milk, table)
        # Place the milk on the chosen table


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)
        # Put item obj on the table

behavior __goal__():
    body:
        # Declare dining_room before use
        bind dining_room: item where:
            is_dining_room(dining_room)

        # Retrieve and define table instance
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        # Place milk on the table according to the gathered information
        bind milk: item where:
            is_milk(milk)

        put_on_table(milk, table)
        # Place the milk on the chosen table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_dining_room(table: item):
    # Function to check if a given table is in the dining room
    symbol is_in_dining_room = exists room: item: (is_dining_room(room) and inside(table, room))
    return is_in_dining_room

behavior place_food_on_table(food: item, table: item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Choose the table in the dining room

        bind milk: item where:
            is_milk(milk)
        place_food_on_table(milk, table)
        # Place milk on the table

        bind food_turkey: item where:
            is_food_turkey(food_turkey)
        place_food_on_table(food_turkey, table)
        # Place turkey on the table

        bind food_egg: item where:
            is_food_egg(food_egg)
        place_food_on_table(food_egg, table)
        # Place eggs on the table

        bind food_fish: item where:
            is_food_fish(food_fish)
        place_food_on_table(food_fish, table)
        # Place fish on the table

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        place_food_on_table(food_chicken, table)
        # Place chicken on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Bind a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the egg item
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        
        put_item_on_table(milk, table)
        # Put the milk on the table
        put_item_on_table(turkey, table)
        # Put the turkey on the table
        put_item_on_table(eggs, table)
        # Put the eggs on the table
        put_item_on_table(fish, table)
        # Put the fish on the table
        put_item_on_table(chicken, table)
        # Put the chicken on the table
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) 

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and exists dining_room: item : (is_dining_room(dining_room) and inside(table, dining_room))
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        put_item_on_table(milk, table)
        put_item_on_table(turkey, table)
        put_item_on_table(eggs, table)
        put_item_on_table(fish, table)
        put_item_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'dining_room') at line 5398, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) 

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and exists dining_room: item : (is_dining_room(dining_room) and inside(table, dining_room))
        
        bind milk: item where:
            is_milk(milk)
        
        put_item_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2071_around_milk_2115(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind milk_instance:item where:
            is_milk(milk_instance) and id[milk_instance]==2115
        achieve close_char(char,milk_instance)
        if can_open(milk_instance):
            achieve_once open(milk_instance)
            exp(check,milk_instance)
        else:
            exp(check,milk_instance)
    eff:
        unknown[check]=False
        close[check,milk_instance]=True
        close[milk_instance,check]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk:item, table:item):
    # Define the behavior to place milk on the table
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior place_milk_on_table(milk:item, table:item):
    # Define the behavior to place milk on the table
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        place_milk_on_table(milk, table)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(table_114)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)']
Time info:
Time consume: 775 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 121
goal generate times: 27
goal correct times: 11
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
