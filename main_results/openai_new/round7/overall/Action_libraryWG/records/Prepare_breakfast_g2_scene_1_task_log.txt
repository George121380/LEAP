From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan suitable for scrambling eggs.', '2. Crack the eggs into the frying pan and scramble them until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_butter_2007_around_fridge_126(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_fryingpan(pan:item):
    # Function to check if a frying pan is suitable for scrambling eggs
    return is_fryingpan(pan) and clean(pan)

behavior __goal__():
    body:
        if exists pan: item : is_suitable_fryingpan(pan):
            # If a suitable frying pan is already known based on available information, bind it
            bind pan: item where:
                is_suitable_fryingpan(pan)
            achieve close_char(char, pan)

        else:
            # If no suitable frying pan is found in known information, inspect all unvisited frying pans
            foreach pan: item:
                if is_fryingpan(pan) and not visited(pan):
                    observe(pan, "Determine if the frying pan is suitable for scrambling eggs")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_suitable_fryingpan(pan:item):
    # Function to check if a frying pan is suitable for scrambling eggs
    return is_fryingpan(pan) and clean(pan)

behavior __goal__():
    body:
        if exists pan: item : is_suitable_fryingpan(pan):
            # If a suitable frying pan is already known based on available information, bind it
            bind pan: item where:
                is_suitable_fryingpan(pan)
            achieve close_char(char, pan)

        else:
            # If no suitable frying pan is found in known information, inspect all unvisited frying pans
            foreach pan: item:
                if is_fryingpan(pan) and not visited(pan):
                    observe(pan, "Determine if the frying pan is suitable for scrambling eggs")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, Determine if the frying pan is suitable for scrambling eggs)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to determine if fryingpan_2154 is suitable for scrambling eggs by checking if it is clean. Do this to complete the current sub-task.
##############################
From agent.py
Human Instruction: The robot needs to determine if fryingpan_2154 is suitable for scrambling eggs by checking if it is clean. Do this to complete the current sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for fryingpan_2154 around kitchen_counter_122.
Action 3: Walk to fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_towel_2128_around_door_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==38
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(towel,door_instance)
        else:
            exp(towel,door_instance)
    eff:
        unknown[towel]=False
        close[towel,door_instance]=True
        close[door_instance,towel]=True
    

behavior find_rag_2025_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_clean(fryingpan:item):
    # Function to check if the specified frying pan is clean
    symbol is_clean= clean(fryingpan)
    return is_clean

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2154
        # Select frying pan with ID 2154

        if is_fryingpan_clean(fryingpan):
            # If the frying pan is clean, it is suitable for scrambling eggs
            achieve visited(fryingpan)
            # Mark the frying pan as visited

        else:
            # If the frying pan is not clean, inspect it to determine if it can be cleaned
            observe(fryingpan,"Check if the frying pan is clean and suitable for use")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_clean(fryingpan:item):
    # Function to check if the specified frying pan is clean
    symbol is_clean= clean(fryingpan)
    return is_clean

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2154
        # Select frying pan with ID 2154

        if is_fryingpan_clean(fryingpan):
            # If the frying pan is clean, it is suitable for scrambling eggs
            achieve visited(fryingpan)
            # Mark the frying pan as visited

        else:
            # If the frying pan is not clean, inspect it to determine if it can be cleaned
            observe(fryingpan,"Check if the frying pan is clean and suitable for use")

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, look around this place)
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_rag_2052_around_cupboard_117(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_fryingpan(fryingpan:item):
    # Function to check if the frying pan is suitable for scrambling eggs based on its cleanliness
    symbol is_suitable=not dirty(fryingpan)
    return is_suitable

behavior crack_and_scramble_eggs(fryingpan:item):
    body:
        achieve_once inside(food_egg, fryingpan) 
        # Add the egg into the frying pan
        achieve_once on(fryingpan, stove) 
        # Put the frying pan on the stove
        achieve is_on(stove) 
        # Stove is turned on indicating the cooking process

behavior complete_subtask(goal):
    body:
        if exists fryingpan: item : (is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)) :
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)
            # Select the frying pan suitable for scrambling eggs
            achieve close_char(char, fryingpan) 
            # Move the character closer to the frying pan

            bind stove: item where:
                is_stove(stove)
            bind food_egg: item where:
                is_food_egg(food_egg) 

            crack_and_scramble_eggs(fryingpan)

        else:
            # If no suitable frying pan is found, initiate exploration
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if fryingpan is clean for scrambling eggs")

behavior __goal__():
    body:
        complete_subtask(__goal__) 

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('RPAR', ')') at line 5303, column 31.
Expected one of: 
	* COLON
Previous tokens: [Token('VARNAME', 'goal')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_towel_2128_around_shower_16(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_rag_2025_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
def is_suitable_fryingpan(fryingpan:item):
    # Function to check if the frying pan is suitable for scrambling eggs based on its cleanliness
    symbol is_suitable=not dirty(fryingpan)
    return is_suitable

behavior crack_and_scramble_eggs(fryingpan:item):
    body:
        achieve_once inside(food_egg, fryingpan) 
        # Add the egg into the frying pan
        achieve_once on(fryingpan, stove) 
        # Put the frying pan on the stove
        achieve is_on(stove) 
        # Stove is turned on indicating the cooking process

behavior complete_subtask(goal):
    body:
        if exists fryingpan: item : (is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)
            # Select the frying pan suitable for scrambling eggs
            achieve close_char(char, fryingpan) 
            # Move the character closer to the frying pan

            bind stove: item where:
                is_stove(stove)
            bind food_egg: item where:
                is_food_egg(food_egg) 

            crack_and_scramble_eggs(fryingpan)

        else:
            # If no suitable frying pan is found, initiate exploration
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if fryingpan is clean for scrambling eggs")

behavior __goal__():
    body:
        complete_subtask(__goal__)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('RPAR', ')') at line 5285, column 31.
Expected one of: 
	* COLON
Previous tokens: [Token('VARNAME', 'goal')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_food_apple_2081_around_fridge_126(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#goal_representation
 
def is_suitable_fryingpan(fryingpan:item):
    # Function to check if the frying pan is suitable for scrambling eggs based on its cleanliness
    symbol is_suitable=not dirty(fryingpan)
    return is_suitable

behavior crack_and_scramble_eggs(fryingpan:item, stove:item, food_egg:item):
    body:
        achieve_once inside(food_egg, fryingpan) 
        # Add the egg into the frying pan
        achieve_once on(fryingpan, stove) 
        # Put the frying pan on the stove
        achieve is_on(stove) 
        # Stove is turned on indicating the cooking process

behavior complete_subtask(goal):
    body:
        if exists fryingpan: item : (is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and is_suitable_fryingpan(fryingpan)
            # Select the frying pan suitable for scrambling eggs
            achieve close_char(char, fryingpan) 
            # Move the character closer to the frying pan

            bind stove: item where:
                is_stove(stove)
            bind food_egg: item where:
                is_food_egg(food_egg)
                
            crack_and_scramble_eggs(fryingpan, stove, food_egg)

        else:
            # If no suitable frying pan is found, initiate exploration
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if fryingpan is clean for scrambling eggs")

behavior __goal__():
    body:
        complete_subtask(__goal__)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_pan_for_scrambling(eggs: item, pan: item):
    # Function to check if a pan is suitable for scrambling eggs
    symbol is_suitable = is_fryingpan(pan) and clean(pan)
    return is_suitable

behavior scramble_eggs(eggs: item, pan: item):
    body:
        achieve_once inside(eggs, pan)
        # Crack the eggs into the frying pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and clean(pan)
        # Select a clean frying pan suitable for scrambling

        bind eggs: item where:
            is_food_egg(eggs)

        scramble_eggs(eggs, pan)
        # Crack the eggs into the frying pan and scramble them

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior crack_and_scramble_eggs_in_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)
        # Crack the eggs into the pan

behavior cook_eggs(pan:item):
    body:
        achieve_once is_on(pan)
        # Assume that turning the pan on means heating it, so this indicates cooking the eggs until done

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and clean(pan)
        # Select a clean frying pan

        foreach eggs: item:
            if is_food_egg(eggs):
                crack_and_scramble_eggs_in_pan(eggs, pan)

        # After cracking eggs into the pan, cook it
        cook_eggs(pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. crack the eggs into the frying pan and scramble them until cooked." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the frying pan on the stove and turn on the stove.', '2. Add oil to the pan and then add the egg to the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def fryingpan_is_clean(fryingpan: item):
    symbol is_clean_pan = not dirty(fryingpan)
    return is_clean_pan

behavior place_on_stove_and_turn_on(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select fryingpan with ID 2154
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if not visited(fryingpan):
            observe(fryingpan, "Check if it is clean")
        if fryingpan_is_clean(fryingpan):
            place_on_stove_and_turn_on(fryingpan, stove)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def fryingpan_is_clean(fryingpan: item):
    symbol is_clean_pan = not dirty(fryingpan)
    return is_clean_pan

behavior place_on_stove_and_turn_on(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select fryingpan with ID 2154
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if not visited(fryingpan):
            observe(fryingpan, "Check if it is clean")
        if fryingpan_is_clean(fryingpan):
            place_on_stove_and_turn_on(fryingpan, stove)


##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Check if it is clean)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
obs(fryingpan_2154, Check if it is clean)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior add_egg_to_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

def is_suitable_pan_for_scrambling(pan:item):
    symbol suitable_pan = not dirty(pan)
    return suitable_pan

behavior ensure_pan_is_suitable(pan:item):
    body:
        if not visited(pan):
            observe(pan, "Check if it is clean")

        if not is_suitable_pan_for_scrambling(pan):
            scrub(pan)
            rinse(pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Ensure the pan is clean and suitable for scrambling eggs
        ensure_pan_is_suitable(fryingpan)

        bind oil: item where:
            is_oil(oil)
        # Add oil to the pan
        add_oil_to_pan(oil, fryingpan)

        bind egg: item where:
            is_food_egg(egg)
        # Add egg to the pan
        add_egg_to_pan(egg, fryingpan)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#goal_representation
 
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior add_egg_to_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

def is_suitable_pan_for_scrambling(pan:item):
    symbol suitable_pan = not dirty(pan)
    return suitable_pan

behavior ensure_pan_is_suitable(pan:item):
    body:
        if not visited(pan):
            observe(pan, "Check if it is clean")

        if not is_suitable_pan_for_scrambling(pan):
            scrub(pan)
            rinse(pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and on(fryingpan, stove)
        # Ensure the pan is clean and suitable for scrambling eggs
        ensure_pan_is_suitable(fryingpan)

        bind oil: item where:
            is_oil(oil)
        # Add oil to the pan
        add_oil_to_pan(oil, fryingpan)

        bind egg: item where:
            is_food_egg(egg)
        # Add egg to the pan
        add_egg_to_pan(egg, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior check_and_add_oil(oil:item, pan:item):
    body:
        if not inside(oil, pan):
            achieve_once inside(oil, pan)
            
behavior add_egg_to_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

def is_clean_pan(pan:item):
    symbol clean= not dirty(pan)
    return clean

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2154
        # Select pan with ID 2154

        if not visited(pan):
            # If the pan hasnt been checked yet
            observe(pan, "Check if it is clean")
            # Check if the pan is clean

        if is_clean_pan(pan):
            bind stove: item where:
                is_stove(stove) and id[stove] == 2135
            # Ensure stove ID 2135 is selected
            
            bind oil: item where:
                is_oil(oil)
            # Bind the oil instance

            check_and_add_oil(oil, pan)
            # If the oil is not in the pan, add it

            bind egg: item where:
                is_food_egg(egg)
            # Bind the egg instance

            add_egg_to_pan(egg, pan)
            # Add the egg to the pan if it is clean
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior check_and_add_oil(oil:item, pan:item):
    body:
        if not inside(oil, pan):
            achieve_once inside(oil, pan)
            
behavior add_egg_to_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

def is_clean_pan(pan:item):
    symbol clean= not dirty(pan)
    return clean

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2154
        # Select pan with ID 2154

        if not visited(pan):
            # If the pan hasnt been checked yet
            observe(pan, "Check if it is clean")
            # Check if the pan is clean

        if is_clean_pan(pan):
            bind stove: item where:
                is_stove(stove) and id[stove] == 2135
            # Ensure stove ID 2135 is selected
            
            bind oil: item where:
                is_oil(oil)
            # Bind the oil instance

            check_and_add_oil(oil, pan)
            # If the oil is not in the pan, add it

            bind egg: item where:
                is_food_egg(egg)
            # Bind the egg instance

            add_egg_to_pan(egg, pan)
            # Add the egg to the pan if it is clean
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Check if it is clean)walk_executor(cupboard_118)open_executor(cupboard_118)exp(oil_2149, cupboard_118)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
obs(fryingpan_2154, Check if it is clean)
Get this information:  fryingpan_2154 is close to character_240. fryingpan_2154 is close to stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(oil_2149, cupboard_118)
Fail to find oil_2149 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(oil_2149, fridge_126)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(oil_2149, fridge_126)
Fail to find oil_2149 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(oil_2149, cupboard_117)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(oil_2149, cupboard_117)
Fail to find oil_2149 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_123)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)']
Time info:
Time consume: 284 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 114
goal generate times: 8
goal correct times: 0
action_num: 21

Task complete rate:
1
Scene_id: 1
##############################
