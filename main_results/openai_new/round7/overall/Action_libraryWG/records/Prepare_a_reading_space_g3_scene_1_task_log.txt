From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and place it on the coffee table in the home office.  ', '2. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(item: item):
    # Function to check if an item is in the home office
    symbol is_in_home_office = exists room: item : (is_home_office(room) and inside(item, room))
    return is_in_home_office

def is_on_coffee_table(item: item):
    # Function to check if an item is on the coffee table in the home office
    symbol is_on_coffee_table = exists table: item : (is_coffee_table(table) and on(item, table))
    return is_on_coffee_table

behavior put_on_coffee_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the coffee table

behavior __goal__():
    body:
        # Finding a book and putting it on the coffee table in the home office
        foreach b: item:
            if is_book(b) and not visited(b):
                observe(b, "Check if the book is in the home office and on the coffee table")
                
        if exists b: item : (is_book(b) and is_in_home_office(b)):
            bind book: item where:
                is_book(book) and is_in_home_office(book)
            if not is_on_coffee_table(book):
                bind coffee_table: item where:
                    is_coffee_table(coffee_table) and is_in_home_office(coffee_table)
                put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_home_office(item: item):
    # Function to check if an item is in the home office
    symbol is_in_home_office = exists room: item : (is_home_office(room) and inside(item, room))
    return is_in_home_office

def is_on_coffee_table(item: item):
    # Function to check if an item is on the coffee table in the home office
    symbol is_on_coffee_table = exists table: item : (is_coffee_table(table) and on(item, table))
    return is_on_coffee_table

behavior put_on_coffee_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the coffee table

behavior __goal__():
    body:
        # Finding a book and putting it on the coffee table in the home office
        foreach b: item:
            if is_book(b) and not visited(b):
                observe(b, "Check if the book is in the home office and on the coffee table")
                
        if exists b: item : (is_book(b) and is_in_home_office(b)):
            bind book: item where:
                is_book(book) and is_in_home_office(book)
            if not is_on_coffee_table(book):
                bind coffee_table: item where:
                    is_coffee_table(coffee_table) and is_in_home_office(coffee_table)
                put_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(book_2136, bookshelf_275)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check if the book is in the home office and on the coffee table)walk_executor(bookshelf_275)exp(book_2137, bookshelf_275)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check if the book is in the home office and on the coffee table)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
exp(book_2136, bookshelf_275)
Fail to find book_2136 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check if the book is in the home office and on the coffee table)walk_executor(bookshelf_124)exp(book_2137, bookshelf_124)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check if the book is in the home office and on the coffee table)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check if the book is in the home office and on the coffee table)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check if the book is in the home office and on the coffee table)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
open_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. book_2136 is opened. 
##############################
From agent.py
obs(book_2136, Check if the book is in the home office and on the coffee table)
Get this information:  book_2136 is on bookshelf_124. book_2136 is inside dining_room_41. book_2136 is close to bookshelf_124. book_2136 is close to character_240. book_2136 is OPEN.
##############################
From agent.py
walk_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. 
##############################
From agent.py
open_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. book_2137 is opened. 
##############################
From agent.py
obs(book_2137, Check if the book is in the home office and on the coffee table)
Get this information:  book_2137 is inside dining_room_41. book_2137 is close to bookshelf_124. book_2137 is close to character_240. book_2137 is on bookshelf_124. book_2137 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find and place book_2136 on the coffee table in the home office. Currently, you have found book_2136 on bookshelf_124 inside dining_room_41, but you have not moved it to the coffee table in the home office yet.
##############################
From agent.py
Human Instruction: You need to find and place book_2136 on the coffee table in the home office. Currently, you have found book_2136 on bookshelf_124 inside dining_room_41, but you have not moved it to the coffee table in the home office yet.

The actions you have taken:
Action 1: Walk to bookshelf_275.
Action 2: look for book_2136 around bookshelf_275.
Action 3: Walk to bookshelf_124.
Action 4: Open bookshelf_124.
Action 5: look for book_2136 around bookshelf_124.
Action 6: Walk to book_2136.
Action 7: Open book_2136.
Action 8: Observe around book_2136 with the question of Check if the book is in the home office and on the coffee table.
Action 9: Walk to book_2137.
Action 10: Open book_2137.
Action 11: Observe around book_2137 with the question of Check if the book is in the home office and on the coffee table.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        bind table: item where:
            is_table(table) and id[table] == 270
        # The book 2136 and table 270 have been identified in previous actions
        place_on_coffee_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        bind table: item where:
            is_table(table) and id[table] == 270
        # The book 2136 and table 270 have been identified in previous actions
        place_on_coffee_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place book_2136 on the coffee table in the home office, as currently, it has been placed on table_270, which has not been confirmed to be the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to place book_2136 on the coffee table in the home office, as currently, it has been placed on table_270, which has not been confirmed to be the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_275.
Action 2: look for book_2136 around bookshelf_275.
Action 3: Walk to bookshelf_124.
Action 4: Open bookshelf_124.
Action 5: look for book_2136 around bookshelf_124.
Action 6: Walk to book_2136.
Action 7: Open book_2136.
Action 8: Observe around book_2136 with the question of Check if the book is in the home office and on the coffee table.
Action 9: Walk to book_2137.
Action 10: Open book_2137.
Action 11: Observe around book_2137 with the question of Check if the book is in the home office and on the coffee table.
Action 12: Walk to book_2136.
Action 13: Grab book_2136.
Action 14: Walk to table_270.
Action 15: Put book_2136 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_apple_2081_around_fridge_126(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)

def is_home_office_table(table:item):
    symbol is_home_office_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office_table

behavior __goal__():
    body:
        bind book_2136: item where:
            is_book(book_2136) and visited(book_2136)
        # Select book_2136 that has been visited

        bind table_270: item where:
            is_table(table_270) and is_home_office_table(table_270)
        # Select a table that is in the home office

        move_book_to_table(book_2136, table_270)
        # Move the book to the specified table in the home office
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_table(t: item):
    symbol is_table_in_home_office = exists o: item : (is_home_office(o) and inside(t, o))
    return is_table_in_home_office

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        # Find book with ID 2136

        bind table: item where:
            is_table(table) and is_home_office_table(table) and surfaces(table)
        # Find a coffee table in the home office

        place_book_on_coffee_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_in_home_office(table:item):
    symbol within_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return within_home_office

behavior place_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2136
        # Identify book_2136
        
        if exists table: item : (is_table(table) and is_in_home_office(table)):
            # If there is a table in the home office, place the book on it
            bind table: item where:
                is_table(table) and is_in_home_office(table)
            place_on_table(book, table)

        else: 
            # If no table found, inspect all potential tables to find one in the home office
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check if the table is in the home office")


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the book and place it on the coffee table in the home office.  " ?
Answer: Find the book on the bookshelf and place it on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(x: item):
    symbol is_in_home_office = exists room: item : (is_home_office(room) and inside(x, room))
    return is_in_home_office

def is_on_coffee_table(x: item):
    bind coffee_table: item where:
        is_table(coffee_table) and surfaces(coffee_table) and is_in_home_office(coffee_table)
    symbol is_on = on(x, coffee_table)
    return is_on

behavior place_on_coffee_table(book: item):
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and is_in_home_office(coffee_table)
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136

        if not (is_on_coffee_table(book) and is_in_home_office(book)):
            if not is_in_home_office(book):
                observe(book, "Check if the book is in home office")
            else:
                if not is_on_coffee_table(book):
                    place_on_coffee_table(book)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statement bind:
  CSList(coffee_table: item)
  and(
    is_table(V::coffee_table),
    surfaces(V::coffee_table),
    is_in_home_office(V::coffee_table)
  ) are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_196(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_box_2038_around_basket_for_clothes_2078(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(box,basket_for_clothes_instance)
        else:
            exp(box,basket_for_clothes_instance)
    eff:
        unknown[box]=False
        close[box,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,box]=True
    

#goal_representation
 
def is_in_home_office(x: item):
    symbol is_in_home_office = exists room: item : (is_home_office(room) and inside(x, room))
    return is_in_home_office

def is_on_coffee_table(x: item, coffee_table: item):
    return on(x, coffee_table) and is_table(coffee_table) and is_in_home_office(coffee_table)

behavior place_on_coffee_table(book: item):
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and is_in_home_office(coffee_table)
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        
        if not (is_on_coffee_table(book, table_270) and is_in_home_office(book)):
            if not is_in_home_office(book):
                observe(book, "Check if the book is in home office")
            else:
                if not is_on_coffee_table(book, table_270):
                    place_on_coffee_table(book)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_270; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_196(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def is_in_home_office(x: item):
    symbol is_in_home_office = exists room: item : (is_home_office(room) and inside(x, room))
    return is_in_home_office

def is_on_coffee_table(x: item, coffee_table: item):
    return on(x, coffee_table) and is_table(coffee_table) and is_in_home_office(coffee_table)

behavior place_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136

        if not (is_on_coffee_table(book, table_270) and is_in_home_office(book)):
            if not is_in_home_office(book):
                observe(book, "Check if the book is in home office")
            else:
                if not is_on_coffee_table(book, table_270):
                    bind coffee_table: item where:
                        is_table(coffee_table) and surfaces(coffee_table) and is_in_home_office(coffee_table)
                    place_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_196(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_coffee_table(book: item, table: item):
    # Function to check if the book is on the specified coffee table
    return on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Retrieve the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Retrieve the coffee table in the home office

        bind book: item where:
            is_book(book) and not is_book_on_coffee_table(book, coffee_table)
        # Retrieve book_2136, ensuring it is not already on the coffee table

        if not visited(book):
            # If the book has not been visited, observe it to gather its current location
            observe(book, "Check if the book is in the home office and on the coffee table")

        if not on(book, coffee_table):
            # If the book is not on the coffee table, place it there
            achieve_once on(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_book_on_coffee_table(book: item, table: item):
    # Function to check if the book is on the specified coffee table
    return on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Retrieve the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Retrieve the coffee table in the home office

        bind book: item where:
            is_book(book) and not is_book_on_coffee_table(book, coffee_table)
        # Retrieve book_2136, ensuring it is not already on the coffee table

        if not visited(book):
            # If the book has not been visited, observe it to gather its current location
            observe(book, "Check if the book is in the home office and on the coffee table")

        if not on(book, coffee_table):
            # If the book is not on the coffee table, place it there
            achieve_once on(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2137)obs(book_2137, Check if the book is in the home office and on the coffee table)grab_executor(book_2137)walk_executor(table_270)put_executor(book_2137, table_270)
##############################
From agent.py
walk_executor(book_2137)
Robot find: Robot is close to the book_2137. Robot is close to the bookshelf_124. 
##############################
From agent.py
obs(book_2137, Check if the book is in the home office and on the coffee table)
Get this information:  book_2137 is inside dining_room_41. book_2137 is close to bookshelf_124. book_2137 is close to character_240. book_2137 is on bookshelf_124. book_2137 is OPEN.
##############################
From agent.py
grab_executor(book_2137)
Robot find: Robot is close to the book_2137. Robot is close to the bookshelf_124. Grabbing book_2137 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2137, table_270)
Robot find: Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. book_2137 is close table_270. book_2137 is on table_270. table_270 is close book_2137. book_2137 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place book_2136 specifically on the coffee table in the home office, as its current location, table_270, has not yet been confirmed as the coffee table in the home office.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window(window:item, office:item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window, home_office)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_window(window:item, office:item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window, home_office)

##############################
From agent.py-> find a plan in act()
walk_executor(window_310)open_executor(window_310)
##############################
From agent.py
walk_executor(window_310)
Robot find: Robot is close to the window_310. 
##############################
From agent.py
open_executor(window_310)
Robot find: Robot is close to the window_310. window_310 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(bookshelf_275)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(book_2136)', 'open_executor(book_2136)', 'walk_executor(book_2137)', 'open_executor(book_2137)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'walk_executor(book_2137)', 'grab_executor(book_2137)', 'walk_executor(table_270)', 'put_executor(book_2137, table_270)', 'walk_executor(window_310)', 'open_executor(window_310)']
Time info:
Time consume: 254 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 50
goal generate times: 8
goal correct times: 0
action_num: 17

Task complete rate:
1
Scene_id: 1
##############################
