From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.  ', '2. Store the pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve inside(vegetables, pot) # Put the vegetables inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling

def has_vegetables_inside(pot:item):
    # Function to check if there are vegetables inside the pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        foreach o: item:
            # Check if vegetables are inside the pot
            if is_food_vegetable(o) and not has_vegetables_inside(pot):
                achieve_once inside(o, pot)

        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: vegetables; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve inside(vegetables, pot) # Put the vegetables inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling

def has_vegetables_inside(pot:item):
    # Function to check if there are vegetables inside the pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        foreach o: item:
            # Check if vegetables are inside the pot
            if is_food_vegetable(o) and not has_vegetables_inside(pot):
                achieve_once inside(o, pot)

        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve inside(vegetables, pot) # Put the vegetables inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling

def has_vegetables_inside(pot:item):
    # Function to check if there are vegetables inside the pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        foreach o: item:
            # Check if vegetables are inside the pot
            if is_food_vegetable(o) and not has_vegetables_inside(pot):
                achieve_once inside(o, pot)

        boil_vegetables(pot, stove, vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(pot_54, kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(pot_54, kitchen_counter_128)
Fail to find pot_54 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_54, stove_2090)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_54, stove_2090)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_131)
Fail to find food_vegetable_2072 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_vegetable_2072, cupboard_130)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_130)
Fail to find food_vegetable_2072 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_132)
Fail to find food_vegetable_2072 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_186)exp(food_vegetable_2072, tvstand_186)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(tvstand_186)
Robot find: mat_201, cd_2100, Robot is close to the tvstand_186. 
##############################
From agent.py
exp(food_vegetable_2072, tvstand_186)
Fail to find food_vegetable_2072 around tvstand_186. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in the pot.  ', '2. Store the pot with boiled vegetables in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_bowl_2095_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot(stove:item):
    # Function to check if there is a pot on the specified stove
    symbol has_pot=exists o: item: (is_pot(o) and on(o, stove))
    return has_pot

def has_vegetables(pot:item):
    # Function to check if there are vegetables inside the specified pot
    symbol has_vegetables=exists o: item: (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot) # Ensure the pot is filled with water

behavior heat_pot(stove:item, pot:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior add_vegetables_to_pot(pot:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_pot(stove):
            bind pot: item where:
                is_pot(pot) and not on(pot, stove)
            # Find a pot not on the stove
        else:
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            # Use the pot already on the stove

        if not has_water(pot):
            fill_pot_with_water(pot)

        if not has_vegetables(pot):
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            add_vegetables_to_pot(pot, vegetable)

        heat_pot(stove, pot)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#goal_representation
 
def has_pot(stove:item):
    # Function to check if there is a pot on the specified stove
    symbol has_pot=exists o: item: (is_pot(o) and on(o, stove))
    return has_pot

def has_vegetables(pot:item):
    # Function to check if there are vegetables inside the specified pot
    symbol has_vegetables=exists o: item: (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot) # Ensure the pot is filled with water

behavior heat_pot(stove:item, pot:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior add_vegetables_to_pot(pot:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_pot(stove):
            bind pot: item where:
                is_pot(pot) and not on(pot, stove)
            # Find a pot not on the stove
        else:
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            # Use the pot already on the stove

        if not has_water(pot):
            fill_pot_with_water(pot)

        if not has_vegetables(pot):
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            add_vegetables_to_pot(pot, vegetable)

        heat_pot(stove, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#goal_representation
 
def has_pot(stove:item):
    # Function to check if there is a pot on the specified stove
    symbol has_pot=exists o: item: (is_pot(o) and on(o, stove))
    return has_pot

def has_vegetables(pot:item):
    # Function to check if there are vegetables inside the specified pot
    symbol has_vegetables=exists o: item: (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot) # Ensure the pot is filled with water

behavior heat_pot(stove:item, pot:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior add_vegetables_to_pot(pot:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_pot(stove):
            bind pot: item where:
                is_pot(pot) and not on(pot, stove)
            # Find a pot not on the stove
        else:
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            # Use the pot already on the stove

        if not has_water(pot):
            fill_pot_with_water(pot)

        if not has_vegetables(pot):
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            add_vegetables_to_pot(pot, vegetable)

        heat_pot(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_vegetables(pot:item):
    # Function to check if there are vegetables inside a specified pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables_in_pot(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Bind the stove for boiling
        achieve on(pot, stove)
        # Place pot on the stove
        achieve plugged(stove)
        # Plug the stove in
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not pot_has_vegetables(pot)
        # Select a pot without vegetables inside
        
        foreach o: item:
            if is_food_vegetable(o) and not inside(o, pot):
                achieve_once inside(o, pot)
                # Add each vegetable into the pot
        
        boil_vegetables_in_pot(pot)
        # Boil the vegetables in the pot

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_oil_2005_around_fridge_140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables_in_pot(pot:item, stove:item, faucet:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        fill_pot_with_water(pot, faucet)
        boil_vegetables_in_pot(pot, stove, faucet, vegetable)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables_in_pot(pot:item, stove:item, faucet:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        fill_pot_with_water(pot, faucet)
        boil_vegetables_in_pot(pot, stove, faucet, vegetable)
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before the vegetables can be boiled. After putting the vegetables in the pot and placing the pot on the stove, ensure the pot has water before switching on the stove to boil the vegetables.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water before the vegetables can be boiled. After putting the vegetables in the pot and placing the pot on the stove, ensure the pot has water before switching on the stove to boil the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_54 around stove_2090.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for food_vegetable_2072 around cupboard_131.
Action 9: Walk to cupboard_130.
Action 10: look for food_vegetable_2072 around cupboard_130.
Action 11: Walk to kitchen_counter_132.
Action 12: look for food_vegetable_2072 around kitchen_counter_132.
Action 13: Walk to tvstand_186.
Action 14: look for food_vegetable_2072 around tvstand_186.
Action 15: Walk to pot_54.
Action 16: Open pot_54.
Action 17: Grab pot_54.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to fridge_140.
Action 21: Switch off fridge_140.
Action 22: Open fridge_140.
Action 23: look for food_vegetable_2072 around fridge_140.
Action 24: Walk to faucet_308.
Action 25: Switch off faucet_308.
Action 26: Walk to food_vegetable_2072.
Action 27: Grab food_vegetable_2072.
Action 28: Walk to pot_54.
Action 29: Put food_vegetable_2072 into pot_54.
Action 30: Walk to stove_2090.
Action 31: Put pot_54 on stove_2090.
Action 32: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_desk_375(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(tape,desk_instance)
        else:
            exp(tape,desk_instance)
    eff:
        unknown[tape]=False
        close[tape,desk_instance]=True
        close[desk_instance,tape]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(faucet:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Fill the pot with water

        achieve_once inside(food_vegetable_2072, pot) # Put the vegetables into the pot

        achieve on(pot, stove) # Place the pot on the stove

        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)

        bind stove: item where:
            is_stove(stove)
        
        boil_vegetables_in_pot(faucet, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2072; available variables: [Variable<faucet: item>, Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_desk_375(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(tape,desk_instance)
        else:
            exp(tape,desk_instance)
    eff:
        unknown[tape]=False
        close[tape,desk_instance]=True
        close[desk_instance,tape]=True
    

behavior find_stamp_2031_around_bathroom_cabinet_305(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(stamp,bathroom_cabinet_instance)
        else:
            exp(stamp,bathroom_cabinet_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,stamp]=True
    

#goal_representation
 
behavior boil_vegetables_in_pot(faucet:item, pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Fill the pot with water

        achieve_once inside(vegetables, pot) # Put the vegetables into the pot

        achieve on(pot, stove) # Place the pot on the stove

        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)

        bind stove: item where:
            is_stove(stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        boil_vegetables_in_pot(faucet, pot, stove, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_wallshelf_187(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(tape,wallshelf_instance)
        else:
            exp(tape,wallshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,wallshelf_instance]=True
        close[wallshelf_instance,tape]=True
    

behavior find_stamp_2031_around_stovefan_139(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(stamp,stovefan_instance)
        else:
            exp(stamp,stovefan_instance)
    eff:
        unknown[stamp]=False
        close[stamp,stovefan_instance]=True
        close[stovefan_instance,stamp]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#goal_representation
 
behavior boil_vegetables_in_pot(faucet:item, pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Fill the pot with water

        achieve_once inside(vegetables, pot) # Put the vegetables into the pot

        achieve on(pot, stove) # Place the pot on the stove

        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind kitchen: item where: 
            is_kitchen_counter(kitchen)

        bind faucet: item where:
            is_faucet(faucet)
        
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)

        bind stove: item where:
            is_stove(stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        boil_vegetables_in_pot(faucet, pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_desk_375(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(tape,desk_instance)
        else:
            exp(tape,desk_instance)
    eff:
        unknown[tape]=False
        close[tape,desk_instance]=True
        close[desk_instance,tape]=True
    

#exp_behavior_end

#goal_representation
 
def validate_pot_with_water(pot: item):
    # Function to check if the pot has water inside
    symbol water_check = has_water(pot)
    return water_check

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot) # Achieve the intermediate state of the pot having water

behavior place_pot_on_stove_stove_and_power_on(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Temporarily place the pot on the stove
        achieve is_on(stove)        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that does not have water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove_stove_and_power_on(pot, stove)
        # Place the pot on the stove and turn it on

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def validate_pot_with_water(pot: item):
    # Function to check if the pot has water inside
    symbol water_check = has_water(pot)
    return water_check

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot) # Achieve the intermediate state of the pot having water

behavior place_pot_on_stove_stove_and_power_on(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Temporarily place the pot on the stove
        achieve is_on(stove)        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that does not have water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove_stove_and_power_on(pot, stove)
        # Place the pot on the stove and turn it on

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before switching on the stove to boil the vegetables. The pot should be filled with water before placing it on the stove and turning on the stove.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before switching on the stove to boil the vegetables. The pot should be filled with water before placing it on the stove and turning on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_54 around stove_2090.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for food_vegetable_2072 around cupboard_131.
Action 9: Walk to cupboard_130.
Action 10: look for food_vegetable_2072 around cupboard_130.
Action 11: Walk to kitchen_counter_132.
Action 12: look for food_vegetable_2072 around kitchen_counter_132.
Action 13: Walk to tvstand_186.
Action 14: look for food_vegetable_2072 around tvstand_186.
Action 15: Walk to pot_54.
Action 16: Open pot_54.
Action 17: Grab pot_54.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to fridge_140.
Action 21: Switch off fridge_140.
Action 22: Open fridge_140.
Action 23: look for food_vegetable_2072 around fridge_140.
Action 24: Walk to faucet_308.
Action 25: Switch off faucet_308.
Action 26: Walk to food_vegetable_2072.
Action 27: Grab food_vegetable_2072.
Action 28: Walk to pot_54.
Action 29: Put food_vegetable_2072 into pot_54.
Action 30: Walk to stove_2090.
Action 31: Put pot_54 on stove_2090.
Action 32: Switch on stove_2090.
Action 33: Grab pot_54.
Action 34: Walk to faucet_134.
Action 35: Switch on faucet_134.
Action 36: Switch off faucet_134.
Action 37: Walk to stove_2090.
Action 38: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_190(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def gather_vegetables():
    # Function to find vegetables and pot to be used for boiling
    symbol vegetables_found=exists food_vegetable:item: (is_food_vegetable(food_vegetable) and is_pot(pot) and inside(food_vegetable, pot))
    return vegetables_found

behavior boil_vegetables(pot:item, stove:item, faucet:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve has_water(pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and is_pot(pot) 
        if not gather_vegetables():
            # If vegetables and pot are not yet prepared, initiate observation to prepare them
            observe(faucet, "Check if water is available")
            observe(stove, "Ensure the stove is ready for use")
        boil_vegetables(pot, stove, faucet, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: pot; available variables: [Variable<food_vegetable: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2005_around_wallshelf_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

behavior find_headset_2086_around_desk_375(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(headset,desk_instance)
        else:
            exp(headset,desk_instance)
    eff:
        unknown[headset]=False
        close[headset,desk_instance]=True
        close[desk_instance,headset]=True
    

#goal_representation
 
def gather_vegetables(pot:item):
    # Function to find vegetables to be used for boiling
    symbol vegetables_found=exists food_vegetable:item: (is_food_vegetable(food_vegetable) and inside(food_vegetable, pot))
    return vegetables_found

behavior boil_vegetables(pot:item, stove:item, faucet:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve has_water(pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        if not gather_vegetables(pot):
            # If vegetables are not yet prepared, initiate observation to prepare them
            observe(faucet, "Check if water is available")
            observe(stove, "Ensure the stove is ready for use")
        boil_vegetables(pot, stove, faucet, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_tvstand_135(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(tape,tvstand_instance)
        else:
            exp(tape,tvstand_instance)
    eff:
        unknown[tape]=False
        close[tape,tvstand_instance]=True
        close[tvstand_instance,tape]=True
    

behavior find_stamp_2031_around_bathroom_cabinet_305(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(stamp,bathroom_cabinet_instance)
        else:
            exp(stamp,bathroom_cabinet_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve is_off(faucet)
        achieve is_open(pot)
        achieve inhand(pot)
        achieve has_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, pot)
        fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove) and close_char(char, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_open not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_desk_375(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(tape,desk_instance)
        else:
            exp(tape,desk_instance)
    eff:
        unknown[tape]=False
        close[tape,desk_instance]=True
        close[desk_instance,tape]=True
    

behavior find_stamp_2031_around_stovefan_139(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(stamp,stovefan_instance)
        else:
            exp(stamp,stovefan_instance)
    eff:
        unknown[stamp]=False
        close[stamp,stovefan_instance]=True
        close[stovefan_instance,stamp]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve is_off(faucet)
        achieve open(pot)
        achieve_once inhand(pot)
        achieve has_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, pot)
        fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove) and close_char(char, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_filing_cabinet_378(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(tape,filing_cabinet_instance)
        else:
            exp(tape,filing_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,filing_cabinet_instance]=True
        close[filing_cabinet_instance,tape]=True
    

behavior find_stamp_2031_around_photoframe_361(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==361
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(stamp,photoframe_instance)
        else:
            exp(stamp,photoframe_instance)
    eff:
        unknown[stamp]=False
        close[stamp,photoframe_instance]=True
        close[photoframe_instance,stamp]=True
    

behavior find_tray_142_around_wallshelf_190(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(tray,wallshelf_instance)
        else:
            exp(tray,wallshelf_instance)
    eff:
        unknown[tray]=False
        close[tray,wallshelf_instance]=True
        close[wallshelf_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior place_and_switch_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where: 
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_and_switch_stove(pot, stove)
        # Place the pot on the stove and switch on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior place_and_switch_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where: 
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_and_switch_stove(pot, stove)
        # Place the pot on the stove and switch on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it on the stove and switching the stove on to start boiling the vegetables.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_2105_around_wallshelf_190(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and not inhand(pot)
        # Select pot with boiled vegetables

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and not inhand(pot)
        # Select pot with boiled vegetables

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(fridge_140)putin_executor(pot_54, fridge_140)close_executor(fridge_140)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
putin_executor(pot_54, fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. pot_54 is close fridge_140. fridge_140 is close pot_54. pot_54 is inside fridge_140. pot_54 released by right hand. 
##############################
From agent.py
close_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(tvstand_186)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(fridge_140)', 'putin_executor(pot_54, fridge_140)', 'close_executor(fridge_140)']
Time info:
Time consume: 534 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 45
goal generate times: 10
goal correct times: 1
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 4 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
