From agent.py
Reset goals: The sub-goals are: 
['1. Identify the table in the dining room.', '2. Place the milk, turkey, egg, fish, and chicken on the identified table.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table)
        achieve inside(dining_table, dining_room)

behavior identify_table_in_dining_room(table: item):
    body:
        achieve inside(table, dining_room)
        
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Identify if it is a table in the dining room")
                identify_table_in_dining_room(table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2003_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Identify if it is a table in the dining room")
                identify_table_in_dining_room(table)
        
behavior identify_table_in_dining_room(table: item):
    body:
        achieve inside(table, dining_room)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function identify_table_in_dining_room not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Identify if it is a table in the dining room")
                achieve inside(table, dining_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room)
            achieve close_char(char, dining_table)

        else:
            foreach dining_table: item:
                if is_table(dining_table) and not visited(dining_table):
                    observe(dining_table,"Identify if it is a table in the dining room")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<dining_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation

symbol has_dining_room=exists dining_room: item : (is_dining_room(dining_room))

behavior __goal__():
    body:
        if has_dining_room:
            bind dining_room: item where:
                is_dining_room(dining_room)
            if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room)):
                bind dining_table: item where:
                    is_table(dining_table) and inside(dining_table, dining_room)
                achieve close_char(char, dining_table)
            else:
                foreach dining_table: item:
                    if is_table(dining_table) and not visited(dining_table):
                        observe(dining_table,"Identify if it is a table in the dining room")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('SYMBOL', 'symbol') at line 5188, column 1.
Expected one of: 
	* FEATURE
	* UNDIRECTED_GENERATOR
	* GENERATOR
	* TYPEDEF
	* DOMAIN
	* _PRAGMA_KEYWORD
	* CONTROLLER
	* INIT
	* IMPORT
	* GOAL
	* BEHAVIOR
	* INCLUDE
	* OBJECTS
	* DEF
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room)
            achieve close_char(char, dining_table)

        else:
            foreach dining_table: item:
                if is_table(dining_table) and not visited(dining_table):
                    observe(dining_table,"Identify if it is a table in the dining room")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room)
            achieve close_char(char, dining_table)

        else:
            foreach dining_table: item:
                if is_table(dining_table) and not visited(dining_table):
                    observe(dining_table,"Identify if it is a table in the dining room")

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_table_270(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_fish,table_instance)
        else:
            exp(food_fish,table_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,table_instance]=True
        close[table_instance,food_fish]=True
    

behavior find_food_chicken_2089_around_table_270(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_chicken,table_instance)
        else:
            exp(food_chicken,table_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,table_instance]=True
        close[table_instance,food_chicken]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
behavior place_item_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Identify the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Identify the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Identify the egg

        bind fish: item where:
            is_food_fish(fish)
        # Identify the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken
        
        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2089_around_table_270(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_chicken,table_instance)
        else:
            exp(food_chicken,table_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,table_instance]=True
        close[table_instance,food_chicken]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#goal_representation
 
behavior place_item_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind dining_room based on available information

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Identify the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Identify the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Identify the egg

        bind fish: item where:
            is_food_fish(fish)
        # Identify the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken
        
        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_item_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind dining_room based on available information

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Identify the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Identify the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Identify the egg

        bind fish: item where:
            is_food_fish(fish)
        # Identify the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken
        
        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_turkey_2112, fridge_126)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(table_270)exp(food_chicken_2089, table_270)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_turkey_2112, fridge_126)
Find food_turkey_2112. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_turkey_2112 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the milk on the identified table_114. Currently, only the turkey, egg, fish, and chicken have been placed on the table.
##############################
From agent.py
Human Instruction: You need to place the milk on the identified table_114. Currently, only the turkey, egg, fish, and chicken have been placed on the table.

The actions you have taken:
Action 1: Walk to table_114.
Action 2: Walk to fridge_126.
Action 3: Switch off fridge_126.
Action 4: Open fridge_126.
Action 5: look for food_turkey_2112 around fridge_126.
Action 6: Grab food_turkey_2112.
Action 7: Walk to table_114.
Action 8: Put food_turkey_2112 on table_114.
Action 9: Walk to food_egg_2092.
Action 10: Grab food_egg_2092.
Action 11: Walk to table_114.
Action 12: Put food_egg_2092 on table_114.
Action 13: Walk to food_fish_2093.
Action 14: Grab food_fish_2093.
Action 15: Walk to table_114.
Action 16: Put food_fish_2093 on table_114.
Action 17: Walk to food_chicken_2089.
Action 18: Grab food_chicken_2089.
Action 19: Walk to table_114.
Action 20: Put food_chicken_2089 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_cupboard_118(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        # Retrieve the identified table in the dining room
        bind table: item where:
            is_table(table) and id[table] == 114

        # Place milk on the identified table
        bind milk: item where:
            is_milk(milk)
        achieve_once on(milk, table)

        # The turkey, egg, fish, and chicken are already on the table,
        # so theres no need to move them Lets ensure they are on table_114
        foreach food: item:
            if (is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)):
                achieve on(food, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        # As per additional information, only the milk needs to be placed on the table

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the table with ID 114

        achieve on(milk, table)
        # Place the milk on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and on(milk, table_114)
        # Bind the instance of milk that is on table_114
        achieve_once on(milk, table_114)
        # Make sure the milk is on table_114

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the milk, turkey, egg, fish, and chicken on the identified table." ?
Answer: Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk from the available items
        achieve on(milk, table_114)
        # Ensure the milk is placed on table_114

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey from the available items
        achieve on(turkey, table_114)
        # Ensure the turkey is placed on table_114

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg from the available items
        achieve on(egg, table_114)
        # Ensure the egg is placed on table_114

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish from the available items
        achieve on(fish, table_114)
        # Ensure the fish is placed on table_114

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken from the available items
        achieve on(chicken, table_114)
        # Ensure the chicken is placed on table_114

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_orange_2061_around_kitchen_counter_119(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item:
            if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
                achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        bind milk: item where:
            is_milk(milk) and on(milk, table) == False
        place_items_on_table(table, [milk])

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_cheese_2088_around_kitchen_counter_123(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#goal_representation

behavior place_items_on_table(table:item, items:list[item]):
    body:
        foreach item: item:
            if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
                achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        bind milk: item where:
            is_milk(milk) and on(milk, table) == False
        place_items_on_table(table, [milk])

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "batched_typename":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2074_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation
plain
behavior place_items_on_table(table:item, item:item):
    body:
        if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        bind milk: item where:
            is_milk(milk) and on(milk, table) == False
        place_items_on_table(table, milk)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the identified table with ID 114

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_126)
        # Find the milk inside fridge_126

        place_food_on_table(milk, table)
        # Place milk on the table

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_126)
        # Find the turkey inside fridge_126

        place_food_on_table(turkey, table)
        # Place turkey on the table

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_126)
        # Find the egg inside fridge_126

        place_food_on_table(egg, table)
        # Place egg on the table

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_126)
        # Find the fish inside fridge_126

        place_food_on_table(fish, table)
        # Place fish on the table

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_126)
        # Find the chicken inside fridge_126

        place_food_on_table(chicken, table)
        # Place chicken on the table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2064_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)


behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_1)

        bind milk: item where:
            is_milk(milk)

        bind food_turkey: item where:
            is_food_turkey(food_turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        items = [milk, food_turkey, egg, fish, chicken]
        
        place_items_on_table(table, items)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5419, column 21.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation

behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_1)

        bind milk: item where:
            is_milk(milk)

        bind food_turkey: item where:
            is_food_turkey(food_turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        items = [milk, food_turkey, egg, fish, chicken]
        
        place_items_on_table(table, items)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5420, column 21.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_items_on_table(table:item, items:list):
    body:
        foreach item in items:
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_1)

        bind milk: item where:
            is_milk(milk)

        bind food_turkey: item where:
            is_food_turkey(food_turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        items = [milk, food_turkey, egg, fish, chicken]
        
        place_items_on_table(table, items)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2074_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==114
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)

        # Place each of the items on table_114
        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(turkey, table)
        # Place the turkey on the table
        achieve_once on(egg, table)
        # Place the egg on the table
        achieve_once on(fish, table)
        # Place the fish on the table
        achieve_once on(chicken, table)
        # Place the chicken on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select an item classified as milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select an item classified as turkey
        bind egg: item where:
            is_food_egg(egg)
        # Select an item classified as egg
        bind fish: item where:
            is_food_fish(fish)
        # Select an item classified as fish
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item classified as chicken
        bind table: item where:
            is_table(table) and id[table] == 114
        # The identified table in the dining room
        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place milk, turkey, egg, fish, and chicken on the table
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the milk, turkey, egg, fish, and chicken on the identified table." ?
Answer: Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(table: item, milk: item, turkey: item, egg: item, fish: item, chicken: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            id[table] == 114
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        place_items_on_table(table, milk, turkey, egg, fish, chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_envelope_2055_around_box_2038(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(envelope,box_instance)
        else:
            exp(envelope,box_instance)
    eff:
        unknown[envelope]=False
        close[envelope,box_instance]=True
        close[box_instance,envelope]=True
    

behavior find_shoes_2033_around_basket_for_clothes_2078(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==114
        # The table is already identified as table_114

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Select milk not already on table_114

        achieve_once on(milk, table)
        # Place the milk on table_114
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            id[table] == 114 and is_table(table)
        # Select table_114
        
        bind milk: item where:
            is_milk(milk)

        place_on_table(milk, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table) 

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the table with ID 114 that has been identified for placing the items
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        # The items turkey, egg, fish, and chicken have already been placed on the table, as per the additional information

        if exists item: item: (is_milk(item) and inhand(item)):
            place_on_table(milk, table)
        else:
            bind fridge: item where:
                is_fridge(fridge) and inside(milk, fridge)
            # Open the fridge and retrieve the milk
            achieve_once on(milk, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2064_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        
        bind milk: item where:
            is_milk(milk)
        place_on_table(milk, table)

        bind food_turkey: item where:
            is_food_turkey(food_turkey)
        place_on_table(food_turkey, table)

        bind food_egg: item where:
            is_food_egg(food_egg)
        place_on_table(food_egg, table)

        bind food_fish: item where:
            is_food_fish(food_fish)
        place_on_table(food_fish, table)

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        place_on_table(food_chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_119(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_on_table_114(item:item):
    # Function to check if an item is on table_114
    symbol on_table= exists o: item : (is_food(o) and on(o, table_114))
    return on_table

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table_114: item where:
            is_table(table_114) and is_on_table_114(table_114)
        # Since it is mentioned that table_114 was previously identified, we bind to it directly

        foreach item: item:
            if item == milk_2043:
                place_on_table(milk_2043, table_114)

        if exists o: item : (is_food_egg(o) and on(o, table_114)):
            foreach item: item:
                if item == food_turkey_2112:
                    place_on_table(food_turkey_2112, table_114)
                if item == food_egg_2092:
                    place_on_table(food_egg_2092, table_114)
                if item == food_fish_2093:
                    place_on_table(food_fish_2093, table_114)
                if item == food_chicken_2089:
                    place_on_table(food_chicken_2089, table_114)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table_114; available variables: [Variable<item: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2140_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_plate_2152_around_table_270(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#goal_representation
 
def is_on_table_114(item:item):
    # Function to check if an item is on table_114
    symbol on_table= exists o: item : (is_food(o) and on(o, table_114))
    return on_table

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table_114: item where:
            is_table(table_114)
        # Since it is mentioned that table_114 was previously identified, we bind to it directly

        foreach item: item:
            if item == milk_2043:
                place_on_table(milk_2043, table_114)

        if exists o: item : (is_food_egg(o) and on(o, table_114)):
            foreach item: item:
                if item == food_turkey_2112:
                    place_on_table(food_turkey_2112, table_114)
                if item == food_egg_2092:
                    place_on_table(food_egg_2092, table_114)
                if item == food_fish_2093:
                    place_on_table(food_fish_2093, table_114)
                if item == food_chicken_2089:
                    place_on_table(food_chicken_2089, table_114)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table_114; available variables: [Variable<item: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#goal_representation
 
def is_on_table_114(item:item):
    # Function to check if an item is on table_114
    symbol on_table=exists o: item : (is_food(o) and on(o, table_114))
    return on_table

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table_114: item where:
            is_table(table_114)
        # Since it is mentioned that table_114 was previously identified, we bind to it directly

        bind milk_2043: item where:
            is_milk(milk_2043)
        if not is_on_table_114(milk_2043):
            place_on_table(milk_2043, table_114)

        if exists o: item : (is_food_egg(o) and on(o, table_114)):
            bind food_turkey_2112: item where:
                is_food_turkey(food_turkey_2112)
            if not is_on_table_114(food_turkey_2112):
                place_on_table(food_turkey_2112, table_114)

            bind food_egg_2092: item where:
                is_food_egg(food_egg_2092)
            if not is_on_table_114(food_egg_2092):
                place_on_table(food_egg_2092, table_114)
                
            bind food_fish_2093: item where:
                is_food_fish(food_fish_2093)
            if not is_on_table_114(food_fish_2093):
                place_on_table(food_fish_2093, table_114)
                
            bind food_chicken_2089: item where:
                is_food_chicken(food_chicken_2089)
            if not is_on_table_114(food_chicken_2089):
                place_on_table(food_chicken_2089, table_114)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the milk, turkey, egg, fish, and chicken on the identified table." ?
Answer: Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2073_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==114
        # Identify and bind table_114 where the items should be placed

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Select the milk which is not yet on the table

        # Ensure each item: turkey, egg, fish, chicken needs to be checked and placed as well
        bind turkey: item where:
            is_food_turkey(turkey) and not on(turkey, table)

        bind egg: item where:
            is_food_egg(egg) and not on(egg, table)

        bind fish: item where:
            is_food_fish(fish) and not on(fish, table)

        bind chicken: item where:
            is_food_chicken(chicken) and not on(chicken, table)

        achieve_once on(milk, table)
        # Place milk on the table

        foreach item: item:
            # Place turkey, egg, fish, and chicken on the table
            if item in [turkey, egg, fish, chicken]:
                achieve_once on(item, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5445, column 21.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2073_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#goal_representation

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Identify and bind table_114 where the items should be placed

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Select the milk which is not yet on the table

        achiever_once on(milk, table)
        # Place milk on the table

        foreach item: item:
            # Place turkey, egg, fish, and chicken on the table
            if item in [food_turkey_2112, food_egg_2092, food_fish_2093, food_chicken_2089]:
                achieve_once on(item, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5409, column 23.
Expected one of: 
	* STAR
	* AMPERSAND
	* OR
	* PERCENT
	* PLUS
	* NOT_EQ
	* VBAR
	* MORETHAN
	* __ANON_3
	* FLOORDIV
	* __ANON_5
	* GREATER_EQ
	* SLASH
	* __ANON_0
	* LESSTHAN
	* __ANON_4
	* __ANON_8
	* DOUBLE_EQUAL
	* __ANON_7
	* IF
	* EQUAL
	* __ANON_1
	* AT
	* _NEWLINE
	* __ANON_6
	* RSHIFT
	* AND
	* CIRCUMFLEX
	* COMMA
	* MINUS
	* SEMICOLON
	* LSHIFT
	* LESS_EQ
	* __ANON_2

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2064_around_kitchen_counter_119(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Identify and bind table_114 where the items should be placed

        bind milk: item where:
            is_milk(milk) and not on(milk, table)
        # Select the milk which is not yet on the table

        achieve_once on(milk, table)
        # Place milk on the table

        foreach item: item:
            # Place turkey, egg, fish, and chicken on the table
            if item in [food_turkey_2112, food_egg_2092, food_fish_2093, food_chicken_2089]:
                achieve_once on(item, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_119(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_126)
        # Select milk inside fridge_126

        bind table: item where:
            is_table(table) and id[table]==114
        # Select identified dining room table_114

        place_food_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_126; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2046_around_oven_127(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_food,oven_instance)
        else:
            exp(food_food,oven_instance)
    eff:
        unknown[food_food]=False
        close[food_food,oven_instance]=True
        close[oven_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_122(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#goal_representation

behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Select milk inside a fridge

        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==126
        # Select the fridge with ID 126

        bind table: item where:
            is_table(table) and id[table]==114
        # Select identified dining room table_114

        place_food_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_plate_2152_around_table_270(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        
        bind table: item where:
            is_table(table) and id[table] == 114

        place_food_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_food_2074_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_119(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Selecting table with ID 114

        bind milk: item where:
            is_milk(milk) and inside(milk, table)
        # Selecting milk stored in the fridge

        bind turkey: item where:
            is_food_turkey(turkey) and on(turkey, table)
        # Selecting turkey currently on the table

        bind egg: item where:
            is_food_egg(egg) and on(egg, table)
        # Selecting egg currently on the table

        bind fish: item where:
            is_food_fish(fish) and on(fish, table)
        # Selecting fish currently on the table

        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, table)
        # Selecting chicken currently on the table

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind table: item where:
            id[table] == 114 and is_table(table)
        # Select identified table with ID 114 in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind food_turkey: item where:
            is_food_turkey(food_turkey)
        # Select the turkey item

        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select the egg item

        bind food_fish: item where:
            is_food_fish(food_fish)
        # Select the fish item

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken item

        achieve on(milk, table) 
        # Place milk on the table
        
        achieve on(food_turkey, table)
        # Make sure turkey is on the table

        achieve on(food_egg, table)
        # Make sure egg is on the table

        achieve on(food_fish, table)
        # Make sure fish is on the table

        achieve on(food_chicken, table)
        # Make sure chicken is on the table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_kitchen_counter_119(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(items:list, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the table with ID 114

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)
        
        # Create a list of the items to be placed on the table
        symbol items_to_place = [milk, turkey, egg, fish, chicken]

        place_items_on_table(items_to_place, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5401, column 28.
Expected one of: 
	* LSQB
	* COLON
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_items_on_table(items:list, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the table with ID 114

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)
        
        # Create a list of the items to be placed on the table
        symbol items_to_place = [milk, turkey, egg, fish, chicken]

        place_items_on_table(items_to_place, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5383, column 28.
Expected one of: 
	* LSQB
	* COLON
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cheese_2072_around_dishwasher_129(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_cheese,dishwasher_instance)
        else:
            exp(food_cheese,dishwasher_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,dishwasher_instance]=True
        close[dishwasher_instance,food_cheese]=True
    

#goal_representation

behavior place_items_on_table(items:list, table:item):
    body:
        foreach item in items:  # Correct the error here
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select the table with ID 114

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)
        
        # Create a list of the items to be placed on the table
        symbol items_to_place = [milk, turkey, egg, fish, chicken]

        place_items_on_table(items_to_place, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            id[table] == 114
        # Select the identified table with ID 114 in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item

        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)
        # Place the food item on the table

behavior __goal__():
    body:
        bind table_114: item where:
            is_table(table_114) and id[table_114] == 114
        # Select the identified table

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_food_on_table(milk, table_114)
        place_food_on_table(turkey, table_114)
        place_food_on_table(egg, table_114)
        place_food_on_table(fish, table_114)
        place_food_on_table(chicken, table_114)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(food: item, table: item):
    body:
        achieve_once on(food, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, is_dining_room())
        # Select the table identified in the dining room

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_126)
        # Select the milk from the fridge

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_126)
        # Select the turkey from the fridge

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_126)
        # Select the egg from the fridge

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_126)
        # Select the fish from the fridge

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_126)
        # Select the chicken from the fridge

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 0 vs 1. Args: (), Types: (ObjectType<item>,)
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_items_on_table(food: item, table: item):
    body:
        achieve_once on(food, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, is_dining_room())
        # Select the table identified in the dining room

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_126)
        # Select the milk from the fridge

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_126)
        # Select the turkey from the fridge

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_126)
        # Select the egg from the fridge

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_126)
        # Select the fish from the fridge

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_126)
        # Select the chicken from the fridge

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 0 vs 1. Args: (), Types: (ObjectType<item>,)
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_items_on_table(food: item, table: item):
    body:
        achieve_once on(food, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_1)
        # Select the table identified in the dining room

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_126)
        # Select the milk from the fridge

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_126)
        # Select the turkey from the fridge

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_126)
        # Select the egg from the fridge

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_126)
        # Select the fish from the fridge

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_126)
        # Select the chicken from the fridge

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            id[table] == 114

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Put milk, turkey, egg, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(table_114)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)']
Time info:
Time consume: 860 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 97
goal generate times: 27
goal correct times: 5
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
