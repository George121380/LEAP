From agent.py
Reset goals: The sub-goals are: 
['1. Find potatoes.', '2. Peel and cut the potatoes into fries.', '3. Fry the potatoes until they are golden and crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_potatoes(location:item):
    body:
        achieve_once visited(location)
        observe(location, "Check if there are potatoes here")

behavior __goal__():
    body:
        foreach location: item:
            if not visited(location):
                locate_potatoes(location)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato,"Check if this is a potato")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato,"Check if this is a potato")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)obs(food_potato_2035, Check if this is a potato)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2035, Check if this is a potato)
##############################
From agent.py
obs(food_potato_2035, Check if this is a potato)
Get this information:  food_potato_2035 is inside fridge_289. food_potato_2035 is inside dining_room_201. food_potato_2035 is close to fridge_289. food_potato_2035 is close to character_65. food_potato_2035 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_potato(potato: item):
    body:
        achieve_once clean(potato) 
        # Clean the potatoes before peeling, assuming theyre dirty

behavior cut_potato(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once inside(potato, cutting_board)
        achieve_once inside(knife, cutting_board)
        achieve cut(potato) 
        # Cut the potatoes into fries on the cutting board with a knife

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select the potato from previous information
        
        observe(potato, "Check if this is a potato") 
        # Confirm whether the object is a potato
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Find a cutting board to use for cutting the potatoes

        bind knife: item where:
            is_knife(knife)
        # Find a knife to use for cutting the potatoes

        peel_potato(potato)
        cut_potato(potato, cutting_board, knife) 
        # Peel and cut the potatoes into fries
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_377(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_potato(potato: item):
    body:
        achieve_once clean(potato) # Ensure the potato is clean before peeling
        achieve_once cut(potato) # Peel the potato

behavior cut_potato_into_fries(potato: item):
    body:
        achieve_once cut(potato) # Cut the potato into fries

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and on(potato, fridge_289)
            
        peel_potato(potato)
        cut_potato_into_fries(potato)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_289; available variables: [Variable<potato: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#goal_representation
behavior peel_potato(potato: item):
    body:
        achieve_once clean(potato) # Ensure the potato is clean before peeling
        achieve_once cut(potato) # Peel the potato

behavior cut_potato_into_fries(potato: item):
    body:
        achieve_once cut(potato) # Cut the potato into fries

behavior __goal__():
    body:
        bind fridge_289: item where:
            is_fridge(fridge_289)

        bind potato: item where:
            is_food_potato(potato) and on(potato, fridge_289)
        
        peel_potato(potato)
        cut_potato_into_fries(potato)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_potato(potato: item):
    body:
        achieve_once clean(potato)

behavior cut_potato_into_fries(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        
        peel_potato(potato)
        cut_potato_into_fries(potato, cutting_board, knife)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior peel_potato(potato: item):
    body:
        achieve_once clean(potato)

behavior cut_potato_into_fries(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        
        peel_potato(potato)
        cut_potato_into_fries(potato, cutting_board, knife)
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior fry_potatoes(potatoes:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve_once inside(oil, fryingpan)
        achieve_once inside(potatoes, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        fry_potatoes(potatoes, fryingpan, oil, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fry_potatoes(potatoes:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve_once inside(oil, fryingpan)
        achieve_once inside(potatoes, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        fry_potatoes(potatoes, fryingpan, oil, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the potatoes are fried until they are golden and crispy. You can switch off the stove once the potatoes are cooked.
##############################
From agent.py
Human Instruction: You need to ensure the potatoes are fried until they are golden and crispy. You can switch off the stove once the potatoes are cooked.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_potato_2035 around fridge_289.
Action 5: Observe around food_potato_2035 with the question of Check if this is a potato.
Action 6: Grab food_potato_2035.
Action 7: Walk to cutting_board_2051.
Action 8: Put food_potato_2035 on cutting_board_2051.
Action 9: look for knife_2050 around cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_potato_2035.
Action 13: Cut food_potato_2035.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 into fryingpan_2083.
Action 18: Walk to food_potato_2035.
Action 19: Grab food_potato_2035.
Action 20: Walk to fryingpan_2083.
Action 21: Put food_potato_2035 into fryingpan_2083.
Action 22: Grab fryingpan_2083.
Action 23: Walk to stove_2065.
Action 24: Put fryingpan_2083 on stove_2065.
Action 25: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_382(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
def potatoes_golden_crispy(fryingpan:item):
    # Behavior to fry the potatoes until they are golden and crispy
    body:
        achieve has_eatable(food_potato_2035)
        
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        achieve_once on(fryingpan, stove_2065) # Ensure the frying pan is on the stove
        achieve is_on(stove_2065) # Ensure the stove is switched on
        potatoes_golden_crispy(fryingpan)
        achieve_once is_off(stove_2065) # Switch off the stove once done
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5815, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2081_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_remote_control_2052_around_coffee_table_2068(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(remote_control,coffee_table_instance)
        else:
            exp(remote_control,coffee_table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,coffee_table_instance]=True
        close[coffee_table_instance,remote_control]=True
    

#goal_representation
 
def potatoes_golden_crispy(fryingpan:item):
    # Behavior to fry the potatoes until they are golden and crispy
    body:
        achieve_once eatable(food_potato_2035)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        achieve_once on(fryingpan, stove_2065) # Ensure the frying pan is on the stove
        achieve is_on(stove_2065) # Ensure the stove is switched on
        potatoes_golden_crispy(fryingpan)
        achieve_once is_off(stove_2065) # Switch off the stove once done

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5816, column 9.
Expected one of: 
	* AMPERSAND
	* STAR
	* LESS_EQ
	* __ANON_0
	* NOT_EQ
	* EQUAL
	* __ANON_2
	* SLASH
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* FLOORDIV
	* AT
	* CIRCUMFLEX
	* OR
	* COMMA
	* MINUS
	* DOUBLE_EQUAL
	* __ANON_8
	* __ANON_4
	* PERCENT
	* __ANON_1
	* LESSTHAN
	* __ANON_7
	* IF
	* MORETHAN
	* VBAR
	* _NEWLINE
	* RSHIFT
	* SEMICOLON
	* PLUS
	* __ANON_3
	* GREATER_EQ
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#goal_representation
 
def potatoes_golden_crispy(fryingpan: item):
    # Behavior to fry the potatoes until they are golden and crispy
    body:
        achieve_once eatable(food_potato_2035)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        achieve_once on(fryingpan, stove_2065) # Ensure the frying pan is on the stove
        achieve is_on(stove_2065) # Ensure the stove is switched on
        potatoes_golden_crispy(fryingpan)
        achieve_once is_off(stove_2065) # Switch off the stove once done

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_closetdrawer_380(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_384(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_380(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
behavior fry_potatoes(fries: item, fryingpan: item, stove: item):
    body:
        achieve_once on(fries, fryingpan)
        achieve_once is_on(stove)
        achieve_once inside_char(char, stove)
        achieve_once inhand(fries)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where: 
            is_stove(stove)
        
        bind fries: item where:
            is_food_potato(fries)
        
        fry_potatoes(fries, fryingpan, stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is turned on
        observe(potatoes, "Check if the potatoes are golden and crispy") # Observe the state of the potatoes
        achieve_once golden_and_crispy(potatoes) # Fry the potatoes until they are golden and crispy
        achieve closed(stove) # Switch off the stove once the potatoes are cooked

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes) and inside(potatoes, fryingpan_2083)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        fry_potatoes(potatoes, fryingpan, stove) # Execute the main frying behavior

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden_and_crispy not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
## Current Goal Representation With Error:

behavior fry_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is turned on
        observe(potatoes, "Check if the potatoes are golden and crispy") # Observe the state of the potatoes
        observe(potatoes, "Check if the potatoes are golden") # Observe if the potatoes are golden
        observe(potatoes, "Check if the potatoes are crispy") # Observe if the potatoes are crispy
        achieve_once is_off(stove) # Switch off the stove once the potatoes are cooked

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes) and inside(potatoes, fryingpan_2083)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        fry_potatoes(potatoes, fryingpan, stove) # Execute the main frying behavior

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the potatoes until they are golden and crispy." ?
Answer: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan and put it on the stove.', '2. Turn on the stove and add some oil.', '3. Put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_382(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind stove: item where:
            is_stove(stove)
        achieve_once on(frying_pan, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_384(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_380(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve on(frying_pan, stove)
        # Put the frying pan on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_fork_2081_around_closetdrawer_382(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_towel_2059_around_bathroom_cabinet_40(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan and put it on the stove.', '2. Turn on the stove and add some oil.', '3. Put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_382(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        achieve_once on(fryingpan, stove_2065)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
behavior __goal__(stove_2065: item):
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        achieve_once on(fryingpan, stove_2065)
#goal_representation_end

##############################
Error is:
'stove_2065'
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_fork_2080_around_closetdrawer_146(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan():
    # Define the behavior to find a frying pan and inspect it for suitability
    body:
        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                observe(pan, "Check if it is clean and in good condition")

behavior place_frying_pan_on_stove(pan:item, stove:item):
    # Define the behavior to place a frying pan on the stove
    body:
        achieve_once on(pan, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                observe(pan, "Check if it is clean and in good condition")

        if exists pan: item : (is_fryingpan(pan) and not visited(pan)):
            bind pan: item where:
                is_fryingpan(pan) and not visited(pan)
            place_frying_pan_on_stove(pan, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_frying_pan():
    # Define the behavior to find a frying pan and inspect it for suitability
    body:
        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                observe(pan, "Check if it is clean and in good condition")

behavior place_frying_pan_on_stove(pan:item, stove:item):
    # Define the behavior to place a frying pan on the stove
    body:
        achieve_once on(pan, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                observe(pan, "Check if it is clean and in good condition")

        if exists pan: item : (is_fryingpan(pan) and not visited(pan)):
            bind pan: item where:
                is_fryingpan(pan) and not visited(pan)
            place_frying_pan_on_stove(pan, stove)
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if it is clean and in good condition)
##############################
From agent.py
obs(fryingpan_2083, Check if it is clean and in good condition)
Get this information:  food_potato_2035 is inside fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to character_65. fryingpan_2083 is close to stove_2065. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_384(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_plate_1000_around_closetdrawer_384(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(plate,closetdrawer_instance)
        else:
            exp(plate,closetdrawer_instance)
    eff:
        unknown[plate]=False
        close[plate,closetdrawer_instance]=True
        close[closetdrawer_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove_add_oil(stove:item, oil:item):
    body:
        achieve_once is_on(stove)
        achieve_once inside(oil, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        turn_on_stove_add_oil(stove, oil)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_stove_add_oil(stove:item, oil:item):
    body:
        achieve_once is_on(stove)
        achieve_once inside(oil, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        turn_on_stove_add_oil(stove, oil)
##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)open_executor(stove_2065)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(stove_2065)putin_executor(oil_2079, stove_2065)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(oil_2079, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. oil_2079 is close stove_2065. oil_2079 is inside stove_2065. stove_2065 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_384(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potato: item where:
            is_food_potato(potato)
        
        achieve_once on(potato, fryingpan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potato: item where:
            is_food_potato(potato)
        
        achieve_once on(potato, fryingpan)
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)put_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
put_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 is on fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(stove_2065)', 'putin_executor(oil_2079, stove_2065)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'put_executor(food_potato_2035, fryingpan_2083)']
Time info:
Time consume: 342 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 150
goal generate times: 16
goal correct times: 1
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
