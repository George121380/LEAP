From agent.py
Reset goals: The sub-goals are: 
['1. Find the coffee maker and ensure it is ready to use.', '2. Add coffee grounds and water to the coffee maker.', '3. Start the coffee maker to brew the coffee.', '4. Pour the brewed coffee into a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior check_coffee_maker_ready(coffee_maker: item):
    body:
        # Ensure the coffee maker is plugged in and has water
        achieve_once plugged(coffee_maker)
        achieve_once has_water(coffee_maker)
        
behavior __goal__():
    body:
        # Find a coffee maker
        if exists coffee_maker: item: (is_coffe_maker(coffee_maker) and not visited(coffee_maker)):
            # Already known coffee maker, verify its ready for use
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and not visited(coffee_maker)
            observe(coffee_maker, "Check if coffee maker is ready to use") # To ensure it is plugged, has water, and other necessary conditions
            check_coffee_maker_ready(coffee_maker)
        else:
            # Search all unvisited items for a coffee maker
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check if this item is a coffee maker and if it is ready to use")
                    check_coffee_maker_ready(coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior check_coffee_maker_ready(coffee_maker: item):
    body:
        # Ensure the coffee maker is plugged in and has water
        achieve_once plugged(coffee_maker)
        achieve_once has_water(coffee_maker)
        
behavior __goal__():
    body:
        # Find a coffee maker
        if exists coffee_maker: item: (is_coffe_maker(coffee_maker) and not visited(coffee_maker)):
            # Already known coffee maker, verify its ready for use
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and not visited(coffee_maker)
            observe(coffee_maker, "Check if coffee maker is ready to use") # To ensure it is plugged, has water, and other necessary conditions
            check_coffee_maker_ready(coffee_maker)
        else:
            # Search all unvisited items for a coffee maker
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check if this item is a coffee maker and if it is ready to use")
                    check_coffee_maker_ready(coffee_maker)
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has verified that the coffee maker is plugged in and clean. However, to ensure it is fully ready for use, you need to confirm that there is water in the coffee maker.
##############################
From agent.py
Human Instruction: The robot has verified that the coffee maker is plugged in and clean. However, to ensure it is fully ready for use, you need to confirm that there is water in the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Open coffe_maker_130.
Action 3: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def check_water_in_coffee_maker(coffee_maker: item):
    # Function to check if there is water in the coffee maker
    symbol has_water_status = exists o: item : (has_water(coffee_maker))
    return has_water_status

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve_visiting close_char(char, coffee_maker) 
        # Ensure the character is close to the coffee maker
        
        observe(coffee_maker, "Check if coffee maker is ready to use")
        # Observe the coffee maker to ensure readiness
        
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
            # Observe again if needed, specifically for water presence

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and plugged(coffee_maker) and clean(coffee_maker)
        # Select a clean and plugged coffee maker
        
        ensure_coffee_maker_ready(coffee_maker)
        # Invoke behavior to ensure coffee maker is ready

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'close_char') at line 5210, column 26.
Expected one of: 
	* OR
	* STAR
	* NOT_EQ
	* __ANON_1
	* __ANON_2
	* __ANON_5
	* __ANON_4
	* COMMA
	* _NEWLINE
	* __ANON_0
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* LSHIFT
	* RSHIFT
	* IF
	* LESS_EQ
	* VBAR
	* GREATER_EQ
	* SLASH
	* FLOORDIV
	* __ANON_8
	* AT
	* LESSTHAN
	* SEMICOLON
	* __ANON_6
	* MINUS
	* AMPERSAND
	* __ANON_7
	* MORETHAN
	* PERCENT
	* __ANON_3
	* PLUS
	* EQUAL
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def check_water_in_coffee_maker(coffee_maker: item):
    # Function to check if there is water in the coffee maker
    symbol has_water_status = exists o: item : (has_water(coffee_maker))
    return has_water_status

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        
        observe(coffee_maker, "Check if coffee maker is ready to use")
        # Observe the coffee maker to ensure readiness
        
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
            # Observe again if needed, specifically for water presence

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and plugged(coffee_maker) and clean(coffee_maker)
        # Select a clean and plugged coffee maker
        
        ensure_coffee_maker_ready(coffee_maker)
        # Invoke behavior to ensure coffee maker is ready

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def check_water_in_coffee_maker(coffee_maker: item):
    # Function to check if there is water in the coffee maker
    symbol has_water_status = exists o: item : (has_water(coffee_maker))
    return has_water_status

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        
        observe(coffee_maker, "Check if coffee maker is ready to use")
        # Observe the coffee maker to ensure readiness
        
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
            # Observe again if needed, specifically for water presence

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and plugged(coffee_maker) and clean(coffee_maker)
        # Select a clean and plugged coffee maker
        
        ensure_coffee_maker_ready(coffee_maker)
        # Invoke behavior to ensure coffee maker is ready

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm whether there is water in the coffee maker to ensure it is fully ready for use. The current observations have indicated that the coffee maker is plugged in, clean, and open. However, the presence of water in the coffee maker is yet to be confirmed.
##############################
From agent.py
Human Instruction: You need to confirm whether there is water in the coffee maker to ensure it is fully ready for use. The current observations have indicated that the coffee maker is plugged in, clean, and open. However, the presence of water in the coffee maker is yet to be confirmed.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Open coffe_maker_130.
Action 3: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 4: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 5: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_box_2038_around_washing_machine_2079(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(box,washing_machine_instance)
        else:
            exp(box,washing_machine_instance)
    eff:
        unknown[box]=False
        close[box,washing_machine_instance]=True
        close[washing_machine_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_use(coffee_maker:item):
    # Function to check if the coffee maker is ready to use
    symbol is_ready = plugged(coffee_maker) and clean(coffee_maker) and open(coffee_maker) and has_water(coffee_maker)
    return is_ready

def has_water(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water_in_machine = exists o: item : (has_water(o) and inside(o, coffee_maker))
    return has_water_in_machine

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        if is_ready_to_use(coffee_maker):
            # Coffee maker is ready to use
            achieve close_char(char, coffee_maker)
        
        else:
            # Check if the coffee maker is not ready, especially if it has water
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check if the coffee maker is ready to use")
                    # If the coffee maker is not ready, include a specific check for water
                    if not has_water(coffee_maker):
                        observe(coffee_maker, "Check if there is water in the coffee maker")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if exists water_check: item : (has_water(coffee_maker)):
            achieve has_water(coffee_maker)
        else:
            observe(coffee_maker, "Check if there is water in the coffee maker")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        observe(coffee_maker, "Check if coffee maker is ready to use")
        
        # Check if the coffee maker is already plugged in, clean, and open
        if plugged(coffee_maker) and clean(coffee_maker) and open(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
           
        else:
            if not plugged(coffee_maker):
                achieve plugged(coffee_maker)
                
            if not clean(coffee_maker):
                achieve clean(coffee_maker)
                
            if not open(coffee_maker):
                achieve open(coffee_maker)
            
            ensure_coffee_maker_ready(coffee_maker) 
#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the specified coffee maker
    symbol water_present=exists o: item : (has_water(coffee_maker))
    return water_present

behavior check_coffee_maker(coffee_maker:item):
    body:
        if has_water_in_coffee_maker(coffee_maker):
            achieve visited(coffee_maker)
        else:
            observe(coffee_maker, "Check if there is water in the coffee maker")

behavior ensure_coffee_maker_ready():
    goal: achieve plugged(coffee_maker) and open(coffee_maker) and visited(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        ensure_coffee_maker_ready()
        check_coffee_maker(coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee_maker; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the specified coffee maker
    symbol water_present=exists o: item : (has_water(coffee_maker))
    return water_present

behavior check_coffee_maker(coffee_maker:item):
    body:
        if has_water_in_coffee_maker(coffee_maker):
            achieve visited(coffee_maker)
        else:
            observe(coffee_maker, "Check if there is water in the coffee maker")

behavior ensure_coffee_maker_ready(coffee_maker:item):
    goal: achieve plugged(coffee_maker) and open(coffee_maker) and visited(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        ensure_coffee_maker_ready(coffee_maker)
        check_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the specified coffee maker
    symbol water_present=exists o: item : (has_water(coffee_maker))
    return water_present

behavior check_coffee_maker(coffee_maker:item):
    body:
        if has_water_in_coffee_maker(coffee_maker):
            achieve_once visited(coffee_maker)
        else:
            observe(coffee_maker, "Check if there is water in the coffee maker")

behavior ensure_coffee_maker_ready(coffee_maker:item):
    goal: achieve plugged(coffee_maker)
    achieve open(coffee_maker)
    achieve visited(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        ensure_coffee_maker_ready(coffee_maker)
        check_coffee_maker(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the coffee maker and ensure it is ready to use." ?
Answer: Simply place a suitably sized cup into the coffee machine and start it. Ensure the machine is ready by checking if it is filled with water and coffee beans.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place a suitably sized cup into the coffee machine, ensure it has water and coffee beans, and start it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

behavior find_cup_2049_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to use
    symbol has_water_and_beans = has_water(coffee_maker) and visited(coffee_maker)
    return has_water_and_beans

behavior prepare_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if coffee maker is ready to use")
            observe(coffee_maker, "Check if there is water in the coffee maker")
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to use
    symbol has_water_and_beans = has_water(coffee_maker) and visited(coffee_maker)
    return has_water_and_beans

behavior prepare_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if coffee maker is ready to use")
            observe(coffee_maker, "Check if there is water in the coffee maker")
        prepare_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2133, cupboard_118)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2133, cupboard_118)
Fail to find cup_2133 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)walk_executor(cupboard_117)exp(cup_2133, cupboard_117)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2133, cupboard_117)
Fail to find cup_2133 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)walk_executor(kitchen_counter_123)exp(cup_2133, kitchen_counter_123)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2133, kitchen_counter_123)
Fail to find cup_2133 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)walk_executor(table_114)exp(cup_2133, table_114)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2133, table_114)
Find cup_2133. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
walk_executor(cup_2133)
Robot find: Robot is close to the table_114. Robot is close to the cup_2133. 
##############################
From agent.py
grab_executor(cup_2133)
Robot find: Robot is close to the table_114. Robot is close to the cup_2133. Grabbing cup_2133 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2133. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(cup_2133, coffe_maker_130)
Robot find: Robot is close to the cup_2133. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2133. cup_2133 is inside coffe_maker_130. cup_2133 is close coffe_maker_130. cup_2133 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm that the coffee maker has water and coffee beans before starting it. There is no indication that the coffee maker was confirmed to have water and beans, which is crucial for preparing coffee.
##############################
From agent.py
Human Instruction: You need to confirm that the coffee maker has water and coffee beans before starting it. There is no indication that the coffee maker was confirmed to have water and beans, which is crucial for preparing coffee.

Human Guidance: Simply place a suitably sized cup into the coffee machine and start it. Ensure the machine is ready by checking if it is filled with water and coffee beans.
The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Open coffe_maker_130.
Action 3: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 4: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 5: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 6: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 7: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for cup_2133 around cupboard_118.
Action 11: Walk to coffe_maker_130.
Action 12: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 13: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 14: Walk to cupboard_117.
Action 15: look for cup_2133 around cupboard_117.
Action 16: Walk to coffe_maker_130.
Action 17: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 18: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 19: Walk to kitchen_counter_123.
Action 20: look for cup_2133 around kitchen_counter_123.
Action 21: Walk to coffe_maker_130.
Action 22: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 23: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 24: Walk to table_114.
Action 25: look for cup_2133 around table_114.
Action 26: Walk to coffe_maker_130.
Action 27: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 28: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 29: Walk to cup_2133.
Action 30: Grab cup_2133.
Action 31: Walk to coffe_maker_130.
Action 32: Put cup_2133 into coffe_maker_130.
Action 33: Close coffe_maker_130.
Action 34: Switch on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_ready_to_use(coffee_maker:item):
    # Check if the coffee maker is ready to use
    symbol ready = has_water(coffee_maker)
    return ready

def is_water_inside(coffee_maker:item):
    # Check if there is water in the coffee maker
    symbol water_inside = has_water(coffee_maker)
    return water_inside

behavior place_cup_in_machine_and_start(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place a suitably sized cup into the coffee maker
        achieve_once closed(coffee_maker)
        # Assume closing the coffee maker after placing the cup
        achieve_once is_on(coffee_maker)
        # Turn the coffee maker on to start it

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)
            # Bind a suitable cup, assuming there is one available

        place_cup_in_machine_and_start(cup, coffee_maker)

        # Ensure coffee maker is ready and has water
        observe(coffee_maker, "Check if coffee maker is ready to use")
        if not is_ready_to_use(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
        else:
            return

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n#goal_representation_end\n') at line 5343, column 19.
Expected one of: 
	* FALSE
	* BIN_NUMBER
	* STRING
	* LONG_STRING
	* DEC_NUMBER
	* TRUE
	* DO
	* NONE
	* LPAR
	* IMAG_NUMBER
	* NOT
	* COLON
	* ELLIPSIS
	* FORALL
	* EXISTS
	* FLOAT_NUMBER
	* LSQB
	* FINDALL
	* MINUS
	* OCT_NUMBER
	* HEX_NUMBER
	* FINDONE
	* TILDE
	* PLUS
	* VARNAME

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_cup_2049(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2049
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

#goal_representation
 
def is_ready_to_use(coffee_maker:item):
    # Check if the coffee maker is ready to use
    symbol ready = has_water(coffee_maker)
    return ready

def is_water_inside(coffee_maker:item):
    # Check if there is water in the coffee maker
    symbol water_inside = has_water(coffee_maker)
    return water_inside

behavior place_cup_in_machine_and_start(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place a suitably sized cup into the coffee maker
        achieve_once closed(coffee_maker)
        # Assume closing the coffee maker after placing the cup
        achieve_once is_on(coffee_maker)
        # Turn the coffee maker on to start it

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)
            # Bind a suitable cup, assuming there is one available

        observe(coffee_maker, "Check if coffee maker is ready to use")
        if not is_ready_to_use(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
        else:
            place_cup_in_machine_and_start(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ready_to_use(coffee_maker:item):
    # Check if the coffee maker is ready to use
    symbol ready = has_water(coffee_maker)
    return ready

def is_water_inside(coffee_maker:item):
    # Check if there is water in the coffee maker
    symbol water_inside = has_water(coffee_maker)
    return water_inside

behavior place_cup_in_machine_and_start(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place a suitably sized cup into the coffee maker
        achieve_once closed(coffee_maker)
        # Assume closing the coffee maker after placing the cup
        achieve_once is_on(coffee_maker)
        # Turn the coffee maker on to start it

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)
            # Bind a suitable cup, assuming there is one available

        observe(coffee_maker, "Check if coffee maker is ready to use")
        if not is_ready_to_use(coffee_maker):
            observe(coffee_maker, "Check if there is water in the coffee maker")
        else:
            place_cup_in_machine_and_start(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker is ready to use)obs(coffe_maker_130, Check if there is water in the coffee maker)
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2133. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker is ready to use)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2133. coffee_filter_2065 is inside coffe_maker_130. cup_2133 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is OPEN. coffe_maker_130 is CLEAN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_130, Check if there is water in the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2133. coffee_filter_2065 is inside coffe_maker_130. cup_2133 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is OPEN. coffe_maker_130 is CLEAN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the coffee maker has water and coffee beans. Check for water and coffee beans again, and if absent, fill the coffee maker with these necessary supplies and start it.
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker has water and coffee beans. Check for water and coffee beans again, and if absent, fill the coffee maker with these necessary supplies and start it.

Human Guidance: Simply place a suitably sized cup into the coffee machine and start it. Ensure the machine is ready by checking if it is filled with water and coffee beans.
The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Open coffe_maker_130.
Action 3: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 4: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 5: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 6: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 7: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for cup_2133 around cupboard_118.
Action 11: Walk to coffe_maker_130.
Action 12: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 13: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 14: Walk to cupboard_117.
Action 15: look for cup_2133 around cupboard_117.
Action 16: Walk to coffe_maker_130.
Action 17: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 18: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 19: Walk to kitchen_counter_123.
Action 20: look for cup_2133 around kitchen_counter_123.
Action 21: Walk to coffe_maker_130.
Action 22: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 23: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 24: Walk to table_114.
Action 25: look for cup_2133 around table_114.
Action 26: Walk to coffe_maker_130.
Action 27: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 28: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.
Action 29: Walk to cup_2133.
Action 30: Grab cup_2133.
Action 31: Walk to coffe_maker_130.
Action 32: Put cup_2133 into coffe_maker_130.
Action 33: Close coffe_maker_130.
Action 34: Switch on coffe_maker_130.
Action 35: Switch off coffe_maker_130.
Action 36: Open coffe_maker_130.
Action 37: Observe around coffe_maker_130 with the question of Check if coffee maker is ready to use.
Action 38: Observe around coffe_maker_130 with the question of Check if there is water in the coffee maker.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

behavior find_plate_2152_around_table_199(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior fill_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker): 
            # Confirm if the coffee maker has water
            achieve_once has_water(coffee_maker) 
            # Ensure the coffee maker has water
        if not exists o: item : ((is_coffee_filter(o) or is_food_coffee(o)) and inside(o, coffee_maker)):
            # Confirm if the coffee maker has coffee beans or coffee filter
            observe(coffee_maker, "Check if coffee maker has coffee beans or filter")
            # If not, observe to check whether it has coffee beansfilter

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker) # Close the coffee maker lid
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup) and inside(cup, coffee_maker)
        # Ensure a cup is selected and placed inside the coffee maker

        prepare_coffee(cup, coffee_maker)
        fill_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5355, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_food_cheese_2072_around_fridge_126(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_tea_bag_2023_around_fridge_126(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(tea_bag,fridge_instance)
        else:
            exp(tea_bag,fridge_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,fridge_instance]=True
        close[fridge_instance,tea_bag]=True
    

#goal_representation

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior fill_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker): 
            # Confirm if the coffee maker has water
            achieve_once has_water(coffee_maker) 
            # Ensure the coffee maker has water
        if not exists o: item : (is_coffee_filter(o) or is_food_coffee(o)) and inside(o, coffee_maker):
            # Confirm if the coffee maker has coffee beans or coffee filter
            observe(coffee_maker, "Check if coffee maker has coffee beans or filter")
            # If not, observe to check whether it has coffee beansfilter

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker) # Close the coffee maker lid
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup) and inside(cup, coffee_maker)
        # Ensure a cup is selected and placed inside the coffee maker

        prepare_coffee(cup, coffee_maker)
        fill_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5373, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

behavior find_bowl_2141_around_sink_120(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior fill_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker): 
            achieve_once has_water(coffee_maker)
        if not exists o: item : ((is_coffee_filter(o) or is_food_coffee(o)) and inside(o, coffee_maker)):
            observe(coffee_maker, "Check if coffee maker has coffee beans or filter")

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and inside(cup, coffee_maker)

        prepare_coffee(cup, coffee_maker)
        fill_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
def is_coffee_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to use This checks presence of water and coffee beans
    symbol is_prepared = exists y: item : (on(y, coffee_maker) and (has_water(coffee_maker) or  achieve_once inside(y, coffee_maker)))
    return is_prepared
    

behavior ensure_coffee_maker_preparation(coffee_maker: item):
    body:
        if not has_water(coffee_maker) or not is_coffee_ready(coffee_maker): 
            # If the coffee maker does not have water or if its not ready
            observe(coffee_maker, "Check if the coffee maker has water or coffee beans")  # Check
            

behavior place_cup_and_prepare(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker) # Place the cup inside the coffee maker
        ensure_coffee_maker_preparation(coffee_maker) # Ensure coffee maker is prepared
        achieve_once closed(coffee_maker) # Close the coffee maker if open
        achieve_once is_on(coffee_maker) # Turn on the coffee maker


behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Find a cup from the collected information
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) # Find the coffee maker from the collected information

        place_cup_and_prepare(coffee_maker, cup) # Place the cup in coffee maker and start it
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5327, column 110.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#goal_representation
 
def is_coffee_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to use This checks the presence of water and coffee beans
    symbol is_prepared = exists y: item : (has_water(coffee_maker) and (on(y, coffee_maker) or inside(y, coffee_maker)))
    return is_prepared
    
behavior ensure_coffee_maker_preparation(coffee_maker: item):
    body:
        if not has_water(coffee_maker) or not is_coffee_ready(coffee_maker): 
            # If the coffee maker does not have water or if it is not ready
            observe(coffee_maker, "Check if the coffee maker has water or coffee beans")  # Check
            
behavior place_cup_and_prepare(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker) # Place the cup inside the coffee maker
        ensure_coffee_maker_preparation(coffee_maker) # Ensure coffee maker is prepared
        achieve_once closed(coffee_maker) # Close the coffee maker if open
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Find a cup from the collected information
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) # Find the coffee maker from the collected information
        place_cup_and_prepare(coffee_maker, cup) # Place the cup in coffee maker and start it

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to use This checks the presence of water and coffee beans
    symbol is_prepared = exists y: item : (has_water(coffee_maker) and (on(y, coffee_maker) or inside(y, coffee_maker)))
    return is_prepared
    
behavior ensure_coffee_maker_preparation(coffee_maker: item):
    body:
        if not has_water(coffee_maker) or not is_coffee_ready(coffee_maker): 
            # If the coffee maker does not have water or if it is not ready
            observe(coffee_maker, "Check if the coffee maker has water or coffee beans")  # Check
            
behavior place_cup_and_prepare(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker) # Place the cup inside the coffee maker
        ensure_coffee_maker_preparation(coffee_maker) # Ensure coffee maker is prepared
        achieve_once closed(coffee_maker) # Close the coffee maker if open
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Find a cup from the collected information
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) # Find the coffee maker from the collected information
        place_cup_and_prepare(coffee_maker, cup) # Place the cup in coffee maker and start it

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_130, Check if the coffee maker has water or coffee beans)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
obs(coffe_maker_130, Check if the coffee maker has water or coffee beans)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2133. coffee_filter_2065 is inside coffe_maker_130. cup_2133 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is OPEN. coffe_maker_130 is CLEAN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker contains water and coffee beans, as this has not been confirmed. Check these supplies and fill the coffee maker if necessary. Once confirmed, close the coffee maker and switch it on to complete the task.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(coffe_maker_130)', 'walk_executor(cupboard_117)', 'walk_executor(coffe_maker_130)', 'walk_executor(kitchen_counter_123)', 'walk_executor(coffe_maker_130)', 'walk_executor(table_114)', 'walk_executor(coffe_maker_130)', 'walk_executor(cup_2133)', 'grab_executor(cup_2133)', 'walk_executor(coffe_maker_130)', 'putin_executor(cup_2133, coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'switchoff_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)']
Time info:
Time consume: 458 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 81
goal generate times: 9
goal correct times: 5
action_num: 21

Task complete rate:
1
Scene_id: 1
##############################
