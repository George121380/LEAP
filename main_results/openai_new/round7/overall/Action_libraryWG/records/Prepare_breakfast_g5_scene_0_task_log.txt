From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk in a suitable container.', '2. Add cereal to the hot milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior heat_milk(milk:item, container:item, stove:item):
    body:
        achieve_once inside(milk, container) # Pour milk into the container
        achieve_once on(container, stove) # Place the container on the stove
        achieve is_on(stove) # Turn on the stove to start heating

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind container: item where:
            containers(container) and can_open(container)
        # Select a suitable container

        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select a stove

        heat_milk(milk, container, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_container(container:item):
    # Function to check if the specified container is suitable for milk heating
    symbol has_container = recipient(container) and not has_water(container)
    return has_container

behavior heat_milk(container:item):
    body:
        if has_switch(container):
            achieve_once is_on(container)
        else:
            achieve_once plugged(container) # Ensure the container is plugged in if it has no switch

behavior __goal__():
    body:
        bind milk_container: item where:
            has_milk_container(milk_container)
        heat_milk(milk_container)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_milk_container(container:item):
    # Function to check if the specified container is suitable for milk heating
    symbol has_container = recipient(container) and not has_water(container)
    return has_container

behavior heat_milk(container:item):
    body:
        if has_switch(container):
            achieve_once is_on(container)
        else:
            achieve_once plugged(container) # Ensure the container is plugged in if it has no switch

behavior __goal__():
    body:
        bind milk_container: item where:
            has_milk_container(milk_container)
        heat_milk(milk_container)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that a suitable container for milk is identified and used. The actions taken only turned on the coffee maker, without specifying that a container with milk is placed in or associated with it for heating.
##############################
From agent.py
Human Instruction: You need to ensure that a suitable container for milk is identified and used. The actions taken only turned on the coffee maker, without specifying that a container with milk is placed in or associated with it for heating.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

def is_suitable_container(container:item):
    # Function to check if a container is suitable for heating milk
    return containers(container) and recipient(container)

behavior use_coffee_maker(container:item, milk:item):
    body:
        achieve_once inside(milk, container)
        # Pour the milk into the suitable container
        achieve_once on(container, coffe_maker)
        # Place the container with milk on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Identify the specific coffee maker to use

        bind container: item where:
            is_suitable_container(container)
        # Select a suitable container for heating milk

        bind milk: item where:
            is_milk(milk)
        # Identify the milk that needs heating

        use_coffee_maker(container, milk)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker; available variables: [Variable<container: item>, Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def is_suitable_container(container:item):
    # Function to check if a container is suitable for heating milk
    return containers(container) and recipient(container)

behavior use_coffee_maker(container:item, milk:item, coffe_maker:item):
    body:
        achieve_once inside(milk, container)
        # Pour the milk into the suitable container
        achieve_once on(container, coffe_maker)
        # Place the container with milk on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290) and id[coffe_maker_290] == 290
        # Identify the specific coffee maker to use

        bind container: item where:
            is_suitable_container(container)
        # Select a suitable container for heating milk

        bind milk: item where:
            is_milk(milk)
        # Identify the milk that needs heating

        use_coffee_maker(container, milk, coffe_maker_290)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_suitable_container(container:item):
    # Function to check if a container is suitable for heating milk
    return containers(container) and recipient(container)

behavior use_coffee_maker(container:item, milk:item, coffe_maker:item):
    body:
        achieve_once inside(milk, container)
        # Pour the milk into the suitable container
        achieve_once on(container, coffe_maker)
        # Place the container with milk on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290) and id[coffe_maker_290] == 290
        # Identify the specific coffee maker to use

        bind container: item where:
            is_suitable_container(container)
        # Select a suitable container for heating milk

        bind milk: item where:
            is_milk(milk)
        # Identify the milk that needs heating

        use_coffee_maker(container, milk, coffe_maker_290)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(fryingpan_2083)putin_executor(milk_2043, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(coffe_maker_290)put_executor(fryingpan_2083, coffe_maker_290)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(fryingpan_2083)putin_executor(milk_2043, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(coffe_maker_290)put_executor(fryingpan_2083, coffe_maker_290)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the milk_2043. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, fryingpan_2083)
Robot find: Robot is close to the milk_2043. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. milk_2043 is inside fryingpan_2083. fryingpan_2083 is close milk_2043. milk_2043 is close fryingpan_2083. milk_2043 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the milk_2043. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(fryingpan_2083, coffe_maker_290)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is close fryingpan_2083. fryingpan_2083 is close coffe_maker_290. fryingpan_2083 is on coffe_maker_290. fryingpan_2083 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(hot_milk:item, cereal:item):
    body:
        achieve_once inside(cereal, hot_milk)
        # Add the cereal to the container with hot milk

behavior __goal__():
    body:
        bind hot_milk: item where:
            is_milk(hot_milk) and on(hot_milk, coffe_maker_290)
        # Select the container with hot milk that is on the coffee maker

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to be added to the hot milk

        add_cereal_to_milk(hot_milk, cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_290; available variables: [Variable<hot_milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior add_cereal_to_milk(hot_milk:item, cereal:item):
    body:
        achieve_once inside(cereal, hot_milk)
        # Add the cereal to the container with hot milk

behavior __goal__():
    body:
        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290)
        # Select the coffee maker

        bind hot_milk: item where:
            is_milk(hot_milk) and on(hot_milk, coffe_maker_290)
        # Select the container with hot milk that is on the coffee maker

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to be added to the hot milk

        add_cereal_to_milk(hot_milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior add_cereal_to_milk(cereal:item, container:item):
    body:
        achieve_once inside(cereal, container)

behavior __goal__():
    body:
        bind hot_milk_container: item where:
            is_fryingpan(hot_milk_container) and inside(milk_2043, hot_milk_container)
        # Select the container with heated milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to add to the milk
       
        add_cereal_to_milk(cereal, hot_milk_container)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2043; available variables: [Variable<hot_milk_container: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, container:item):
    body:
        achieve_once inside(cereal, container)

behavior __goal__():
    body:
        bind hot_milk_container: item where:
            is_fryingpan(hot_milk_container) and is_milk(milk_2043) and inside(milk_2043, hot_milk_container)
        # Select the container with heated milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to add to the milk
       
        add_cereal_to_milk(cereal, hot_milk_container)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2043; available variables: [Variable<hot_milk_container: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior add_cereal_to_milk(cereal:item, container:item):
    body:
        achieve_once inside(cereal, container)

behavior __goal__():
    body:
        bind hot_milk_container: item where:
            is_fryingpan(hot_milk_container) and is_milk(milk) and inside(milk, hot_milk_container)
        # Select the container with heated milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to add to the milk
       
        add_cereal_to_milk(cereal, hot_milk_container)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_cereal_in_hot_milk(milk:item):
    # Function to check if cereal is added to the hot milk
    symbol contains_cereal=exists cereal: item : (is_food_cereal(cereal) and inside(cereal, milk))
    return contains_cereal

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and is_fryingpan(milk) # Assuming milk is heated in a frying pan
        # Select heated milk

        if not is_cereal_in_hot_milk(milk):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inside(cereal, milk)
            # Add cereal to the heated milk in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. add cereal to the hot milk." ?
Answer: Find a cup to put the milk in. Then add cereal into the cup.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a cup, pour the heated milk into it, and add cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_find_suitable_cup():
    symbol is_cup_suitable = exists cup: item : (is_cup(cup) and recipient(cup))
    return is_cup_suitable

def is_coffee_maker_on(coffee_maker: item):
    symbol is_on = is_on(coffee_maker)
    return is_on

behavior pour_and_add_milk_cereal(cup: item, milk: item, cereal: item):
    body:
        if not is_coffee_maker_on(coffee_maker_290):
            achieve is_on(coffee_maker_290)
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        if not is_find_suitable_cup():
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if it is a suitable cup to hold milk")
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind milk: item where:
            is_milk(milk) and inside(milk, fryingpan_2083)
        bind cereal: item where:
            is_food_cereal(cereal)
        pour_and_add_milk_cereal(cup, milk, cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee_maker_290; available variables: [Variable<cup: item>, Variable<milk: item>, Variable<cereal: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def is_find_suitable_cup():
    symbol is_cup_suitable = exists cup: item : (is_cup(cup) and recipient(cup))
    return is_cup_suitable

def is_coffee_maker_on(coffee_maker: item):
    symbol is_on = is_on(coffee_maker)
    return is_on

behavior pour_and_add_milk_cereal(cup: item, milk: item, cereal: item, coffee_maker: item):
    body:
        if not is_coffee_maker_on(coffee_maker):
            achieve is_on(coffee_maker)
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        if not is_find_suitable_cup():
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if it is a suitable cup to hold milk")
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind milk: item where:
            is_milk(milk) and inside(milk, fryingpan_2083)
        bind cereal: item where:
            is_food_cereal(cereal)
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        pour_and_add_milk_cereal(cup, milk, cereal, coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2083; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def is_find_suitable_cup():
    symbol is_cup_suitable = exists cup: item : (is_cup(cup) and recipient(cup))
    return is_cup_suitable

def is_coffee_maker_on(coffee_maker: item):
    symbol is_on = is_on(coffee_maker)
    return is_on

behavior pour_and_add_milk_cereal(cup: item, milk: item, cereal: item, coffee_maker: item, fryingpan: item):
    body:
        if not is_coffee_maker_on(coffee_maker):
            achieve is_on(coffee_maker)
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        if not is_find_suitable_cup():
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if it is a suitable cup to hold milk")
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind milk: item where:
            is_milk(milk) and inside(milk, fryingpan)
        bind cereal: item where:
            is_food_cereal(cereal)
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        pour_and_add_milk_cereal(cup, milk, cereal, coffee_maker, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_container(item: item):
    # Check if the item is a suitable container for milk
    return is_cup(item) and recipient(item)

behavior find_and_prep_milk_cereal(milk: item, cereal: item, coffe_maker: item, fryingpan: item):
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup) # Bind a cup that can receive milk

        # Achieve the intermediate state where the milk is in the frying pan
        achieve inside(milk, fryingpan)
        
        # Check if the frying pan is on the coffee maker
        if not on(fryingpan, coffe_maker):
            achieve_once on(fryingpan, coffe_maker)

        # Pour milk into the cup
        achieve_once inside(milk, cup)
        
        # Add cereal into the cup
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        find_and_prep_milk_cereal(milk, cereal, coffe_maker, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_container_and_pour(milk:item, coffe_maker:item, fryingpan:item, cup:item):
    body:
        achieve_once inside(milk, fryingpan)
        achieve_once is_on(coffe_maker)
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for heating the milk

        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select a specific coffee maker to interact with    

        bind cup: item where: 
            is_cup(cup) 
        # Select a cup to pour the milk into

        bind milk: item where: 
            is_milk(milk)
        # Select the item that is milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the food item that is cereal

        find_container_and_pour(milk, coffe_maker, fryingpan, cup)
        add_cereal(cereal, cup)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_container_and_pour(milk:item, coffe_maker:item, fryingpan:item, cup:item):
    body:
        achieve_once inside(milk, fryingpan)
        achieve_once is_on(coffe_maker)
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for heating the milk

        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select a specific coffee maker to interact with    

        bind cup: item where: 
            is_cup(cup) 
        # Select a cup to pour the milk into

        bind milk: item where: 
            is_milk(milk)
        # Select the item that is milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the food item that is cereal

        find_container_and_pour(milk, coffe_maker, fryingpan, cup)
        add_cereal(cereal, cup)


##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(fryingpan_2083)', 'putin_executor(milk_2043, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(coffe_maker_290)', 'put_executor(fryingpan_2083, coffe_maker_290)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 285 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 22
goal generate times: 9
goal correct times: 1
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
