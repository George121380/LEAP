From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_desk_375(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Select home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select coffee table inside home office

        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Select home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select coffee table inside home office

        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(desk_375)exp(spectacles_2106, desk_375)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(desk_375)
Robot find: glue_2013, keyboard_382, chair_374, mouse_380, Robot is close to the desk_375. 
##############################
From agent.py
exp(spectacles_2106, desk_375)
Fail to find spectacles_2106 around desk_375. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_379)exp(spectacles_2106, computer_379)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(computer_379)
Robot find: Robot is close to the computer_379. 
##############################
From agent.py
exp(spectacles_2106, computer_379)
Fail to find spectacles_2106 around computer_379. 
##############################
From agent.py-> find a plan in act()
walk_executor(mousepad_381)exp(spectacles_2106, mousepad_381)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(mousepad_381)
Robot find: Robot is close to the mousepad_381. Robot is close to the desk_375. 
##############################
From agent.py
exp(spectacles_2106, mousepad_381)
Fail to find spectacles_2106 around mousepad_381. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(spectacles_2106, filing_cabinet_378)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Robot find: food_bread_2016, crayon_2020, needle_2024, check_2033, alcohol_2002, coffee_filter_2035, soap_2037, bills_2009, drawing_387, Robot is close to the food_bread_2016. Robot is close to the crayon_2020. Robot is close to the needle_2024. Robot is close to the check_2033. Robot is close to the alcohol_2002. Robot is close to the coffee_filter_2035. Robot is close to the soap_2037. Robot is close to the bills_2009. Robot is close to the filing_cabinet_378. 
##############################
From agent.py
exp(spectacles_2106, filing_cabinet_378)
Fail to find spectacles_2106 around filing_cabinet_378. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_377)exp(spectacles_2106, dresser_377)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(dresser_377)
Robot find: novel_2010, pajamas_2039, drawing_388, Robot is close to the dresser_377. Robot is close to the novel_2010. Robot is close to the pajamas_2039. 
##############################
From agent.py
exp(spectacles_2106, dresser_377)
Fail to find spectacles_2106 around dresser_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_186)exp(spectacles_2106, tvstand_186)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(tvstand_186)
Robot find: mat_201, cd_2100, Robot is close to the tvstand_186. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: The spectacles_2106 are located in dining_room_1. You will find them on top of kitchen_counter_128. As you approach kitchen_counter_128, look for the spectacles_2106 directly on the surface of the counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2106 are located in dining_room_1. You will find them on top of kitchen_counter_128. As you approach kitchen_counter_128, look for the spectacles_2106 directly on the surface of the counter.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to computer_379.
Action 4: look for spectacles_2106 around computer_379.
Action 5: Walk to mousepad_381.
Action 6: look for spectacles_2106 around mousepad_381.
Action 7: Walk to filing_cabinet_378.
Action 8: look for spectacles_2106 around filing_cabinet_378.
Action 9: Walk to dresser_377.
Action 10: look for spectacles_2106 around dresser_377.
Action 11: Walk to tvstand_186.

##############################
From agent.py
exp(spectacles_2106, tvstand_186)
Fail to find spectacles_2106 around tvstand_186. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the spectacles from the current table to the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to move the spectacles from the current table to the coffee table in the home office.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to computer_379.
Action 4: look for spectacles_2106 around computer_379.
Action 5: Walk to mousepad_381.
Action 6: look for spectacles_2106 around mousepad_381.
Action 7: Walk to filing_cabinet_378.
Action 8: look for spectacles_2106 around filing_cabinet_378.
Action 9: Walk to dresser_377.
Action 10: look for spectacles_2106 around dresser_377.
Action 11: Walk to tvstand_186.
Action 12: look for spectacles_2106 around tvstand_186.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Grab spectacles_2106.
Action 17: Walk to table_193.
Action 18: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, inside_char(char, coffee_table))

        achieve_once inhand(spectacles) 
        achieve_once on(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::coffee_table, inside_char(O::char, V::coffee_table)
Argument #1 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, bind home_office: item where is_home_office(home_office))

        achieve_once inhand(spectacles) 
        achieve_once on(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5860, column 66.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind coffee_table: item where:
            is_table(coffee_table) and exists home_office: item : (is_home_office(home_office) and inside(coffee_table, home_office))

        achieve_once inhand(spectacles)
        achieve_once on(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
Below is the formal representation of your current subtask goal:

 
behavior find_and_place_spectacles(spectacles:item, home_office:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        achieve_once inside_char(char, home_office)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        find_and_place_spectacles(spectacles, home_office, coffee_table)
 

This structured representation outlines the goal of finding the spectacles and placing them on the coffee table in the home office The behavior find_and_place_spectacles ensures the spectacle is in hand, that you are inside the home office, and that the spectacles are placed on the coffee table The __goal__ behavior binds the variables for spectacles, the home office, and the coffee table before invoking find_and_place_spectacles
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'Below') at line 5817, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* INIT
	* UNDIRECTED_GENERATOR
	* BEHAVIOR
	* $END
	* OBJECTS
	* CONTROLLER
	* _NEWLINE
	* GOAL
	* IMPORT
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_tvstand_135(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
behavior find_and_place_spectacles(spectacles:item, home_office:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        achieve_once inside_char(char, home_office)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        find_and_place_spectacles(spectacles, home_office, coffee_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_374_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_cat_2082_around_couch_192(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_spectacles_and_place_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        find_spectacles_and_place_on_table(spectacles, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_target_table(table:item):
    # Function to check if the given table is the target table based on its location
    symbol target_table=exists room: item : (is_home_office(room) and inside(table, room))
    return target_table

behavior put_on_table(item:item, table:item):
    # Define behavior to place an item on a specified table
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles to be moved
        
        bind table: item where:
            is_table(table) and is_target_table(table)
        # Select table located in the home office

        bind current_table: item where:
            on(spectacles, current_table)
        # Identify current location of spectacles

        if exists table: item : (on(spectacles, table) and is_target_table(table)):
            # Spectacles are already on the correct table
            achieve close_char(char, table)

        else:
            # Move spectacles to the correct table
            put_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_spectacles_nearby(obj: item):
    # Function to check if the spectacles are near the object
    symbol nearby = exists o: item: (is_spectacles(o) and close(o, obj))
    return nearby

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the specified table

behavior __goal__():
    body:
        if exists table: item: (is_table(table) and is_home_office(table) and is_spectacles_nearby(table)):
            # If theres a table in the home office with spectacles nearby, move the spectacles to that table
            bind spectacles: item where:
                is_spectacles(spectacles) and close(spectacles, table)
            achieve close_char(char, table)
            move_spectacles_to_table(spectacles, table)

        else:
            # If no table with nearby spectacles is found, search all unvisited tables in the home office
            foreach table: item:
                if is_table(table) and is_home_office(table) and not visited(table):
                    observe(table, "Check if spectacles are close to this table")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<spectacles: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

#goal_representation
 
def is_spectacles_nearby(table: item):
    # Function to check if the spectacles are near the table
    symbol nearby = exists o: item: (is_spectacles(o) and close(o, table))
    return nearby

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the specified table

behavior __goal__():
    body:
        if exists table: item: (is_table(table) and is_home_office(table) and is_spectacles_nearby(table)):
            # If theres a table in the home office with spectacles nearby, move the spectacles to that table
            bind spectacles: item where:
                is_spectacles(spectacles) and close(spectacles, table)
            achieve close_char(char, table)
            move_spectacles_to_table(spectacles, table)

        else:
            # If no table with nearby spectacles is found, search all unvisited tables in the home office
            foreach table: item:
                if is_table(table) and is_home_office(table) and not visited(table):
                    observe(table, "Check if spectacles are close to this table")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<spectacles: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_spectacles_nearby(table: item):
    # Function to check if the spectacles are near the table
    symbol nearby = exists o: item: (is_spectacles(o) and close(o, table))
    return nearby

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the specified table

behavior __goal__():
    body:
        if exists table: item: (is_table(table) and is_home_office(table) and is_spectacles_nearby(table)):
            # If theres a table in the home office with spectacles nearby, move the spectacles to that table
            bind spectacles: item where:
                is_spectacles(spectacles) and close(spectacles, table)
            achieve close_char(char, table)
            move_spectacles_to_table(spectacles, table)

        else:
            # If no table with nearby spectacles is found, search all unvisited tables in the home office
            foreach table: item:
                if is_table(table) and is_home_office(table) and not visited(table):
                    observe(table, "Check if spectacles are close to this table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_coffee_table_in_room_home_office(table: item):
    # Function to check if a table is a coffee table in the home office
    symbol is_coffee_table_in_home_office = exists room: item: (is_home_office(room) and inside(table, room) and is_table(table))
    return is_coffee_table_in_home_office

def has_spectacles_on_table(table: item):
    # Function to check if there are spectacles on the specified table
    symbol has_spectacles = exists o: item: (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior move_spectacles_to_coffee_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        if exists table: item: (has_coffee_table_in_room_home_office(table) and has_spectacles_on_table(table)):
            # Checks if spectacles are already on the coffee table in home office
            bind table: item where:
                has_coffee_table_in_room_home_office(table) and has_spectacles_on_table(table)
            # If they are, no need to continue
        else:
            if exists table: item : (has_coffee_table_in_room_home_office(table)):
                # If the coffee table in home office is found, move the spectacles there
                bind table: item where:
                    has_coffee_table_in_room_home_office(table)
                # Select the coffee table in the home office
                bind spectacles: item where:
                    is_spectacles(spectacles)
                # Select spectacles
                move_spectacles_to_coffee_table(spectacles, table)
            
            else:
                # If the coffee table in home office is not confirmed, search and move spectacles on confirmation
                foreach table: item:
                    if is_table(table) and not visited(table):
                        observe(table, "Check if this is the coffee table in the home office and contains any spectacles")
                        if has_coffee_table_in_room_home_office(table):
                            # If its coffee table in the home office, move spectacles to it
                            bind spectacles: item where:
                                is_spectacles(spectacles)
                            move_spectacles_to_coffee_table(spectacles, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_374_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(x:item):
    # Function to check if an item is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(x, room))
    return in_home_office

behavior place_on_coffee_table_in_home_office(x:item, table:item):
    body:
        achieve_once on(x, table) # Place the item on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        
        place_on_coffee_table_in_home_office(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#exp_behavior_end

#goal_representation
 
def has_spectacles_in_room(room: item):
    # Function to check if the spectacles are in a specified room
    symbol found_spectacles = exists o: item: (is_spectacles(o) and inside(o, room))
    return found_spectacles

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        # Check if the spectacles are already in the home office
        if has_spectacles_in_room(home_office):
            # If spectacles are already in the home office, set them on the coffee table
            bind spectacles: item where:
                is_spectacles(spectacles) and inside(spectacles, home_office)
            bind coffee_table: item where:
                is_table(coffee_table) and inside(coffee_table, home_office)
            achieve on(spectacles, coffee_table) 

        else:
            # If spectacles are not in the home office, find them and move them to the coffee table
            foreach room: item:
                if not has_spectacles_in_room(room):
                    observe(room, "Check for the spectacles in the room")

            bind spectacles: item where:
                is_spectacles(spectacles)
            bind coffee_table: item where:
                is_table(coffee_table) and inside(coffee_table, home_office)
            achieve on(spectacles, coffee_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_spectacles_on_table(table: item):
    # Check if the spectacles are on the specified table
    symbol has_spectacles = exists o: item : (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior __goal__():
    body:
        if exists spectacles: item : (is_spectacles(spectacles) and exists table: item : (is_table(table) and has_spectacles_on_table(table))):
            # If we have already found the spectacles on a table, we can directly approach it
            bind table: item where:
                is_table(table) and has_spectacles_on_table(table)
            achieve close_char(char, table) 

        else:
            # If spectacles are not found on any known table, continue searching
            foreach o: item:
                if is_spectacles(o) and not visited(o):
                    observe(o, "Check if there is a table with the spectacles on it")
                    # Observe each spectacles in the scene to locate them

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'table') at line 5825, column 76.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_spectacles_on_table(table: item):
    # Check if the spectacles are on the specified table
    symbol has_spectacles = exists o: item : (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior __goal__():
    body:
        if exists spectacles: item : (is_spectacles(spectacles) and exists table: item : (is_table(table) and has_spectacles_on_table(table))):
            # If we have already found the spectacles on a table, we can directly approach it
            bind table: item where:
                is_table(table) and has_spectacles_on_table(table)
            achieve close_char(char, table) 

        else:
            # If spectacles are not found on any known table, continue searching
            foreach o: item:
                if is_spectacles(o) and not visited(o):
                    observe(o, "Check if there is a table with the spectacles on it")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'table') at line 5825, column 76.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_phone_47_around_keyboard_382(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==382
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(phone,keyboard_instance)
        else:
            exp(phone,keyboard_instance)
    eff:
        unknown[phone]=False
        close[phone,keyboard_instance]=True
        close[keyboard_instance,phone]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
def has_spectacles_on_table(table: item):
    # Check if the spectacles are on the specified table
    symbol has_spectacles = exists o: item : (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior __goal__():
    body:
        if exists spectacles: item : (is_spectacles(spectacles) and exists table: item : (is_table(table) and has_spectacles_on_table(table))):
            # If we have already found the spectacles on a table, we can directly approach it
            bind table: item where:
                is_table(table) and has_spectacles_on_table(table)
            achieve close_char(char, table) 

        else:
            # If spectacles are not found on any known table, continue searching
            foreach o: item:
                if is_spectacles(o) and not visited(o):
                    observe(o, "Check if there is a table with the spectacles on it")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind table: item where:
            is_table(table) and inside(table, home_office)

        # Select the coffee table in the home office
        achieve_once on(spectacles, table)
        # Put the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_cup_2088_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind table: item where:
            is_table(table) and inside(table, home_office)
            bind home_office: item where:
            is_home_office(home_office)
        # Select the coffee table in the home office
        achieve_once on(spectacles, table)
        # Put the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'is_home_office') at line 5863, column 13.
Expected one of: 
	* _INDENT
Previous tokens: [Token('_NEWLINE', '\n            ')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_food_hamburger_2057_around_microwave_149(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

#goal_representation

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        achieve_once on(spectacles, table)
        # Put the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_mouse_2003_around_mouse_380(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        achieve_once inhand(spectacles)
        # Ensure the spectacles are temporarily held in hand
        achieve_once on(spectacles, table)
        # Place the spectacles on the coffee table in the home office

def has_spectacles_on_table(table:item):
    # Function to check if there are spectacles on the specified table
    symbol has_spectacles= exists o: item : (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table that is inside the home office

        if exists spectacles: item : (is_spectacles(spectacles) and on(spectacles, table) and has_spectacles_on_table(table)):
            # If the spectacles are already on the intended table, confirm their placement
            achieve close_char(char, table)
        
        else:
            # If the spectacles are not on the table, relocate them appropriately
            bind spectacles: item where:
                is_spectacles(spectacles)
            # Select the spectacles
            move_spectacles_to_table(spectacles, table)
            # Move the spectacles to the coffee table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_tvstand_135(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

#goal_representation
 
behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        achieve_once inhand(spectacles)
        # Ensure the spectacles are temporarily held in hand
        achieve_once on(spectacles, table)
        # Place the spectacles on the coffee table in the home office

def has_spectacles_on_table(table:item):
    # Function to check if there are spectacles on the specified table
    symbol has_spectacles= exists o: item : (is_spectacles(o) and on(o, table))
    return has_spectacles

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office before use

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table that is inside the home office

        if exists spectacles: item : (is_spectacles(spectacles) and on(spectacles, table) and has_spectacles_on_table(table)):
            # If the spectacles are already on the intended table, confirm their placement
            achieve close_char(char, table)
        
        else:
            # If the spectacles are not on the table, relocate them appropriately
            bind spectacles: item where:
                is_spectacles(spectacles)
            # Select the spectacles
            move_spectacles_to_table(spectacles, table)
            # Move the spectacles to the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(item:item):
    # Check if the item is inside the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        bind current_location: item where:
            close(spectacles, current_location)
        # Move spectacles from current location to table in the home office
        achieve_once on(spectacles, table)
        # Place the spectacles on the table in the home office

behavior __goal__():
    body:
        # Determine the location of the spectacles and move them to the coffee table in the home office
        foreach spectacles: item:
            if is_spectacles(spectacles) and not visited(spectacles):
                observe(spectacles, "Check is there any spectacles in the room")
                if is_in_home_office(spectacles):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    # Move the spectacles to the table if they are inside the home office
                    move_spectacles_to_table(spectacles, table)
                    return

        # If spectacles are not in the known location, continue search and move them when found
        foreach spectacled_holders: item:
            if is_spectacles(spectacled_holders) and not visited(spectacled_holders):
                observe(spectacled_holders, "Check is there any spectacles in room")
                if is_in_home_office(spectacled_holders):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    move_spectacles_to_table(spectacled_holders, table)
                    return


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        # If spectacles are not in the known location, continue search and move them when found\n        ') at line 5860, column 27.
Expected one of: 
	* DO
	* NONE
	* FINDALL
	* LONG_STRING
	* STRING
	* NOT
	* DEC_NUMBER
	* EXISTS
	* OCT_NUMBER
	* HEX_NUMBER
	* MINUS
	* IMAG_NUMBER
	* TILDE
	* BIN_NUMBER
	* FALSE
	* ELLIPSIS
	* FINDONE
	* VARNAME
	* LSQB
	* FLOAT_NUMBER
	* FORALL
	* COLON
	* LPAR
	* PLUS
	* TRUE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_in_home_office(item:item):
    # Check if the item is inside the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        # Move spectacles from current location to table in the home office
        achieve_once on(spectacles, table)
        # Place the spectacles on the table in the home office

behavior __goal__():
    body:
        # Determine the location of the spectacles and move them to the coffee table in the home office
        foreach spectacles: item:
            if is_spectacles(spectacles) and not visited(spectacles):
                observe(spectacles, "Check is there any spectacles in the room")
                if is_in_home_office(spectacles):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    # Move the spectacles to the table if they are inside the home office
                    move_spectacles_to_table(spectacles, table)
                    return

        # If spectacles are not in the known location, continue search and move them when found
        foreach spectacled_holders: item:
            if is_spectacles(spectacled_holders) and not visited(spectacled_holders):
                observe(spectacled_holders, "Check is there any spectacles in room")
                if is_in_home_office(spectacled_holders):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    move_spectacles_to_table(spectacled_holders, table)
                    return

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        # If spectacles are not in the known location, continue search and move them when found\n        ') at line 5858, column 27.
Expected one of: 
	* DO
	* NONE
	* FINDALL
	* LONG_STRING
	* STRING
	* NOT
	* DEC_NUMBER
	* EXISTS
	* OCT_NUMBER
	* HEX_NUMBER
	* MINUS
	* IMAG_NUMBER
	* TILDE
	* BIN_NUMBER
	* FALSE
	* ELLIPSIS
	* FINDONE
	* VARNAME
	* LSQB
	* FLOAT_NUMBER
	* FORALL
	* COLON
	* LPAR
	* PLUS
	* TRUE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_chair_138_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
def is_in_home_office(item:item):
    # Check if the item is inside the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        # Move spectacles from current location to table in the home office
        achieve_once on(spectacles, table)
        # Place the spectacles on the table in the home office

behavior __goal__():
    body:
        # Determine the location of the spectacles and move them to the coffee table in the home office
        foreach spectacles: item:
            if is_spectacles(spectacles) and not visited(spectacles):
                observe(spectacles, "Check is there any spectacles in the room")
                if is_in_home_office(spectacles):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    # Move the spectacles to the table if they are inside the home office
                    move_spectacles_to_table(spectacles, table)
                    return

        # If spectacles are not in the known location, continue search and move them when found
        foreach spectacled_holders: item:
            if is_spectacles(spectacled_holders) and not visited(spectacled_holders):
                observe(spectacled_holders, "Check is there any spectacles in room")
                if is_in_home_office(spectacled_holders):
                    bind table: item where:
                        is_table(table) and is_in_home_office(table)
                    move_spectacles_to_table(spectacled_holders, table)
                    return

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(desk_375)', 'walk_executor(computer_379)', 'walk_executor(mousepad_381)', 'walk_executor(filing_cabinet_378)', 'walk_executor(dresser_377)', 'walk_executor(tvstand_186)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)']
Time info:
Time consume: 533 seconds
Exp_helper query times: 1
Guidance query times: 2
library scale: 49
goal generate times: 13
goal correct times: 4
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
