From agent.py
Reset goals: The sub-goals are: 
['1. Identify the shirt and the skirt that need to be ironed.', '2. Iron the shirt.', '3. Iron the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2116_around_basket_for_clothes_2040(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironing_needed(item: item):
    # This function checks if a specific item is the shirt or the skirt that needs ironing
    return is_clothes_shirt(item) or is_clothes_skirt(item)

def has_ironing_item(item: item):
    # This function determines whether the item is either a shirt or a skirt
    symbol is_ironing_item = is_clothes(item) and (is_clothes_shirt(item) or is_clothes_skirt(item))
    return is_ironing_item

behavior __goal__():
    body:
        if exists item: item : (has_ironing_item(item) and not visited(item)):
            # If an item matches the conditions and hasnt been visited, the character should observe it
            foreach item: item:
                if has_ironing_item(item) and not visited(item):
                    observe(item, "Identify if it needs to be ironed")

        else:
            # If no unvisited item matches, observe all items to check whether they are a shirt or a skirt needing ironing
            foreach item: item:
                if is_clothes(item):
                    observe(item, "Check if it is the shirt or the skirt that needs ironing")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ironing_needed(item: item):
    # This function checks if a specific item is the shirt or the skirt that needs ironing
    return is_clothes_shirt(item) or is_clothes_skirt(item)

def has_ironing_item(item: item):
    # This function determines whether the item is either a shirt or a skirt
    symbol is_ironing_item = is_clothes(item) and (is_clothes_shirt(item) or is_clothes_skirt(item))
    return is_ironing_item

behavior __goal__():
    body:
        if exists item: item : (has_ironing_item(item) and not visited(item)):
            # If an item matches the conditions and hasnt been visited, the character should observe it
            foreach item: item:
                if has_ironing_item(item) and not visited(item):
                    observe(item, "Identify if it needs to be ironed")

        else:
            # If no unvisited item matches, observe all items to check whether they are a shirt or a skirt needing ironing
            foreach item: item:
                if is_clothes(item):
                    observe(item, "Check if it is the shirt or the skirt that needs ironing")

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)obs(clothes_shirt_2114, Identify if it needs to be ironed)walk_executor(basket_for_clothes_2040)exp(clothes_skirt_2116, basket_for_clothes_2040)walk_executor(clothes_skirt_2116)obs(clothes_skirt_2116, Identify if it needs to be ironed)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2114, Identify if it needs to be ironed)obs(clothes_skirt_2116, Identify if it needs to be ironed)
##############################
From agent.py
obs(clothes_shirt_2114, Identify if it needs to be ironed)
Get this information:  clothes_shirt_2114 is close to basket_for_clothes_2040. clothes_shirt_2114 is close to character_219. clothes_shirt_2114 is inside basket_for_clothes_2040. clothes_shirt_2114 is inside bathroom_265. clothes_shirt_2114 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2116, Identify if it needs to be ironed)
Get this information:  clothes_skirt_2116 is inside basket_for_clothes_2040. clothes_skirt_2116 is inside bathroom_265. clothes_skirt_2116 is close to basket_for_clothes_2040. clothes_skirt_2116 is close to character_219. clothes_skirt_2116 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def found_ironing_board(board: item):
    # Determine if there is an ironing board in the scene
    symbol has_board = exists o: item : (is_ironing_board(o))
    return has_board

behavior iron_the_shirt(shirt: item, iron: item, board: item):
    body:
        achieve plugged(iron)
        # Plug in the iron
        achieve_once is_on(iron)
        # Turn on the iron temporarily
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if found_ironing_board(board):
            bind board: item where:
                is_ironing_board(board)
            # Select an ironing board if found
            iron_the_shirt(shirt, iron, board)
        else:
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Confirm availability")
            # Check all unvisited potential ironing boards

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: board; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#goal_representation
 
def found_ironing_board(board: item):
    # Determine if there is an ironing board in the scene
    symbol has_board = exists o: item : (is_ironing_board(o))
    return has_board

behavior iron_the_shirt(shirt: item, iron: item, board: item):
    body:
        achieve plugged(iron)
        # Plug in the iron
        achieve_once is_on(iron)
        # Turn on the iron temporarily
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if found_ironing_board():
            bind board: item where:
                is_ironing_board(board)
            # Select an ironing board if found
            iron_the_shirt(shirt, iron, board)
        else:
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Confirm availability")
            # Check all unvisited potential ironing boards

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 0 vs 1. Args: (), Types: (ObjectType<item>,)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_386_around_ironing_board_2099(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

#goal_representation
 
def found_ironing_board():
    # Determine if there is an ironing board in the scene
    symbol has_board = exists o: item : (is_ironing_board(o))
    return has_board

behavior iron_the_shirt(shirt: item, iron: item, board: item):
    body:
        achieve plugged(iron)
        # Plug in the iron
        achieve_once is_on(iron)
        # Turn on the iron temporarily
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if found_ironing_board():
            bind board: item where:
                is_ironing_board(board)
            # Select an ironing board if found
            iron_the_shirt(shirt, iron, board)
        else:
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Confirm availability")
            # Check all unvisited potential ironing boards

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def found_ironing_board():
    # Determine if there is an ironing board in the scene
    symbol has_board = exists o: item : (is_ironing_board(o))
    return has_board

behavior iron_the_shirt(shirt: item, iron: item, board: item):
    body:
        achieve plugged(iron)
        # Plug in the iron
        achieve_once is_on(iron)
        # Turn on the iron temporarily
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if found_ironing_board():
            bind board: item where:
                is_ironing_board(board)
            # Select an ironing board if found
            iron_the_shirt(shirt, iron, board)
        else:
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Confirm availability")
            # Check all unvisited potential ironing boards

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the ironing_board_2099. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is turned on. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2078_around_tvstand_186(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(clothes_jacket,tvstand_instance)
        else:
            exp(clothes_jacket,tvstand_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,tvstand_instance]=True
        close[tvstand_instance,clothes_jacket]=True
    

behavior find_clothes_gloves_2077_around_washing_machine_2041(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind iron: item where:
            is_iron(iron)
        
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)

        achieve plugged(iron)
        achieve is_on(iron)
        achieve_once inhand(clothes_skirt)
        achieve_once on(clothes_skirt, ironing_board)
        # Ensure that the skirt is placed on the ironing board temporarily
        achieve cut(clothes_skirt)
        # Achieve the goal of ironing the skirt
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2078_around_washing_machine_2041(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_jacket,washing_machine_instance)
        else:
            exp(clothes_jacket,washing_machine_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,washing_machine_instance]=True
        close[washing_machine_instance,clothes_jacket]=True
    

behavior find_alcohol_2002_around_bathroom_cabinet_305(alcohol:item):
    goal: not unknown(alcohol)
    body:
        assert is_alcohol(alcohol)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(alcohol,bathroom_cabinet_instance)
        else:
            exp(alcohol,bathroom_cabinet_instance)
    eff:
        unknown[alcohol]=False
        close[alcohol,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,alcohol]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt: item, iron: item, ironing_board: item):
    body:
        achieve_once inhand(skirt)
        achieve_once on(skirt, ironing_board)
        achieve is_on(iron)
        achieve inhand(iron)
        achieve once on(iron, skirt)
        # Ensure that the skirt is placed on the ironing board
        # Ensure that the iron is on
        # Iron the skirt

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron) and is_on(iron)
        # Select the iron and ensure it is on
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        iron_skirt(skirt, iron, ironing_board)
        # Iron the skirt using the iron and ironing board

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5777, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#goal_representation

behavior iron_skirt(skirt: item, iron: item, ironing_board: item):
    body:
        achieve_once inhand(skirt)
        achieve_once on(skirt, ironing_board)
        achieve is_on(iron)
        achieve_once inhand(iron)
        achieve_once on(iron, skirt)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron) and is_on(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        iron_skirt(skirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior iron_skirt(skirt: item, iron: item, ironing_board: item):
    body:
        achieve_once inhand(skirt)
        achieve_once on(skirt, ironing_board)
        achieve is_on(iron)
        achieve_once inhand(iron)
        achieve_once on(iron, skirt)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron) and is_on(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        iron_skirt(skirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)grab_executor(iron_2117)walk_executor(clothes_skirt_2116)put_executor(iron_2117, clothes_skirt_2116)
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_skirt_2116, ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_skirt_2116. clothes_skirt_2116 is close ironing_board_2099. clothes_skirt_2116 is on ironing_board_2099. clothes_skirt_2116 released by right hand. 
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing iron_2117 by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
put_executor(iron_2117, clothes_skirt_2116)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. clothes_skirt_2116 is close iron_2117. iron_2117 is close clothes_skirt_2116. iron_2117 is on clothes_skirt_2116. iron_2117 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt.
Action History:
['walk_executor(basket_for_clothes_2040)', 'walk_executor(ironing_board_2099)', 'walk_executor(iron_2117)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_skirt_2116, ironing_board_2099)', 'grab_executor(iron_2117)', 'walk_executor(clothes_skirt_2116)', 'put_executor(iron_2117, clothes_skirt_2116)']
Time info:
Time consume: 219 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 54
goal generate times: 4
goal correct times: 3
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
