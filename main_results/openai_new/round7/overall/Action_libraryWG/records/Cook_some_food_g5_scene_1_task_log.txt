From agent.py
Reset goals: The sub-goals are: 
['1. Gather the bananas and peel them.', '2. Heat the oil in a pan.', '3. Fry the bananas in the heated oil until golden brown.', '4. Place the fried bananas on a plate to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior peel_banana(banana:item): 
    body: 
        achieve clean(banana) 

behavior __goal__(): 
    body:
        bind banana: item where: 
            is_food_banana(banana) 

        achieve clean(banana) 
#goal_representation_end

##############################
From agent.py->reset_goal

behavior peel_banana(banana:item): 
    body: 
        achieve clean(banana) 

behavior __goal__(): 
    body:
        bind banana: item where: 
            is_food_banana(banana) 

        achieve clean(banana) 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_banana_2083)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cut the banana into slices.', '2. Heat the oil in a pan.', '3. Fry the banana slices in the heated oil.', '4. Remove the fried banana slices and let them drain.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
def has_found_banana():
    # Function to return the specific state of finding a banana
    return True

behavior __goal__():
    body:
        if not has_found_banana():
            foreach o: item:
                if is_food_banana(o) and not visited(fridge_126):
                    observe(fridge_126, "check for food_banana_2083")

        # Bind the banana instance
        bind banana: item where:
            is_food_banana(banana)

        # Ensure the banana is sliced
        achieve cut(banana)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_126; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def has_found_banana():
    # Function to return the specific state of finding a banana
    return True

behavior __goal__():
    body:
        if not has_found_banana():
            foreach o: item:
                if is_food_banana(o) and not visited(fridge_126):
                    observe(fridge_126, "check for food_banana_2083")

        # Bind the banana instance
        bind fridge_126: item where:
            is_fridge(fridge_126)

        bind banana: item where:
            is_food_banana(banana)

        # Ensure the banana is sliced
        achieve cut(banana)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_126; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def has_found_banana():
    # Function to return the specific state of finding a banana
    return True

behavior __goal__():
    body:
        if not has_found_banana():
            foreach o: item:
                if is_food_banana(o) and not visited(fridge_126):
                    observe(fridge_126, "check for food_banana_2083")

        # Bind the fridge instance first
        bind fridge_126: item where:
            is_fridge(fridge_126)

        # Bind the banana instance
        bind banana: item where:
            is_food_banana(banana)

        # Ensure the banana is sliced
        achieve cut(banana)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior cut_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Temporarily place banana on cutting board
        achieve_once cut(banana) # Cut the banana

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind banana: item where:
            is_food_banana(banana)
        bind knife: item where:
            is_knife(knife)
        cut_banana(banana, cutting_board, knife) # Execute the behavior of cutting the banana
#goal_representation_end

##############################
From agent.py->reset_goal
behavior cut_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Temporarily place banana on cutting board
        achieve_once cut(banana) # Cut the banana

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind banana: item where:
            is_food_banana(banana)
        bind knife: item where:
            is_knife(knife)
        cut_banana(banana, cutting_board, knife) # Execute the behavior of cutting the banana
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_289)exp(knife_2122, curtain_289)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(curtain_289)
Robot find: pillow_287, Robot is close to the curtain_289. Robot is close to the curtain_290. 
##############################
From agent.py
exp(knife_2122, curtain_289)
Fail to find knife_2122 around curtain_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(knife_2122, kitchen_counter_122)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(knife_2122, kitchen_counter_122)
Fail to find knife_2122 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_39)exp(knife_2122, light_39)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(light_39)
Robot find: Robot is close to the light_39. 
##############################
From agent.py
exp(knife_2122, light_39)
Fail to find knife_2122 around light_39. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(knife_2122, microwave_135)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(knife_2122, microwave_135)
Fail to find knife_2122 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(knife_2122, table_270)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2122 ?
Answer: Robot, please go to dining_room_41. Once there, locate table_114. The target item, knife_2122, is on table_114 and is surrounded by the objects on this table. Retrieve knife_2122 from this location.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please go to dining_room_41. Once there, locate table_114. The target item, knife_2122, is on table_114 and is surrounded by the objects on this table. Retrieve knife_2122 from this location.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to curtain_289.
Action 11: look for knife_2122 around curtain_289.
Action 12: Walk to kitchen_counter_122.
Action 13: look for knife_2122 around kitchen_counter_122.
Action 14: Walk to light_39.
Action 15: look for knife_2122 around light_39.
Action 16: Walk to microwave_135.
Action 17: Open microwave_135.
Action 18: look for knife_2122 around microwave_135.
Action 19: Walk to table_270.

##############################
From agent.py
exp(knife_2122, table_270)
Fail to find knife_2122 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(knife_2122, table_114)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(knife_2122, table_114)
Find knife_2122. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(knife_2122)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. 
##############################
From agent.py
grab_executor(knife_2122)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. Grabbing knife_2122 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2131_around_computer_276(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_keyboard_211_around_computer_276(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior add_oil_to_pan(oil: item, pan: item):
    body:
        achieve_once inside(oil, pan)

behavior place_pan_on_stove(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)

behavior heat_oil_in_pan(stove: item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)

        add_oil_to_pan(oil, pan)
        place_pan_on_stove(pan, stove)
        heat_oil_in_pan(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_oil_to_pan(oil: item, pan: item):
    body:
        achieve_once inside(oil, pan)

behavior place_pan_on_stove(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)

behavior heat_oil_in_pan(stove: item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)

        add_oil_to_pan(oil, pan)
        place_pan_on_stove(pan, stove)
        heat_oil_in_pan(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(oil_2149, oven_127)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the knife_2122. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the knife_2122. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(oil_2149, oven_127)
Fail to find oil_2149 around oven_127. 
##############################
From agent.py-> find a plan in act()
grab_executor(oil_2013)walk_executor(fryingpan_2154)putin_executor(oil_2013, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(oil_2013)
Robot find: Robot is close to the knife_2122. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. Grabbing oil_2013 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2122. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2013, fryingpan_2154)
Robot find: Robot is close to the knife_2122. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2013 is inside fryingpan_2154. fryingpan_2154 is close oil_2013. oil_2013 is close fryingpan_2154. oil_2013 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2122. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2122. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2122. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2122. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
def is_suitable_oil_pan(pan: item):
    # Function to check if the given pan is suitable for frying by checking if it already has oil
    symbol has_oil = exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

def is_suitable_banana_state(banana: item):
    # Function to check if the banana is in a suitable state (sliced) for frying
    symbol is_sliced = cut(banana)
    return is_sliced

behavior fry_banana_slices(pan: item, banana: item, stove: item):
    body:
        observe(pan, "Check if the pan already has oil")
        if is_suitable_oil_pan(pan):
            achieve_once inhand(banana)
            achieve_once inside(banana, pan)
            achieve_once inhand(pan)
            achieve_once on(pan, stove)
            achieve_once is_on(stove)
            return

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind banana: item where:
            is_food_banana(banana) and is_suitable_banana_state(banana)
        bind stove: item where:
            is_stove(stove)
        
        fry_banana_slices(pan, banana, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5537, column 19.
Expected one of: 
	* VARNAME
	* LPAR
	* FINDONE
	* FLOAT_NUMBER
	* DO
	* LSQB
	* NONE
	* NOT
	* COLON
	* TILDE
	* MINUS
	* BIN_NUMBER
	* PLUS
	* ELLIPSIS
	* EXISTS
	* OCT_NUMBER
	* LONG_STRING
	* FORALL
	* FINDALL
	* IMAG_NUMBER
	* DEC_NUMBER
	* FALSE
	* TRUE
	* STRING
	* HEX_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#goal_representation
 
def is_suitable_oil_pan(pan: item):
    # Function to check if the given pan is suitable for frying by checking if it already has oil
    symbol has_oil = exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

def is_suitable_banana_state(banana: item):
    # Function to check if the banana is in a suitable state (sliced) for frying
    symbol is_sliced = cut(banana)
    return is_sliced

behavior fry_banana_slices(pan: item, banana: item, stove: item):
    body:
        observe(pan, "Check if the pan already has oil")
        if is_suitable_oil_pan(pan):
            achieve_once inside(banana, pan)
            achieve_once inhand(pan)
            achieve_once on(pan, stove)
            achieve_once is_on(stove)
            return

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind banana: item where:
            is_food_banana(banana) and is_suitable_banana_state(banana)
        bind stove: item where:
            is_stove(stove)
        
        fry_banana_slices(pan, banana, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5537, column 19.
Expected one of: 
	* VARNAME
	* LPAR
	* FINDONE
	* FLOAT_NUMBER
	* DO
	* LSQB
	* NONE
	* NOT
	* COLON
	* TILDE
	* MINUS
	* BIN_NUMBER
	* PLUS
	* ELLIPSIS
	* EXISTS
	* OCT_NUMBER
	* LONG_STRING
	* FORALL
	* FINDALL
	* IMAG_NUMBER
	* DEC_NUMBER
	* FALSE
	* TRUE
	* STRING
	* HEX_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2069_around_pillow_106(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==106
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(cat,pillow_instance)
        else:
            exp(cat,pillow_instance)
    eff:
        unknown[cat]=False
        close[cat,pillow_instance]=True
        close[pillow_instance,cat]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#goal_representation
def is_suitable_oil_pan(pan: item):
    # Function to check if the given pan is suitable for frying by checking if it already has oil
    symbol has_oil = exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

def is_suitable_banana_state(banana: item):
    # Function to check if the banana is in a suitable state (sliced) for frying
    symbol is_sliced = cut(banana)
    return is_sliced

behavior fry_banana_slices(pan: item, banana: item, stove: item):
    body:
        observe(pan, "Check if the pan already has oil")
        if is_suitable_oil_pan(pan):
            achieve_once inside(banana, pan)
            achieve_once inhand(pan)
            achieve_once on(pan, stove)
            achieve_once is_on(stove)
            return

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind banana: item where:
            is_food_banana(banana) and is_suitable_banana_state(banana)
        bind stove: item where:
            is_stove(stove)
        
        fry_banana_slices(pan, banana, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        fry_banana_slices(banana_slices, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_pot_78(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#goal_representation
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        bind stove: item where:
            id[stove] == 2135
        fry_banana_slices(banana_slices, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#goal_representation
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        fry_banana_slices(banana_slices, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_dishwasher_129(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_slices():
    body:
        foreach o: item:
            if is_food_banana(o) and cut(o) and not visited(o):
                observe(o, "Check the state and temperature of the banana slices")

behavior fry_banana_slices_in_oil(o:item, pan:item):
    body:
        achieve_once inside(o, pan)
        # Place the banana slices in the frying pan

behavior observe_fryingpan():
    body:
        observe(fryingpan_2154, "Check the state and temperature of the heated oil")

def has_oil(pan:item):
    # Function to check if the frying pan has oil
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135) and is_on(stove_2135) and has_oil(pan)
        # Select the frying pan with oil
        
        observe_fryingpan()
        # Check the state and temperature of the heated oil
        
        observe_slices()
        # Check the state and temperature of the banana slices

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                fry_banana_slices_in_oil(slice, pan)
                # Fry the banana slices in the heated oil

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2154; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#goal_representation
behavior observe_slices():
    body:
        foreach o: item:
            if is_food_banana(o) and cut(o) and not visited(o):
                observe(o, "Check the state and temperature of the banana slices")

behavior fry_banana_slices_in_oil(o:item, pan:item):
    body:
        achieve_once inside(o, pan)
        # Place the banana slices in the frying pan

behavior observe_fryingpan(pan:item):
    body:
        observe(pan, "Check the state and temperature of the heated oil")

def has_oil(pan:item):
    # Function to check if the frying pan has oil
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135) and is_on(stove_2135) and has_oil(pan)
        # Select the frying pan with oil
        
        observe_fryingpan(pan)
        # Check the state and temperature of the heated oil
        
        observe_slices()
        # Check the state and temperature of the banana slices

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                fry_banana_slices_in_oil(slice, pan)
                # Fry the banana slices in the heated oil
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_curtain_205(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==205
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#goal_representation
## Corrected Goal Representation:
behavior observe_slices():
    body:
        foreach o: item:
            if is_food_banana(o) and cut(o) and not visited(o):
                observe(o, "Check the state and temperature of the banana slices")

behavior fry_banana_slices_in_oil(o:item, pan:item):
    body:
        achieve_once inside(o, pan)
        # Place the banana slices in the frying pan

behavior observe_fryingpan(pan:item):
    body:
        observe(pan, "Check the state and temperature of the heated oil")

def has_oil(pan:item):
    # Function to check if the frying pan has oil
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove) and has_oil(pan)
        # Select the frying pan with oil
        
        observe_fryingpan(pan)
        # Check the state and temperature of the heated oil
        
        observe_slices()
        # Check the state and temperature of the banana slices

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                fry_banana_slices_in_oil(slice, pan)
                # Fry the banana slices in the heated oil
#goal_representation_end

##############################
From agent.py->reset_sub_goal
## Corrected Goal Representation:
behavior observe_slices():
    body:
        foreach o: item:
            if is_food_banana(o) and cut(o) and not visited(o):
                observe(o, "Check the state and temperature of the banana slices")

behavior fry_banana_slices_in_oil(o:item, pan:item):
    body:
        achieve_once inside(o, pan)
        # Place the banana slices in the frying pan

behavior observe_fryingpan(pan:item):
    body:
        observe(pan, "Check the state and temperature of the heated oil")

def has_oil(pan:item):
    # Function to check if the frying pan has oil
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove) and has_oil(pan)
        # Select the frying pan with oil
        
        observe_fryingpan(pan)
        # Check the state and temperature of the heated oil
        
        observe_slices()
        # Check the state and temperature of the banana slices

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                fry_banana_slices_in_oil(slice, pan)
                # Fry the banana slices in the heated oil
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Check the state and temperature of the heated oil)walk_executor(food_banana_2083)obs(food_banana_2083, Check the state and temperature of the banana slices)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)putin_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
obs(fryingpan_2154, Check the state and temperature of the heated oil)
Get this information:  oil_2013 is inside fryingpan_2154. fryingpan_2154 is close to character_240. fryingpan_2154 is close to stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
obs(food_banana_2083, Check the state and temperature of the banana slices)
Get this information:  food_banana_2083 is inside dining_room_41. food_banana_2083 is close to cutting_board_2123. food_banana_2083 is close to character_240. food_banana_2083 is on cutting_board_2123. food_banana_2083 is CLEAN.
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2122. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2122. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_banana_2083 is inside fryingpan_2154. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_shower_21(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior observe_fried_bananas():
    body:
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        observe(fryingpan_2154, "Check the state of the fried banana slices")

behavior remove_fried_bananas(fryingpan: item):
    body:
        achive_once close_char(char, fryingpan)

behavior drain_banana_slices():
    bind table: item where:
        is_table(table) and id[table] == 114
    achive_once on(food_banana_2083, table)

behavior __goal__():
    body:
        observe_fried_bananas()
        bind food_banana_2083: item where:
            is_food_banana(food_banana_2083)
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        remove_fried_bananas(fryingpan_2154)
        drain_banana_slices(food_banana_2083)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'close_char') at line 5547, column 21.
Expected one of: 
	* DOUBLE_EQUAL
	* SLASH
	* __ANON_5
	* _NEWLINE
	* AND
	* FLOORDIV
	* LSHIFT
	* MORETHAN
	* COMMA
	* __ANON_6
	* MINUS
	* __ANON_7
	* CIRCUMFLEX
	* RSHIFT
	* __ANON_3
	* PLUS
	* LESSTHAN
	* STAR
	* SEMICOLON
	* GREATER_EQ
	* __ANON_4
	* LESS_EQ
	* EQUAL
	* AT
	* __ANON_1
	* PERCENT
	* IF
	* __ANON_2
	* OR
	* __ANON_0
	* __ANON_8
	* NOT_EQ
	* VBAR
	* AMPERSAND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2128_around_shower_21(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_wooden_spoon_2000_around_sink_19(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(wooden_spoon,sink_instance)
        else:
            exp(wooden_spoon,sink_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,sink_instance]=True
        close[sink_instance,wooden_spoon]=True
    

behavior find_rag_2052_around_shower_21(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(rag,shower_instance)
        else:
            exp(rag,shower_instance)
    eff:
        unknown[rag]=False
        close[rag,shower_instance]=True
        close[shower_instance,rag]=True
    

#goal_representation
behavior observe_fried_bananas():
    body:
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        observe(fryingpan_2154, "Check the state of the fried banana slices")

behavior remove_fried_bananas(fryingpan: item):
    body:
        achieve_once close_char(char, fryingpan)
        bind food_banana_2083: item where:
            is_food_banana(food_banana_2083)
        achieve_once inhand(food_banana_2083)

behavior drain_banana_slices(food_banana_2083: item):
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        achieve_once on(food_banana_2083, table)

behavior __goal__():
    body:
        observe_fried_bananas()
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        remove_fried_bananas(fryingpan_2154)
        bind food_banana_2083: item where:
            is_food_banana(food_banana_2083)
        drain_banana_slices(food_banana_2083)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior observe_fried_bananas():
    body:
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        observe(fryingpan_2154, "Check the state of the fried banana slices")

behavior remove_fried_bananas(fryingpan: item):
    body:
        achieve_once close_char(char, fryingpan)
        bind food_banana_2083: item where:
            is_food_banana(food_banana_2083)
        achieve_once inhand(food_banana_2083)

behavior drain_banana_slices(food_banana_2083: item):
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        achieve_once on(food_banana_2083, table)

behavior __goal__():
    body:
        observe_fried_bananas()
        bind fryingpan_2154: item where:
            is_fryingpan(fryingpan_2154)
        remove_fried_bananas(fryingpan_2154)
        bind food_banana_2083: item where:
            is_food_banana(food_banana_2083)
        drain_banana_slices(food_banana_2083)
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Check the state of the fried banana slices)grab_executor(food_banana_2083)walk_executor(table_114)put_executor(food_banana_2083, table_114)
##############################
From agent.py
obs(fryingpan_2154, Check the state of the fried banana slices)
Get this information:  food_banana_2083 is inside fryingpan_2154. oil_2013 is inside fryingpan_2154. fryingpan_2154 is close to stove_2135. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_banana_2083. fryingpan_2154 is on stove_2135. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2122. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the knife_2122. Robot is close to the food_banana_2083. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_banana_2083, table_114)
Robot find: Robot is close to the knife_2122. Robot is close to the food_banana_2083. Robot is close to the table_114. Robot is close to the mat_102. food_banana_2083 is close table_114. table_114 is close food_banana_2083. food_banana_2083 is on table_114. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(curtain_289)', 'walk_executor(kitchen_counter_122)', 'walk_executor(light_39)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(table_270)', 'walk_executor(table_114)', 'walk_executor(knife_2122)', 'grab_executor(knife_2122)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'grab_executor(oil_2013)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2013, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_banana_2083, fryingpan_2154)', 'grab_executor(food_banana_2083)', 'walk_executor(table_114)', 'put_executor(food_banana_2083, table_114)']
Time info:
Time consume: 358 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 150
goal generate times: 8
goal correct times: 3
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
