From agent.py
Reset goals: The sub-goals are: 
['Turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_33_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
bind bathroom: item where:
    is_bathroom(bathroom)

bind light: item where:
    is_light(light) and inside(light, bathroom)

def __goal__():
    body:
        if is_on(light):
            achieve is_on(light)
        else:
            achieve is_on(light)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5650, column 1.
Expected one of: 
	* BEHAVIOR
	* CONTROLLER
	* IMPORT
	* $END
	* OBJECTS
	* GENERATOR
	* DOMAIN
	* _PRAGMA_KEYWORD
	* FEATURE
	* INIT
	* TYPEDEF
	* _NEWLINE
	* GOAL
	* INCLUDE
	* UNDIRECTED_GENERATOR
	* DEF
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_rack_34_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#goal_representation
bind bathroom: item where:
    is_bathroom(bathroom)

bind light: item where:
    is_light(light) and inside(light, bathroom)

behavior __goal__():
    body:
        if not is_on(light):
            achieve is_on(light)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5667, column 1.
Expected one of: 
	* BEHAVIOR
	* CONTROLLER
	* IMPORT
	* $END
	* OBJECTS
	* GENERATOR
	* DOMAIN
	* _PRAGMA_KEYWORD
	* FEATURE
	* INIT
	* TYPEDEF
	* _NEWLINE
	* GOAL
	* INCLUDE
	* UNDIRECTED_GENERATOR
	* DEF
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_rack_34_around_shower_36(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#goal_representation
bind bathroom: item where:
    is_bathroom(bathroom)

bind light: item where:
    is_light(light) and inside(light, bathroom)

behavior __goal__():
    body:
        if not is_on(light):
            achieve is_on(light)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_33_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        
        achieve is_on(bathroom_light)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<bathroom_light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wall_clock_249_around_television_248(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(wall_clock,television_instance)
        else:
            exp(wall_clock,television_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,television_instance]=True
        close[television_instance,wall_clock]=True
    

behavior find_remote_control_2052_around_light_169(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==169
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(remote_control,light_instance)
        else:
            exp(remote_control,light_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,light_instance]=True
        close[light_instance,remote_control]=True
    

#goal_representation
def is_in_bathroom(item: item):
    return inside(item, bathroom)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind bathroom_light: item where:
            is_light(bathroom_light) and is_in_bathroom(bathroom_light)

        achieve is_on(bathroom_light)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: bathroom; available variables: [Variable<item: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_rack_31_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#goal_representation
def is_in_bathroom(item: item):
    return inside(item, bathroom)

def is_bathroom(bathroom: item):
    return is_bathroom(bathroom)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind bathroom_light: item where:
            is_light(bathroom_light) and is_in_bathroom(bathroom_light)

        achieve is_on(bathroom_light)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_rack_34_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the lights in the bathroom.
Action History:
['walk_executor(light_64)', 'switchon_executor(light_64)']
Time info:
Time consume: 70 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 154
goal generate times: 3
goal correct times: 0
action_num: 2

Task complete rate:
1
Scene_id: 0
##############################
