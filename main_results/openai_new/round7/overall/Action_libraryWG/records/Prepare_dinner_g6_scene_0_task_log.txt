From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat the plate with pizza and hamburger in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_stove_2065(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_pizza,stove_instance)
        else:
            exp(food_pizza,stove_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,stove_instance]=True
        close[stove_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_pizza_or_hamburger(item: item):
    # Function to check if an item is a pizza or hamburger
    return is_food_pizza(item) or is_food_hamburger(item)

behavior __goal__():
    body:
        foreach o: item:
            # Check all items in the environment
            if is_food_pizza_or_hamburger(o) and not visited(o):
                # Focus on items yet to be visited that might be what we need
                observe(o, "Check if it is pizza or hamburger and its current location")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_pizza_or_hamburger(item: item):
    # Function to check if an item is a pizza or hamburger
    return is_food_pizza(item) or is_food_hamburger(item)

behavior __goal__():
    body:
        foreach o: item:
            # Check all items in the environment
            if is_food_pizza_or_hamburger(o) and not visited(o):
                # Focus on items yet to be visited that might be what we need
                observe(o, "Check if it is pizza or hamburger and its current location")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, Check if it is pizza or hamburger and its current location)walk_executor(stove_2065)open_executor(stove_2065)exp(food_pizza_2034, stove_2065)walk_executor(food_pizza_2034)obs(food_pizza_2034, Check if it is pizza or hamburger and its current location)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, fridge_289)
Find food_hamburger_2024. 
##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2024, Check if it is pizza or hamburger and its current location)obs(food_pizza_2034, Check if it is pizza or hamburger and its current location)
##############################
From agent.py
obs(food_hamburger_2024, Check if it is pizza or hamburger and its current location)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py
obs(food_pizza_2034, Check if it is pizza or hamburger and its current location)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_33_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior pick_and_place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger item

        bind plate: item where:
            is_plate(plate)
        # Select plate item based on identified category
        
        pick_and_place_on_plate(pizza, hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pick_and_place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger item

        bind plate: item where:
            is_plate(plate)
        # Select plate item based on identified category
        
        pick_and_place_on_plate(pizza, hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_238)exp(plate_1000, drawing_238)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(drawing_238)
Robot find: mat_236, phone_247, wall_clock_249, mat_237, Robot is close to the drawing_238. 
##############################
From agent.py
exp(plate_1000, drawing_238)
Fail to find plate_1000 around drawing_238. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind microwave: item where:
            is_microwave(microwave)
        
        heat_in_microwave(plate, microwave)
        start_microwave(microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind microwave: item where:
            is_microwave(microwave)
        
        heat_in_microwave(plate, microwave)
        start_microwave(microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        achieve once on(plate, table)
        achieve close_char(char, table)
        achieve inside_char(char, dining_room)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5880, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_tvstand_353(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(chair,tvstand_instance)
        else:
            exp(chair,tvstand_instance)
    eff:
        unknown[chair]=False
        close[chair,tvstand_instance]=True
        close[tvstand_instance,chair]=True
    

#goal_representation

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        achieve_once on(plate, table)
        achieve close_char(char, table)
        achieve inside_char(char, dining_room)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_shower_36(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(chair,shower_instance)
        else:
            exp(chair,shower_instance)
    eff:
        unknown[chair]=False
        close[chair,shower_instance]=True
        close[shower_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior move_plate_to_table_in_dining_room(plate:item, dining_table:item):
    body:
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave_297)
        # Selects the plate that was heated in the microwave

        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, item: item where is_dining_room(item))
        # Selects a table located inside the dining room

        move_plate_to_table_in_dining_room(plate, dining_table)
        # Moves the plate with pizza and hamburger from the microwave to a table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5880, column 65.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#goal_representation
 
behavior move_plate_to_table_in_dining_room(plate:item, dining_table:item):
    body:
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave_297)
        # Selects the plate that was heated in the microwave

        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, item) and is_dining_room(item)
        # Selects a table located inside the dining room

        move_plate_to_table_in_dining_room(plate, dining_table)
        # Moves the plate with pizza and hamburger from the microwave to a table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: microwave_297; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_drawing_238_around_drawing_242(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_chair_106_around_bench_228(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(chair,bench_instance)
        else:
            exp(chair,bench_instance)
    eff:
        unknown[chair]=False
        close[chair,bench_instance]=True
        close[bench_instance,chair]=True
    

#goal_representation
 
behavior move_plate_to_table_in_dining_room(plate:item, dining_table:item):
    body:
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and id[microwave] == 297
        # Select the microwave with ID 297

        bind plate: item where:
            is_plate(plate) and inside(plate, microwave)
        # Selects the plate that was heated in the microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Selects a table located inside the dining room

        move_plate_to_table_in_dining_room(plate, dining_table)
        # Moves the plate with pizza and hamburger from the microwave to a table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_plate_to_table_in_dining_room(plate:item, dining_table:item):
    body:
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and id[microwave] == 297
        # Select the microwave with ID 297

        bind plate: item where:
            is_plate(plate) and inside(plate, microwave)
        # Selects the plate that was heated in the microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Selects a table located inside the dining room

        move_plate_to_table_in_dining_room(plate, dining_table)
        # Moves the plate with pizza and hamburger from the microwave to a table in the dining room

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_297)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, fork_2080, fork_2081, Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(drawing_238)', 'walk_executor(sink_231)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 253 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 32
goal generate times: 5
goal correct times: 2
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
