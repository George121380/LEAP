From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_fridge_140(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_cereal_2048_around_cupboard_130(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
            
        achieve_once has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve is_on(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
            
        achieve_once has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve is_on(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_54, cupboard_130)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_54, cupboard_130)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the pot_54 is filled with water. The robot should switch on faucet_134 while holding the open pot_54 underneath it to fill it with water, then switch off the faucet when the pot is full. After that, proceed with putting the vegetables into the pot and boiling them on the stove.
##############################
From agent.py
Human Instruction: Ensure the pot_54 is filled with water. The robot should switch on faucet_134 while holding the open pot_54 underneath it to fill it with water, then switch off the faucet when the pot is full. After that, proceed with putting the vegetables into the pot and boiling them on the stove.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_vegetable_2072 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_vegetable_2072.
Action 15: Grab food_vegetable_2072.
Action 16: Walk to pot_54.
Action 17: Put food_vegetable_2072 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior boil_vegetables(pot:item, faucet:item, stove:item, vegetables:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior fetch_pot(pot_id:str, location:item):
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == pot_id and close(location, pot)
        achieve_once close_char(char, pot)
        achieve_once open(pot)
        achieve_once inhand(pot)

behavior fetch_item(item_id:str, category:str, location:item):
    body:
        bind item: item where:
            eval(fis_category(item) and id[item] == item_id and close(location, item))
        achieve_once inhand(item)

behavior place_item_in_pot(item:item, pot:item):
    body:
        achieve_once inside(item, pot)

behavior goal():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        # Fill pot with water
        fetch_pot(54, cupboard_130)
        fetch_item(vegetables, food_vegetable, fridge_140)
        boil_vegetables(pot, faucet, stove, vegetables)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: str, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation

## Corrected Goal Representation:

## Function to check if there are vegetables in the specified fridge and bind the object
def has_vegetables_in_fridge(fridge:item):
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, fridge))
    return has_vegetables

## Function to check if a pot is filled with water
def is_pot_filled(pot:item):
    symbol has_water=has_water(pot)
    return has_water

behavior boil_vegetables(pot:item, faucet:item, stove:item, vegetables:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior fetch_pot(pot:item, cupboard:item):
    body:
        achieve_once close_char(char, cupboard)
        achieve_once open(cupboard)
        achieve_once inhand(pot)

behavior fetch_item(fridge:item, item_id:id):
    body:
        achieve_once inhand(item_id)

behavior place_item_in_pot(item:item, pot:item):
    body:
        achieve_once inside(item, pot)

behavior goal():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard]==130

        if exists fridge: item : (is_fridge(fridge) and has_vegetables_in_fridge(fridge)):
            bind fridge: item where:
                is_fridge(fridge) and has_vegetables_in_fridge(fridge)
            
            fetch_pot(pot_54, cupboard)
            achieve_once close_char(char, fridge)
            achieve_once open(fridge)
            fetch_item(fridge, food_vegetable_2072)
            boil_vegetables(pot_54, faucet, stove, food_vegetable_2072)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge,"Check if there are vegetables in the fridge")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inhand[observation, state](x: item).
  Arguments: V::item_id
Argument #0 type does not match: expect item, got id.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
## Current Goal Representation With Error:

## Corrected Goal Representation:

## Function to check if there are vegetables in the specified fridge and bind the object
def has_vegetables_in_fridge(fridge:item):
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, fridge))
    return has_vegetables

## Function to check if a pot is filled with water
def is_pot_filled(pot:item):
    symbol has_water=has_water(pot)
    return has_water

behavior boil_vegetables(pot:item, faucet:item, stove:item, vegetables:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior fetch_pot(pot:item, cupboard:item):
    body:
        achieve_once close_char(char, cupboard)
        achieve_once open(cupboard)
        achieve_once inhand(pot)

behavior fetch_item(fridge:item, item:item):
    body:
        achieve_once inhand(item)

behavior place_item_in_pot(item:item, pot:item):
    body:
        achieve_once inside(item, pot)

behavior goal():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard]==130

        if exists fridge: item : (is_fridge(fridge) and has_vegetables_in_fridge(fridge)):
            bind fridge: item where:
                is_fridge(fridge) and has_vegetables_in_fridge(fridge)
            
            fetch_pot(pot_54, cupboard)
            achieve_once close_char(char, fridge)
            achieve_once open(fridge)
            fetch_item(fridge, food_vegetable_2072)
            boil_vegetables(pot_54, faucet, stove, food_vegetable_2072)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge,"Check if there are vegetables in the fridge")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve_once inhand(pot)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve close_char(char, stove)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior turn_off_faucet_if_on(faucet:item):
    body:
        if is_on(faucet):
            achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
        turn_off_faucet_if_on(faucet)
#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior turn_off_faucet_if_on(faucet:item):
    body:
        if is_on(faucet):
            achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
        turn_off_faucet_if_on(faucet)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot still needs to fill pot_54 with water by switching on faucet_134 while holding the open pot_54 underneath it and then switch off the faucet when the pot is full. This step has not been completed according to the provided actions.
##############################
From agent.py
Human Instruction: The robot still needs to fill pot_54 with water by switching on faucet_134 while holding the open pot_54 underneath it and then switch off the faucet when the pot is full. This step has not been completed according to the provided actions.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_vegetable_2072 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_vegetable_2072.
Action 15: Grab food_vegetable_2072.
Action 16: Walk to pot_54.
Action 17: Put food_vegetable_2072 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Switch on stove_2090.
Action 20: Walk to faucet_134.
Action 21: Switch on faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        
behavior turn_stove_on(stove:item):
    body:
        achieve_once is_on(stove)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot,stove)

behavior __goal__():
    body:
        bind pot_54: item where:
            is_pot(pot_54)
        bind faucet_134: item where:
            is_faucet(faucet_134)
        fill_pot_with_water(pot_54, faucet_134)
        
        bind stove_2090: item where:
            is_stove(stove_2090)
        put_pot_on_stove(pot_54, stove_2090)
        turn_stove_on(stove_2090)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
## Output:
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        
behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
            
        fill_pot_with_water(pot, faucet)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072
            
        place_vegetables_in_pot(vegetables, pot)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
            
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once open(pot)
        achieve has_water(pot)

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once open(pot)
        achieve has_water(pot)

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill pot_54 with water by switching on faucet_134 while holding the open pot_54 underneath it and then switch off the faucet when the pot is full.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_vegetables(pot:item, bowl:item):
    body:
        achieve_once inside(food_vegetable_2072, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        transfer_vegetables(pot, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2072; available variables: [Variable<pot: item>, Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
behavior transfer_vegetables(pot:item, bowl:item, vegetable:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        bind bowl: item where:
            is_bowl(bowl)
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        transfer_vegetables(pot, bowl, vegetable)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior transfer_vegetables(pot:item, bowl:item, vegetable:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        bind bowl: item where:
            is_bowl(bowl)
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        transfer_vegetables(pot, bowl, vegetable)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2096, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_128)
Fail to find bowl_2096 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2096, cupboard_131)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2096, cupboard_131)
Fail to find bowl_2096 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2096, sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2096, sink_133)
Fail to find bowl_2096 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(bowl_2096, dishwasher_143)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(bowl_2096, dishwasher_143)
Fail to find bowl_2096 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(bowl_2096, wallshelf_190)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(bowl_2096, wallshelf_190)
Fail to find bowl_2096 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(after_shave_2029)exp(bowl_2096, after_shave_2029)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(after_shave_2029)
Robot find: Robot is close to the after_shave_2029. Robot is close to the sink_133. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2096 ?
Answer: Robot, please go to dining_room_1 and locate table_127. You will find bowl_2096 on top of table_127. Use the proximity of table_127 to help identify and retrieve bowl_2096.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot still needs to fill pot_54 with water by switching on faucet_134 while holding the open pot_54 underneath it and then switch off the faucet when the pot is full. This step has not been completed according to the provided actions.
Robot, please go to dining_room_1 and locate table_127. You will find bowl_2096 on top of table_127. Use the proximity of table_127 to help identify and retrieve bowl_2096.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_vegetable_2072 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_vegetable_2072.
Action 15: Grab food_vegetable_2072.
Action 16: Walk to pot_54.
Action 17: Put food_vegetable_2072 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Switch on stove_2090.
Action 20: Walk to faucet_134.
Action 21: Switch on faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.
Action 25: Walk to faucet_134.
Action 26: Walk to kitchen_counter_128.
Action 27: look for bowl_2096 around kitchen_counter_128.
Action 28: Walk to cupboard_131.
Action 29: Open cupboard_131.
Action 30: look for bowl_2096 around cupboard_131.
Action 31: Walk to sink_133.
Action 32: look for bowl_2096 around sink_133.
Action 33: Walk to dishwasher_143.
Action 34: Open dishwasher_143.
Action 35: look for bowl_2096 around dishwasher_143.
Action 36: Walk to wallshelf_190.
Action 37: look for bowl_2096 around wallshelf_190.
Action 38: Walk to after_shave_2029.

##############################
From agent.py
exp(bowl_2096, after_shave_2029)
Fail to find bowl_2096 around after_shave_2029. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(kitchen_counter_128)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(sink_133)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(wallshelf_190)', 'walk_executor(after_shave_2029)', 'walk_executor(table_127)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 342 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 129
goal generate times: 8
goal correct times: 1
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
