From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the eggs, lemon, and vegetables.', '2. Boil the eggs.', '3. Chop the boiled eggs, lemon, and vegetables as needed.', '4. Mix all the chopped ingredients in a bowl to make the egg salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_apple_2081_around_fridge_126(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_food_onion_2048_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_lemon_2100_around_fridge_126(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        foreach item: item:
            if is_food_egg(item) or is_food_lemon(item) or is_food_vegetable(item):
                if not clean(item):
                    observe(item, "Check if the item is clean")

        foreach item: item:
            if is_food_egg(item) or is_food_lemon(item) or is_food_vegetable(item):
                if not clean(item):
                    wash(item)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        foreach item: item:
            if is_food_egg(item) or is_food_lemon(item) or is_food_vegetable(item):
                if not clean(item):
                    observe(item, "Check if the item is clean")

        foreach item: item:
            if is_food_egg(item) or is_food_lemon(item) or is_food_vegetable(item):
                if not clean(item):
                    wash(item)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)obs(food_egg_2092, Check if the item is clean)walk_executor(fridge_126)exp(food_lemon_2100, fridge_126)walk_executor(food_lemon_2100)obs(food_lemon_2100, Check if the item is clean)walk_executor(kitchen_counter_122)exp(food_vegetable_2113, kitchen_counter_122)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if the item is clean)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_egg_2092)switchoff_executor(faucet_20)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(kitchen_counter_119)put_executor(food_egg_2092, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_lemon_2100)switchoff_executor(faucet_121)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
obs(food_vegetable_2113, Check if the item is clean)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
obs(food_vegetable_2113, Check if the item is clean)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is inside fridge_126. food_vegetable_2113 is close to fridge_126. food_vegetable_2113 is close to character_240. food_vegetable_2113 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You still need to find and wash the specified items: food_egg_2092 and food_lemon_2100. Ensure these items are clean to complete this sub-task before moving to the next step.
##############################
From agent.py
Human Instruction: You still need to find and wash the specified items: food_egg_2092 and food_lemon_2100. Ensure these items are clean to complete this sub-task before moving to the next step.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_egg_2092 around fridge_126.
Action 5: Observe around food_vegetable_2113 with the question of Check if the item is clean.
Action 6: Grab food_vegetable_2113.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_vegetable_2113.
Action 10: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_phone_2029_around_phone_2029(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2029
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_wash(item: item):
    body:
        if dirty(item):
            wash(item)

def has_specified_items(food_egg_2092: item, food_lemon_2100: item):
    symbol has_egg=exists o: item: (id[o]==2092 and is_food_egg(o))
    symbol has_lemon=exists o: item: (id[o]==2100 and is_food_lemon(o))
    return has_egg and has_lemon

behavior __goal__():
    body:
        if not exists food_egg_2092: item : (is_food_egg(food_egg_2092) and visited(food_egg_2092)):
            # Find and wash eggs if not visited or identified:
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Check if the item is food_egg_2092")
                    # Check this item is the specific food_egg_2092 youre looking for

        if not exists food_lemon_2100: item : (is_food_lemon(food_lemon_2100) and visited(food_lemon_2100)):
            # Find and wash lemon if not visited or identified:
            foreach item: item:
                if is_food_lemon(item) and not visited(item):
                    observe(item, "Check if the item is food_lemon_2100")
                    # Check this item is the specific food_lemon_2100 youre looking for

        if has_specified_items(food_egg_2092, food_lemon_2100):
            bind food_egg_2092: item where:
                is_food_egg(food_egg_2092) and dirty(food_egg_2092)
            find_and_wash(food_egg_2092)

            bind food_lemon_2100: item where:
                is_food_lemon(food_lemon_2100) and dirty(food_lemon_2100)
            find_and_wash(food_lemon_2100)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'food_egg_2092') at line 5361, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_onion_2048_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_detergent_2155_around_cupboard_117(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#goal_representation

behavior find_and_wash(item: item):
    body:
        if dirty(item):
            wash(item)

def has_specified_items():
    symbol has_egg=exists o: item: (id[o]==2092 and is_food_egg(o))
    symbol has_lemon=exists o: item: (id[o]==2100 and is_food_lemon(o))
    return has_egg and has_lemon

behavior __goal__():
    body:
        if not exists food_egg_2092: item : (is_food_egg(item) and visited(item)):
            # Find and wash eggs if not visited or identified:
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Check if the item is food_egg_2092")
                    # Check this item is the specific food_egg_2092 youre looking for
                    if is_food_egg(item) and id[item] == 2092:
                        find_and_wash(item)

        if not exists food_lemon_2100: item : (is_food_lemon(item) and visited(item)):
            # Find and wash lemon if not visited or identified:
            foreach item: item:
                if is_food_lemon(item) and not visited(item):
                    observe(item, "Check if the item is food_lemon_2100")
                    # Check this item is the specific food_lemon_2100 youre looking for
                    if is_food_lemon(item) and id[item] == 2100:
                        find_and_wash(item)

        if has_specified_items():
            bind food_egg_2092: item where:
                is_food_egg(food_egg_2092) and dirty(food_egg_2092)
            find_and_wash(food_egg_2092)

            bind food_lemon_2100: item where:
                is_food_lemon(food_lemon_2100) and dirty(food_lemon_2100)
            find_and_wash(food_lemon_2100)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'food_egg_2092') at line 5380, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#goal_representation
 
behavior find_and_wash(item: item):
    body:
        if dirty(item):
            wash(item)

def has_specified_items():
    symbol has_egg=exists o: item: (id[o]==2092 and is_food_egg(o))
    symbol has_lemon=exists o: item: (id[o]==2100 and is_food_lemon(o))
    return has_egg and has_lemon

behavior __goal__():
    body:
        if not exists item: item : (is_food_egg(item) and visited(item)):
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Check if the item is food_egg_2092")
                    if is_food_egg(item) and id[item] == 2092:
                        find_and_wash(item)

        if not exists item: item : (is_food_lemon(item) and visited(item)):
            foreach item: item:
                if is_food_lemon(item) and not visited(item):
                    observe(item, "Check if the item is food_lemon_2100")
                    if is_food_lemon(item) and id[item] == 2100:
                        find_and_wash(item)

        if has_specified_items():
            bind food_egg_2092: item where:
                is_food_egg(food_egg_2092) and dirty(food_egg_2092)
            find_and_wash(food_egg_2092)

            bind food_lemon_2100: item where:
                is_food_lemon(food_lemon_2100) and dirty(food_lemon_2100)
            find_and_wash(food_lemon_2100)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_to_wash(item: item):
    # Function to check if the item is a food item that needs washing
    return (is_food_egg(item) or is_food_lemon(item)) and dirty(item)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Choose the egg with the id 2092

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100
        # Choose the lemon with the id 2100

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Choose the vegetable with the id 2113
        
        foreach o: item:
            # Wash each item that needs washing
            if is_food_to_wash(o):
                wash(o)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_food_onion_2009_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_clean(obj:item):
    # Function to check if an item is clean
    return not dirty(obj)

behavior wash_item_if_dirty(obj:item, faucet:item):
    body:
        if dirty(obj):
            achieve on(faucet, obj)
            # Turn on faucet and wash object to clean it
        else:
            achieve clean(obj)
            # Item is already clean

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Bind the egg that needs to be found and washed

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon]==2100
        # Bind the lemon that needs to be found and washed

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2113
        # Bind the vegetable that needs to be found and washed
        
        bind fridge: item where:
            is_fridge(fridge)
        # Bind fridge

        observe(fridge, "Look for specified items inside fridge")
        # Observe fridge for specified items

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Bind a faucet

        wash_item_if_dirty(egg, faucet)
        wash_item_if_dirty(lemon, faucet)
        wash_item_if_dirty(vegetable, faucet)
        # Wash the egg, lemon, and vegetable if they are dirty

        achieve is_off(faucet)
        # Ensure the faucet is turned off at the end

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_clean(obj:item):
    # Function to check if an item is clean
    return not dirty(obj)

behavior wash_item_if_dirty(obj:item, faucet:item):
    body:
        if dirty(obj):
            achieve on(faucet, obj)
            # Turn on faucet and wash object to clean it
        else:
            achieve clean(obj)
            # Item is already clean

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Bind the egg that needs to be found and washed

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon]==2100
        # Bind the lemon that needs to be found and washed

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2113
        # Bind the vegetable that needs to be found and washed
        
        bind fridge: item where:
            is_fridge(fridge)
        # Bind fridge

        observe(fridge, "Look for specified items inside fridge")
        # Observe fridge for specified items

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Bind a faucet

        wash_item_if_dirty(egg, faucet)
        wash_item_if_dirty(lemon, faucet)
        wash_item_if_dirty(vegetable, faucet)
        # Wash the egg, lemon, and vegetable if they are dirty

        achieve is_off(faucet)
        # Ensure the faucet is turned off at the end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)obs(fridge_126, Look for specified items inside fridge)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
obs(fridge_126, Look for specified items inside fridge)
Get this information:  sauce_2148 is inside fridge_126. food_snack_2110 is inside fridge_126. fridge_126 is on floor_44. food_steak_2080 is inside fridge_126. food_donut_2091 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. fridge_126 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. food_food_2046 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_hamburger_2096 is inside fridge_126. food_potato_2107 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. fridge_126 is OFF. fridge_126 is OPEN. fridge_126 is PLUGGED_IN. fridge_126 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find and wash the specified items: food_egg_2092 and food_lemon_2100 to ensure they are clean before considering this sub-task complete.
##############################
From agent.py
Human Instruction: You need to find and wash the specified items: food_egg_2092 and food_lemon_2100 to ensure they are clean before considering this sub-task complete.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_egg_2092 around fridge_126.
Action 5: Observe around food_vegetable_2113 with the question of Check if the item is clean.
Action 6: Grab food_vegetable_2113.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_vegetable_2113.
Action 10: Switch off faucet_20.
Action 11: Walk to fridge_126.
Action 12: Observe around fridge_126 with the question of Look for specified items inside fridge.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_item_clean(item:item):
    # Function to check if an item is clean
    symbol item_is_clean = clean(item)
    return item_is_clean

behavior wash_item(item:item):
    body:
        achieve_once clean(item)

behavior find_and_wash_items():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        achieve_once is_off(fridge)  # Ensure the fridge is off before opening
        
        if not open(fridge):
            achieve_once open(fridge)  # Open the fridge if not already open
        
        bind food_egg: item where:
            is_food_egg(food_egg) and inside(food_egg, fridge)
        
        bind food_lemon: item where:
            is_food_lemon(food_lemon) and inside(food_lemon, fridge)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) # Assuming vegetable is already identified
        
        if not is_target_item_clean(food_egg):
            wash_item(food_egg)
        
        if not is_target_item_clean(food_lemon):
            wash_item(food_lemon)
        
        if not is_target_item_clean(food_vegetable):
            wash_item(food_vegetable)

behavior __goal__():
    body:
        find_and_wash_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2016_around_phone_2029(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2029
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_detergent_2011_around_cupboard_118(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior observe_ingredients(ingredients: list):
    body:
        foreach ingredient: item in ingredients:
            if not visited(ingredient):
                observe(ingredient, "Check if the item is clean or dirty")

def identify_items():
    # Function to identify specific food items inside the fridge
    symbol egg = exists item: item : (is_food_egg(item) and id[item] == 2092)
    symbol lemon = exists item: item : (is_food_lemon(item) and id[item] == 2100)
    symbol vegetable = exists item: item : (is_food_vegetable(item) and id[item] == 2113)
    return egg, lemon, vegetable

behavior wash_ingredients(ingredients: list, faucet:item):
    body:
        foreach ingredient: item in ingredients:
            if dirty(ingredient):
                achieve_once inhand(ingredient)
                achieve close_char(char, faucet)
                achieve is_on(faucet)
                wash(ingredient)
                achieve is_off(faucet)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        achieve is_off(fridge)
        achieve open(fridge)
        
        # Identify the items necessary for the task
        symbol egg, lemon, vegetable = identify_items()

        if egg and lemon and vegetable:
            # If all items are identified, create a list
            bind egg_item: item where:
                is_food_egg(egg_item) and id[egg_item] == 2092
            bind lemon_item: item where:
                is_food_lemon(lemon_item) and id[lemon_item] == 2100
            bind vegetable_item: item where:
                is_food_vegetable(vegetable_item) and id[vegetable_item] == 2113
            symbol ingredients = [egg_item, lemon_item, vegetable_item]

            # Observe the cleanliness of the items
            observe_ingredients(ingredients)

            # Bind to a known faucet for washing
            bind faucet: item where:
                is_faucet(faucet) and id[faucet] == 20

            # Wash the ingredients if necessary
            wash_ingredients(ingredients, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5387, column 34.
Expected one of: 
	* LSQB
	* COLON
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_2029_around_phone_2029(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2029
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_towel_2128_around_cupboard_118(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(towel,cupboard_instance)
        else:
            exp(towel,cupboard_instance)
    eff:
        unknown[towel]=False
        close[towel,cupboard_instance]=True
        close[cupboard_instance,towel]=True
    

#goal_representation
 
behavior observe_ingredients(ingredients: list):
    body:
        foreach item: item in ingredients:
            if not visited(item):
                observe(item, "Check if the item is clean or dirty")

def identify_items():
    # Function to identify specific food items inside the fridge
    symbol egg = exists item: item : (is_food_egg(item) and id[item] == 2092)
    symbol lemon = exists item: item : (is_food_lemon(item) and id[item] == 2100)
    symbol vegetable = exists item: item : (is_food_vegetable(item) and id[item] == 2113)
    return egg, lemon, vegetable

behavior wash_ingredients(ingredients: list, faucet:item):
    body:
        foreach ingredient: item in ingredients:
            if dirty(ingredient):
                achieve_once inhand(ingredient)
                achieve close_char(char, faucet)
                achieve is_on(faucet)
                wash(ingredient)
                achieve is_off(faucet)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        achieve is_off(fridge)
        achieve open(fridge)
        
        # Identify the items necessary for the task
        symbol egg, lemon, vegetable = identify_items()

        if egg and lemon and vegetable:
            # If all items are identified, create a list
            bind egg_item: item where:
                is_food_egg(egg_item) and id[egg_item] == 2092
            bind lemon_item: item where:
                is_food_lemon(lemon_item) and id[lemon_item] == 2100
            bind vegetable_item: item where:
                is_food_vegetable(vegetable_item) and id[vegetable_item] == 2113
            symbol ingredients = [egg_item, lemon_item, vegetable_item]

            # Observe the cleanliness of the items
            observe_ingredients(ingredients)

            # Bind to a known faucet for washing
            bind faucet: item where:
                is_faucet(faucet) and id[faucet] == 20

            # Wash the ingredients if necessary
            wash_ingredients(ingredients, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5370, column 28.
Expected one of: 
	* LSQB
	* COLON
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior observe_ingredients(ingredients: list):
    body:
        foreach item: item in ingredients:
            if not visited(item):
                observe(item, "Check if the item is clean or dirty")

def identify_items():
    # Function to identify specific food items inside the fridge
    symbol egg = exists item: item : (is_food_egg(item) and id[item] == 2092)
    symbol lemon = exists item: item : (is_food_lemon(item) and id[item] == 2100)
    symbol vegetable = exists item: item : (is_food_vegetable(item) and id[item] == 2113)
    return egg, lemon, vegetable

behavior wash_ingredients(ingredients: list, faucet:item):
    body:
        foreach item in ingredients:
            if dirty(item):
                achieve_once inhand(item)
                achieve close_char(char, faucet)
                achieve is_on(faucet)
                wash(item)
                achieve is_off(faucet)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        achieve is_off(fridge)
        achieve open(fridge)
        
        # Identify the items necessary for the task
        symbol egg, lemon, vegetable = identify_items()

        if egg and lemon and vegetable:
            # If all items are identified, create a list
            bind egg_item: item where:
                is_food_egg(egg_item) and id[egg_item] == 2092
            bind lemon_item: item where:
                is_food_lemon(lemon_item) and id[lemon_item] == 2100
            bind vegetable_item: item where:
                is_food_vegetable(vegetable_item) and id[vegetable_item] == 2113
            symbol ingredients = [egg_item, lemon_item, vegetable_item]

            # Observe the cleanliness of the items
            observe_ingredients(ingredients)

            # Bind to a known faucet for washing
            bind faucet: item where:
                is_faucet(faucet) and id[faucet] == 20

            # Wash the ingredients if necessary
            wash_ingredients(ingredients, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2128_around_shower_16(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean(obj:item):
    symbol clean=exists o: item : (is_food(o) and clean(o) and id[o]==id[obj])
    return clean

behavior find_and_wash(obj:item, fountain:item):
    body:
        if not is_clean(obj):
            achieve_once close_char(char, obj)
            achieve_once inhand(obj)
            achieve_once clean(obj)
            achieve_once close_char(char, fountain)
            achieve clean(obj)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        bind fountain: item where:
            is_faucet(fountain) and id[fountain] == 20

        find_and_wash(egg, fountain)
        find_and_wash(lemon, fountain)
        find_and_wash(vegetable, fountain)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find and wash the eggs, lemon, and vegetables." ?
Answer: Find the eggs, lemon, and vegetables. Wash the lemon and the vegetables.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_and_has_water(x: item):
    # Function to check if an item is both clean and has water
    return clean(x) and has_water(x)

behavior wash_and_check_cleanliness(obj: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve_once has_water(obj)
        # Ensure the object has water on it
        achieve_once clean(obj)
        # Ensure the object is clean

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)

        bind lemon: item where:
            is_food_lemon(lemon) and inside(lemon, fridge)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and inside(vegetable, fridge)

        bind faucet: item where:
            is_faucet(faucet)

        # Check if egg is clean and has water, if not, wash it
        if not is_clean_and_has_water(egg):
            wash_and_check_cleanliness(egg, faucet)

        # Check if lemon is clean and has water, if not, wash it
        if not is_clean_and_has_water(lemon):
            wash_and_check_cleanliness(lemon, faucet)

        # Check if vegetable is clean and has water, if not, wash it
        if not is_clean_and_has_water(vegetable):
            wash_and_check_cleanliness(vegetable, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_check_2058_around_cupboard_117(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(check,cupboard_instance)
        else:
            exp(check,cupboard_instance)
    eff:
        unknown[check]=False
        close[check,cupboard_instance]=True
        close[cupboard_instance,check]=True
    

behavior find_towel_2128_around_washing_machine_2079(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean(item: item):
    # Function to check if an item is clean or dirty
    return not dirty(item)

def item_needs_washing(item: item):
    # Function to check if an item needs washing
    return not is_clean(item)

behavior wash_item(item: item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Find the fridge
        bind food_egg: item where:
            is_food_egg(food_egg) and inside(food_egg, fridge)
        # Find the egg in the fridge
        bind food_lemon: item where:
            is_food_lemon(food_lemon) and inside(food_lemon, fridge)
        # Find the lemon in the fridge
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inside(vegetable, fridge)
        # Find the vegetable in the fridge

        # Check if each item is clean and wash if necessary
        if item_needs_washing(food_egg):
            wash_item(food_egg)
        if item_needs_washing(food_lemon):
            wash_item(food_lemon)
        if item_needs_washing(vegetable):
            wash_item(vegetable)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_washing_machine_2079(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

behavior find_rag_2052_around_cupboard_117(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_wash_eggs():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and dirty(eggs)
        achieve clean(eggs)

behavior find_and_wash_lemon():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and dirty(lemon)
        achieve clean(lemon)

behavior find_and_wash_vegetables():
    body:
        foreach veg: item:
            if is_food_vegetable(veg) and dirty(veg):
                achieve clean(veg)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        find_and_wash_eggs(eggs)

        bind lemon: item where:
            is_food_lemon(lemon)
        find_and_wash_lemon(lemon)

        foreach veg: item:
            if is_food_vegetable(veg):
                find_and_wash_vegetables(veg)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 1 vs 0. Args: (VariableExpression<V::eggs>,), Types: ()
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2128_around_basket_for_clothes_2078(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(towel,basket_for_clothes_instance)
        else:
            exp(towel,basket_for_clothes_instance)
    eff:
        unknown[towel]=False
        close[towel,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,towel]=True
    

behavior find_rag_2052_around_cupboard_118(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

#goal_representation
def find_and_wash_eggs(eggs: item):
    body:
        achieve clean(eggs)

def find_and_wash_lemon(lemon: item):
    body:
        achieve clean(lemon)

def find_and_wash_vegetables(veg: item):
    body:
        achieve clean(veg)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and dirty(eggs)
        find_and_wash_eggs(eggs)

        bind lemon: item where:
            is_food_lemon(lemon) and dirty(lemon)
        find_and_wash_lemon(lemon)

        foreach veg: item:
            if is_food_vegetable(veg) and dirty(veg):
                find_and_wash_vegetables(veg)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5386, column 9.
Expected one of: 
	* AT
	* EQUAL
	* __ANON_1
	* __ANON_2
	* CIRCUMFLEX
	* GREATER_EQ
	* __ANON_5
	* IF
	* __ANON_7
	* __ANON_4
	* __ANON_6
	* AMPERSAND
	* LESS_EQ
	* RSHIFT
	* PLUS
	* VBAR
	* LESSTHAN
	* __ANON_3
	* DOUBLE_EQUAL
	* NOT_EQ
	* PERCENT
	* __ANON_0
	* __ANON_8
	* MORETHAN
	* FLOORDIV
	* COMMA
	* LSHIFT
	* SEMICOLON
	* AND
	* OR
	* SLASH
	* _NEWLINE
	* STAR
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2128_around_washing_machine_2079(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#goal_representation
def find_and_wash_eggs(eggs: item):
    body:
        wash(eggs)

def find_and_wash_lemon(lemon: item):
    body:
        wash(lemon)

def find_and_wash_vegetables(veg: item):
    body:
        wash(veg)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and dirty(eggs)
        find_and_wash_eggs(eggs)

        bind lemon: item where:
            is_food_lemon(lemon) and dirty(lemon)
        find_and_wash_lemon(lemon)

        foreach veg: item:
            if is_food_vegetable(veg) and dirty(veg):
                find_and_wash_vegetables(veg)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)']
Time info:
Time consume: 374 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 121
goal generate times: 10
goal correct times: 2
action_num: 9

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 23 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
