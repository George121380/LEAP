From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice while scrambling the eggs.', '3. Combine the cooked rice and scrambled eggs by frying them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash(item: item):
    body:
        observe(item, "Check if item is dirty or clean")
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        
        # Find and wash rice
        find_and_wash(rice)
        
        # Find and wash eggs
        find_and_wash(egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash(item: item):
    body:
        observe(item, "Check if item is dirty or clean")
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        
        # Find and wash rice
        find_and_wash(rice)
        
        # Find and wash eggs
        find_and_wash(egg)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)obs(food_rice_2036, Check if item is dirty or clean)walk_executor(kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)obs(food_egg_2020, Check if item is dirty or clean)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)obs(food_rice_2036, Check if item is dirty or clean)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Check if item is dirty or clean)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
obs(food_rice_2036, Check if item is dirty or clean)obs(food_egg_2020, Check if item is dirty or clean)
##############################
From agent.py
obs(food_rice_2036, Check if item is dirty or clean)
Get this information:  food_rice_2036 is inside fridge_289. food_rice_2036 is inside dining_room_201. food_rice_2036 is close to fridge_289. food_rice_2036 is close to character_65. food_rice_2036 is CLEAN.
##############################
From agent.py
obs(food_egg_2020, Check if item is dirty or clean)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_chair_103_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def has_cooked_rice(pot:item):
    # Function to check if rice is being cooked
    symbol has_cooked_rice = exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_cooked_rice

def has_egg_on_pan(pan:item):
    # Function to check if eggs are being scrambled in a pan
    symbol has_egg_on_pan = exists o: item : (is_food_egg(o) and inside(o, pan))
    return has_egg_on_pan

behavior cook_rice(pot:item, stove:item):
    body:
        achieve_once inside(food_rice, pot) # Rice is placed inside the pot
        achieve_once is_on(stove) # The stove must be turned on

behavior scramble_egg(pan:item, stove:item):
    body:
        achieve_once inside(food_egg, pan) # Egg is being scrambled in a pan
        achieve_once is_on(stove) # The stove must be turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_cooked_rice(pot)
        # Ensure a pot with cooked rice

        bind pan: item where:
            is_fryingpan(pan) and has_egg_on_pan(pan)
        # Ensure a pan for scrambling eggs

        bind stove: item where:
            is_stove(stove)
        
        cook_rice(pot, stove)
        scramble_egg(pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_rice; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2049_around_basket_for_clothes_2006(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def has_cooked_rice(pot:item):
    # Function to check if rice is being cooked
    symbol has_cooked_rice = exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_cooked_rice

def has_egg_on_pan(pan:item):
    # Function to check if eggs are being scrambled in a pan
    symbol has_egg_on_pan = exists o: item : (is_food_egg(o) and inside(o, pan))
    return has_egg_on_pan

behavior cook_rice(pot:item, stove:item, food_rice:item):
    body:
        achieve_once inside(food_rice, pot) # Rice is placed inside the pot
        achieve_once is_on(stove) # The stove must be turned on

behavior scramble_egg(pan:item, stove:item, food_egg:item):
    body:
        achieve_once inside(food_egg, pan) # Egg is being scrambled in a pan
        achieve_once is_on(stove) # The stove must be turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_cooked_rice(pot)
        # Ensure a pot with cooked rice

        bind pan: item where:
            is_fryingpan(pan) and has_egg_on_pan(pan)
        # Ensure a pan for scrambling eggs

        bind stove: item where:
            is_stove(stove)
        
        bind food_rice: item where:
            is_food_rice(food_rice)

        bind food_egg: item where:
            is_food_egg(food_egg)

        cook_rice(pot, stove, food_rice)
        scramble_egg(pan, stove, food_egg)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_chair_356_around_tvstand_353(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(chair,tvstand_instance)
        else:
            exp(chair,tvstand_instance)
    eff:
        unknown[chair]=False
        close[chair,tvstand_instance]=True
        close[tvstand_instance,chair]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs(rice:item, egg:item, stove:item, frying_pan:item, oil:item):
    body:
        # Pour oil into the frying pan and place it on the stove
        achieve_once inside(oil, frying_pan)
        achieve_once on(frying_pan, stove)
        achieve_once is_on(stove) # Turn on the stove to heat the oil

        # Add the egg to the frying pan to scramble it
        achieve_once inside(egg, frying_pan)

        # Cook the rice in a pot on the stove
        bind pot: item where:
            is_pot(pot)
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove) # Ensure the stove is on for cooking rice

behavior __goal__():
    body:
        # Bind rice and egg that are clean and available in the kitchen
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        bind egg: item where:
            is_food_egg(egg) and clean(egg)

        # Bind cooking tools: stove, frying pan, and oil
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)

        # Start the process of cooking rice and scrambling eggs
        cook_rice_and_scramble_eggs(rice, egg, stove, frying_pan, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_and_scramble_eggs(rice:item, egg:item, stove:item, frying_pan:item, oil:item):
    body:
        # Pour oil into the frying pan and place it on the stove
        achieve_once inside(oil, frying_pan)
        achieve_once on(frying_pan, stove)
        achieve_once is_on(stove) # Turn on the stove to heat the oil

        # Add the egg to the frying pan to scramble it
        achieve_once inside(egg, frying_pan)

        # Cook the rice in a pot on the stove
        bind pot: item where:
            is_pot(pot)
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove) # Ensure the stove is on for cooking rice

behavior __goal__():
    body:
        # Bind rice and egg that are clean and available in the kitchen
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        bind egg: item where:
            is_food_egg(egg) and clean(egg)

        # Bind cooking tools: stove, frying pan, and oil
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)

        # Start the process of cooking rice and scrambling eggs
        cook_rice_and_scramble_eggs(rice, egg, stove, frying_pan, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_fryingpan(fude:item, fryingpan:item):
    # Function to determine if food is in the fryingpan
    symbol in_fryingpan= exists o: item : (on(fude, fryingpan))
    return in_fryingpan

behavior put_in_fryingpan(fude:item, fryingpan:item):
    body:
        achieve_once inside(fude, fryingpan)

behavior combine_foods(frypan:item, stove:item, fude:item):
    body:
        achieve is_on(stove)
        achieve inside(fude, frypan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and on(fraypan, stove)
        bind frypan: item where:
            is_fryingpan(frypan) and on(fraypan, stove) and in_fryingpan(fude, frypan)
        observe(stove, "Check if stove is turned on")
        combine_foods(frypan, stove, fude)
        put_in_fryingpan(fude, frypan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fraypan; available variables: [Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def in_fryingpan(fude:item, fryingpan:item):
    # Function to determine if food is in the fryingpan
    symbol in_fryingpan= exists o: item : (on(fude, fryingpan))
    return in_fryingpan

behavior put_in_fryingpan(fude:item, fryingpan:item):
    body:
        achieve_once inside(fude, fryingpan)

behavior combine_foods(frypan:item, stove:item, fude:item):
    body:
        achieve is_on(stove)
        achieve inside(fude, frypan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and on(frypan, stove)
        bind frypan: item where:
            is_fryingpan(frypan) and on(frypan, stove) and in_fryingpan(fude, frypan)
        observe(stove, "Check if stove is turned on")
        combine_foods(frypan, stove, fude)
        put_in_fryingpan(fude, frypan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: frypan; available variables: [Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def in_fryingpan(fude:item, fryingpan:item):
    # Function to determine if food is in the fryingpan
    symbol in_fryingpan= exists o: item : (on(fude, fryingpan))
    return in_fryingpan

behavior put_in_fryingpan(fude:item, fryingpan:item):
    body:
        achieve_once inside(fude, fryingpan)

behavior combine_foods(frypan:item, stove:item, fude:item):
    body:
        achieve is_on(stove)
        achieve inside(fude, frypan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and on(frypan, stove)
        bind frypan: item where:
            is_fryingpan(frypan) and on(frypan, stove) and in_fryingpan(fude, frypan)
        bind fude: item where:
            is_food_food(fude) or is_food_egg(fude) or is_food_rice(fude)
        observe(stove, "Check if stove is turned on")
        combine_foods(frypan, stove, fude)
        put_in_fryingpan(fude, frypan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_rice_and_egg(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(rice, fryingpan) # Add the cooked rice to the frying pan
        achieve_once inside(eggs, fryingpan) # Add scrambled eggs to the frying pan
        achieve_once on(fryingpan, stove) # The frying pan should be on the stove
        achieve is_on(stove) # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs) # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan) # Select a frying pan

        bind stove: item where:
            is_stove(stove) # Select a stove

        combine_rice_and_egg(rice, eggs, fryingpan, stove) # Cook the rice and scrambled eggs together by frying

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_rice_and_egg(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(rice, fryingpan) # Add the cooked rice to the frying pan
        achieve_once inside(eggs, fryingpan) # Add scrambled eggs to the frying pan
        achieve_once on(fryingpan, stove) # The frying pan should be on the stove
        achieve is_on(stove) # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs) # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan) # Select a frying pan

        bind stove: item where:
            is_stove(stove) # Select a stove

        combine_rice_and_egg(rice, eggs, fryingpan, stove) # Cook the rice and scrambled eggs together by frying

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'putin_executor(food_rice_2036, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)']
Time info:
Time consume: 302 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 97
goal generate times: 5
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
