From agent.py
Reset goals: The sub-goals are: 
['1. Wash and peel the potatoes.', '2. Cut the potatoes into fry shapes.', '3. Fry the potato pieces until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_peel_potatoes(potato: item, sink: item, peeler: item):
    body:
        achieve_once inside(potato, sink)
        wash(potato)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and dirty(potato)
        bind sink: item where:
            is_sink(sink)
        bind peeler: item where:
            is_knife(peeler)
        wash_and_peel_potatoes(potato, sink, peeler)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_potato_on_counter(potato:item, counter:item):
    # Function to check if the potato is on a kitchen counter
    symbol on_counter = is_kitchen_counter(counter) and on(potato, counter)
    return on_counter

behavior wash_then_peel(potato:item, sink:item):
    body:
        if exists counter: item : (is_kitchen_counter(counter) and is_food_potato_on_counter(potato, counter)):
            achieve close_char(char, potato)
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check is there any potato on the kitchen counter")
                    if on(potato, counter):
                        achieve close_char(char, potato)

        bind sink: item where:
            is_sink(sink)
        achieve close_char(char, sink)
        achieve clean(potato)

behavior peel_potato(potato:item, tool:item):
    body:
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)

        bind sink: item where:
            is_sink(sink)

        bind cutting_tool: item where:
            is_knife(cutting_tool)

        wash_then_peel(potato, sink)
        peel_potato(potato, cutting_tool)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable sink already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_food_potato_on_counter(potato:item, counter:item):
    # Function to check if the potato is on a kitchen counter
    symbol on_counter = is_kitchen_counter(counter) and on(potato, counter)
    return on_counter

behavior wash_then_peel(potato:item, sink:item):
    body:
        if exists counter: item : (is_kitchen_counter(counter) and is_food_potato_on_counter(potato, counter)):
            achieve close_char(char, potato)
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check is there any potato on the kitchen counter")
                    if on(potato, counter):
                        achieve close_char(char, potato)

        achieve close_char(char, sink)
        achieve clean(potato)

behavior peel_potato(potato:item, tool:item):
    body:
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)

        bind sink: item where:
            is_sink(sink)

        bind cutting_tool: item where:
            is_knife(cutting_tool)

        wash_then_peel(potato, sink)
        peel_potato(potato, cutting_tool)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_brush_2002_around_kitchen_counter_119(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(brush,kitchen_counter_instance)
        else:
            exp(brush,kitchen_counter_instance)
    eff:
        unknown[brush]=False
        close[brush,kitchen_counter_instance]=True
        close[kitchen_counter_instance,brush]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_peel_potatoes(potato: item):
    body:
        achieve_once wash(potato) # Wash the potato
        achieve_once clean(potato) # Ensure the potato is clean

behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and dirty(potato):
                wash_and_peel_potatoes(potato)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. wash and peel the potatoes." ?
Answer: Your current subgoal "1. wash and peel the potatoes." deviates from my thoughts. Instead, focus on finding a potato and cutting it into pieces.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a potato and cut it into pieces.', '2. Fry the potato pieces to make French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_potato():
    body:
        foreach o: item:
            if is_food_potato(o) and not visited(o):
                observe(o,"Check if this is a potato")

behavior cut_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once inhand(knife)
        achieve cut(potato)

behavior __goal__():
    body:
        # Step 1: Find the potato
        find_potato()

        # Step 2: Bind the potato and necessary tools for cutting
        bind potato: item where:
            is_food_potato(potato) and visited(potato)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind knife: item where:
            is_knife(knife)

        # Step 3: Cut the potato
        cut_potato(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)obs(food_potato_2107, Check if this is a potato)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2107, Check if this is a potato)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
obs(food_potato_2107, Check if this is a potato)
Get this information:  food_potato_2107 is close to fridge_126. food_potato_2107 is close to character_240. food_potato_2107 is inside dining_room_41. food_potato_2107 is inside fridge_126. food_potato_2107 is CLEAN.
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(knife_2122, cupboard_117)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(knife_2122, cupboard_117)
Fail to find knife_2122 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
behavior fry_potatoes(o:item, fryingpan:item):
    body:
        achieve_once inside(o, fryingpan)
        # Place the potato pieces inside the frying pan to start frying

behavior heat_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to begin heating

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        # Select a cut potato piece
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan to fry the potato pieces

        bind stove: item where:
            is_stove(stove)
        # Select a stove to heat the frying pan

        fry_potatoes(potato, fryingpan)
        heat_stove(stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_inside(fryingpan:item):
    # Function to check if there is oil inside the specified frying pan
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, fryingpan))
    return has_oil

behavior fry_potatoes(fryingpan:item):
    body:
        # Ensure oil is inside the frying pan before frying the potatoes
        achieve inside(food_potato_2107, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        # Check if the frying pan has oil, otherwise its necessary to add oil
        if not has_oil_inside(fryingpan):
            # Need to open the oil bottle and pour into the frying pan
            observe(fryingpan, "Check if oil is in the frying pan")
        # Ensure the stove is on for frying
        achieve is_on(stove)
        # Execute frying potatoes in the frying pan
        fry_potatoes(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_potato_2107; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def has_oil_inside(fryingpan:item):
    # Function to check if there is oil inside the specified frying pan
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, fryingpan))
    return has_oil

behavior fry_potatoes(fryingpan:item, potatoes:item):
    body:
        # Ensure the potatoes are inside the frying pan to fry them
        achieve inside(potatoes, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Check if the frying pan has oil, otherwise its necessary to add oil
        if not has_oil_inside(fryingpan):
            # Observe if oil is in the frying pan
            observe(fryingpan, "Check if oil is in the frying pan")
        # Ensure the stove is on for frying
        achieve is_on(stove)
        # Execute frying potatoes in the frying pan
        fry_potatoes(fryingpan, potatoes)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato(cut_potato:item, pan:item, stove:item, oil:item):
    body:
        achieve_once inside(oil, pan) # Add oil to the pan temporarily
        achieve once on(pan, stove) # Place the pan on the stove
        achieve_once is_on(stove) #Turn stove on to heat the pan
        achieve_once inside(cut_potato, pan) # Fry the cut potato pieces

def has_cut_potato(potato: item):
    # Function to check if the potato is cut
    symbol is_cut_true = cut(potato)
    return is_cut_true

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and has_cut_potato(potato) # Select the cut potato
        bind pan: item where:
            is_fryingpan(pan) # Identify a frying pan
        bind stove: item where:
            is_stove(stove) # Identify a stove
        bind oil: item where:
            is_oil(oil) # Find oil
        fry_potato(potato, pan, stove, oil) # Fry the potato pieces

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5389, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#goal_representation
 
behavior fry_potato(cut_potato:item, pan:item, stove:item, oil:item):
    body:
        achieve_once inside(oil, pan) # Add oil to the pan temporarily
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve_once is_on(stove) # Turn the stove on to heat the pan
        achieve_once inside(cut_potato, pan) # Fry the cut potato pieces

def has_cut_potato(potato: item):
    # Function to check if the potato is cut
    symbol is_cut_true = cut(potato)
    return is_cut_true

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and has_cut_potato(potato) # Select the cut potato
        bind pan: item where:
            is_fryingpan(pan) # Identify a frying pan
        bind stove: item where:
            is_stove(stove) # Identify a stove
        bind oil: item where:
            is_oil(oil) # Find oil
        fry_potato(potato, pan, stove, oil) # Fry the potato pieces

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. fry the potato pieces to make french fries." ?
Answer: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan and put it on the stove.  ', '2. Turn on the stove and add some oil.  ', '3. Put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Bind the item frying_pan
        bind stove: item where:
            is_stove(stove)
        # Bind the item stove
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Bind the item frying_pan
        bind stove: item where:
            is_stove(stove)
        # Bind the item stove
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior add_oil(frying_pan:item, oil:item):
    body:
        achieve_once inside(oil, frying_pan)
        # Add oil to the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan]==2154
        # Select the frying pan with ID 2154
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        turn_on_stove(stove)
        add_oil(frying_pan, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior add_oil(frying_pan:item, oil:item):
    body:
        achieve_once inside(oil, frying_pan)
        # Add oil to the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan]==2154
        # Select the frying pan with ID 2154
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        turn_on_stove(stove)
        add_oil(frying_pan, oil)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_ironing_board_2144(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(blow_dryer,ironing_board_instance)
        else:
            exp(blow_dryer,ironing_board_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,ironing_board_instance]=True
        close[ironing_board_instance,blow_dryer]=True
    

behavior find_oil_2013_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

behavior find_food_butter_2007_around_sink_120(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_butter,sink_instance)
        else:
            exp(food_butter,sink_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,sink_instance]=True
        close[sink_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potatoes_in_pan(potatoes:item, pan:item):
    body:
        achieve_once on(potatoes, pan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potato pieces

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        put_potatoes_in_pan(potatoes, pan)
        # Place the potato pieces in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_potatoes_in_pan(potatoes:item, pan:item):
    body:
        achieve_once on(potatoes, pan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potato pieces

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        put_potatoes_in_pan(potatoes, pan)
        # Place the potato pieces in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(fryingpan_2154)put_executor(food_potato_2107, fryingpan_2154)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(food_potato_2107, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_potato_2107 is close fryingpan_2154. fryingpan_2154 is close food_potato_2107. food_potato_2107 is on fryingpan_2154. food_potato_2107 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(kitchen_counter_123)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'walk_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(fryingpan_2154)', 'put_executor(food_potato_2107, fryingpan_2154)']
Time info:
Time consume: 280 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 12
goal generate times: 10
goal correct times: 1
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
