From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and chop the vegetables.', '3. Mix the boiled egg, lemon, and vegetables in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_bread_2016_around_fridge_140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg
        
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Execute the behavior to boil the egg

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg
        
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Execute the behavior to boil the egg

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_egg_2053. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_54)
Robot find: Robot is close to the food_egg_2053. Robot is close to the oven_141. Robot is close to the pot_54. food_egg_2053 is close pot_54. pot_54 is close food_egg_2053. food_egg_2053 is inside pot_54. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_egg_2053. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before boiling the egg. Retrieve water from a faucet and add it to the pot with the food_egg_2053 to complete boiling the egg.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before boiling the egg. Retrieve water from a faucet and add it to the pot with the food_egg_2053 to complete boiling the egg.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_egg_2053.
Action 10: Grab food_egg_2053.
Action 11: Walk to pot_54.
Action 12: Put food_egg_2053 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_needle_2012_around_bathroom_cabinet_305(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(needle,bathroom_cabinet_instance)
        else:
            exp(needle,bathroom_cabinet_instance)
    eff:
        unknown[needle]=False
        close[needle,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,needle]=True
    

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_cd_2100_around_home_office_161(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd,home_office_instance)
        else:
            exp(cd,home_office_instance)
    eff:
        unknown[cd]=False
        close[cd,home_office_instance]=True
        close[home_office_instance,cd]=True
    

#exp_behavior_end

#goal_representation
behavior boil_egg(egg:item, pot:item, faucet:item, stove:item):
    body:
        achieve_once inside(egg, pot) # Place the egg inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg from the available items

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, faucet, stove) 
        # Call the boil_egg behavior to boil the egg using the pot, faucet, and stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior boil_egg(egg:item, pot:item, faucet:item, stove:item):
    body:
        achieve_once inside(egg, pot) # Place the egg inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg from the available items

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, faucet, stove) 
        # Call the boil_egg behavior to boil the egg using the pot, faucet, and stove
##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the pot is filled with water from the faucet before proceeding with boiling the egg. No action was taken to fill the pot with water, which is necessary for boiling the egg.
##############################
From agent.py
Human Instruction: The robot needs to ensure the pot is filled with water from the faucet before proceeding with boiling the egg. No action was taken to fill the pot with water, which is necessary for boiling the egg.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_egg_2053.
Action 10: Grab food_egg_2053.
Action 11: Walk to pot_54.
Action 12: Put food_egg_2053 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Grab pot_54.
Action 20: Walk to faucet_308.
Action 21: Switch off faucet_308.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2013_around_cupboard_131(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(glue,cupboard_instance)
        else:
            exp(glue,cupboard_instance)
    eff:
        unknown[glue]=False
        close[glue,cupboard_instance]=True
        close[cupboard_instance,glue]=True
    

behavior find_keyboard_382_around_home_office_161(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

def ensure_pot_is_filled(pot:item):
    symbol is_filled=has_water(pot)
    return is_filled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # If the pot is already filled with water, place it on the stove and turn the stove on
        if ensure_pot_is_filled(pot):
            bind stove: item where:
                is_stove(stove)
            achieve_once on(pot, stove)
            achieve_once is_on(stove)
        else:
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)
            # After filling the pot with water, place it on the stove and turn the stove on
            bind stove: item where:
                is_stove(stove)
            achieve_once on(pot, stove)
            achieve_once is_on(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

def ensure_pot_is_filled(pot:item):
    symbol is_filled=has_water(pot)
    return is_filled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # If the pot is already filled with water, place it on the stove and turn the stove on
        if ensure_pot_is_filled(pot):
            bind stove: item where:
                is_stove(stove)
            achieve_once on(pot, stove)
            achieve_once is_on(stove)
        else:
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)
            # After filling the pot with water, place it on the stove and turn the stove on
            bind stove: item where:
                is_stove(stove)
            achieve_once on(pot, stove)
            achieve_once is_on(stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before proceeding with boiling the egg.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_chop_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable first
        achieve_once cut(vegetable)
        # Chop the vegetable

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable to wash and chop
        wash_and_chop_vegetables(vegetable)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_chop_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable first
        achieve_once cut(vegetable)
        # Chop the vegetable

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable to wash and chop
        wash_and_chop_vegetables(vegetable)


##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)exp(knife_2036, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
exp(knife_2036, cutting_board_2080)
Fail to find knife_2036 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(bathtub_297)exp(knife_2036, bathtub_297)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(bathtub_297)
Robot find: towel_rack_299, towel_rack_300, Robot is close to the bathtub_297. 
##############################
From agent.py
exp(knife_2036, bathtub_297)
Fail to find knife_2036 around bathtub_297. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Wash and cut the vegetables.', '3. Mix the boiled eggs, lemon, and vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
behavior boil_eggs(pot:item, egg:item, stove:item, faucet:item):
    body:
        achieve_once inside(egg, pot) # Place the egg inside the pot
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove for boiling
        achieve is_on(stove) # Keep the stove turned on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil eggs

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the eggs

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        boil_eggs(pot, egg, stove, faucet)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior boil_eggs(pot:item, egg:item, stove:item, faucet:item):
    body:
        achieve_once inside(egg, pot) # Place the egg inside the pot
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove for boiling
        achieve is_on(stove) # Keep the stove turned on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil eggs

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the eggs

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        boil_eggs(pot, egg, stove, faucet)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_2093, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)open_executor(stove_2090)putin_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_129)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)open_executor(stove_2090)putin_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)open_executor(stove_2090)putin_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_2093)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. food_egg_2053 is close pot_2093. pot_2093 is close food_egg_2053. food_egg_2053 is inside pot_2093. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
putin_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is inside stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to achieve this.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to achieve this.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_2093 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Walk to pot_2093.
Action 8: Open pot_2093.
Action 9: Walk to food_egg_2053.
Action 10: Grab food_egg_2053.
Action 11: Walk to pot_2093.
Action 12: Put food_egg_2053 into pot_2093.
Action 13: Grab pot_2093.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Open stove_2090.
Action 18: Put pot_2093 into stove_2090.
Action 19: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_check_2033_around_powersocket_48(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(check,powersocket_instance)
        else:
            exp(check,powersocket_instance)
    eff:
        unknown[check]=False
        close[check,powersocket_instance]=True
        close[powersocket_instance,check]=True
    

#exp_behavior_end

#goal_representation
def in_stove(pot:item):
    # Function to check if the pot is in the stove
    symbol in_stove = exists stove: item : (is_stove(stove) and inside(pot, stove))
    return in_stove

def has_egg_in_pot(pot:item):
    # Function to check if there are eggs in a specified pot
    symbol has_egg = exists egg: item : (is_food_egg(egg) and inside(egg, pot))
    return has_egg

behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure pot is filled with water

behavior place_eggs_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot) # Place egg temporarily in pot

behavior start_stove(stove:item):
    body:
        achieve_once closed(stove) # Ensure the stove is closed
        achieve_once is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if not in_stove(pot):
            # If the pot is not in the stove, place it there
            achieve_once inside(pot, stove)

        if not has_egg_in_pot(pot):
            # If the pot doesnt have eggs, add them
            foreach egg: item:
                if is_food_egg(egg) and not inside(egg, pot):
                    place_eggs_in_pot(egg, pot)
        
        fill_with_water(pot, faucet) # Fill the pot with water
        start_stove(stove) # Start the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
def in_stove(pot:item):
    # Function to check if the pot is in the stove
    symbol in_stove = exists stove: item : (is_stove(stove) and inside(pot, stove))
    return in_stove

def has_egg_in_pot(pot:item):
    # Function to check if there are eggs in a specified pot
    symbol has_egg = exists egg: item : (is_food_egg(egg) and inside(egg, pot))
    return has_egg

behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure pot is filled with water

behavior place_eggs_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot) # Place egg temporarily in pot

behavior start_stove(stove:item):
    body:
        achieve_once closed(stove) # Ensure the stove is closed
        achieve_once is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if not in_stove(pot):
            # If the pot is not in the stove, place it there
            achieve_once inside(pot, stove)

        if not has_egg_in_pot(pot):
            # If the pot doesnt have eggs, add them
            foreach egg: item:
                if is_food_egg(egg) and not inside(egg, pot):
                    place_eggs_in_pot(egg, pot)
        
        fill_with_water(pot, faucet) # Fill the pot with water
        start_stove(stove) # Start the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)close_executor(stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
close_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to fill the pot with water.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to fill the pot with water.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_2093 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Walk to pot_2093.
Action 8: Open pot_2093.
Action 9: Walk to food_egg_2053.
Action 10: Grab food_egg_2053.
Action 11: Walk to pot_2093.
Action 12: Put food_egg_2053 into pot_2093.
Action 13: Grab pot_2093.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Open stove_2090.
Action 18: Put pot_2093 into stove_2090.
Action 19: Switch on stove_2090.
Action 20: Grab pot_2093.
Action 21: Walk to faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to stove_2090.
Action 24: Close stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(pot:item, stove:item):
    body:
        achieve_once inside(food_egg, pot) # Put eggs inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Choose a pot to boil eggs
        bind stove: item where:
            is_stove(stove)
        # Choose a stove to boil eggs
        boil_eggs(pot, stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_tray_142_around_cupboard_130(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

#goal_representation
 
def is_egg(x:item):
    return is_food_egg(x)

behavior boil_eggs(pot:item, egg:item, faucet:item, stove:item):
    body:
        # Ensure eggs are in the pot
        achieve_once inside(egg, pot)
        # Fill the pot with water
        achieve has_water(pot)
        # Put the pot on the stove
        achieve_once inside(pot, stove)
        # Turn on the stove
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Choose a pot
        
        bind stove: item where:
            is_stove(stove)
        # Choose a stove
        
        bind egg: item where:
            is_egg(egg)
        # Choose an egg
        
        bind faucet: item where:
            is_faucet(faucet)
        # Choose a faucet
        
        boil_eggs(pot, egg, faucet, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_egg(x:item):
    return is_food_egg(x)

behavior boil_eggs(pot:item, egg:item, faucet:item, stove:item):
    body:
        # Ensure eggs are in the pot
        achieve_once inside(egg, pot)
        # Fill the pot with water
        achieve has_water(pot)
        # Put the pot on the stove
        achieve_once inside(pot, stove)
        # Turn on the stove
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Choose a pot
        
        bind stove: item where:
            is_stove(stove)
        # Choose a stove
        
        bind egg: item where:
            is_egg(egg)
        # Choose an egg
        
        bind faucet: item where:
            is_faucet(faucet)
        # Choose a faucet
        
        boil_eggs(pot, egg, faucet, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchoff_executor(stove_2090)open_executor(stove_2090)putin_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned off. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
putin_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is inside stove_2090. pot_2093 is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to fill the pot with water.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board(kitchen_counter: item):
    # Function to check if there is a cutting board on the kitchen counter
    symbol has_c_board= exists o: item : (is_cutting_board(o) and on(o, kitchen_counter))
    return has_c_board

def take_out_items(kitchen_counter: item):
    # Function to check if there are any food_vegetable items on the kitchen counter
    symbol has_vege= exists o: item : (is_food_vegetable(o) and inside(o, kitchen_counter))
    return has_vege

behavior wash_and_cut_food_vegetable(vegetable: item):
    body:
        bind faucet: item where:
            is_faucet(faucet)
        wash(vegetable) # Wash the vegetable to make it clean
        observe(faucet, "Make sure the vegetable is clean after washing")
        
behavior cut_food_vegetable(vegetable: item, kitchen_counter: item, knife: item):
    body:
        achieve_once inhand(knife) # Hold the knife to cut the vegetable
        achieve_once on(vegetable, kitchen_counter) # Place the vegetable on the kitchen counter
        cut(vegetable) # Cut the vegetable
        
behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and take_out_items(kitchen_counter)
            # Attach the kitchen counter that has food items on it
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check if there is a cutting board on the counter")
            # Check again if the cutting board is not present
        else:
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            bind knife: item where:
                is_knife(knife)
            wash_and_cut_food_vegetable(vegetable)
            cut_food_vegetable(vegetable, kitchen_counter, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#goal_representation
 
def has_cutting_board(kitchen_counter: item):
    # Function to check if there is a cutting board on the kitchen counter
    symbol has_c_board= exists o: item : (is_cutting_board(o) and on(o, kitchen_counter))
    return has_c_board

def take_out_items(kitchen_counter: item):
    # Function to check if there are any food_vegetable items on the kitchen counter
    symbol has_vege= exists o: item : (is_food_vegetable(o) and inside(o, kitchen_counter))
    return has_vege

behavior wash_food_vegetable(vegetable: item, faucet: item):
    body:
        achieve has_water(faucet)
        wash(vegetable) # Wash the vegetable to make it clean
        observe(faucet, "Make sure the vegetable is clean after washing")
        
behavior cut_food_vegetable(vegetable: item, kitchen_counter: item, knife: item):
    body:
        achieve_once inhand(knife) # Hold the knife to cut the vegetable
        achieve_once on(vegetable, kitchen_counter) # Place the vegetable on the kitchen counter
        cut(vegetable) # Cut the vegetable
        
behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and take_out_items(kitchen_counter)
            # Attach the kitchen counter that has food items on it
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check if there is a cutting board on the counter")
            # Check again if the cutting board is not present
        else:
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            bind knife: item where:
                is_knife(knife)
            bind faucet: item where:
                is_faucet(faucet)
            wash_food_vegetable(vegetable, faucet)
            cut_food_vegetable(vegetable, kitchen_counter, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
def has_cutting_board(kitchen_counter: item):
    # Function to check if there is a cutting board on the kitchen counter
    symbol has_c_board = exists o: item : (is_cutting_board(o) and on(o, kitchen_counter))
    return has_c_board

def take_out_items(kitchen_counter: item):
    # Function to check if there are any food_vegetable items on the kitchen counter
    symbol has_vege = exists o: item : (is_food_vegetable(o) and on(o, kitchen_counter))
    return has_vege

behavior wash_food_vegetable(vegetable: item, faucet: item):
    body:
        achieve has_water(faucet)
        wash(vegetable) # Wash the vegetable to make it clean
        observe(faucet, "Make sure the vegetable is clean after washing")
        
behavior cut_food_vegetable(vegetable: item, kitchen_counter: item, knife: item):
    body:
        achieve_once inhand(knife) # Hold the knife to cut the vegetable
        achieve_once on(vegetable, kitchen_counter) # Place the vegetable on the kitchen counter
        cut(vegetable) # Cut the vegetable
        
behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and take_out_items(kitchen_counter)
            # Attach the kitchen counter that has food items on it
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check if there is a cutting board on the counter")
            # Check again if the cutting board is not present
        else:
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            bind knife: item where:
                is_knife(knife)
            bind faucet: item where:
                is_faucet(faucet)
            wash_food_vegetable(vegetable, faucet)
            cut_food_vegetable(vegetable, kitchen_counter, knife)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_vegetables(vegetable: item):
    body:
        achieve clean(vegetable)
        # Achieve the vegetable being clean
        achieve cut(vegetable)
        # Achieve the vegetable being cut

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        wash_and_cut_vegetables(vegetable)
        # Wash and cut the selected vegetable

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_cut_vegetables(vegetable: item):
    body:
        achieve clean(vegetable)
        # Achieve the vegetable being clean
        achieve cut(vegetable)
        # Achieve the vegetable being cut

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        wash_and_cut_vegetables(vegetable)
        # Wash and cut the selected vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_262)exp(knife_2036, nightstand_262)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(nightstand_262)
Robot find: pillow_239, headset_2086, mat_237, drawing_238, Robot is close to the nightstand_262. 
##############################
From agent.py
exp(knife_2036, nightstand_262)
Fail to find knife_2036 around nightstand_262. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_186)exp(knife_2036, tvstand_186)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(tvstand_186)
Robot find: mat_201, cd_2100, Robot is close to the tvstand_186. 
##############################
From agent.py
exp(knife_2036, tvstand_186)
Fail to find knife_2036 around tvstand_186. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_135)exp(knife_2036, tvstand_135)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(tvstand_135)
Robot find: drawing_118, remote_control_2081, cd_player_2084, dvd_player_2085, Robot is close to the tvstand_135. 
##############################
From agent.py
exp(knife_2036, tvstand_135)
Fail to find knife_2036 around tvstand_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(knife_2036, bathroom_cabinet_305)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Robot find: Robot is close to the bathroom_cabinet_305. 
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot find: soap_2038, Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. bathroom_cabinet_305 is opened. 
##############################
From agent.py
exp(knife_2036, bathroom_cabinet_305)
Fail to find knife_2036 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Locate the item knife_2036 inside dining_room_1. It is inside dishwasher_143, which should be nearby within the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to fill the pot with water before boiling the eggs. Use the faucet to fill the pot with water.
Locate the item knife_2036 inside dining_room_1. It is inside dishwasher_143, which should be nearby within the dining room.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_2093 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Walk to pot_2093.
Action 8: Open pot_2093.
Action 9: Walk to food_egg_2053.
Action 10: Grab food_egg_2053.
Action 11: Walk to pot_2093.
Action 12: Put food_egg_2053 into pot_2093.
Action 13: Grab pot_2093.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Open stove_2090.
Action 18: Put pot_2093 into stove_2090.
Action 19: Switch on stove_2090.
Action 20: Grab pot_2093.
Action 21: Walk to faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to stove_2090.
Action 24: Close stove_2090.
Action 25: Walk to faucet_134.
Action 26: Switch on faucet_134.
Action 27: Switch off faucet_134.
Action 28: Walk to stove_2090.
Action 29: Switch off stove_2090.
Action 30: Open stove_2090.
Action 31: Put pot_2093 into stove_2090.
Action 32: Switch on stove_2090.
Action 33: Walk to food_vegetable_2072.
Action 34: Grab food_vegetable_2072.
Action 35: Walk to faucet_134.
Action 36: Switch on faucet_134.
Action 37: Wash food_vegetable_2072.
Action 38: Switch off faucet_134.
Action 39: Walk to cutting_board_2080.
Action 40: Put food_vegetable_2072 on cutting_board_2080.
Action 41: Walk to knifeblock_52.
Action 42: look for knife_2036 around knifeblock_52.
Action 43: Walk to nightstand_262.
Action 44: look for knife_2036 around nightstand_262.
Action 45: Walk to tvstand_186.
Action 46: look for knife_2036 around tvstand_186.
Action 47: Walk to tvstand_135.
Action 48: look for knife_2036 around tvstand_135.
Action 49: Walk to bathroom_cabinet_305.
Action 50: Open bathroom_cabinet_305.
Action 51: look for knife_2036 around bathroom_cabinet_305.
Action 52: Walk to cupboard_131.
Action 53: Open cupboard_131.

##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_bowl_2096_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_eggs: item, lemon: item, vegetables: item, bowl: item):
    body:
        achieve_once inside(boiled_eggs, bowl)  # Add boiled eggs to the bowl
        achieve_once inside(lemon, bowl)  # Add lemon to the bowl
        achieve_once inside(vegetables, bowl)  # Add vegetables to the bowl

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and inside_char(char, dining_room_1)  # Select boiled eggs you previously found and brought there

        bind lemon: item where:
            is_food_lemon(lemon) and inside_char(char, dining_room_1)  # Select lemon you previously found and brought there

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside_char(char, dining_room_1)  # Select vegetables you previously found and brought there

        bind bowl: item where:
            is_bowl(bowl) and inside_char(char, dining_room_1)  # Select a bowl in the dining room

        mix_ingredients(boiled_eggs, lemon, vegetables, bowl)  # Carry out mixing in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_1; available variables: [Variable<boiled_eggs: item>].
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs and wash the vegetables.', '2. Cut the boiled eggs, lemon, and vegetables.', '3. Mix all prepared ingredients in a bowl to make the egg salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_129(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_egg_2053_around_kitchen_counter_129(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(egg:item, pot:item, stove:item):
    body:
        if not has_water(pot):
            achieve_once has_water(pot) 
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior wash_vegetables(vegetable:item):
    body:
        achieve_once clean(vegetable)

behavior __goal__():
    body:
        bind egg:item where:
            is_food_egg(egg)

        bind pot:item where:
            is_pot(pot)

        bind stove:item where:
            is_stove(stove)

        bind vegetable:item where:
            is_food_vegetable(vegetable)

        boil_eggs(egg, pot, stove)
        wash_vegetables(vegetable)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_eggs(egg:item, pot:item, stove:item):
    body:
        if not has_water(pot):
            achieve_once has_water(pot) 
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior wash_vegetables(vegetable:item):
    body:
        achieve_once clean(vegetable)

behavior __goal__():
    body:
        bind egg:item where:
            is_food_egg(egg)

        bind pot:item where:
            is_pot(pot)

        bind stove:item where:
            is_stove(stove)

        bind vegetable:item where:
            is_food_vegetable(vegetable)

        boil_eggs(egg, pot, stove)
        wash_vegetables(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)exp(food_egg_2053, kitchen_counter_129)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_129)exp(food_vegetable_2072, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. food_egg_2053 is close pot_54. pot_54 is close food_egg_2053. food_egg_2053 is inside pot_54. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior cut_items(boiled_eggs:item, lemon:item, vegetables:item):
    body:
        achieve_once cut(boiled_eggs)
        achieve_once cut(lemon)
        achieve_once cut(vegetables)

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and cuttable(boiled_eggs)
        bind lemon: item where:
            is_food_lemon(lemon) and cuttable(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cuttable(vegetables)
        cut_items(boiled_eggs, lemon, vegetables)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_items(boiled_eggs:item, lemon:item, vegetables:item):
    body:
        achieve_once cut(boiled_eggs)
        achieve_once cut(lemon)
        achieve_once cut(vegetables)

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and cuttable(boiled_eggs)
        bind lemon: item where:
            is_food_lemon(lemon) and cuttable(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cuttable(vegetables)
        cut_items(boiled_eggs, lemon, vegetables)
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the pot_54. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_egg_2053. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(knife_2036, cupboard_130)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the food_vegetable_2072. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(knife_2036, cupboard_130)
Fail to find knife_2036 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)exp(knife_2036, pot_2093)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
exp(knife_2036, pot_2093)
Fail to find knife_2036 around pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(knife_2036, bookshelf_136)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the food_vegetable_2072. Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(knife_2036, bookshelf_136)
Fail to find knife_2036 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(knife_2036, bookshelf_137)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the food_vegetable_2072. Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: The target item, knife_2036, can be found inside dining_room_1. It is specifically located inside the dishwasher_143, which is positioned near knife_2036. Please retrieve knife_2036 from inside the dishwasher.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, knife_2036, can be found inside dining_room_1. It is specifically located inside the dishwasher_143, which is positioned near knife_2036. Please retrieve knife_2036 from inside the dishwasher.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_134.
Action 14: Switch on faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to food_egg_2053.
Action 17: Grab food_egg_2053.
Action 18: Walk to pot_54.
Action 19: Put food_egg_2053 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Put pot_54 on stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to food_vegetable_2072.
Action 24: Grab food_vegetable_2072.
Action 25: Wash food_vegetable_2072.
Action 26: Walk to faucet_308.
Action 27: Switch off faucet_308.
Action 28: Walk to food_egg_2053.
Action 29: Grab food_egg_2053.
Action 30: Walk to cutting_board_2080.
Action 31: Put food_egg_2053 on cutting_board_2080.
Action 32: Walk to knifeblock_52.
Action 33: look for knife_2036 around knifeblock_52.
Action 34: Walk to cupboard_130.
Action 35: look for knife_2036 around cupboard_130.
Action 36: Walk to pot_2093.
Action 37: Open pot_2093.
Action 38: look for knife_2036 around pot_2093.
Action 39: Walk to bookshelf_136.
Action 40: look for knife_2036 around bookshelf_136.
Action 41: Walk to bookshelf_137.
Action 42: Open bookshelf_137.

##############################
From agent.py
exp(knife_2036, bookshelf_137)
Fail to find knife_2036 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by left hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
cut_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_lemon_2061. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_sink_133(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation

behavior cut_item(item:item, knife:item, cutting_board:item):
    body:
        achieve_once on(item, cutting_board) # Place the item on the cutting board for cutting
        achieve_once cut(item) # Cut the item

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select boiled egg that is already boiled

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon from available items

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables that are washed

        bind knife: item where:
            is_knife(knife)
        # Select the knife to use for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board to use

        cut_item(boiled_egg, knife, cutting_board)
        # Cut the boiled egg
        
        cut_item(lemon, knife, cutting_board)
        # Cut the lemon

        cut_item(vegetables, knife, cutting_board)
        # Cut the vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior cut_item(item:item, knife:item, cutting_board:item):
    body:
        achieve_once on(item, cutting_board) # Place the item on the cutting board for cutting
        achieve_once cut(item) # Cut the item

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select boiled egg that is already boiled

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon from available items

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables that are washed

        bind knife: item where:
            is_knife(knife)
        # Select the knife to use for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board to use

        cut_item(boiled_egg, knife, cutting_board)
        # Cut the boiled egg
        
        cut_item(lemon, knife, cutting_board)
        # Cut the lemon

        cut_item(vegetables, knife, cutting_board)
        # Cut the vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)put_executor(food_vegetable_2072, kitchen_counter_128)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, kitchen_counter_128)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close kitchen_counter_128. kitchen_counter_128 is close food_vegetable_2072. food_vegetable_2072 is on kitchen_counter_128. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. cutting_board_2080 is close food_lemon_2061. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. Robot is close to the cutting_board_2080. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. Robot is close to the cutting_board_2080. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_bowl_2097_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior mix_ingredients(food1:item, food2:item, food3:item, bowl:item):
    body:
        achieve_once inside(food1, bowl)
        achieve_once inside(food2, bowl)
        achieve_once inside(food3, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        mix_ingredients(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior mix_ingredients(food1:item, food2:item, food3:item, bowl:item):
    body:
        achieve_once inside(food1, bowl)
        achieve_once inside(food2, bowl)
        achieve_once inside(food3, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        mix_ingredients(egg, lemon, vegetable, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2096, sink_133)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the knife_2036. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2096, sink_133)
Fail to find bowl_2096 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2096, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the knife_2036. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2096, table_123)
Fail to find bowl_2096 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the knife_2036. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_egg_2053, bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the bowl_2096. Robot is close to the table_127. bowl_2096 is close food_egg_2053. food_egg_2053 is close bowl_2096. food_egg_2053 is inside bowl_2096. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_lemon_2061, bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the bowl_2096. Robot is close to the table_127. food_lemon_2061 is close bowl_2096. bowl_2096 is close food_lemon_2061. food_lemon_2061 is inside bowl_2096. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_54)', 'putin_executor(food_egg_2053, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(cupboard_130)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(bookshelf_136)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_egg_2053)', 'cut_executor(food_egg_2053)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061) (Failed)', 'walk_executor(kitchen_counter_128)', 'put_executor(food_vegetable_2072, kitchen_counter_128)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(food_lemon_2061)', 'cut_executor(food_lemon_2061)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(cutting_board_2080)', 'put_executor(food_vegetable_2072, cutting_board_2080)', 'walk_executor(food_vegetable_2072)', 'cut_executor(food_vegetable_2072)', 'walk_executor(sink_133)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(bowl_2096)', 'putin_executor(food_egg_2053, bowl_2096)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(bowl_2096)', 'putin_executor(food_lemon_2061, bowl_2096)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 454 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 106
goal generate times: 4
goal correct times: 0
action_num: 72

Task complete rate:
1
Scene_id: 2
##############################
