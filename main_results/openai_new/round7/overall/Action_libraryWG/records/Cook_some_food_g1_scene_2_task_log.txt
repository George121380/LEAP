From agent.py
Reset goals: The sub-goals are: 
['1. Identify the vegetables that need to be boiled.', '2. Place the vegetables in a pot of water on the stove and turn on the heat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2066_around_kitchen_counter_128(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def identify_vegetables_needed_for_boiling(item: item):
    # Function to check if the item is a vegetable that needs boiling
    symbol is_vegetable= is_food_vegetable(item)
    return is_vegetable

behavior __goal__():
    body:
        foreach v: item:
            if is_food_vegetable(v) and not visited(v):
                # Check all unvisited items to see if they are vegetables that need to be boiled
                observe(v, "Check if this is a vegetable that needs boiling")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def identify_vegetables_needed_for_boiling(item: item):
    # Function to check if the item is a vegetable that needs boiling
    symbol is_vegetable= is_food_vegetable(item)
    return is_vegetable

behavior __goal__():
    body:
        foreach v: item:
            if is_food_vegetable(v) and not visited(v):
                # Check all unvisited items to see if they are vegetables that need to be boiled
                observe(v, "Check if this is a vegetable that needs boiling")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if this is a vegetable that needs boiling)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
obs(food_vegetable_2072, Check if this is a vegetable that needs boiling)
##############################
From agent.py
obs(food_vegetable_2072, Check if this is a vegetable that needs boiling)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_shoes_2001_around_bench_122(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
behavior place_vegetables_in_pot_with_water_and_turn_on_heat(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind stove: item where:
            is_stove(stove)
        place_vegetables_in_pot_with_water_and_turn_on_heat(vegetables, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_vegetables_in_pot_with_water_and_turn_on_heat(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind stove: item where:
            is_stove(stove)
        place_vegetables_in_pot_with_water_and_turn_on_heat(vegetables, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_54, cupboard_131)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_54, cupboard_131)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before placing the vegetables on the stove and turning on the heat.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water before placing the vegetables on the stove and turning on the heat.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_vegetable_2072 around fridge_140.
Action 5: Observe around food_vegetable_2072 with the question of Check if this is a vegetable that needs boiling.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for pot_54 around cupboard_131.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_vegetable_2072.
Action 12: Grab food_vegetable_2072.
Action 13: Walk to pot_54.
Action 14: Put food_vegetable_2072 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2100_around_wallshelf_191(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd,wallshelf_instance)
        else:
            exp(cd,wallshelf_instance)
    eff:
        unknown[cd]=False
        close[cd,wallshelf_instance]=True
        close[wallshelf_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water inside
    symbol has_water=exists w: item : (is_water(w) and inside(w, pot))
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Select the pot, ensuring that its open
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is already turned on
        bind faucet: item where:
            is_faucet(faucet)
        # Select any available faucet
        
        # Ensure the pot is filled with water before proceeding
        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        
        achieve inside(food_vegetable_2072, pot)
        # Ensure the vegetables are inside the pot filled with water
        achieve_once on(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2072; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_2100_around_wallshelf_191(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd,wallshelf_instance)
        else:
            exp(cd,wallshelf_instance)
    eff:
        unknown[cd]=False
        close[cd,wallshelf_instance]=True
        close[wallshelf_instance,cd]=True
    

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water inside
    symbol has_water=exists w: item : (is_water(w) and inside(w, pot))
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Select the pot, ensuring that its open
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is already turned on
        bind faucet: item where:
            is_faucet(faucet)
        # Select any available faucet
        
        bind food_vegetable_2072: item where:
            is_food_vegetable(food_vegetable_2072)
        # Identify the vegetables

        # Ensure the pot is filled with water before proceeding
        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)

        achieve inside(food_vegetable_2072, pot)
        # Ensure the vegetables are inside the pot filled with water
        achieve_once on(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water inside
    symbol has_water=exists w: item : (is_water(w) and inside(w, pot))
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Select the pot, ensuring that its open
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is already turned on
        bind faucet: item where:
            is_faucet(faucet)
        # Select any available faucet
        
        bind food_vegetable_2072: item where:
            is_food_vegetable(food_vegetable_2072)
        # Identify the vegetables

        # Ensure the pot is filled with water before proceeding
        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)

        achieve inside(food_vegetable_2072, pot)
        # Ensure the vegetables are inside the pot filled with water
        achieve_once on(pot, stove)
        # Place the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing the vegetables on the stove and turning on the heat.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before placing the vegetables on the stove and turning on the heat.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_vegetable_2072 around fridge_140.
Action 5: Observe around food_vegetable_2072 with the question of Check if this is a vegetable that needs boiling.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for pot_54 around cupboard_131.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_vegetable_2072.
Action 12: Grab food_vegetable_2072.
Action 13: Walk to pot_54.
Action 14: Put food_vegetable_2072 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Grab pot_54.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2100_around_stovefan_139(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(cd,stovefan_instance)
        else:
            exp(cd,stovefan_instance)
    eff:
        unknown[cd]=False
        close[cd,stovefan_instance]=True
        close[stovefan_instance,cd]=True
    

behavior find_towel_rack_299_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove_with_water(pot:item, stove:item):
    # Function to check if a pot on the stove has water
    symbol pot_on_stove=on(pot, stove)
    symbol wet_pot=has_water(pot)
    return pot_on_stove and wet_pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind pot: item where:
            is_pot(pot) and on(pot, stove) # Assuming we already have a pot on the stove
        
        if is_pot_on_stove_with_water(pot, stove):
            # If pot is on stove with water, turn on the stove
            achieve is_on(stove)
        else:
            # Ensure pot has water before placing on stove and turning it on

            achieve has_water(pot)
            achieve on(pot, stove)
            achieve is_on(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove_with_water(pot:item, stove:item):
    # Function to check if a pot on the stove has water
    symbol pot_on_stove=on(pot, stove)
    symbol wet_pot=has_water(pot)
    return pot_on_stove and wet_pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind pot: item where:
            is_pot(pot) and on(pot, stove) # Assuming we already have a pot on the stove
        
        if is_pot_on_stove_with_water(pot, stove):
            # If pot is on stove with water, turn on the stove
            achieve is_on(stove)
        else:
            # Ensure pot has water before placing on stove and turning it on

            achieve has_water(pot)
            achieve on(pot, stove)
            achieve is_on(stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it containing the vegetables back on the stove and turning on the heat.
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 48
goal generate times: 4
goal correct times: 1
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 19 steps
Keystate: k2 - Requires: 5 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
