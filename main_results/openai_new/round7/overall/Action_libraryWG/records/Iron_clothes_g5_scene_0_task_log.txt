From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt that need ironing.', '2. Iron the shirt.', '3. Iron the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_ironing_board_2074(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior find_shirt_skirt(shirt:item, skirt:item):
    body:
        if not (visited(shirt) or visited(skirt)):
            # If neither the shirt nor skirt has been visited, initiate exploration
            foreach item: item:
                if is_clothes_shirt(item) or is_clothes_skirt(item):
                    # Check all unvisited items that are clothes
                    observe(item, "Check if this is the shirt or skirt needing ironing")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt instance

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt instance

        find_shirt_skirt(shirt, skirt)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_shirt_skirt(shirt:item, skirt:item):
    body:
        if not (visited(shirt) or visited(skirt)):
            # If neither the shirt nor skirt has been visited, initiate exploration
            foreach item: item:
                if is_clothes_shirt(item) or is_clothes_skirt(item):
                    # Check all unvisited items that are clothes
                    observe(item, "Check if this is the shirt or skirt needing ironing")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt instance

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt instance

        find_shirt_skirt(shirt, skirt)
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if this is the shirt or skirt needing ironing)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(clothes_shirt_2086, ironing_board_2074)
Fail to find clothes_shirt_2086 around ironing_board_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if this is the shirt or skirt needing ironing)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)obs(clothes_skirt_2088, Check if this is the shirt or skirt needing ironing)
##############################
From agent.py
obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2088, Check if this is the shirt or skirt needing ironing)
Get this information:  clothes_skirt_2088 is close to basket_for_clothes_2006. clothes_skirt_2088 is close to character_65. clothes_skirt_2088 is inside bathroom_1. clothes_skirt_2088 is inside basket_for_clothes_2006. clothes_skirt_2088 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_shirt(iron:item, shirt:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Turn on the iron for heating
        achieve_once clean(shirt) # Make sure the shirt is clean
        achieve_on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once inhand(iron) # Hold the iron in hand

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        heat_shirt(iron, shirt)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<iron: item>, Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_376_around_closetdrawer_154(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#goal_representation
 
behavior heat_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Turn on the iron for heating
        achieve_once clean(shirt) # Make sure the shirt is clean
        achieve_on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once inhand(iron) # Hold the iron in hand

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        heat_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_hanger_134_around_closetdrawer_154(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#goal_representation
 
behavior heat_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Turn on the iron for heating
        achieve_once clean(shirt) # Make sure the shirt is clean
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once inhand(iron) # Hold the iron in hand

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        heat_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Turn on the iron for heating
        achieve_once clean(shirt) # Make sure the shirt is clean
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once inhand(iron) # Hold the iron in hand

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        heat_shirt(iron, shirt, ironing_board)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_369_around_dresser_358(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironing_board(item:item):
    symbol is_ironing_board=exists b: item : (is_ironing_board(b) and id[b]==2074)
    return is_ironing_board

def is_clothes_shirt(item:item):
    symbol is_shirt=exists s: item : (is_clothes_shirt(s) and id[s]==2086)
    return is_shirt

behavior observe_shirt(shirt:item, ironing_board:item):
    body:
        observe(shirt, "Check if this is the shirt or skirt needing ironing")
        bind basket: item where:
            is_basket_for_clothes(basket)
        observe(basket, "Check if shirt is present in the basket")

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086
        if has_ironing_board(ironing_board) and is_clothes_shirt(clothes_shirt):
            # If the ironing board and shirt are already known, observe the shirt
            observe_shirt(clothes_shirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_ironing_board(item:item):
    symbol is_ironing_board=exists b: item : (is_ironing_board(b) and id[b]==2074)
    return is_ironing_board

def is_clothes_shirt(item:item):
    symbol is_shirt=exists s: item : (is_clothes_shirt(s) and id[s]==2086)
    return is_shirt

behavior observe_shirt(shirt:item, ironing_board:item):
    body:
        observe(shirt, "Check if this is the shirt or skirt needing ironing")
        bind basket: item where:
            is_basket_for_clothes(basket)
        observe(basket, "Check if shirt is present in the basket")

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086
        if has_ironing_board(ironing_board) and is_clothes_shirt(clothes_shirt):
            # If the ironing board and shirt are already known, observe the shirt
            observe_shirt(clothes_shirt, ironing_board)

##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)obs(basket_for_clothes_2006, Check if shirt is present in the basket)
##############################
From agent.py
obs(clothes_shirt_2086, Check if this is the shirt or skirt needing ironing)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py
obs(basket_for_clothes_2006, Check if shirt is present in the basket)
Get this information:  clothes_pants_2085 is inside basket_for_clothes_2006. clothes_socks_2087 is inside basket_for_clothes_2006. basket_for_clothes_2006 is inside bathroom_1. basket_for_clothes_2006 is close to towel_rack_32. basket_for_clothes_2006 is close to towel_rack_33. basket_for_clothes_2006 is close to towel_rack_34. basket_for_clothes_2006 is close to shower_36. basket_for_clothes_2006 is close to clothes_pants_2085. basket_for_clothes_2006 is close to clothes_shirt_2086. basket_for_clothes_2006 is close to clothes_socks_2087. basket_for_clothes_2006 is close to clothes_skirt_2088. basket_for_clothes_2006 is close to toilet_37. basket_for_clothes_2006 is close to sink_42. basket_for_clothes_2006 is close to faucet_43. basket_for_clothes_2006 is close to mat_22. basket_for_clothes_2006 is close to bathtub_30. basket_for_clothes_2006 is close to towel_rack_31. basket_for_clothes_2006 is close to character_65. clothes_skirt_2088 is inside basket_for_clothes_2006. clothes_shirt_2086 is inside basket_for_clothes_2006. basket_for_clothes_2006 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab clothes_shirt_2086 from basket_for_clothes_2006 and proceed to iron it. The shirt currently remains in the basket and has not been moved to the ironing board.
##############################
From agent.py
Human Instruction: You need to grab clothes_shirt_2086 from basket_for_clothes_2006 and proceed to iron it. The shirt currently remains in the basket and has not been moved to the ironing board.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to basket_for_clothes_2006.
Action 4: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 5: Observe around clothes_shirt_2086 with the question of Check if this is the shirt or skirt needing ironing.
Action 6: Observe around clothes_skirt_2088 with the question of Check if this is the shirt or skirt needing ironing.
Action 7: Observe around clothes_shirt_2086 with the question of Check if this is the shirt or skirt needing ironing.
Action 8: Observe around basket_for_clothes_2006 with the question of Check if shirt is present in the basket.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_115_around_closetdrawer_154(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_clothes(item:item, target_location:item):
    body:
        achieve_once inside(item, target_location)

behavior place_on_ironing_board(item:item, ironing_board:item):
    body:
        achieve_once on(item, ironing_board)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket]==2006
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        move_clothes(shirt, ironing_board)
        place_on_ironing_board(shirt, ironing_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_359_around_dresser_358(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure the shirt is on the ironing board, the iron is plugged in and turned on, before starting the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket]==2006
        # Select the basket with the clothes

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074
        
        bind iron: item where:
            is_iron(iron)
        # Select an iron for ironing

        if inside(shirt, basket):
            # Ensure the shirt is inside the basket
            achieve_once inhand(shirt)
        
        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure the shirt is on the ironing board, the iron is plugged in and turned on, before starting the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket]==2006
        # Select the basket with the clothes

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074
        
        bind iron: item where:
            is_iron(iron)
        # Select an iron for ironing

        if inside(shirt, basket):
            # Ensure the shirt is inside the basket
            achieve_once inhand(shirt)
        
        iron_shirt(shirt, ironing_board, iron)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to iron the shirt. The shirt is on the ironing board and the iron is plugged in and turned on. Ensure the ironing process is completed.
##############################
From agent.py
Human Instruction: The robot needs to iron the shirt. The shirt is on the ironing board and the iron is plugged in and turned on. Ensure the ironing process is completed.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to basket_for_clothes_2006.
Action 4: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 5: Observe around clothes_shirt_2086 with the question of Check if this is the shirt or skirt needing ironing.
Action 6: Observe around clothes_skirt_2088 with the question of Check if this is the shirt or skirt needing ironing.
Action 7: Observe around clothes_shirt_2086 with the question of Check if this is the shirt or skirt needing ironing.
Action 8: Observe around basket_for_clothes_2006 with the question of Check if shirt is present in the basket.
Action 9: Grab clothes_shirt_2086.
Action 10: Walk to ironing_board_2074.
Action 11: Put clothes_shirt_2086 on ironing_board_2074.
Action 12: Plug in iron_2089.
Action 13: Switch on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        achieve on(clothes_shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        achieve plugged(iron)
        # Ensure the iron is plugged in

        achieve is_on(iron)
        # Ensure the iron is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_remote_control_2052_around_coffee_table_2068(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(remote_control,coffee_table_instance)
        else:
            exp(remote_control,coffee_table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,coffee_table_instance]=True
        close[coffee_table_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is turned on
        # The shirt is ironed and remain on the ironing board when the procedure finishes

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        iron_shirt(shirt, ironing_board, iron)
        # Call behavior to iron the shirt using the given shirt, ironing board, and iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in

        achieve is_on(iron)
        # Ensure the iron is turned on

        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        # Completing the ironing process is implicit as the goal

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board_2074)
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        
        bind iron: item where:
            is_iron(iron) and id[iron]==2089

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. iron the shirt." ?
Answer: Place the shirt on the ironing board. Turn on the iron, then put the iron on the shirt, push and pull the iron.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is turned on
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        push(iron) # Begin ironing the shirt
        pull(iron) # Move the iron to complete the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        # Bind to shirt instance that has been found
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind to the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind to the iron

        iron_shirt(shirt, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>, Variable<iron: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_spectacles_2082_around_bookshelf_101(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_hanger_136_around_closetdrawer_154(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is turned on
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        push(iron) # Begin ironing the shirt
        pull(iron) # Move the iron to complete the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and visited(shirt)
        # Bind to shirt instance that has been found
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind to the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind to the iron

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve_once plugged(iron)
        # Plug in the iron
        achieve_once is_on(iron)
        # Turn on the iron
        achieve_once close(iron, shirt)
        # Place the iron on the shirt
        achieve_once push(iron)
        # Push the iron
        achieve_once pull(iron)
        # Pull the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the items related to ironing
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Error is:
Unknown expression type: <class 'concepts.dm.crow.behavior.CrowBehaviorApplicationExpression'>.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_oil_2079_around_cupboard_229(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior iron_the_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure the shirt is ironed properly on the board by checking the necessary conditions

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs ironing
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        iron_the_shirt(shirt, iron, ironing_board)
        # Execute the ironing process

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once on(shirt, board) # Ensure the shirt is on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Ensure the iron is turned on

behavior complete_ironing(shirt:item, iron:item):
    body:
        # Perform the ironing process by pushing and pulling the iron on the shirt
        achieve_once clean(shirt) # Ensure the shirt is properly ironed and hence clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed
        bind iron: item where:
            is_iron(iron)
        # Select the iron to use
        bind board: item where:
            is_ironing_board(board)
        # Select the ironing board
        iron_shirt(shirt, iron, board)
        complete_ironing(shirt, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once on(shirt, board) # Ensure the shirt is on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Ensure the iron is turned on

behavior complete_ironing(shirt:item, iron:item):
    body:
        # Perform the ironing process by pushing and pulling the iron on the shirt
        achieve_once clean(shirt) # Ensure the shirt is properly ironed and hence clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that needs to be ironed
        bind iron: item where:
            is_iron(iron)
        # Select the iron to use
        bind board: item where:
            is_ironing_board(board)
        # Select the ironing board
        iron_shirt(shirt, iron, board)
        complete_ironing(shirt, iron)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the ironing process on the shirt. Place the iron on the shirt and perform a push and pull motion with the iron to complete the ironing process.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt identified as clothes_skirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        # The task is to iron the skirt, ensuring the utility is properly used:
        achieve_on(skirt, ironing_board)
        # The skirt should be on the ironing board

        achieve plugged(iron)
        # Ensure the iron is plugged in
        
        achieve is_on(iron)
        # Turn on the iron for use

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt identified as clothes_skirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        # The task is to iron the skirt, ensuring the utility is properly used:
        achieve on(skirt, ironing_board)
        # The skirt should be on the ironing board

        achieve plugged(iron)
        # Ensure the iron is plugged in
        
        achieve is_on(iron)
        # Turn on the iron for use

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt identified as clothes_skirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        # The task is to iron the skirt, ensuring the utility is properly used:
        achieve on(skirt, ironing_board)
        # The skirt should be on the ironing board

        achieve plugged(iron)
        # Ensure the iron is plugged in
        
        achieve is_on(iron)
        # Turn on the iron for use

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_skirt_2088 by left hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_skirt_2088. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt.
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)']
Time info:
Time consume: 295 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 10
goal generate times: 13
goal correct times: 3
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 5 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
