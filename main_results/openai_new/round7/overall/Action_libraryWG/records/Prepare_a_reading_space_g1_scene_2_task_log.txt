From agent.py
Reset goals: The sub-goals are: 
['1. Locate the correct book.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_visited_bookshelf_with_book():
    # Checks if a visited bookshelf contains the targeted book
    symbol found_book= exists shelf: item : (is_bookshelf(shelf) and visited(shelf) and exists b: item : (is_book(b) and inside(b, shelf)))
    return found_book

behavior locate_book(book: item):
    body:
        if has_visited_bookshelf_with_book():
            # If a checked bookshelf has the book, bind it directly without further searching
            bind shelf: item where:
                is_bookshelf(shelf) and visited(shelf) and exists book: item : (is_book(book) and inside(book, shelf))
            achieve close_char(char, shelf)
            achieve_once visited(book)
        else:
            # If no visited bookshelf has the book, check the ones that havent been visited yet
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    # Either inspect each unvisited bookshelf or directly find the book there
                    observe(shelf, "Check if there is any book on or inside the bookshelf")
                    if exists book: item : (is_book(book) and inside(book, shelf)):
                        achieve close_char(char, book)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        locate_book(book)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'b') at line 5754, column 96.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def has_visited_bookshelf_with_book():
    # Checks if a visited bookshelf contains the targeted book
    symbol found_book= exists shelf: item : (is_bookshelf(shelf) and visited(shelf) and exists book: item : (is_book(book) and inside(book, shelf)))
    return found_book

behavior locate_book(book: item):
    body:
        if has_visited_bookshelf_with_book():
            # If a checked bookshelf has the book, bind it directly without further searching
            bind shelf: item where:
                is_bookshelf(shelf) and visited(shelf) and exists book: item : (is_book(book) and inside(book, shelf))
            achieve close_char(char, shelf)
            achieve_once visited(book)
        else:
            # If no visited bookshelf has the book, check the ones that havent been visited yet
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    # Either inspect each unvisited bookshelf or directly find the book there
                    observe(shelf, "Check if there is any book on or inside the bookshelf")
                    if exists book: item : (is_book(book) and inside(book, shelf)):
                        achieve close_char(char, book)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        locate_book(book)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'book') at line 5754, column 96.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def has_visited_bookshelf_with_book():
    # Checks if a visited bookshelf contains the targeted book
    symbol found_book= exists shelf: item : (is_bookshelf(shelf) and visited(shelf) and exists book_item: item : (is_book(book_item) and inside(book_item, shelf)))
    return found_book

behavior locate_book(book: item):
    body:
        if has_visited_bookshelf_with_book():
            # If a checked bookshelf has the book, bind it directly without further searching
            bind shelf: item where:
                is_bookshelf(shelf) and visited(shelf) and exists book_item: item : (is_book(book_item) and inside(book_item, shelf))
            achieve close_char(char, shelf)
            achieve_once visited(book)
        else:
            # If no visited bookshelf has the book, check the ones that havent been visited yet
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    # Either inspect each unvisited bookshelf or directly find the book there
                    observe(shelf, "Check if there is any book on or inside the bookshelf")
                    if exists book_item: item : (is_book(book_item) and inside(book_item, shelf)):
                        achieve close_char(char, book_item)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        locate_book(book)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_book(book: item):
    return is_book(book) and not visited(book)

behavior find_book(book: item):
    body:
        observe(book, "Check if this is the correct book")
        achieve_once visited(book)

behavior __goal__():
    body:
        foreach book: item:
            if is_target_book(book):
                find_book(book)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_target_book(book: item):
    return is_book(book) and not visited(book)

behavior find_book(book: item):
    body:
        observe(book, "Check if this is the correct book")
        achieve_once visited(book)

behavior __goal__():
    body:
        foreach book: item:
            if is_target_book(book):
                find_book(book)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if this is the correct book)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if this is the correct book)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
open_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. book_2091 is opened. 
##############################
From agent.py
obs(book_2091, Check if this is the correct book)
Get this information:  book_2091 is on bookshelf_136. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is inside dining_room_1. book_2091 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2092, bookshelf_136)
Fail to find book_2092 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2092, bookshelf_372)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_372)
Fail to find book_2092 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2092, bookshelf_188)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_188)
Fail to find book_2092 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_122)exp(book_2092, bench_122)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bench_122)
Robot find: mat_114, Robot is close to the bench_122. 
##############################
From agent.py
exp(book_2092, bench_122)
Fail to find book_2092 around bench_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_125)exp(book_2092, bench_125)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bench_125)
Robot find: mat_115, drawing_118, Robot is close to the bench_125. 
##############################
From agent.py
exp(book_2092, bench_125)
Fail to find book_2092 around bench_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_49)exp(book_2092, light_49)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(light_49)
Robot find: phone_47, Robot is close to the light_49. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2092 ?
Answer: Go to dining_room_1. Inside, locate bookshelf_137. You will find book_2092 on this bookshelf.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Inside, locate bookshelf_137. You will find book_2092 on this bookshelf.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Open book_2091.
Action 5: Observe around book_2091 with the question of Check if this is the correct book.
Action 6: Walk to bookshelf_136.
Action 7: look for book_2092 around bookshelf_136.
Action 8: Walk to bookshelf_372.
Action 9: Open bookshelf_372.
Action 10: look for book_2092 around bookshelf_372.
Action 11: Walk to bookshelf_188.
Action 12: Open bookshelf_188.
Action 13: look for book_2092 around bookshelf_188.
Action 14: Walk to bench_122.
Action 15: look for book_2092 around bench_122.
Action 16: Walk to bench_125.
Action 17: look for book_2092 around bench_125.
Action 18: Walk to light_49.

##############################
From agent.py
exp(book_2092, light_49)
Fail to find book_2092 around light_49. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2092, bookshelf_137)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_137)
Find book_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this is the correct book)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
open_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. book_2092 is opened. 
##############################
From agent.py
obs(book_2092, Check if this is the correct book)
Get this information:  book_2092 is inside dining_room_1. book_2092 is close to bookshelf_137. book_2092 is close to character_219. book_2092 is on bookshelf_137. book_2092 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

def is_home_office_table(table:item):
    symbol is_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2092
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office_table(coffee_table)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

def is_home_office_table(table:item):
    symbol is_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2092
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office_table(coffee_table)
        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
grab_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. Grabbing book_2092 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the book_2092. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2092, table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. table_193 is close book_2092. book_2092 is close table_193. book_2092 is on table_193. book_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place book_2092 on the coffee table in the home office, rather than table_193 which seems not to be located in the home office.
##############################
From agent.py
Human Instruction: You need to place book_2092 on the coffee table in the home office, rather than table_193 which seems not to be located in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Open book_2091.
Action 5: Observe around book_2091 with the question of Check if this is the correct book.
Action 6: Walk to bookshelf_136.
Action 7: look for book_2092 around bookshelf_136.
Action 8: Walk to bookshelf_372.
Action 9: Open bookshelf_372.
Action 10: look for book_2092 around bookshelf_372.
Action 11: Walk to bookshelf_188.
Action 12: Open bookshelf_188.
Action 13: look for book_2092 around bookshelf_188.
Action 14: Walk to bench_122.
Action 15: look for book_2092 around bench_122.
Action 16: Walk to bench_125.
Action 17: look for book_2092 around bench_125.
Action 18: Walk to light_49.
Action 19: look for book_2092 around light_49.
Action 20: Walk to bookshelf_137.
Action 21: Open bookshelf_137.
Action 22: look for book_2092 around bookshelf_137.
Action 23: Walk to book_2092.
Action 24: Open book_2092.
Action 25: Observe around book_2092 with the question of Check if this is the correct book.
Action 26: Grab book_2092.
Action 27: Walk to table_193.
Action 28: Put book_2092 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_box_2023_around_stovefan_139(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(box,stovefan_instance)
        else:
            exp(box,stovefan_instance)
    eff:
        unknown[box]=False
        close[box,stovefan_instance]=True
        close[stovefan_instance,box]=True
    

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office)
        bind located_table: item where:
            is_table(located_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_chair_138_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_having_table(table:item):
    # Function to check if the given table is located inside the home office
    symbol in_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_office

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the specified table

behavior __goal__():
    body:
        bind book: item where:
            id[book] == 2092
        # Select the book with ID 2092
        
        bind table: item where:
            is_table(table) and surfaces(table) and is_home_office_having_table(table)
        # Select a table located inside the home office
        
        place_book_on_coffee_table(book, table)
        # Place the book on the selected table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2092
        # Select book with ID 2092
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2092
        # Select book with ID 2092
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the book on the coffee table in the home office." ?
Answer: Place the book on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_tvstand_186(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

behavior check_and_move_item(book:item, wrong_table:item, correct_table:item):
    body:
        if on(book, wrong_table):
            achieve_once achieve_once on(book, correct_table) # Move book from wrong table to the correct one

behavior __goal__():
    body:
        bind book_2092: item where:
            id[book_2092]==2092

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)

        bind wrong_table: item where:
            id[wrong_table]==193

        check_and_move_item(book_2092, wrong_table, coffee_table)
        place_book_on_table(book_2092, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5813, column 39.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

behavior check_and_move_item(book:item, wrong_table:item, correct_table:item):
    body:
        if on(book, wrong_table):
            achieve_once on(book, correct_table) # Move book from wrong table to the correct one

behavior __goal__():
    body:
        bind book_2092: item where:
            id[book_2092]==2092

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)

        bind wrong_table: item where:
            id[wrong_table]==193

        check_and_move_item(book_2092, wrong_table, coffee_table)
        place_book_on_table(book_2092, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_wallshelf_191(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(box,wallshelf_instance)
        else:
            exp(box,wallshelf_instance)
    eff:
        unknown[box]=False
        close[box,wallshelf_instance]=True
        close[wallshelf_instance,box]=True
    

behavior find_tray_142_around_kitchen_counter_132(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table Make sure the book is on the correct table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092
        # Bind to the correct book with ID 2092
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind to a table within the home office, inferring it as the coffee table
        
        place_book_on_coffee_table(book, coffee_table)
        # Use the behavior to place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table Make sure the book is on the correct table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092
        # Bind to the correct book with ID 2092
        
        bind home_office: item where:
            is_home_office(home_office)
        # Bind to the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind to a table within the home office, inferring it as the coffee table
        
        place_book_on_coffee_table(book, coffee_table)
        # Use the behavior to place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092
        # Bind the book with ID 2092

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind the coffee table located in the home office

        achieve_once on(book, coffee_table)
        # Place book_2092 on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_cup_2089_around_cup_2089(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2089
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table)

        achieve_once on(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2092

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table)
        
        bind home_office: item where:
            is_home_office(home_office)
        
        achieve_once on(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'open_executor(book_2091)', 'walk_executor(bookshelf_136)', 'walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bench_122)', 'walk_executor(bench_125)', 'walk_executor(light_49)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'open_executor(book_2092)', 'grab_executor(book_2092)', 'walk_executor(table_193)', 'put_executor(book_2092, table_193)']
Time info:
Time consume: 363 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 27
goal generate times: 9
goal correct times: 3
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
