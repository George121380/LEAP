From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot:item):
    body:
        achieve_once is_on(pot)
        # Turn on the pot to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for the water source

        fill_pot_with_water(pot, faucet)
        boil_rice(pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_boil(pot:item, rice:item):
    # Function to check if the pot and rice are ready for boiling
    symbol ready= has_water(pot) and inside(rice, pot)
    return ready

behavior prepare_rice_for_boiling(pot:item, rice:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(rice, pot)
        # Place the rice inside the pot

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in (if it has a plug)
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind a suitable item as a pot
        
        bind rice: item where:
            is_food_rice(rice)
        # Bind the rice item

        bind stove: item where:
            is_stove(stove)
        # Bind a suitable item as a stove

        if is_ready_to_boil(pot, rice):
            # If the pot with rice is ready to boil, proceed to boiling
            start_boiling(pot, stove)
        else:
            # If the pot with rice is not ready to boil, prepare it
            prepare_rice_for_boiling(pot, rice)
            start_boiling(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
plain
behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)

behavior put_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        put_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'plain') at line 5703, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)

behavior put_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        put_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)

behavior put_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        put_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add rice to the pot before boiling it, as the goal is to boil rice by pot.
##############################
From agent.py
Human Instruction: You need to add rice to the pot before boiling it, as the goal is to boil rice by pot.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stove_2065.
Action 13: Put pot_2069 on stove_2065.
Action 14: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_closetdrawer_154(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_rice,closetdrawer_instance)
        else:
            exp(food_rice,closetdrawer_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,closetdrawer_instance]=True
        close[closetdrawer_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        achieve inside(rice, pot)
        # Place the rice into the pot
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve is_on(stove_2065)
        # Turn on the stove to boil the rice

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve inside(rice, pot)
        # Place the rice into the pot
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve is_on(stove)
        # Turn on the stove to boil the rice

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve inside(rice, pot)
        # Place the rice into the pot
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve is_on(stove)
        # Turn on the stove to boil the rice

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have put rice into the pot and turned on the stove, but you need to ensure the pot has been filled with water. Repeat the step of turning on the faucet to fill the pot with water.
##############################
From agent.py
Human Instruction: You have put rice into the pot and turned on the stove, but you need to ensure the pot has been filled with water. Repeat the step of turning on the faucet to fill the pot with water.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stove_2065.
Action 13: Put pot_2069 on stove_2065.
Action 14: Switch on stove_2065.
Action 15: Walk to fridge_289.
Action 16: Switch off fridge_289.
Action 17: Open fridge_289.
Action 18: look for food_rice_2036 around fridge_289.
Action 19: Grab food_rice_2036.
Action 20: Walk to pot_2069.
Action 21: Put food_rice_2036 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot: item):
    # Function to check if the pot has water
    symbol water_in_pot = exists o: item : (has_water(pot))
    return water_in_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Selected pot is pot_2069 based on provided actions and context
        if not pot_has_water(pot):
            # If the pot doesnt have water, fill it with water
            bind faucet: item where:
                is_faucet(faucet)
            achieve has_water(pot) # Fill the pot with water
        # The goal is to have the rice in a pot with water on the stove for boiling
        achieve on(pot, stove_2065)
        # Ensure the stove is on
        bind stove: item where:
            is_stove(stove)
        achieve is_on(stove)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_drawing_242(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(pencil,drawing_instance)
        else:
            exp(pencil,drawing_instance)
    eff:
        unknown[pencil]=False
        close[pencil,drawing_instance]=True
        close[drawing_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
def is_water_in_pot(pot:item):
    # Check if the pot contains water
    symbol contains_water = has_water(pot)
    return contains_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        if not is_water_in_pot(pot):
            # If the pot is not already filled with water
            fill_pot_with_water(pot, faucet)
            # Fill the pot with water using the faucet

        achieve is_on(stove_2065)
        # Ensure the stove is turned on for boiling

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def is_water_in_pot(pot:item):
    # Check if the pot contains water
    symbol contains_water = has_water(pot)
    return contains_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        if not is_water_in_pot(pot):
            # If the pot is not already filled with water
            fill_pot_with_water(pot, faucet)
            # Fill the pot with water using the faucet

        achieve is_on(stove)
        # Ensure the stove is turned on for boiling

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

def turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_a_free_hand(char)
        # Select a pot that is a pot and can be handled by the character
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove in the scene

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet in the scene

        ensure_pot_has_water(pot, faucet)
        # Ensure the pot is filled with water

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5820, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* COMMA
	* __ANON_8
	* _NEWLINE
	* LESS_EQ
	* SLASH
	* PERCENT
	* AND
	* __ANON_4
	* IF
	* SEMICOLON
	* __ANON_1
	* __ANON_2
	* MINUS
	* GREATER_EQ
	* AT
	* __ANON_5
	* STAR
	* VBAR
	* DOUBLE_EQUAL
	* LESSTHAN
	* CIRCUMFLEX
	* AMPERSAND
	* FLOORDIV
	* MORETHAN
	* EQUAL
	* __ANON_7
	* __ANON_6
	* NOT_EQ
	* __ANON_0
	* RSHIFT
	* PLUS
	* LSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2001_around_drawing_242(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(pencil,drawing_instance)
        else:
            exp(pencil,drawing_instance)
    eff:
        unknown[pencil]=False
        close[pencil,drawing_instance]=True
        close[drawing_instance,pencil]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_headset_2062_around_computer_417(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#goal_representation
 
behavior ensure_pot_has_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_a_free_hand(char)
        # Select a pot that is a pot and can be handled by the character
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove in the scene

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet in the scene

        ensure_pot_has_water(pot, faucet)
        # Ensure the pot is filled with water

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some rice in a pot." ?
Answer: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensures the pot is filled with water

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Places the rice inside the pot temporarily

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Places the pot on the stove temporarily

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Ensures the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is already filled with water
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice to be placed in the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        fill_pot_with_water(pot, faucet_43) # Ensure pot is filled with water
        put_rice_in_pot(rice, pot) # Put rice in the pot
        place_pot_on_stove(pot, stove) # Place pot on the stove
        turn_on_stove(stove) # Turn the stove on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet_43; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensures the pot is filled with water

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Places the rice inside the pot temporarily

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Places the pot on the stove temporarily

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Ensures the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice to be placed in the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Use the identified faucet with id 43

        fill_pot_with_water(pot, faucet) # Ensure pot is filled with water
        put_rice_in_pot(rice, pot) # Put rice in the pot
        place_pot_on_stove(pot, stove) # Place pot on the stove
        turn_on_stove(stove) # Turn the stove on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_bookshelf_354(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior ensure_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior heat_pot_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind rice: item where:
            is_food_rice(rice)
        
        fill_with_water(pot, faucet)
        ensure_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        heat_pot_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_drawing_242(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(pencil,drawing_instance)
        else:
            exp(pencil,drawing_instance)
    eff:
        unknown[pencil]=False
        close[pencil,drawing_instance]=True
        close[drawing_instance,pencil]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve has_water(pot)
        # Ensure the pot has water in it

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Ensure the pot has been identified and visited

        bind faucet: item where:
            is_faucet(faucet)
        # Use the faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        put_pot_on_stove(pot, stove)
        # Place the pot on the stove

        start_boiling(pot, stove)
        # Turn on the stove to boil the rice

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the rice into the pot.', '3. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once inhand(pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069
        achieve has_water(pot)
        # Ensure the pot is filled with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        achieve_once close_char(char, faucet)  # Move close to the faucet first
        achieve has_water(pot)  # Fill the pot with water

def is_pot_with_rice_on_stove(pot: item, stove: item):
    symbol pot_with_rice = exists rice: item : (is_food_rice(rice) and inside(rice, pot))
    return pot_with_rice and on(pot, stove)
    
behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)  # Identify the faucet to use for filling the pot
        
        bind pot: item where:
            is_pot_with_rice_on_stove(pot, stove_2065)  # Ensure the pot with rice is on the stove

        fill_pot_with_water(faucet, pot)  # Execute the action to fill the pot with water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def is_pot_with_rice_on_stove(pot: item, stove: item):
    symbol pot_with_rice = exists rice: item : (is_food_rice(rice) and inside(rice, pot))
    return pot_with_rice and on(pot, stove)

behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        achieve_once close_char(char, faucet)  # Move close to the faucet first
        achieve has_water(pot)  # Fill the pot with water

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065  # Select the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet)  # Identify the faucet to use for filling the pot
        
        bind pot: item where:
            is_pot_with_rice_on_stove(pot, stove)  # Ensure the pot with rice is on the stove

        fill_pot_with_water(faucet, pot)  # Execute the action to fill the pot with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pot_with_rice_on_stove(pot: item, stove: item):
    symbol pot_with_rice = exists rice: item : (is_food_rice(rice) and inside(rice, pot))
    return pot_with_rice and on(pot, stove)

behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        achieve_once close_char(char, faucet)  # Move close to the faucet first
        achieve has_water(pot)  # Fill the pot with water

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065  # Select the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet)  # Identify the faucet to use for filling the pot
        
        bind pot: item where:
            is_pot_with_rice_on_stove(pot, stove)  # Ensure the pot with rice is on the stove

        fill_pot_with_water(faucet, pot)  # Execute the action to fill the pot with water

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Please walk to the faucet, turn it on again while holding the pot under it, and then turn it off to complete filling the pot with water.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. Please walk to the faucet, turn it on again while holding the pot under it, and then turn it off to complete filling the pot with water.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stove_2065.
Action 13: Put pot_2069 on stove_2065.
Action 14: Switch on stove_2065.
Action 15: Walk to fridge_289.
Action 16: Switch off fridge_289.
Action 17: Open fridge_289.
Action 18: look for food_rice_2036 around fridge_289.
Action 19: Grab food_rice_2036.
Action 20: Walk to pot_2069.
Action 21: Put food_rice_2036 into pot_2069.
Action 22: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        # Move the character close to the faucet
        achieve_once inhand(pot)
        # Hold the pot in hand before filling it with water
        achieve_once has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        # Move the character close to the faucet
        achieve_once inhand(pot)
        # Hold the pot in hand before filling it with water
        achieve_once has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Please walk to the faucet, turn it on again while holding the pot under it, and then turn it off to complete filling the pot with water.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. Please walk to the faucet, turn it on again while holding the pot under it, and then turn it off to complete filling the pot with water.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stove_2065.
Action 13: Put pot_2069 on stove_2065.
Action 14: Switch on stove_2065.
Action 15: Walk to fridge_289.
Action 16: Switch off fridge_289.
Action 17: Open fridge_289.
Action 18: look for food_rice_2036 around fridge_289.
Action 19: Grab food_rice_2036.
Action 20: Walk to pot_2069.
Action 21: Put food_rice_2036 into pot_2069.
Action 22: Walk to faucet_43.
Action 23: Walk to pot_2069.
Action 24: Grab pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Ensure the pot has water
        fill_with_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once inhand(pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        # Hold the pot in hand
        achieve close_char(char, faucet)
        # Approach the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        # Hold the pot in hand
        achieve close_char(char, faucet)
        # Approach the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on the faucet while holding the pot under it and then switch it off to ensure the pot is filled with water.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and close_char(char, pot)
        # Select the pot that has water and is close to the character
        
        bind rice: item where:
            is_food_rice(rice) and close_char(char, rice)
        # Select the rice that is close to the character

        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior put_rice_into_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot

behavior ensure_pot_has_water(pot: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind rice: item where:
            is_food_rice(rice)
        
        ensure_pot_has_water(pot)
        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        
        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice]==2036
        # Select the rice with ID 2036

        achieve_once inside(food_rice, pot)
        # Put the rice into the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the rice into the pot." ?
Answer: Take the rice and carefully pour it into the pot that has already been filled with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that is already filled with water

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be placed into the pot

        place_rice_in_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_computer_170(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Put the rice into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot filled with water
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        add_rice_to_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_bookshelf_354(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_mouse_413_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_pillow_182_around_couch_352(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(pillow,couch_instance)
        else:
            exp(pillow,couch_instance)
    eff:
        unknown[pillow]=False
        close[pillow,couch_instance]=True
        close[couch_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water in it

        pour_rice_into_pot(rice, pot)
        # Pour the rice into the pot with water

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_clothes_socks_2087_around_washing_machine_2007(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_socks,washing_machine_instance)
        else:
            exp(clothes_socks,washing_machine_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,washing_machine_instance]=True
        close[washing_machine_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that already has water
        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Add the rice into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water in it

        bind rice: item where:
            is_food_rice(rice)
        # Select rice to add to the pot

        add_rice_to_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_154(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Choose a pot that has water in it

        bind rice: item where:
            is_food_rice(rice)
        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the rice into the pot." ?
Answer: Put the rice into the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # The goal is to ensure that the rice is put into the pot
        achieve_once inside(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_bench_228(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that contains water
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be added into the pot
        
        add_rice_to_pot(rice, pot)
        # Add the rice into the pot filled with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        put_rice_in_pot(rice, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_154(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has been filled with water

        bind rice: item where:
            is_food_rice(rice)
        # Select rice to add to the pot

        put_rice_in_pot(rice, pot)
        # Add rice to the pot which contains water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that contains water
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior insert_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) # Ensure that the pot is filled with water before continuing
        bind rice: item where:
            is_food_rice(rice)
        insert_rice_to_pot(rice, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
            # Select the pot with water

        bind rice: item where:
            is_food_rice(rice)
            # Select the rice item

        achieve_once inside(rice, pot)
        # Put the rice into the pot with water
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_computer_417(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        put_rice_into_pot(rice, pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation

behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        put_rice_into_pot(rice, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'putin_executor(food_rice_2036, pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)']
Time info:
Time consume: 585 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 24
goal generate times: 35
goal correct times: 4
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
