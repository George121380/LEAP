From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_275(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
def has_book(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book = exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_book(bookshelf)):
            # If we have already found a bookshelf with a book on it, we can directly approach it
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book(bookshelf)
            achieve close_char(char, bookshelf)

        else:
            # Check all bookshelves in the scene that have not been visited
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check if there is a book on the bookshelf")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book = exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_book(bookshelf)):
            # If we have already found a bookshelf with a book on it, we can directly approach it
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book(bookshelf)
            achieve close_char(char, bookshelf)

        else:
            # Check all bookshelves in the scene that have not been visited
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check if there is a book on the bookshelf")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)obs(bookshelf_124, Check if there is a book on the bookshelf)walk_executor(bookshelf_196)open_executor(bookshelf_196)obs(bookshelf_196, Check if there is a book on the bookshelf)walk_executor(bookshelf_275)obs(bookshelf_275, Check if there is a book on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
obs(bookshelf_124, Check if there is a book on the bookshelf)
Get this information:  book_2136 is on bookshelf_124. bookshelf_124 is close to envelope_2055. bookshelf_124 is close to doorjamb_37. bookshelf_124 is close to door_38. bookshelf_124 is close to floor_169. bookshelf_124 is close to floor_42. bookshelf_124 is close to floor_43. bookshelf_124 is close to floor_170. bookshelf_124 is close to floor_44. bookshelf_124 is close to wall_176. bookshelf_124 is close to wall_179. bookshelf_124 is close to wall_66. bookshelf_124 is close to bookshelf_196. bookshelf_124 is close to wall_70. bookshelf_124 is close to powersocket_72. bookshelf_124 is close to light_212. bookshelf_124 is close to book_2136. bookshelf_124 is close to book_2137. bookshelf_124 is close to photoframe_219. bookshelf_124 is close to drawing_110. bookshelf_124 is close to character_240. drawing_110 is on bookshelf_124. envelope_2055 is on bookshelf_124. bookshelf_124 is facing drawing_110. bookshelf_124 is facing drawing_111. bookshelf_124 is on floor_42. bookshelf_124 is on floor_43. book_2137 is on bookshelf_124. bookshelf_124 is inside dining_room_41. bookshelf_124 is CLEAN. bookshelf_124 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_196)
Robot find: novel_2060, drawing_202, Robot is close to the bookshelf_196. 
##############################
From agent.py
open_executor(bookshelf_196)
Robot find: Robot is close to the photoframe_219. Robot is close to the bookshelf_196. bookshelf_196 is opened. 
##############################
From agent.py
obs(bookshelf_196, Check if there is a book on the bookshelf)
Get this information:  novel_2060 is on bookshelf_196. bookshelf_196 is inside bedroom_162. photoframe_219 is inside bookshelf_196. bookshelf_196 is close to novel_2060. bookshelf_196 is close to toilet_15. bookshelf_196 is close to shower_16. bookshelf_196 is close to doorjamb_37. bookshelf_196 is close to door_38. bookshelf_196 is close to floor_169. bookshelf_196 is close to floor_170. bookshelf_196 is close to floor_43. bookshelf_196 is close to floor_42. bookshelf_196 is close to floor_44. bookshelf_196 is close to wall_176. bookshelf_196 is close to wall_179. bookshelf_196 is close to ceiling_52. bookshelf_196 is close to ceiling_182. bookshelf_196 is close to ceiling_183. bookshelf_196 is close to door_61. bookshelf_196 is close to doorjamb_190. bookshelf_196 is close to wall_66. bookshelf_196 is close to wall_70. bookshelf_196 is close to filing_cabinet_200. bookshelf_196 is close to powersocket_72. bookshelf_196 is close to light_212. bookshelf_196 is close to photoframe_219. bookshelf_196 is close to drawing_110. bookshelf_196 is close to bookshelf_124. bookshelf_196 is close to character_240. bookshelf_196 is facing drawing_202. bookshelf_196 is on floor_170. bookshelf_196 is OPEN. bookshelf_196 is DIRTY.
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
obs(bookshelf_275, Check if there is a book on the bookshelf)
Get this information:  bookshelf_275 is inside home_office_241. pencil_2020 is on bookshelf_275. bookshelf_275 is on floor_262. bookshelf_275 is close to wall_65. bookshelf_275 is close to trashcan_99. bookshelf_275 is close to wall_68. bookshelf_275 is close to pencil_2020. bookshelf_275 is close to floor_262. bookshelf_275 is close to floor_50. bookshelf_275 is close to floor_51. bookshelf_275 is close to wall_246. bookshelf_275 is close to ceiling_59. bookshelf_275 is close to ceiling_252. bookshelf_275 is close to character_240. bookshelf_275 is CLEAN. bookshelf_275 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2131_around_computer_276(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        put_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2131_around_computer_276(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#goal_representation
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        put_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to identify the correct coffee table in the home office and place the book on it. The current actions show the book was placed on table_270, but it's not confirmed that table_270 is specifically the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to identify the correct coffee table in the home office and place the book on it. The current actions show the book was placed on table_270, but it's not confirmed that table_270 is specifically the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_124.
Action 2: Open bookshelf_124.
Action 3: Observe around bookshelf_124 with the question of Check if there is a book on the bookshelf.
Action 4: Walk to bookshelf_196.
Action 5: Open bookshelf_196.
Action 6: Observe around bookshelf_196 with the question of Check if there is a book on the bookshelf.
Action 7: Walk to bookshelf_275.
Action 8: Observe around bookshelf_275 with the question of Check if there is a book on the bookshelf.
Action 9: Walk to book_2136.
Action 10: Grab book_2136.
Action 11: Walk to table_270.
Action 12: Put book_2136 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_shoe_rack_2044_around_dresser_274(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoe_rack,dresser_instance)
        else:
            exp(shoe_rack,dresser_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,dresser_instance]=True
        close[dresser_instance,shoe_rack]=True
    

behavior find_piano_bench_2062_around_bench_115(piano_bench:item):
    goal: not unknown(piano_bench)
    body:
        assert is_piano_bench(piano_bench)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(piano_bench,bench_instance)
        else:
            exp(piano_bench,bench_instance)
    eff:
        unknown[piano_bench]=False
        close[piano_bench,bench_instance]=True
        close[bench_instance,piano_bench]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_table_is_coffee_table(table: item):
    body:
        observe(table, "Check if this table is the coffee table in the home office")

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)

        ensure_table_is_coffee_table(table)

        if on(book, table):
            place_book_on_table(book, table)
        else:
            place_book_on_table(book, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior ensure_table_is_coffee_table(table: item):
    body:
        observe(table, "Check if this table is the coffee table in the home office")

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)

        ensure_table_is_coffee_table(table)

        if on(book, table):
            place_book_on_table(book, table)
        else:
            place_book_on_table(book, table)
##############################
From agent.py-> find a plan in act()
obs(table_270, Check if this table is the coffee table in the home office)
##############################
From agent.py
obs(table_270, Check if this table is the coffee table in the home office)
Get this information:  book_2136 is on table_270. shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is inside home_office_241. table_270 is inside couch_269. table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to character_240. table_270 is close to book_2136. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. table_270 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(bookshelf_196)', 'open_executor(bookshelf_196)', 'walk_executor(bookshelf_275)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)']
Time info:
Time consume: 72 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 156
goal generate times: 3
goal correct times: 1
action_num: 9

Task complete rate:
1
Scene_id: 1
##############################
