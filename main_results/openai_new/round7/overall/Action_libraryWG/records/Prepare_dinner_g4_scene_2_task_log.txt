From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs needed for the dish.', '2. Cook the rice.', '3. Scramble the eggs.', '4. Mix the cooked rice and scrambled eggs in a pan and fry together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def food_is_clean(food:item):
    symbol clean=exists o: item : (o == food and clean(o))
    return clean

behavior check_and_wash(food:item, faucet:item):
    body:
        if not food_is_clean(food):
            # Check if food is not clean
            achieve close_char(char, faucet)
            # Move close to the faucet
            achieve_once is_on(faucet) 
            # Turn on the faucet
            achieve_once has_water(food) 
            # Wash the food
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        foreach food: item:
            if food == egg or food == rice:
                if not visited(food):
                    observe(food, "Check if the item is clean or dirty")
                    # Observe to get the state info of the item
                
                check_and_wash(food, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def check_is_dirty(item: item):
    # Function to check if an item is dirty
    symbol dirty_status = dirty(item)
    return dirty_status

behavior wash_item(item: item):
    body:
        wash(item)
        # Wash the specified item

behavior __goal__():
    body:
        # First, find the rice and eggs
        bind item_rice: item where:
            is_food_rice(item_rice)

        bind item_egg: item where:
            is_food_egg(item_egg)

        # Check if the rice is dirty and wash if needed
        if check_is_dirty(item_rice):
            wash_item(item_rice)

        # Check if the egg is dirty and wash if needed
        if check_is_dirty(item_egg):
            wash_item(item_egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_clean(rice: item, egg: item):
    body:
        achieve clean(rice)
        achieve clean(egg)   

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        find_and_clean(rice, egg)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_clean(rice: item, egg: item):
    body:
        achieve clean(rice)
        achieve clean(egg)   

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        find_and_clean(rice, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)wash_executor(food_egg_2053)walk_executor(kitchen_counter_132)put_executor(food_rice_2067, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_rice_2067, cupboard_131)
Fail to find food_rice_2067 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)wash_executor(food_egg_2053)walk_executor(kitchen_counter_132)put_executor(food_rice_2067, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_rice_2067, cupboard_130)
Fail to find food_rice_2067 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_rice_2067, kitchen_counter_128)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)wash_executor(food_egg_2053)walk_executor(kitchen_counter_132)put_executor(food_rice_2067, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_128)
Fail to find food_rice_2067 around kitchen_counter_128. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Crack and beat the eggs.', '2. Fry the eggs.', '3. Add rice to the pan and fry with the eggs.', '4. Mix thoroughly until done.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_beat_eggs(eggs:item):
    body:
        achieve_once inhand(eggs)
        # Temporarily hold the eggs to ensure they are under control for cracking
        achieve cut(eggs)
        # Cracking the eggs implies achieving their cut state (breaking them open)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select one of the available eggs
        crack_and_beat_eggs(eggs)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_beat_eggs(egg: item, bowl: item):
    body:
        achieve_once on(egg, bowl) 
        # Placing the egg on the bowl as a preparation step
        achieve cut(egg) 
        # Crack the egg
        achieve_once inside(egg, bowl) 
        # Ensure the cracked egg is inside the bowl
        achieve clean(bowl) 
        # Beat the egg inside the bowl to mix contents

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind bowl: item where:
            is_bowl(bowl)
        crack_and_beat_eggs(egg, bowl)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior crack_and_beat_eggs(egg: item, bowl: item):
    body:
        achieve_once on(egg, bowl) 
        # Placing the egg on the bowl as a preparation step
        achieve cut(egg) 
        # Crack the egg
        achieve_once inside(egg, bowl) 
        # Ensure the cracked egg is inside the bowl
        achieve clean(bowl) 
        # Beat the egg inside the bowl to mix contents

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind bowl: item where:
            is_bowl(bowl)
        crack_and_beat_eggs(egg, bowl)


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2095, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2095)put_executor(food_egg_2053, bowl_2095)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2095)putin_executor(food_egg_2053, bowl_2095)grab_executor(bowl_2095)wash_executor(bowl_2095)walk_executor(kitchen_counter_132)put_executor(knife_2036, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_129)
Fail to find bowl_2095 around kitchen_counter_129. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs.', '2. Cook the rice and fry the eggs together.', '3. Combine the cooked rice with the fried eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_eggs(source: item):
    # Function to check if there is both rice and eggs in a specified area
    symbol has_rice=exists o: item : (is_food_rice(o) and close(o, source))
    symbol has_eggs=exists p: item : (is_food_egg(p) and close(p, source))
    return has_rice and has_eggs

behavior __goal__():
    body:
        if exists location: item : ((is_kitchen_counter(location) or is_cupboard(location)) and has_rice_and_eggs(location)):
            # Check if there is a cupboard or kitchen counter with both rice and eggs based on the available information
            bind source: item where:
                (is_kitchen_counter(source) or is_cupboard(source)) and has_rice_and_eggs(source)
            # Select a source that stores both rice and eggs close by
            achieve close_char(char, source)
            # Move the character closer to the source with rice and eggs
        else:
            # If no location with both rice and eggs is found, initiate exploration to locate them
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location)) and not visited(location):
                    # Check all unvisited cupboards and kitchen counters
                    observe(location, "Check if there are rice and eggs nearby")
                    # Observe whether each location has both rice and eggs

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_rice_and_eggs(source: item):
    # Function to check if there is both rice and eggs in a specified area
    symbol has_rice=exists o: item : (is_food_rice(o) and close(o, source))
    symbol has_eggs=exists p: item : (is_food_egg(p) and close(p, source))
    return has_rice and has_eggs

behavior __goal__():
    body:
        if exists location: item : ((is_kitchen_counter(location) or is_cupboard(location)) and has_rice_and_eggs(location)):
            # Check if there is a cupboard or kitchen counter with both rice and eggs based on the available information
            bind source: item where:
                (is_kitchen_counter(source) or is_cupboard(source)) and has_rice_and_eggs(source)
            # Select a source that stores both rice and eggs close by
            achieve close_char(char, source)
            # Move the character closer to the source with rice and eggs
        else:
            # If no location with both rice and eggs is found, initiate exploration to locate them
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location)) and not visited(location):
                    # Check all unvisited cupboards and kitchen counters
                    observe(location, "Check if there are rice and eggs nearby")
                    # Observe whether each location has both rice and eggs

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)obs(kitchen_counter_128, Check if there are rice and eggs nearby)walk_executor(kitchen_counter_129)obs(kitchen_counter_129, Check if there are rice and eggs nearby)walk_executor(cupboard_130)obs(cupboard_130, Check if there are rice and eggs nearby)walk_executor(cupboard_131)obs(cupboard_131, Check if there are rice and eggs nearby)walk_executor(kitchen_counter_132)obs(kitchen_counter_132, Check if there are rice and eggs nearby)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
obs(kitchen_counter_128, Check if there are rice and eggs nearby)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLOSED. kitchen_counter_128 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. 
##############################
From agent.py
obs(kitchen_counter_129, Check if there are rice and eggs nearby)
Get this information:  fryingpan_2107 is on kitchen_counter_129. coffe_maker_147 is on kitchen_counter_129. toaster_144 is on kitchen_counter_129. kitchen_counter_129 is inside dining_room_1. stove_2090 is on kitchen_counter_129. kitchen_counter_129 is close to wall_2. kitchen_counter_129 is close to cupboard_131. kitchen_counter_129 is close to wall_7. kitchen_counter_129 is close to wall_8. kitchen_counter_129 is close to stovefan_139. kitchen_counter_129 is close to fridge_140. kitchen_counter_129 is close to oven_141. kitchen_counter_129 is close to tray_142. kitchen_counter_129 is close to dishwasher_143. kitchen_counter_129 is close to toaster_144. kitchen_counter_129 is close to floor_16. kitchen_counter_129 is close to coffe_maker_147. kitchen_counter_129 is close to floor_21. kitchen_counter_129 is close to floor_22. kitchen_counter_129 is close to stove_2090. kitchen_counter_129 is close to walllamp_44. kitchen_counter_129 is close to pot_2093. kitchen_counter_129 is close to walllamp_46. kitchen_counter_129 is close to oil_2102. kitchen_counter_129 is close to pot_54. kitchen_counter_129 is close to fryingpan_2107. kitchen_counter_129 is close to character_219. pot_2093 is on kitchen_counter_129. oil_2102 is on kitchen_counter_129. kitchen_counter_129 is CLOSED. kitchen_counter_129 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check if there are rice and eggs nearby)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check if there are rice and eggs nearby)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, Check if there are rice and eggs nearby)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is OPEN. kitchen_counter_132 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find the rice and eggs. Continue exploring locations to locate both items, as they have not been found yet in the areas you have searched.
##############################
From agent.py
Human Instruction: You need to find the rice and eggs. Continue exploring locations to locate both items, as they have not been found yet in the areas you have searched.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 12: Walk to kitchen_counter_129.
Action 13: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 16: Walk to cupboard_131.
Action 17: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 18: Walk to kitchen_counter_132.
Action 19: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        if exists rice: item : (is_food_rice(rice) and visited(rice)):
            # If rice is found, determine where it is located
            bind rice: item where:
                is_food_rice(rice) and visited(rice)
            achieve close_char(char, rice)

        if exists egg: item : (is_food_egg(egg) and visited(egg)):
            # If egg is found, determine where it is located
            bind egg: item where:
                is_food_egg(egg) and visited(egg)
            achieve close_char(char, egg)

        else:
            # If neither rice nor egg is found, continue to search in unvisited areas
            foreach storage_location: item:
                if is_cupboard(storage_location) or is_kitchen_counter(storage_location) and not visited(storage_location):
                    observe(storage_location,"Check if there are rice and eggs nearby")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        if exists rice: item : (is_food_rice(rice) and visited(rice)):
            # If rice is found, determine where it is located
            bind rice: item where:
                is_food_rice(rice) and visited(rice)
            achieve close_char(char, rice)

        if exists egg: item : (is_food_egg(egg) and visited(egg)):
            # If egg is found, determine where it is located
            bind egg: item where:
                is_food_egg(egg) and visited(egg)
            achieve close_char(char, egg)

        else:
            # If neither rice nor egg is found, continue to search in unvisited areas
            foreach storage_location: item:
                if is_cupboard(storage_location) or is_kitchen_counter(storage_location) and not visited(storage_location):
                    observe(storage_location,"Check if there are rice and eggs nearby")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)obs(kitchen_counter_128, Check if there are rice and eggs nearby)walk_executor(kitchen_counter_129)obs(kitchen_counter_129, Check if there are rice and eggs nearby)walk_executor(cupboard_130)obs(cupboard_130, Check if there are rice and eggs nearby)walk_executor(cupboard_131)obs(cupboard_131, Check if there are rice and eggs nearby)walk_executor(kitchen_counter_132)obs(kitchen_counter_132, Check if there are rice and eggs nearby)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
obs(kitchen_counter_128, Check if there are rice and eggs nearby)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLOSED. kitchen_counter_128 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. 
##############################
From agent.py
obs(kitchen_counter_129, Check if there are rice and eggs nearby)
Get this information:  fryingpan_2107 is on kitchen_counter_129. coffe_maker_147 is on kitchen_counter_129. toaster_144 is on kitchen_counter_129. kitchen_counter_129 is inside dining_room_1. stove_2090 is on kitchen_counter_129. kitchen_counter_129 is close to wall_2. kitchen_counter_129 is close to cupboard_131. kitchen_counter_129 is close to wall_7. kitchen_counter_129 is close to wall_8. kitchen_counter_129 is close to stovefan_139. kitchen_counter_129 is close to fridge_140. kitchen_counter_129 is close to oven_141. kitchen_counter_129 is close to tray_142. kitchen_counter_129 is close to dishwasher_143. kitchen_counter_129 is close to toaster_144. kitchen_counter_129 is close to floor_16. kitchen_counter_129 is close to coffe_maker_147. kitchen_counter_129 is close to floor_21. kitchen_counter_129 is close to floor_22. kitchen_counter_129 is close to stove_2090. kitchen_counter_129 is close to walllamp_44. kitchen_counter_129 is close to pot_2093. kitchen_counter_129 is close to walllamp_46. kitchen_counter_129 is close to oil_2102. kitchen_counter_129 is close to pot_54. kitchen_counter_129 is close to fryingpan_2107. kitchen_counter_129 is close to character_219. pot_2093 is on kitchen_counter_129. oil_2102 is on kitchen_counter_129. kitchen_counter_129 is CLOSED. kitchen_counter_129 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check if there are rice and eggs nearby)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check if there are rice and eggs nearby)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, Check if there are rice and eggs nearby)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is OPEN. kitchen_counter_132 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue exploring other locations to locate both rice and eggs, as they have not been found yet in the areas you have searched.
##############################
From agent.py
Human Instruction: You need to continue exploring other locations to locate both rice and eggs, as they have not been found yet in the areas you have searched.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 12: Walk to kitchen_counter_129.
Action 13: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 16: Walk to cupboard_131.
Action 17: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 18: Walk to kitchen_counter_132.
Action 19: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.
Action 20: Walk to kitchen_counter_128.
Action 21: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 22: Walk to kitchen_counter_129.
Action 23: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 24: Walk to cupboard_130.
Action 25: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 26: Walk to cupboard_131.
Action 27: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 28: Walk to kitchen_counter_132.
Action 29: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_eggs_nearby(location: item):
    # Function to check if there are both rice and eggs near a specified location
    symbol has_rice_and_eggs = exists rice: item : (is_food_rice(rice) and close(rice, location)) and exists egg: item : (is_food_egg(egg) and close(egg, location))
    return has_rice_and_eggs

behavior __goal__():
    body:
        foreach location: item:
            if (is_cupboard(location) or is_kitchen_counter(location)) and not visited(location):
                observe(location, "Check if there are rice and eggs nearby")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5789, column 110.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
def has_rice_and_eggs_nearby(location: item):
    # Function to check if there are both rice and eggs near a specified location
    symbol has_rice_and_eggs = exists rice: item : (is_food_rice(rice) and close(rice, location)) and exists e: item : (is_food_egg(e) and close(e, location))
    return has_rice_and_eggs

behavior __goal__():
    body:
        foreach location: item:
            if (is_cupboard(location) or is_kitchen_counter(location)) and not visited(location):
                observe(location, "Check if there are rice and eggs nearby")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'e') at line 5789, column 110.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
def has_rice_and_eggs_nearby(location: item):
    # Function to check if there are both rice and eggs near a specified location
    symbol has_rice_and_eggs = exists rice: item : (is_food_rice(rice) and close(rice, location)) and exists egg: item : (is_food_egg(egg) and close(egg, location))
    return has_rice_and_eggs

behavior __goal__():
    body:
        foreach location: item:
            if (is_cupboard(location) or is_kitchen_counter(location)) and not visited(location):
                observe(location, "Check if there are rice and eggs nearby")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_ceilinglamp_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==235
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(bowl,ceilinglamp_instance)
        else:
            exp(bowl,ceilinglamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ceilinglamp_instance]=True
        close[ceilinglamp_instance,bowl]=True
    

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_rice_and_eggs():
    body:
        foreach location: item:
        # Iterating over potential locations to find rice and eggs
            if is_cupboard(location) or is_kitchen_counter(location):
                if not visited(location):
                    # Observe each unvisited storage location for rice and eggs
                    observe(location, "Check if there are rice and eggs nearby")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Binds an item known as rice
        bind eggs: item where:
            is_food_egg(eggs)
        # Binds an item known as eggs
        if exists rice: item : (is_food_rice(rice)):
            # If rice has been found, move closer to it
            achieve close_char(char, rice)

        if exists eggs: item : (is_food_egg(eggs)):
            # If eggs have been found, move closer to them
            achieve close_char(char, eggs)

        else:
            find_rice_and_eggs()
            # If either rice or eggs are not found, invoke the behavior to search for them

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
def has_rice_or_eggs_in_location(location:item):
    # Function to check if there are rice or eggs in the specified location
    symbol has_rice_or_eggs= exists o: item : ((is_food_rice(o) or is_food_egg(o)) and close(o, location))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists location: item : (visited(location) and has_rice_or_eggs_in_location(location)):
            # If there is a location with rice or eggs, based on the information already known
            bind location: item where:
                visited(location) and has_rice_or_eggs_in_location(location)
            achieve close_char(char, location)
            # Move to the location that has rice or eggs
        else:
            # Explore new locations to find rice and eggs
            foreach location: item:
                if not visited(location):
                    observe(location,"Check if there are rice or eggs nearby")
                    # Observe each unvisited location to find rice or eggs
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find rice and eggs." ?
Answer: Your first subgoal to "find rice and eggs" deviates from my thoughts. Since the main guidance provided starts with cooking rice, you should focus on this step instead of "finding" the ingredients. Once the rice and eggs are acquired, boil some rice by filling a pot with water, putting it on the stove, turning on the stove, and then adding rice to the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook rice by filling a pot with water, placing it on the stove, turning on the stove, and adding rice to the pot.', '2. Fry the cooked rice with eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_bowl_2095_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
def find_stove_pot():
    symbol stove_pot_found = exists o: item : (is_pot(o) and is_stove(p) and on(o, p))
    return stove_pot_found

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Put the rice into the pot

behavior __goal__():
    body:
        if find_stove_pot():
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            # Ensure pot with water is on stove and stove is on
            fill_pot_with_water(pot, faucet)
            add_rice_to_pot(rice, pot)
            turn_on_stove(stove)
        
        else:
            # Explore environment to locate pot and stove and place the pot on the stove once found
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    foreach stove: item:
                        if is_stove(stove) and not visited(stove):
                            if is_kitchen_counter(c) and surfaces(c):
                                # Conditional logic to check if the pot is on a known surface suitable for cooking
                                observe(stove, "Find if stove is ready for cooking")
                                observe(pot, "Find available pot and verify readiness for cooking")
                                put_pot_on_stove(pot, stove)
                                # If a suitable pot or stove isnt verified, continue exploring
            else:
                # Assuming the pot and stove are found and equipped in memory, proceed with cooking
                bind pot: item where:
                    is_pot(pot)
                bind stove: item where:
                    is_stove(stove) and on(pot, stove)
                fill_pot_with_water(pot, faucet)
                add_rice_to_pot(rice, pot)
                turn_on_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('ELSE', 'else') at line 5885, column 13.
Expected one of: 
	* DO
	* PASS
	* PREAMBLE
	* NONE
	* PROMOTABLE
	* ACHIEVE_HOLD
	* SYMBOL
	* IF
	* FINDALL
	* ASSERT
	* LONG_STRING
	* STRING
	* NOT
	* UNORDERED
	* DEC_NUMBER
	* EXISTS
	* UNTRACK
	* ACHIEVE
	* FOREACH
	* OCT_NUMBER
	* PACHIEVE
	* HEX_NUMBER
	* TILDE
	* ALTERNATIVE
	* _DEDENT
	* PACHIEVE_ONCE
	* MINUS
	* IMAG_NUMBER
	* BIN_NUMBER
	* STAR
	* FALSE
	* ASSERT_HOLD
	* ELLIPSIS
	* FINDONE
	* VARNAME
	* BIND
	* COMMIT
	* _LLSQB
	* FLOAT_NUMBER
	* LET
	* LSQB
	* RETURN
	* FORALL
	* ACHIEVE_ONCE
	* SEQUENTIAL
	* PACHIEVE_HOLD
	* WHILE
	* CRITICAL
	* COLON
	* ASSERT_ONCE
	* LPAR
	* PLUS
	* TRUE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_bowl_2095_around_bench_124(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

#goal_representation
 
def find_stove_pot():
    symbol stove_pot_found = exists o: item : (is_pot(o) and exists p: item : (is_stove(p) and on(o, p)))
    return stove_pot_found

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Put the rice into the pot

behavior __goal__():
    body:
        if find_stove_pot():
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            # Ensure pot with water is on stove and stove is on
            fill_pot_with_water(pot, faucet)
            add_rice_to_pot(rice, pot)
            turn_on_stove(stove)
        
        else:
            # Explore environment to locate pot and stove and place the pot on the stove once found
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    foreach stove: item:
                        if is_stove(stove) and not visited(stove):
                            if is_kitchen_counter(c) and surfaces(c):
                                # Conditional logic to check if the pot is on a known surface suitable for cooking
                                observe(stove, "Find if stove is ready for cooking")
                                observe(pot, "Find available pot and verify readiness for cooking")
                                put_pot_on_stove(pot, stove)
            # Assuming the pot and stove are found and equipped in memory, proceed with cooking
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            fill_pot_with_water(pot, faucet)
            add_rice_to_pot(rice, pot)
            turn_on_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'p') at line 5824, column 69.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_bowl_2095_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
def find_stove_pot():
    symbol stove_pot_found = exists o: item : (is_pot(o) and exists p: item : (is_stove(p) and on(o, p)))
    return stove_pot_found

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Put the rice into the pot

behavior __goal__():
    body:
        if find_stove_pot():
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            bind faucet: item where:
                is_faucet(faucet)
            bind rice: item where:
                is_food_rice(rice)
            fill_pot_with_water(pot, faucet)
            add_rice_to_pot(rice, pot)
            turn_on_stove(stove)
        
        else:
            # Explore environment to locate pot and stove and place the pot on the stove once found
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    foreach stove: item:
                        if is_stove(stove) and not visited(stove):
                            observe(stove, "Find if stove is ready for cooking")
                            observe(pot, "Find available pot and verify readiness for cooking")
                            put_pot_on_stove(pot, stove)
            # Assuming the pot and stove are found and equipped in memory, proceed with cooking
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            bind faucet: item where:
                is_faucet(faucet)
            bind rice: item where:
                is_food_rice(rice)
            fill_pot_with_water(pot, faucet)
            add_rice_to_pot(rice, pot)
            turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_photoframe_102(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==102
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(bowl,photoframe_instance)
        else:
            exp(bowl,photoframe_instance)
    eff:
        unknown[bowl]=False
        close[bowl,photoframe_instance]=True
        close[photoframe_instance,bowl]=True
    

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs():
    # Check if there is rice or eggs in the known locations
    symbol rice_found = exists o: item : (is_food_rice(o))
    symbol eggs_found = exists o: item : (is_food_egg(o))
    
    return rice_found or eggs_found

def has_stove_available():
    # Check if there is a stove available for use
    symbol stove_available = exists s: item : (is_stove(s))
    return stove_available

behavior __goal__():
    body:
        if has_rice_or_eggs():
            if has_stove_available():
                bind stove: item where:
                    is_stove(stove)
                # Ensure that the stove is available
                achieve is_on(stove)
                
                bind pot: item where:
                    is_pot(pot)
                # Identify a pot for cooking
                achieve has_water(pot)
                
                bind rice: item where:
                    is_food_rice(rice)
                if rice:
                    # If rice is found, add it to the pot
                    achieve inside(rice, pot)

        else:
            # If ingredients are not confirmed, further exploration is needed
            foreach obj: item:
                if not visited(obj):
                    if is_cupboard(obj) or is_fridge(obj):
                        observe(obj, "Check if there are rice and eggs inside")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Invalid condition: V::rice. Type: <class 'concepts.dsl.expression.VariableExpression'>.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
def has_rice_and_stove_available():
    # Check if there is rice and a stove available for use
    symbol rice_available = exists o: item : (is_food_rice(o))
    symbol stove_available = exists s: item : (is_stove(s))
    return rice_available and stove_available

behavior __goal__():
    body:
        if has_rice_and_stove_available():
            bind stove: item where:
                is_stove(stove)
            # Ensure that the stove is available
            achieve is_on(stove)
            
            bind pot: item where:
                is_pot(pot)
            # Identify a pot for cooking
            achieve has_water(pot)
            
            bind rice: item where:
                is_food_rice(rice)
            # If rice is found, add it to the pot
            achieve inside(rice, pot)
            
        else:
            # If ingredients and stove are not confirmed, further exploration is needed
            foreach obj: item:
                if not visited(obj):
                    if is_cupboard(obj) or is_fridge(obj):
                        observe(obj, "Check if there are rice and eggs inside")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_rice_and_stove_available():
    # Check if there is rice and a stove available for use
    symbol rice_available = exists o: item : (is_food_rice(o))
    symbol stove_available = exists s: item : (is_stove(s))
    return rice_available and stove_available

behavior __goal__():
    body:
        if has_rice_and_stove_available():
            bind stove: item where:
                is_stove(stove)
            # Ensure that the stove is available
            achieve is_on(stove)
            
            bind pot: item where:
                is_pot(pot)
            # Identify a pot for cooking
            achieve has_water(pot)
            
            bind rice: item where:
                is_food_rice(rice)
            # If rice is found, add it to the pot
            achieve inside(rice, pot)
            
        else:
            # If ingredients and stove are not confirmed, further exploration is needed
            foreach obj: item:
                if not visited(obj):
                    if is_cupboard(obj) or is_fridge(obj):
                        observe(obj, "Check if there are rice and eggs inside")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_2093. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_2093. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the fridge_140. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. food_rice_2067 is inside pot_2093. food_rice_2067 is close pot_2093. pot_2093 is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water and place it on the stove, as the pot has only been opened and rice added to it, but it has not been filled with water or placed on the stove.
##############################
From agent.py
Human Instruction: Fill the pot with water and place it on the stove, as the pot has only been opened and rice added to it, but it has not been filled with water or placed on the stove.

Human Guidance: Your first subgoal to "find rice and eggs" deviates from my thoughts. Since the main guidance provided starts with cooking rice, you should focus on this step instead of "finding" the ingredients. Once the rice and eggs are acquired, boil some rice by filling a pot with water, putting it on the stove, turning on the stove, and then adding rice to the pot.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 12: Walk to kitchen_counter_129.
Action 13: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 16: Walk to cupboard_131.
Action 17: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 18: Walk to kitchen_counter_132.
Action 19: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.
Action 20: Walk to kitchen_counter_128.
Action 21: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 22: Walk to kitchen_counter_129.
Action 23: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 24: Walk to cupboard_130.
Action 25: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 26: Walk to cupboard_131.
Action 27: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 28: Walk to kitchen_counter_132.
Action 29: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.
Action 30: Walk to stove_2090.
Action 31: Switch on stove_2090.
Action 32: Walk to pot_2093.
Action 33: Open pot_2093.
Action 34: Grab pot_2093.
Action 35: Walk to faucet_134.
Action 36: Switch off faucet_134.
Action 37: Walk to fridge_140.
Action 38: Switch off fridge_140.
Action 39: Open fridge_140.
Action 40: look for food_rice_2067 around fridge_140.
Action 41: Walk to faucet_308.
Action 42: Switch off faucet_308.
Action 43: Walk to food_rice_2067.
Action 44: Grab food_rice_2067.
Action 45: Walk to pot_2093.
Action 46: Put food_rice_2067 into pot_2093.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_389_around_desk_375(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(drawing,desk_instance)
        else:
            exp(drawing,desk_instance)
    eff:
        unknown[drawing]=False
        close[drawing,desk_instance]=True
        close[desk_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        
behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot from the kitchen
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill water
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to add to the pot
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        put_rice_in_pot(rice, pot)
        # Add rice to the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        
behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot from the kitchen
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill water
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to add to the pot
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        put_rice_in_pot(rice, pot)
        # Add rice to the pot

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water and place it on the stove. Currently, the pot has only been opened and rice added to it, but it has not been filled with water or placed on the stove.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water and place it on the stove. Currently, the pot has only been opened and rice added to it, but it has not been filled with water or placed on the stove.

Human Guidance: Your first subgoal to "find rice and eggs" deviates from my thoughts. Since the main guidance provided starts with cooking rice, you should focus on this step instead of "finding" the ingredients. Once the rice and eggs are acquired, boil some rice by filling a pot with water, putting it on the stove, turning on the stove, and then adding rice to the pot.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 12: Walk to kitchen_counter_129.
Action 13: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 16: Walk to cupboard_131.
Action 17: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 18: Walk to kitchen_counter_132.
Action 19: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.
Action 20: Walk to kitchen_counter_128.
Action 21: Observe around kitchen_counter_128 with the question of Check if there are rice and eggs nearby.
Action 22: Walk to kitchen_counter_129.
Action 23: Observe around kitchen_counter_129 with the question of Check if there are rice and eggs nearby.
Action 24: Walk to cupboard_130.
Action 25: Observe around cupboard_130 with the question of Check if there are rice and eggs nearby.
Action 26: Walk to cupboard_131.
Action 27: Observe around cupboard_131 with the question of Check if there are rice and eggs nearby.
Action 28: Walk to kitchen_counter_132.
Action 29: Observe around kitchen_counter_132 with the question of Check if there are rice and eggs nearby.
Action 30: Walk to stove_2090.
Action 31: Switch on stove_2090.
Action 32: Walk to pot_2093.
Action 33: Open pot_2093.
Action 34: Grab pot_2093.
Action 35: Walk to faucet_134.
Action 36: Switch off faucet_134.
Action 37: Walk to fridge_140.
Action 38: Switch off fridge_140.
Action 39: Open fridge_140.
Action 40: look for food_rice_2067 around fridge_140.
Action 41: Walk to faucet_308.
Action 42: Switch off faucet_308.
Action 43: Walk to food_rice_2067.
Action 44: Grab food_rice_2067.
Action 45: Walk to pot_2093.
Action 46: Put food_rice_2067 into pot_2093.
Action 47: Walk to faucet_134.
Action 48: Switch on faucet_134.
Action 49: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_389_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot) and not has_water(pot)
        # Select a pot that is open and does not have water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        add_rice_to_pot(rice, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_desk_375(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(oil,desk_instance)
        else:
            exp(oil,desk_instance)
    eff:
        unknown[oil]=False
        close[oil,desk_instance]=True
        close[desk_instance,oil]=True
    

behavior find_bowl_2096_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_near_water_source(location:item):
    # Function to check if a location is near a water source (ie, faucet)
    symbol is_near= exists faucet: item : (is_faucet(faucet) and close(location, faucet))
    return is_near

behavior locate_and_prepare_pot(location:item, pot:item):
    body:
        if is_near_water_source(location):
            # If the location is near a water source, ensure the pot is filled with water
            achieve_once has_water(pot)
            # Place the pot on the stove
            achieve_once on(pot, stove)
        else:
            # If the location is not near a water source, navigate to a location that is
            foreach faucet: item:
                if is_faucet(faucet):
                    observe(faucet,"Check if there is water available around the faucet")
            # Ensure the pot is filled with water after finding a water source
            achieve_once has_water(pot)

behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        # Ensure rice is inside pot
        achieve_once inside(rice, pot)
        # Turn the stove on
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Locate the pot that is open

        bind stove: item where:
            is_stove(stove)
        # Locate the stove

        bind rice: item where:
            is_food_rice(rice)
        # Locate the rice
        
        achieve open(pot) # Ensure the pot is open before filling it with other contents

        locate_and_prepare_pot(kitchen_counter_129, pot) # Fill pot with water and place it on stove

        cook_rice(pot, stove, rice) # Add rice and turn stove on to cook


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<location: item>, Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_food_orange_2008(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2008
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(bowl,food_orange_instance)
        else:
            exp(bowl,food_orange_instance)
    eff:
        unknown[bowl]=False
        close[bowl,food_orange_instance]=True
        close[food_orange_instance,bowl]=True
    

#goal_representation
 
def is_near_water_source(location:item):
    # Function to check if a location is near a water source (ie, faucet)
    symbol is_near= exists faucet: item : (is_faucet(faucet) and close(location, faucet))
    return is_near

behavior locate_and_prepare_pot(location:item, pot:item, stove:item):
    body:
        if is_near_water_source(location):
            # If the location is near a water source, ensure the pot is filled with water
            achieve_once has_water(pot)
            # Place the pot on the stove
            achieve_once on(pot, stove)
        else:
            # If the location is not near a water source, navigate to a location that is
            foreach faucet: item:
                if is_faucet(faucet):
                    observe(faucet,"Check if there is water available around the faucet")
            # Ensure the pot is filled with water after finding a water source
            achieve_once has_water(pot)

behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        # Ensure rice is inside pot
        achieve_once inside(rice, pot)
        # Turn the stove on
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Locate the pot that is open

        bind stove: item where:
            is_stove(stove)
        # Locate the stove

        bind rice: item where:
            is_food_rice(rice)
        # Locate the rice
        
        achieve open(pot) # Ensure the pot is open before filling it with other contents

        locate_and_prepare_pot(kitchen_counter_129, pot, stove) # Fill pot with water and place it on stove

        cook_rice(pot, stove, rice) # Add rice and turn stove on to cook

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_129; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_drawing_387_around_desk_375(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(drawing,desk_instance)
        else:
            exp(drawing,desk_instance)
    eff:
        unknown[drawing]=False
        close[drawing,desk_instance]=True
        close[desk_instance,drawing]=True
    

#goal_representation
 
def is_near_water_source(location:item):
    # Function to check if a location is near a water source (ie, faucet)
    symbol is_near= exists faucet: item : (is_faucet(faucet) and close(location, faucet))
    return is_near

behavior locate_and_prepare_pot(location:item, pot:item, stove:item):
    body:
        if is_near_water_source(location):
            # If the location is near a water source, ensure the pot is filled with water
            achieve_once has_water(pot)
            # Place the pot on the stove
            achieve_once on(pot, stove)
        else:
            # If the location is not near a water source, navigate to a location that is
            foreach faucet: item:
                if is_faucet(faucet):
                    observe(faucet,"Check if there is water available around the faucet")
            # Ensure the pot is filled with water after finding a water source
            achieve_once has_water(pot)

behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        # Ensure rice is inside pot
        achieve_once inside(rice, pot)
        # Turn the stove on
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Locate the pot that is open

        bind stove: item where:
            is_stove(stove)
        # Locate the stove

        bind rice: item where:
            is_food_rice(rice)
        # Locate the rice

        bind location: item where:
            is_kitchen_counter(location) and id[location]==129
        # Locate the specific kitchen counter where the pot is 

        achieve open(pot) # Ensure the pot is open before filling it with other contents

        locate_and_prepare_pot(location, pot, stove) # Fill pot with water and place it on stove

        cook_rice(pot, stove, rice) # Add rice and turn stove on to cook

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_near_water_source(location:item):
    # Function to check if a location is near a water source (ie, faucet)
    symbol is_near= exists faucet: item : (is_faucet(faucet) and close(location, faucet))
    return is_near

behavior locate_and_prepare_pot(location:item, pot:item, stove:item):
    body:
        if is_near_water_source(location):
            # If the location is near a water source, ensure the pot is filled with water
            achieve_once has_water(pot)
            # Place the pot on the stove
            achieve_once on(pot, stove)
        else:
            # If the location is not near a water source, navigate to a location that is
            foreach faucet: item:
                if is_faucet(faucet):
                    observe(faucet,"Check if there is water available around the faucet")
            # Ensure the pot is filled with water after finding a water source
            achieve_once has_water(pot)

behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        # Ensure rice is inside pot
        achieve_once inside(rice, pot)
        # Turn the stove on
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Locate the pot that is open

        bind stove: item where:
            is_stove(stove)
        # Locate the stove

        bind rice: item where:
            is_food_rice(rice)
        # Locate the rice

        bind location: item where:
            is_kitchen_counter(location) and id[location]==129
        # Locate the specific kitchen counter where the pot is 

        achieve open(pot) # Ensure the pot is open before filling it with other contents

        locate_and_prepare_pot(location, pot, stove) # Fill pot with water and place it on stove

        cook_rice(pot, stove, rice) # Add rice and turn stove on to cook

##############################
From agent.py-> find a plan in act()
obs(faucet_134, Check if there is water available around the faucet)walk_executor(faucet_308)obs(faucet_308, Check if there is water available around the faucet)
##############################
From agent.py
obs(faucet_134, Check if there is water available around the faucet)
Get this information:  faucet_134 is inside dining_room_1. faucet_134 is on kitchen_counter_132. faucet_134 is close to cupboard_130. faucet_134 is close to wall_2. faucet_134 is close to kitchen_counter_132. faucet_134 is close to sink_133. faucet_134 is close to wall_6. faucet_134 is close to walllamp_45. faucet_134 is close to oven_141. faucet_134 is close to floor_15. faucet_134 is close to floor_16. faucet_134 is close to knifeblock_52. faucet_134 is close to microwave_149. faucet_134 is close to ceiling_27. faucet_134 is close to ceiling_28. faucet_134 is close to character_219. faucet_134 is OFF. faucet_134 is CLEAN.
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
obs(faucet_308, Check if there is water available around the faucet)
Get this information:  faucet_308 is inside bathroom_265. faucet_308 is on bathroom_counter_306. faucet_308 is close to wall_266. faucet_308 is close to wall_269. faucet_308 is close to floor_272. faucet_308 is close to bathroom_cabinet_305. faucet_308 is close to bathroom_counter_306. faucet_308 is close to sink_307. faucet_308 is close to floor_273. faucet_308 is close to floor_274. faucet_308 is close to ceiling_279. faucet_308 is close to character_219. faucet_308 is facing drawing_296. faucet_308 is OFF. faucet_308 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water and placed on the stove. Ensure that water is added to the pot and that it is correctly located on stove_2090.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_oven_141(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

behavior find_pajamas_2039_around_basket_for_clothes_2040(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pajamas,basket_for_clothes_instance)
        else:
            exp(pajamas,basket_for_clothes_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pajamas]=True
    

#exp_behavior_end

#goal_representation
 
def has_fried_rice_with_egg(frypan:item):
    symbol has_fried_rice= exists o: item : (is_food_rice(o) and inside(o, frypan))
    symbol has_egg= exists o: item : (is_food_egg(o) and inside(o, frypan))
    return has_fried_rice and has_egg

behavior fry_rice_egg(frypan:item, egg:item, rice:item):
    body:
        achieve_once inside(rice, frypan)
        achieve_once inside(egg, frypan)

behavior heat_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind frypan: item where:
            is_fryingpan(frypan)
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice)

        if not has_fried_rice_with_egg(frypan):
            fry_rice_egg(frypan, egg, rice)

        heat_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_fried_rice_with_egg(frypan:item):
    symbol has_fried_rice= exists o: item : (is_food_rice(o) and inside(o, frypan))
    symbol has_egg= exists o: item : (is_food_egg(o) and inside(o, frypan))
    return has_fried_rice and has_egg

behavior fry_rice_egg(frypan:item, egg:item, rice:item):
    body:
        achieve_once inside(rice, frypan)
        achieve_once inside(egg, frypan)

behavior heat_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind frypan: item where:
            is_fryingpan(frypan)
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice)

        if not has_fried_rice_with_egg(frypan):
            fry_rice_egg(frypan, egg, rice)

        heat_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(fryingpan_2107)putin_executor(food_rice_2067, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_rice_2067, fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_rice_2067 is inside fryingpan_2107. food_rice_2067 is close fryingpan_2107. fryingpan_2107 is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(pot_2093)', 'putin_executor(food_rice_2067, pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_rice_2067, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)']
Time info:
Time consume: 663 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 53
goal generate times: 16
goal correct times: 3
action_num: 43

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
