From agent.py
Reset goals: The sub-goals are: 
['1. Find a table in the dining room and put the milk and eggs on it.', '2. Throw all the items from the fridge into the trashcan.', '3. Put the milk and eggs back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

def is_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_items_on_table(milk: item, egg: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(egg, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Bind a table in the dining room

        put_items_on_table(milk, egg, table)
        # Put the milk and egg on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_goal

def is_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_items_on_table(milk: item, egg: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(egg, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Bind a table in the dining room

        put_items_on_table(milk, egg, table)
        # Put the milk and egg on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(milk_2115, kitchen_counter_119)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_119)
Fail to find milk_2115 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_34)exp(milk_2115, walllamp_34)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(walllamp_34)
Robot find: drawing_33, Robot is close to the walllamp_34. 
##############################
From agent.py
exp(milk_2115, walllamp_34)
Fail to find milk_2115 around walllamp_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(milk_2115, trashcan_99)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: food_orange_2061, food_onion_2009, glue_2045, vacuum_cleaner_2139, Robot is close to the trashcan_99. Robot is close to the food_orange_2061. Robot is close to the food_onion_2009. Robot is close to the glue_2045. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Robot, you can find milk_2115 on table_114 inside dining_room_41. Look for it on the table.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, you can find milk_2115 on table_114 inside dining_room_41. Look for it on the table.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to kitchen_counter_119.
Action 6: look for milk_2115 around kitchen_counter_119.
Action 7: Walk to cupboard_117.
Action 8: look for milk_2115 around cupboard_117.
Action 9: Walk to kitchen_counter_122.
Action 10: look for milk_2115 around kitchen_counter_122.
Action 11: Walk to walllamp_34.
Action 12: look for milk_2115 around walllamp_34.
Action 13: Walk to trashcan_99.

##############################
From agent.py
exp(milk_2115, trashcan_99)
Fail to find milk_2115 around trashcan_99. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab the milk from table_114 and put it on the same table along with the eggs.
##############################
From agent.py
Human Instruction: You need to grab the milk from table_114 and put it on the same table along with the eggs.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to kitchen_counter_119.
Action 6: look for milk_2115 around kitchen_counter_119.
Action 7: Walk to cupboard_117.
Action 8: look for milk_2115 around cupboard_117.
Action 9: Walk to kitchen_counter_122.
Action 10: look for milk_2115 around kitchen_counter_122.
Action 11: Walk to walllamp_34.
Action 12: look for milk_2115 around walllamp_34.
Action 13: Walk to trashcan_99.
Action 14: look for milk_2115 around trashcan_99.
Action 15: Walk to table_114.
Action 16: look for milk_2115 around table_114.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to table_114.
Action 20: Put food_egg_2092 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

behavior find_food_carrot_2015_around_box_2038(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_carrot,box_instance)
        else:
            exp(food_carrot,box_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,box_instance]=True
        close[box_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        put_on_table(milk, table)
        put_on_table(egg, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2088_around_box_2038(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_cheese,box_instance)
        else:
            exp(food_cheese,box_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,box_instance]=True
        close[box_instance,food_cheese]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_41)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        # Select milk with ID 2115
        
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Select egg with ID 2092

        achieve close_char(char, table) 
        # Move the character closer to the table
        
        foreach item: item:
            if item == milk or item == egg:
                achieve_once on(item, table)
                # Place milk and egg on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_41; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_275(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_food_food_2064_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

behavior find_food_cheese_2088_around_box_2038(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_cheese,box_instance)
        else:
            exp(food_cheese,box_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,box_instance]=True
        close[box_instance,food_cheese]=True
    

#goal_representation
 
bind dining_room: item where:
    is_dining_room(dining_room)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        # Select milk with ID 2115
        
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Select egg with ID 2092

        achieve close_char(char, table) 
        # Move the character closer to the table
        
        foreach item: item:
            if item == milk or item == egg:
                achieve_once on(item, table)
                # Place milk and egg on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5484, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_275(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_food_food_2064_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

behavior find_food_cheese_2088_around_box_2038(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_cheese,box_instance)
        else:
            exp(food_cheese,box_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,box_instance]=True
        close[box_instance,food_cheese]=True
    

#goal_representation
def on_table(milk:item, egg:item, table:item):
    # Function to ensure that milk and egg are placed on the table
    achieve_once on(milk, table)
    achieve_once on(egg, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092

        achieve close_char(char, table) 
        
        on_table(milk, egg, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_box_2038(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(shoes,box_instance)
        else:
            exp(shoes,box_instance)
    eff:
        unknown[shoes]=False
        close[shoes,box_instance]=True
        close[box_instance,shoes]=True
    

behavior find_food_cheese_2072_around_tvstand_116(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(food_cheese,tvstand_instance)
        else:
            exp(food_cheese,tvstand_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,tvstand_instance]=True
        close[tvstand_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_milk_and_eggs_on_table(milk:item, eggs:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(eggs, table)

behavior __goal__():
    body:
        # Bind the objects of interest
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2092
        bind table: item where:
            is_table(table) and id[table] == 114
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Assume table_114 is already inside the dining room
        put_milk_and_eggs_on_table(milk, eggs, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find a table in the dining room and put the milk and eggs on it." ?
Answer: Find a table in the dining room and put the milk and eggs on it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2064_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

behavior find_oil_2013_around_box_2038(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(oil,box_instance)
        else:
            exp(oil,box_instance)
    eff:
        unknown[oil]=False
        close[oil,box_instance]=True
        close[box_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol inside_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return inside_dining_room

behavior place_on_table(table:item, obj:item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_inside_dining_room(table)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk) and close_char(char, milk)
        # Select the milk item that is close to character

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        place_on_table(table, milk) # Place milk on the selected table
        place_on_table(table, egg) # Place egg on the selected table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2072_around_box_2038(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_cheese,box_instance)
        else:
            exp(food_cheese,box_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,box_instance]=True
        close[box_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_dining_room(item:item):
    # Function to check if an item is in the dining room
    symbol inside_dining_room=exists room: item : (is_dining_room(room) and inside(item, room))
    return inside_dining_room

behavior find_table_and_place_items(milk:item, eggs:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(eggs, table)

behavior __goal__():
    body:
        bind dining_room_table: item where:
            is_table(dining_room_table) and is_dining_room(dining_room_table)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        
        find_table_and_place_items(milk, eggs, dining_room_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2088_around_box_2038(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_cheese,box_instance)
        else:
            exp(food_cheese,box_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,box_instance]=True
        close[box_instance,food_cheese]=True
    

behavior find_food_butter_2007_around_box_2038(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_butter,box_instance)
        else:
            exp(food_butter,box_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,box_instance]=True
        close[box_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation

def is_dining_table_available(dining_table:item):
    # Function to check if a dining_table is available for use
    symbol is_available= not exists o: item : (
        (is_food(o) or is_milk(o) or is_food_egg(o)) and on(o, dining_table)
    )
    return is_available

behavior place_milk_and_eggs(milk:item, eggs:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)
        achieve_once on(eggs, dining_table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)
            # Select available dining table

            bind milk: item where:
                is_milk(milk) and close_char(char, milk)
            # Select milk on the table_114

            bind eggs: item where:
                is_food_egg(eggs) and close_char(char, eggs)
            # Select eggs on the table_114

            place_milk_and_eggs(milk, eggs, dining_table)
            # Place milk and eggs on the dining table
        else:
            # Check all tables in the dining room
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, dining_room):
                    observe(table,"Check is there any space to put milk and eggs on the table")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5468, column 37.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_cheese_2088_around_food_bread_2084(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_cheese,food_bread_instance)
        else:
            exp(food_cheese,food_bread_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,food_bread_instance]=True
        close[food_bread_instance,food_cheese]=True
    

#goal_representation
 
def is_dining_table_available(dining_table:item):
    # Function to check if a dining table is available for use
    symbol is_available=not exists o: item : (
        (is_food(o) or is_milk(o) or is_food_egg(o)) and on(o, dining_table)
    )
    return is_available

behavior place_milk_and_eggs(milk:item, eggs:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)
        achieve_once on(eggs, dining_table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)
            # Select available dining table

            bind milk: item where:
                is_milk(milk) and close_char(char, milk)
            # Select milk on the table_114

            bind eggs: item where:
                is_food_egg(eggs) and close_char(char, eggs)
            # Select eggs on the table_114

            place_milk_and_eggs(milk, eggs, dining_table)
            # Place milk and eggs on the dining table
        else:
            # Check all tables in the dining room
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, dining_room):
                    observe(table,"Check is there any space to put milk and eggs on the table")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5468, column 36.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2021_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

#goal_representation

def is_dining_table_available(dining_table:item):
    # Function to check if a dining table is available for use
    symbol is_available=not exists o: item : (
        (is_food(o) or is_milk(o) or is_food_egg(o)) and on(o, dining_table)
    )
    return is_available

behavior place_milk_and_eggs(milk:item, eggs:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)
        achieve_once on(eggs, dining_table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        if exists dining_table: item : (is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)):
            bind dining_table: item where:
                is_table(dining_table) and inside(dining_table, dining_room) and is_dining_table_available(dining_table)
            # Select available dining table

            bind milk: item where:
                is_milk(milk) and close_char(char, milk)
            # Select milk on the table_114

            bind eggs: item where:
                is_food_egg(eggs) and close_char(char, eggs)
            # Select eggs on the table_114

            place_milk_and_eggs(milk, eggs, dining_table)
            # Place milk and eggs on the dining table
        else:
            # Check all tables in the dining room
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, dining_room):
                    observe(table, "Check is there any space to put milk and eggs on the table")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(walllamp_34)', 'walk_executor(trashcan_99)', 'walk_executor(table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)']
Time info:
Time consume: 266 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 16
goal generate times: 7
goal correct times: 2
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 144 steps
Keystate: k3 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
