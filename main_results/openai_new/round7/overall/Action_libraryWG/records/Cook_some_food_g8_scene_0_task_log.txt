From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and prepare the lemon and vegetables.', '3. Mix the boiled egg, lemon, and vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind the egg to the item recognized as a food egg

        bind pot: item where:
            is_pot(pot)
        # Bind the pot to an item recognized as a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Bind the faucet to an item recognized as a faucet

        achieve_once close_char(char, pot)
        # Approach the pot

        achieve_once has_water(pot)
        # Fill the pot with water

        achieve_once close_char(char, egg)
        # Move to the egg location

        achieve_once inhand(egg)
        # Pick up the egg for boiling

        accomplish_boiling():
            achieve_once inside(egg, pot)
        # Place the egg inside the pot to boil
        
        achieve_once is_on_stove(pot)
        # Ensure the pot is on the stove for boiling the egg

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5730, column 29.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior accomplish_boiling(pot:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot to boil

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind the egg to the item recognized as a food egg

        bind pot: item where:
            is_pot(pot)
        # Bind the pot to an item recognized as a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Bind the faucet to an item recognized as a faucet

        achieve_once close_char(char, pot)
        # Approach the pot

        achieve_once has_water(pot)
        # Fill the pot with water

        achieve_once close_char(char, egg)
        # Move to the egg location

        achieve_once inhand(egg)
        # Pick up the egg for boiling

        accomplish_boiling(pot, egg)
        # Use accomplish_boiling behavior to place the egg in the pot
        
        achieve_once is_on_stove(pot)
        # Ensure the pot is on the stove for boiling the egg

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_on_stove not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        achieve_once close_char(char, pot)

        achieve_once has_water(pot)

        achieve_once close_char(char, egg)

        achieve_once inhand(egg)

        accomplish_boiling(pot, egg)
        
        achieve_once on(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_the_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        boil_the_egg(egg, pot, stove)
        # Execute the boiling process

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_the_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        boil_the_egg(egg, pot, stove)
        # Execute the boiling process

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
exp(food_egg_2020, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
exp(food_egg_2020, kitchen_counter_230)
Fail to find food_egg_2020 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_egg_2020, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_egg_2020, cupboard_229)
Fail to find food_egg_2020 around cupboard_229. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Wash and cut the vegetables.', '3. Mix the boiled eggs, vegetables, and lemon in a bowl to prepare the egg salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation

behavior boil_eggs(eggs:item, pot:item, faucet:item, stove:item):
    body:
        achieve_once inside(eggs, pot) # Place the eggs inside the pot
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to begin boiling

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_eggs(eggs, pot, faucet, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(pot:item, stove:item, eggs:list):
    body:
        achieve has_water(pot)  # Ensure the pot is filled with water
        foreach egg in eggs:
            # Place each egg inside the pot
            achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)  # Turn on the stove to boil eggs

behavior __goal__():
    body:
        # Bind a pot, stove, and find eggs to be boiled
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        # Create an empty list to hold found eggs
        symbol eggs= []

        # Check current location and move to appropriate places to ensure all tasks are covered
        if exists egg: item : (is_food_egg(egg) and inside(egg, cupboard_229)):
            foreach egg: item:
                if is_food_egg(egg) and inside(egg, cupboard_229):
                    eggsappend(egg)

        if not eggs: # If no eggs were found in cupboard_229
            if exists egg: item : (is_food_egg(egg) and inside(egg, kitchen_counter_230)):
                foreach egg: item:
                    if is_food_egg(egg) and inside(egg, kitchen_counter_230):
                        eggsappend(egg)

        boil_eggs(pot, stove, eggs)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
behavior boil_eggs(pot:item, stove:item, eggs:itemlist):
    body:
        achieve has_water(pot)  # Ensure the pot is filled with water
        foreach egg in eggs:
            # Place each egg inside the pot
            achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)  # Turn on the stove to boil eggs

behavior __goal__():
    body:
        # Bind a pot, stove, and find eggs to be boiled
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        # Create an empty list to hold found eggs
        symbol eggs=itemlist() 

        # Check current location and move to appropriate places to ensure all tasks are covered
        if exists egg: item : (is_food_egg(egg) and inside(egg, cupboard_229)):
            foreach egg: item:
                if is_food_egg(egg) and inside(egg, cupboard_229):
                    eggsappend(egg)

        if not eggs: # If no eggs were found in cupboard_229
            if exists egg: item : (is_food_egg(egg) and inside(egg, kitchen_counter_230)):
                foreach egg: item:
                    if is_food_egg(egg) and inside(egg, kitchen_counter_230):
                        eggsappend(egg)

        boil_eggs(pot, stove, eggs)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: itemlist, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation

behavior boil_eggs(pot:item, stove:item, eggs:item):
    body:
        achieve has_water(pot)
        foreach egg in eggs:
            achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        symbol eggs=exists o: item : (is_food_egg(o)) and (inside(o, cupboard_229) or inside(o, kitchen_counter_230))

        if exists egg: item : (is_food_egg(egg) and inside(egg, cupboard_229)):
            foreach egg: item:
                if is_food_egg(egg) and inside(egg, cupboard_229):
                    achieve_once inside(egg, pot)

        if not eggs:
            if exists egg: item : (is_food_egg(egg) and inside(egg, kitchen_counter_230)):
                foreach egg: item:
                    if is_food_egg(egg) and inside(egg, kitchen_counter_230):
                        achieve_once inside(egg, pot)

        boil_eggs(pot, stove, eggs)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation

behavior boil_eggs(eggs: item, pot: item, stove: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        
        achieve_once inside(eggs, pot)
        # Place the eggs in the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select food item categorized as eggs

        bind pot: item where:
            is_pot(pot)
        # Select an item categorized as a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item categorized as a stove

        boil_eggs(eggs, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_eggs(eggs: item, pot: item, stove: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        
        achieve_once inside(eggs, pot)
        # Place the eggs in the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select food item categorized as eggs

        bind pot: item where:
            is_pot(pot)
        # Select an item categorized as a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item categorized as a stove

        boil_eggs(eggs, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_fork_2081_around_cutting_board_2051(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(fork,cutting_board_instance)
        else:
            exp(fork,cutting_board_instance)
    eff:
        unknown[fork]=False
        close[fork,cutting_board_instance]=True
        close[cutting_board_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(counter: item):
    # Check if a kitchen counter is in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(counter, room))
    return in_kitchen

behavior wash_and_cut(vegetable: item, sink: item, cutting_board: item, knife: item):
    body:
        achieve_once inhand(vegetable) # Temporarily hold the vegetable
        achieve clean(vegetable) # Ensure the vegetable is clean
        achieve_once on(vegetable, cutting_board) # Place the vegetable on the cutting board
        achieve_once cut(vegetable) # Cut the vegetable

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and in_kitchen_counter(kitchen_counter)
        # Ensure the kitchen counter is in the kitchen
        
        bind sink: item where:
            is_sink(sink) and inside(sink, kitchen_counter)
        # Find a sink near the kitchen counter
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
        # Find a cutting board on the kitchen counter
        
        bind knife: item where:
            is_knife(knife) and on(knife, kitchen_counter)
        # Find a knife on the kitchen counter

        wash_and_cut(vegetable, sink, cutting_board, knife)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_vegetables(food_vegetable:item):
    body:
        if dirty(food_vegetable):
            wash(food_vegetable) 
            # Wash the vegetable if it is dirty

        achieve_once cut(food_vegetable)
        # Cut the vegetable

def has_uncut_vegetables(kitchen_counter:item):
    # Function to check if there are uncut vegetables on the kitchen counter
    symbol has_vegetables = exists o: item : (is_food_vegetable(o) and not cut(o) and on(o, kitchen_counter))
    return has_vegetables

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter

        if has_uncut_vegetables(kitchen_counter):
            foreach food_vegetable: item:
                if is_food_vegetable(food_vegetable) and not cut(food_vegetable) and on(food_vegetable, kitchen_counter):
                    wash_and_cut_vegetables(food_vegetable)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_vegetables():
    # Check if there are vegetables in the available items
    symbol vegetable_exists=exists v: item : (is_food_vegetable(v))
    return vegetable_exists

def has_unvisited_vegetables():
    # Check if there are unvisited vegetables in the scene
    symbol unvisited_vegetable=exists v: item : (is_food_vegetable(v) and not visited(v))
    return unvisited_vegetable

behavior wash_and_cut_vegetables(v:item):
    body:
        wash(v)
        # Wash the vegetables
        achieve cut(v)
        # Cut the vegetables

behavior __goal__():
    body:
        if has_vegetables():
            foreach v: item:
                if is_food_vegetable(v) and not visited(v):
                    wash_and_cut_vegetables(v)
        else:
            foreach v: item:
                if is_food_vegetable(v) and not visited(v):
                    wash_and_cut_vegetables(v)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables():
    # Check if there are vegetables in the available items
    symbol vegetable_exists=exists v: item : (is_food_vegetable(v))
    return vegetable_exists

def has_unvisited_vegetables():
    # Check if there are unvisited vegetables in the scene
    symbol unvisited_vegetable=exists v: item : (is_food_vegetable(v) and not visited(v))
    return unvisited_vegetable

behavior wash_and_cut_vegetables(v:item):
    body:
        wash(v)
        # Wash the vegetables
        achieve cut(v)
        # Cut the vegetables

behavior __goal__():
    body:
        if has_vegetables():
            foreach v: item:
                if is_food_vegetable(v) and not visited(v):
                    wash_and_cut_vegetables(v)
        else:
            foreach v: item:
                if is_food_vegetable(v) and not visited(v):
                    wash_and_cut_vegetables(v)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_eggs:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(boiled_eggs, bowl) # Place boiled eggs in the bowl
        achieve_once inside(vegetables, bowl) # Place vegetables in the bowl
        achieve_once inside(lemon, bowl) # Place lemon in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Find a bowl to mix the salad
        
        bind food_egg: item where:
            is_food_egg(food_egg) and cut(food_egg)
        # Select the boiled eggs that are cut

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and cut(food_vegetable)
        # Select the vegetables that are cut
        
        bind food_lemon: item where:
            is_food_lemon(food_lemon) and cut(food_lemon)
        # Select the lemon that is cut
        
        mix_ingredients(food_egg, food_vegetable, food_lemon, bowl)
        # Mix the boiled eggs, vegetables, and lemon in the bowl

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(eggs: item, vegetables: item, lemon: item, bowl: item):
    body:
        achieve_once inside(eggs, bowl) # Put the boiled eggs into the bowl
        achieve_once inside(vegetables, bowl) # Put the vegetables into the bowl
        achieve_once inside(lemon, bowl) # Put the lemon into the bowl

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind bowl: item where:
            is_bowl(bowl)

        mix_ingredients(eggs, vegetables, lemon, bowl)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def in_bowl(item:item, bowl:item):
    # Function to check if an item is in the specified bowl
    symbol in_bowl = exists i: item : (i == item and inside(i, bowl))
    return in_bowl

behavior mix_in_bowl(bowl:item, egg:item, vegetable:item, lemon:item):
    body:
        achieve_once inside(egg, bowl)      # Place the boiled eggs inside the bowl
        achieve_once inside(vegetable, bowl) # Place the vegetables inside the bowl
        achieve_once inside(lemon, bowl)     # Place the lemon inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and is_kitchen_counter(kitchen_counter_230) and on(bowl, kitchen_counter_230) # Select a bowl that is on the kitchen counter

        bind egg: item where:
            is_food_egg(egg) and not in_bowl(egg, bowl) # Identifying and selecting the boiled egg not already in the bowl

        bind vegetable: item where:
            is_food_vegetable(vegetable) and not in_bowl(vegetable, bowl) # Select the vegetables not already in the bowl

        bind lemon: item where:
            is_food_lemon(lemon) and not in_bowl(lemon, bowl) # Select the lemon not already in the bowl
        
        mix_in_bowl(bowl, egg, vegetable, lemon) # Mix the selected ingredients together in the bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_230; available variables: [Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def in_bowl(item:item, bowl:item):
    # Function to check if an item is in the specified bowl
    symbol in_bowl = exists i: item : (i == item and inside(i, bowl))
    return in_bowl

behavior mix_in_bowl(bowl:item, egg:item, vegetable:item, lemon:item):
    body:
        achieve_once inside(egg, bowl)      # Place the boiled eggs inside the bowl
        achieve_once inside(vegetable, bowl) # Place the vegetables inside the bowl
        achieve_once inside(lemon, bowl)     # Place the lemon inside the bowl

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 230

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, kitchen_counter) # Select a bowl that is on the kitchen counter

        bind egg: item where:
            is_food_egg(egg) and not in_bowl(egg, bowl) # Identifying and selecting the boiled egg not already in the bowl

        bind vegetable: item where:
            is_food_vegetable(vegetable) and not in_bowl(vegetable, bowl) # Select the vegetables not already in the bowl

        bind lemon: item where:
            is_food_lemon(lemon) and not in_bowl(lemon, bowl) # Select the lemon not already in the bowl
        
        mix_in_bowl(bowl, egg, vegetable, lemon) # Mix the selected ingredients together in the bowl

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. mix the boiled eggs, vegetables, and lemon in a bowl to prepare the egg salad." ?
Answer: Put the cut boiled eggs, the cut lemon pieces, and the cut vegetables in a bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients(bowl:item):
    # Function to check if the bowl contains the necessary ingredients
    symbol has_eggs= exists o: item : (is_food_egg(o) and inside(o, bowl))
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, bowl))
    symbol has_lemon= exists o: item : (is_food_lemon(o) and inside(o, bowl))
    return has_eggs and has_vegetables and has_lemon

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs) and inside(eggs, fridge_289)
        # Select boiled and cut eggs from the fridge

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables) and close_char(char, vegetables)
        # Select cut vegetables close to the character

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and close_char(char, lemon)
        # Select cut lemon close to the character

        # Ensure the bowl contains boiled eggs, vegetables, and lemon
        if not has_ingredients(bowl):
            achieve_inside(eggs, bowl)
            achieve_inside(vegetables, bowl)
            achieve_inside(lemon, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_289; available variables: [Variable<eggs: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

def has_ingredients(bowl:item):
    # Function to check if the bowl contains the necessary ingredients
    symbol has_eggs= exists o: item : (is_food_egg(o) and inside(o, bowl))
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, bowl))
    symbol has_lemon= exists o: item : (is_food_lemon(o) and inside(o, bowl))
    return has_eggs and has_vegetables and has_lemon

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients
        
        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs) and inside(eggs, fridge)
        # Select boiled and cut eggs from the fridge

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables) and close_char(char, vegetables)
        # Select cut vegetables close to the character

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and close_char(char, lemon)
        # Select cut lemon close to the character

        # Ensure the bowl contains boiled eggs, vegetables, and lemon
        if not has_ingredients(bowl):
            achieve_inside(eggs, bowl)
            achieve_inside(vegetables, bowl)
            achieve_inside(lemon, bowl)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_inside not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def has_ingredients(bowl:item):
    # Function to check if the bowl contains the necessary ingredients
    symbol has_eggs= exists o: item : (is_food_egg(o) and inside(o, bowl))
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, bowl))
    symbol has_lemon= exists o: item : (is_food_lemon(o) and inside(o, bowl))
    return has_eggs and has_vegetables and has_lemon

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients
        
        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs) and inside(eggs, fridge)
        # Select boiled and cut eggs from the fridge

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables) and close_char(char, vegetables)
        # Select cut vegetables close to the character

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and close_char(char, lemon)
        # Select cut lemon close to the character

        # Ensure the bowl contains boiled eggs, vegetables, and lemon
        if not has_ingredients(bowl):
            achieve_once inside(eggs, bowl)
            achieve_once inside(vegetables, bowl)
            achieve_once inside(lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(bowl:item, food_egg:item, vegetables:item, food_lemon:item):
    body:
        achieve_once inside(food_egg, bowl)
        # Put boiled eggs inside the bowl
        achieve_once inside(vegetables, bowl)
        # Put cut vegetables inside the bowl
        achieve_once inside(food_lemon, bowl)
        # Put lemon pieces inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select boiled egg to put in bowl
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select cut vegetables to put in bowl
        bind food_lemon: item where:
            is_food_lemon(food_lemon)
        # Select cut lemon to put in bowl
        mix_ingredients(bowl, food_egg, vegetables, food_lemon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_ingredients(bowl:item, food_egg:item, vegetables:item, food_lemon:item):
    body:
        achieve_once inside(food_egg, bowl)
        # Put boiled eggs inside the bowl
        achieve_once inside(vegetables, bowl)
        # Put cut vegetables inside the bowl
        achieve_once inside(food_lemon, bowl)
        # Put lemon pieces inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select boiled egg to put in bowl
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select cut vegetables to put in bowl
        bind food_lemon: item where:
            is_food_lemon(food_lemon)
        # Select cut lemon to put in bowl
        mix_ingredients(bowl, food_egg, vegetables, food_lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2072, sink_42)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(bowl_2072, sink_42)
Fail to find bowl_2072 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(bowl_2072, sink_231)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(bowl_2072, sink_231)
Fail to find bowl_2072 around sink_231. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_245)exp(bowl_2072, light_245)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(light_245)
Robot find: wall_clock_249, phone_247, Robot is close to the knife_2050. Robot is close to the light_245. 
##############################
From agent.py
exp(bowl_2072, light_245)
Fail to find bowl_2072 around light_245. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)exp(bowl_2072, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2072 ?
Answer: The target item, bowl_2072, can be found on top of table_226. This table is located inside dining_room_201. Look for a bowl placed directly on the table within the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2072, can be found on top of table_226. This table is located inside dining_room_201. Look for a bowl placed directly on the table within the dining room.

Human Guidance: Put the cut boiled eggs, the cut lemon pieces, and the cut vegetables in a bowl.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: look for food_egg_2020 around kitchen_counter_230.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for food_egg_2020 around cupboard_229.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Grab food_egg_2020.
Action 18: Put food_egg_2020 into pot_2069.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to food_vegetable_2041.
Action 23: Grab food_vegetable_2041.
Action 24: Walk to faucet_43.
Action 25: Switch on faucet_43.
Action 26: Wash food_vegetable_2041.
Action 27: Switch off faucet_43.
Action 28: Walk to cutting_board_2051.
Action 29: Put food_vegetable_2041 on cutting_board_2051.
Action 30: Walk to knife_2050.
Action 31: Grab knife_2050.
Action 32: Walk to food_vegetable_2041.
Action 33: Cut food_vegetable_2041.
Action 34: Walk to sink_42.
Action 35: look for bowl_2072 around sink_42.
Action 36: Walk to sink_231.
Action 37: look for bowl_2072 around sink_231.
Action 38: Walk to light_245.
Action 39: look for bowl_2072 around light_245.
Action 40: Walk to fryingpan_2083.

##############################
From agent.py
exp(bowl_2072, fryingpan_2083)
Fail to find bowl_2072 around fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2072, table_226)
Find bowl_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. bowl_2072 is close food_egg_2020. food_egg_2020 is inside bowl_2072. food_egg_2020 is close bowl_2072. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_vegetable_2041, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. food_vegetable_2041 is inside bowl_2072. food_vegetable_2041 is close bowl_2072. bowl_2072 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_lemon_2028, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. food_lemon_2028 is close bowl_2072. bowl_2072 is close food_lemon_2028. food_lemon_2028 is inside bowl_2072. food_lemon_2028 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(sink_42)', 'walk_executor(sink_231)', 'walk_executor(light_245)', 'walk_executor(fryingpan_2083)', 'walk_executor(table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2072)', 'putin_executor(food_egg_2020, bowl_2072)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(bowl_2072)', 'putin_executor(food_vegetable_2041, bowl_2072)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(bowl_2072)', 'putin_executor(food_lemon_2028, bowl_2072)']
Time info:
Time consume: 567 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 53
goal generate times: 13
goal correct times: 1
action_num: 46

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
