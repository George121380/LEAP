From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.  ', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_bowl_2142_around_cupboard_117(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior boil_vegetables_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot) 
        # The pot needs to have water in it to boil the vegetables
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling the pot

def has_water_pot(pot:item):
    # Function to check if a pot has water inside
    symbol pot_filled=has_water(pot)
    return pot_filled

def is_ready_to_boil(pot:item, stove:item):
    # Check if the pot is ready for boiling
    symbol ready=has_water(pot) and on(pot, stove) and is_on(stove)
    return ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_pot(pot):
            walk_executor(faucet) # Assuming there exists a faucet character can walk to
            switchon_executor(faucet) # Assuming switching the faucet on fills the pot
            # No need to explicitly put the pot inhand or under the faucet as is in hand is assumed by task actions
            achieve has_water(pot) # Ensure the pot has water
            switchoff_executor(faucet) # Turn off the faucet after filling

        if not is_ready_to_boil(pot, stove):
            boil_vegetables_in_pot(pot, stove)
            # Start boiling process if not already ready to boil


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_bowl_2142_around_cupboard_117(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior boil_vegetables_in_pot(pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        # The pot needs to have water in it to boil the vegetables
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling the pot

def has_water_pot(pot:item):
    # Function to check if a pot has water inside
    symbol pot_filled=has_water(pot)
    return pot_filled

def is_ready_to_boil(pot:item, stove:item):
    # Check if the pot is ready for boiling
    symbol ready=has_water(pot) and on(pot, stove) and is_on(stove)
    return ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_water_pot(pot):
            walk_executor(faucet) # Assuming there exists a faucet character can walk to
            switchon_executor(faucet) # Assuming switching the faucet on fills the pot
            # No need to explicitly put the pot inhand or under the faucet as is in hand is assumed by task actions
            achieve has_water(pot) # Ensure the pot has water
            switchoff_executor(faucet) # Turn off the faucet after filling

        if not is_ready_to_boil(pot, stove):
            boil_vegetables_in_pot(pot, stove, faucet)
            # Start boiling process if not already ready to boil

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_vegetables_in_pot(pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        # The pot needs to have water in it to boil the vegetables
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling the pot

def has_water_pot(pot:item):
    # Function to check if a pot has water inside
    symbol pot_filled=has_water(pot)
    return pot_filled

def is_ready_to_boil(pot:item, stove:item):
    # Check if the pot is ready for boiling
    symbol ready=has_water(pot) and on(pot, stove) and is_on(stove)
    return ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_water_pot(pot):
            walk_executor(faucet) # Assuming there exists a faucet character can walk to
            switchon_executor(faucet) # Assuming switching the faucet on fills the pot
            # No need to explicitly put the pot inhand or under the faucet as is in hand is assumed by task actions
            achieve has_water(pot) # Ensure the pot has water
            switchoff_executor(faucet) # Turn off the faucet after filling

        if not is_ready_to_boil(pot, stove):
            boil_vegetables_in_pot(pot, stove, faucet)
            # Start boiling process if not already ready to boil

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchoff_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_bowl_2142_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_119(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_boilable_vegetables(pot: item):
    # Check if there are boileable vegetables in the pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

def available_stove(faucet: item):
    # Check if the stove can be used for boiling
    symbol is_functional=not (id[faucet] == 20)
    return is_functional

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)

        # Check if the pot has boileable vegetables
        if has_boilable_vegetables(pot):
        
            # Check if the stove is available
            if available_stove(stove):
                start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot:item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behaviour boil_water(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not is_filled_with_water(pot)
        
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        
        if exists stove: item : (is_stove(stove)):
            bind stove: item where:
                is_stove(stove)
            boil_water(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Find a stove to boil water")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'behaviour') at line 5287, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#goal_representation
 
def is_filled_with_water(pot:item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_water(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not is_filled_with_water(pot)
        
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        
        if exists stove: item : (is_stove(stove)):
            bind stove: item where:
                is_stove(stove)
            boil_water(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Find a stove to boil water")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_filled_with_water(pot:item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_water(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not is_filled_with_water(pot)
        
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        
        if exists stove: item : (is_stove(stove)):
            bind stove: item where:
                is_stove(stove)
            boil_water(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Find a stove to boil water")

##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the pot is filled with water before boiling. Currently, it is placed on the stove and the stove is on, but there's no indication that the pot was filled with water in the process. After ensuring the pot is filled, the sub-task can be considered complete.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the pot is filled with water before boiling. Currently, it is placed on the stove and the stove is on, but there's no indication that the pot was filled with water in the process. After ensuring the pot is filled, the sub-task can be considered complete.

Trial and Error: You can not switchon faucet_20
The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Switch on faucet_20.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to faucet_20.
Action 6: Walk to pot_78.
Action 7: Grab pot_78.
Action 8: Walk to faucet_20.
Action 9: Switch off faucet_20.
Action 10: Walk to stove_2135.
Action 11: Put pot_78 on stove_2135.
Action 12: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2048_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_pot_78_around_table_114(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
Heres the formal representation for the subtask goal Boil the vegetables in a pot:


def ensure_pot_has_water(pot:item, faucet:item):
    # Function to ensure the pot has water by observing or filling it
    if not has_water(pot):
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)  # The pot on the stove is selected
        bind faucet: item where:
            is_faucet(faucet) and faucet==faucet_20 # Faucet ID specified due to nonfunctional state

        observe(pot, "Check if the pot is empty") # Observe the pot to see if it has water
        if not has_water(pot):
            # If the pot doesnt have water, fill it
            ensure_pot_has_water(pot, faucet)

This output ensures the pot is filled with water if its not already, fulfilling the requirement of checking and potentially filling the pot
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'Heres') at line 5286, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
def ensure_pot_has_water(pot:item, faucet:item):
    # Function to ensure the pot has water by observing or filling it
    if not has_water(pot):
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)  # The pot on the stove is selected
        bind faucet: item where:
            is_faucet(faucet) and faucet==faucet_20 # Faucet ID specified due to nonfunctional state

        observe(pot, "Check if the pot is empty") # Observe the pot to see if it has water
        if not has_water(pot):
            # If the pot doesnt have water, fill it
            ensure_pot_has_water(pot, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_off(faucet) # Turn off the faucet after filling the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)  # The pot on the stove is selected
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20 # Specified faucet ID for selection

        observe(pot, "Check if the pot is empty") # Observe the pot to determine if it has water
        if not has_water(pot):
            # If the pot is empty, fill it using the specified faucet
            fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_cupboard_118(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(measuring_cup,cupboard_instance)
        else:
            exp(measuring_cup,cupboard_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cupboard_instance]=True
        close[cupboard_instance,measuring_cup]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2104_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_pot_78_around_table_114(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        # Bind to find an appropriate pot that is on the stove
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)
        # Check if the pot has water
        if not has_water(pot):
            # If it does not have water, find the closest faucet
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            # Turn on the faucet and fill the pot with water 
            achieve_once has_water(pot)
            # Ensure faucet is turned off afterward
            achieve_once is_off(faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation

behavior __goal__():
    body:
        # Bind to find an appropriate pot that is on the stove
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135 # Define the stove
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Check if the pot has water
        if not has_water(pot):
            # If it does not have water, find the closest faucet
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            # Turn on the faucet and fill the pot with water 
            achieve_once has_water(pot)
            # Ensure faucet is turned off afterward
            achieve_once is_off(faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2138_around_fridge_126(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Check if the pot has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water_in_pot(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior heat_pot(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)
        # Select the pot currently on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove where the pot is placed

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet to fill the pot with water

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water if it is empty

        heat_pot(pot, stove)
        # Heat the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_onion_2104_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#goal_representation
 
def has_water_in_pot(pot: item):
    # Check if the pot has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water_in_pot(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior heat_pot(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot currently on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove where the pot is placed

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet to fill the pot with water

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water if it is empty

        heat_pot(pot, stove)
        # Heat the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_pot_2138_around_fridge_126(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_keyboard_211_around_computer_209(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#goal_representation
 
def has_water_in_pot(pot: item):
    # Check if the pot has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water_in_pot(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior heat_pot(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove where the pot is placed

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet to fill the pot with water

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water if it is empty

        heat_pot(pot, stove)
        # Heat the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables in a pot.  " ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the vegetables.', '2. Fill a pot with water and put it on the stove.', '3. Turn on the stove and put the vegetables inside the pot.', '4. Turn off the stove once the vegetables are boiled.', '5. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2048_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_pot_78_around_table_270(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(obj:item):
    # Check if the object is on the kitchen counter
    symbol on_kitchen_counter = exists counter: item : (is_kitchen_counter(counter) and on(obj, counter) )
    return on_kitchen_counter

behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)
        # Ensure vegetables are washed and clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water inside

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and in_kitchen_counter(pot)

        bind faucet: item where:
            is_faucet(faucet)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_kitchen_counter(obj:item):
    # Check if the object is on the kitchen counter
    symbol on_kitchen_counter = exists counter: item : (is_kitchen_counter(counter) and on(obj, counter) )
    return on_kitchen_counter

behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)
        # Ensure vegetables are washed and clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water inside

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and in_kitchen_counter(pot)

        bind faucet: item where:
            is_faucet(faucet)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_vegetable_2113, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_vegetable_2113, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. pot_2138 is opened. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Grabbing pot_2138 by left hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the faucet_121. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_vegetable_2113. food_vegetable_2113 is close kitchen_counter_119. food_vegetable_2113 is on kitchen_counter_119. food_vegetable_2113 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
          
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
          
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close pot_2138. pot_2138 is close stove_2135. pot_2138 is on stove_2135. pot_2138 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the pot is filled with water by using the faucet while it is turned on. There is no evidence or action taken that shows the pot was actually filled with water before being placed on the stove.
##############################
From agent.py
Human Instruction: Ensure that the pot is filled with water by using the faucet while it is turned on. There is no evidence or action taken that shows the pot was actually filled with water before being placed on the stove.

Trial and Error: You can not switchon faucet_20
The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Switch on faucet_20.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to faucet_20.
Action 6: Walk to pot_78.
Action 7: Grab pot_78.
Action 8: Walk to faucet_20.
Action 9: Switch off faucet_20.
Action 10: Walk to stove_2135.
Action 11: Put pot_78 on stove_2135.
Action 12: Switch on stove_2135.
Action 13: Walk to fridge_126.
Action 14: Switch off fridge_126.
Action 15: Open fridge_126.
Action 16: look for food_vegetable_2113 around fridge_126.
Action 17: Grab food_vegetable_2113.
Action 18: Walk to faucet_20.
Action 19: Switch on faucet_20.
Action 20: Wash food_vegetable_2113.
Action 21: Switch off faucet_20.
Action 22: Walk to pot_2138.
Action 23: Open pot_2138.
Action 24: Grab pot_2138.
Action 25: Walk to faucet_121.
Action 26: Walk to kitchen_counter_119.
Action 27: Put food_vegetable_2113 on kitchen_counter_119.
Action 28: Switch on faucet_121.
Action 29: Switch off faucet_121.
Action 30: Walk to faucet_20.
Action 31: Switch on faucet_20.
Action 32: Walk to stove_2135.
Action 33: Put pot_2138 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot: item, faucet: item, stove: item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and has_switch(faucet)
        # Select a faucet with a switch

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot) and recipient(pot)
        # Select a pot that can hold water

        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)

        bind faucet: item where:
            is_faucet(faucet) and not is_off(faucet)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)

        bind faucet: item where:
            is_faucet(faucet) and not is_off(faucet)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_78. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water using the faucet before being placed on the stove. There's no evidence or action confirming that either pot_78 or pot_2138 was filled with water.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water using the faucet before being placed on the stove. There's no evidence or action confirming that either pot_78 or pot_2138 was filled with water.

Trial and Error: You can not switchon faucet_20
The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Switch on faucet_20.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to faucet_20.
Action 6: Walk to pot_78.
Action 7: Grab pot_78.
Action 8: Walk to faucet_20.
Action 9: Switch off faucet_20.
Action 10: Walk to stove_2135.
Action 11: Put pot_78 on stove_2135.
Action 12: Switch on stove_2135.
Action 13: Walk to fridge_126.
Action 14: Switch off fridge_126.
Action 15: Open fridge_126.
Action 16: look for food_vegetable_2113 around fridge_126.
Action 17: Grab food_vegetable_2113.
Action 18: Walk to faucet_20.
Action 19: Switch on faucet_20.
Action 20: Wash food_vegetable_2113.
Action 21: Switch off faucet_20.
Action 22: Walk to pot_2138.
Action 23: Open pot_2138.
Action 24: Grab pot_2138.
Action 25: Walk to faucet_121.
Action 26: Walk to kitchen_counter_119.
Action 27: Put food_vegetable_2113 on kitchen_counter_119.
Action 28: Switch on faucet_121.
Action 29: Switch off faucet_121.
Action 30: Walk to faucet_20.
Action 31: Switch on faucet_20.
Action 32: Walk to stove_2135.
Action 33: Put pot_2138 on stove_2135.
Action 34: Walk to pot_78.
Action 35: Grab pot_78.
Action 36: Walk to faucet_20.
Action 37: Switch off faucet_20.
Action 38: Walk to stove_2135.
Action 39: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_pot_for_water(pot:item):
    body:
        observe(pot,"Check if the pot has water")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==121
        # Select faucet with ID 121
        
        if not has_water(pot):
            # Confirm the pot doesnt have water, either via previous states or by direct observation
            if not visited(pot):
                observe_pot_for_water(pot)
            achieve_once has_water(pot)
                
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_pot_for_water(pot:item):
    body:
        observe(pot,"Check if the pot has water")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==121
        # Select faucet with ID 121
        
        if not has_water(pot):
            # Confirm the pot doesnt have water, either via previous states or by direct observation
            if not visited(pot):
                observe_pot_for_water(pot)
            achieve_once has_water(pot)
                
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)


##############################
From agent.py-> find a plan in act()
obs(pot_78, Check if the pot has water)grab_executor(pot_78)walk_executor(faucet_121)switchon_executor(faucet_121)switchoff_executor(faucet_121)switchon_executor(faucet_121)
##############################
From agent.py
obs(pot_78, Check if the pot has water)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the faucet_121. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the faucet_121. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the faucet_121. faucet_121 is turned off. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the faucet_121. faucet_121 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before placing it on the stove. There is no evidence or action confirming that pot_78 was filled with water. You should ensure the pot is filled with water using the faucet.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_window_2156(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==2156
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(pot,window_instance)
        else:
            exp(pot,window_instance)
    eff:
        unknown[pot]=False
        close[pot,window_instance]=True
        close[window_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
# Define behavior to open the stove and put vegetables inside the pot
behavior turn_on_stove_and_add_vegetables(stove: item, vegetables: item, pot: item):
    body:
        achieve_once is_on(stove)
        achieve_once inside(vegetables, pot)

# Define the goal behavior
behavior __goal__():
    body:
        # Bind the instances that are needed
        bind stove: item where:
            is_stove(stove) and has_switch(stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and on(pot, stove)

        # Execute the behavior to turn on the stove and add vegetables inside the pot
        turn_on_stove_and_add_vegetables(stove, vegetables, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2138_around_table_114(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

behavior find_food_carrot_2086_around_drawing_33(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==33
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(food_carrot,drawing_instance)
        else:
            exp(food_carrot,drawing_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,drawing_instance]=True
        close[drawing_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove_and_add_vegetables(stove:item, pot:item, vegetable:item):
    body:
        achieve_once is_on(stove) # Turn on the stove
        achieve_once inside(vegetable, pot) # Put the vegetables in the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pot: item where:
            is_pot(pot) and on(pot, stove)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and close(vegetable, pot)

        turn_on_stove_and_add_vegetables(stove, pot, vegetable)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_pot_to_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        move_pot_to_stove(pot, stove)
        put_vegetables_in_pot(vegetables, pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_pot_to_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        move_pot_to_stove(pot, stove)
        put_vegetables_in_pot(vegetables, pot)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)put_executor(pot_78, stove_2135)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. pot_78 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Bind to the stove that is currently on
        turn_off_stove(stove)
        # Turn off the stove after the vegetables are boiled

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Bind to the stove that is currently on
        turn_off_stove(stove)
        # Turn off the stove after the vegetables are boiled

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2135)
##############################
From agent.py
switchoff_executor(stove_2135)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. stove_2135 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and (id[pot]==78 or id[pot]==2138)
        # Select one of the pots that was used
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==126
        # Select fridge with ID 126

        achieve_once inside(pot, fridge)
        # Place the entire pot inside the fridge

        achieve_once closed(fridge)
        # Ensure the fridge door is closed after storing the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and (id[pot]==78 or id[pot]==2138)
        # Select one of the pots that was used
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==126
        # Select fridge with ID 126

        achieve_once inside(pot, fridge)
        # Place the entire pot inside the fridge

        achieve_once closed(fridge)
        # Ensure the fridge door is closed after storing the pot

##############################
From agent.py-> find a plan in act()
grab_executor(pot_78)walk_executor(fridge_126)putin_executor(pot_78, fridge_126)close_executor(fridge_126)
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
putin_executor(pot_78, fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close fridge_126. fridge_126 is close pot_78. pot_78 is inside fridge_126. pot_78 released by right hand. 
##############################
From agent.py
close_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'walk_executor(cupboard_117)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20) (Failed)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(faucet_121)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_vegetable_2113, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_2138, stove_2135)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'switchon_executor(faucet_121)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'switchoff_executor(stove_2135)', 'grab_executor(pot_78)', 'walk_executor(fridge_126)', 'putin_executor(pot_78, fridge_126)', 'close_executor(fridge_126)']
Time info:
Time consume: 741 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 45
goal generate times: 16
goal correct times: 4
action_num: 54

Task complete rate:
Keystate: k1 - Requires: 5 steps
Keystate: k2 - Requires: 9 steps
Keystate: k3 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
