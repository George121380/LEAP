From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl on the table in the home office.', '3. Find the cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
def has_a_bowl():
    # Function to check if there is a bowl available
    symbol has_bowl=exists b: item : is_bowl(b)
    return has_bowl

behavior __goal__():
    body:
        if has_a_bowl():
            bind bowl: item where: 
                is_bowl(bowl)
            # Ensure the bowl is filled with water
            achieve has_water(bowl)

        else:
            # Search for a bowl to fill with water
            foreach potential_bowl: item:
                if is_bowl(potential_bowl) and not visited(potential_bowl):
                    observe(potential_bowl, "Check if it is a suitable bowl and fill it with water if possible")
#goal_representation_end

##############################
From agent.py->reset_goal
def has_a_bowl():
    # Function to check if there is a bowl available
    symbol has_bowl=exists b: item : is_bowl(b)
    return has_bowl

behavior __goal__():
    body:
        if has_a_bowl():
            bind bowl: item where: 
                is_bowl(bowl)
            # Ensure the bowl is filled with water
            achieve has_water(bowl)

        else:
            # Search for a bowl to fill with water
            foreach potential_bowl: item:
                if is_bowl(potential_bowl) and not visited(potential_bowl):
                    observe(potential_bowl, "Check if it is a suitable bowl and fill it with water if possible")
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Fail to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(bowl_2095, kitchen_counter_132)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_132)
Fail to find bowl_2095 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2095, kitchen_counter_129)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_129)
Fail to find bowl_2095 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2095, kitchen_counter_128)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_128)
Fail to find bowl_2095 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2095, sink_133)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: Robot, go to dining_room_1. Locate table_123 within the room. You will find bowl_2095 placed on top of table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, go to dining_room_1. Locate table_123 within the room. You will find bowl_2095 placed on top of table_123.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: look for bowl_2095 around kitchen_counter_128.
Action 12: Walk to sink_133.

##############################
From agent.py
exp(bowl_2095, sink_133)
Fail to find bowl_2095 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill bowl_2095 with water. Currently, you have only walked to the faucet_134 and turned it off, but have not filled the bowl with water.
##############################
From agent.py
Human Instruction: You need to fill bowl_2095 with water. Currently, you have only walked to the faucet_134 and turned it off, but have not filled the bowl with water.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: look for bowl_2095 around kitchen_counter_128.
Action 12: Walk to sink_133.
Action 13: look for bowl_2095 around sink_133.
Action 14: Walk to table_123.
Action 15: look for bowl_2095 around table_123.
Action 16: Walk to bowl_2095.
Action 17: Grab bowl_2095.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cutting_board_2080(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select bowl with ID 2095
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        
        fill_bowl_with_water(bowl, faucet)
        # Fill the selected bowl with water from the selected faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select bowl with ID 2095
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        
        fill_bowl_with_water(bowl, faucet)
        # Fill the selected bowl with water from the selected faucet

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the bowl (bowl_2095) with water from a faucet (faucet_134).
##############################
From agent.py
Human Instruction: You need to fill the bowl (bowl_2095) with water from a faucet (faucet_134).

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: look for bowl_2095 around kitchen_counter_128.
Action 12: Walk to sink_133.
Action 13: look for bowl_2095 around sink_133.
Action 14: Walk to table_123.
Action 15: look for bowl_2095 around table_123.
Action 16: Walk to bowl_2095.
Action 17: Grab bowl_2095.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to faucet_308.
Action 21: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        fill_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        fill_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill bowl_2095 with water from faucet_134. You have successfully found and grabbed the bowl, but you switched on and off faucet_308 instead of filling the bowl with water. Please proceed to use faucet_134 to fill the bowl with water.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_home_office_161(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(crayon,home_office_instance)
        else:
            exp(crayon,home_office_instance)
    eff:
        unknown[crayon]=False
        close[crayon,home_office_instance]=True
        close[home_office_instance,crayon]=True
    

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Bind to the table located in the home office

        bind bowl: item where:
            is_bowl(bowl)
        # Bind to the bowl

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_cup_2006_around_table_193(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)

        bind bowl: item where:
            is_bowl(bowl)

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)

        bind bowl: item where:
            is_bowl(bowl)

        place_bowl_on_table(bowl, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_ceilinglamp_357(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==357
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(bowl,ceilinglamp_instance)
        else:
            exp(bowl,ceilinglamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ceilinglamp_instance]=True
        close[ceilinglamp_instance,bowl]=True
    

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Bind the bowl instance with the identified ID
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Bind the table instance in the home office
        place_bowl_on_table(bowl, table)
        # Call the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2030_around_drawing_118(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==118
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2095_around_ceilinglamp_357(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==357
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(bowl,ceilinglamp_instance)
        else:
            exp(bowl,ceilinglamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ceilinglamp_instance]=True
        close[ceilinglamp_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Bind the bowl instance with the identified ID
        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Bind the table instance in the home office
        place_bowl_on_table(bowl, table)
        # Call the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5860, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2096_around_desk_261(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Bind the bowl instance with the identified ID
        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Bind the table instance in the home office
        place_bowl_on_table(bowl, table)
        # Call the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Ensure the bowl filled with water is placed on the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Ensure the bowl filled with water is placed on the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_47_around_mouse_2003(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2003
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#exp_behavior_end

#goal_representation


behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind bowl: item where:
            id[bowl] == 2095 and has_water(bowl)
        place_bowl_on_table(bowl, table)
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        bind bowl: item where:
            id[bowl] == 2095 and has_water(bowl)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2097_around_desk_261(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind bowl: item where:
            id[bowl] == 2095 and has_water(bowl)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind bowl: item where:
            id[bowl] == 2095 and has_water(bowl)
        place_bowl_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the bowl_2095. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2095, table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. table_193 is close bowl_2095. bowl_2095 is close table_193. bowl_2095 is on table_193. bowl_2095 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the bowl (bowl_2095) on the table in the home office, which has not been done yet. Additionally, ensure that the bowl is filled with water, as it currently lacks this attribute.
##############################
From agent.py
Human Instruction: You need to place the bowl (bowl_2095) on the table in the home office, which has not been done yet. Additionally, ensure that the bowl is filled with water, as it currently lacks this attribute.

Human Guidance: Put the bowl on the table in the home office.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_129.
Action 9: look for bowl_2095 around kitchen_counter_129.
Action 10: Walk to kitchen_counter_128.
Action 11: look for bowl_2095 around kitchen_counter_128.
Action 12: Walk to sink_133.
Action 13: look for bowl_2095 around sink_133.
Action 14: Walk to table_123.
Action 15: look for bowl_2095 around table_123.
Action 16: Walk to bowl_2095.
Action 17: Grab bowl_2095.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to faucet_308.
Action 21: Switch off faucet_308.
Action 22: Switch on faucet_308.
Action 23: Switch off faucet_308.
Action 24: Walk to table_193.
Action 25: Put bowl_2095 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_desk_261(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the specific bowl with ID 2095
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_cutting_board_2080(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the specific bowl with ID 2095
        bind table: item where:
            is_table(table) and inside(table, home_office_217)
        # Select the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_217; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2020_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_tray_142_around_home_office_161(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(tray,home_office_instance)
        else:
            exp(tray,home_office_instance)
    eff:
        unknown[tray]=False
        close[tray,home_office_instance]=True
        close[home_office_instance,tray]=True
    

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) 

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095

        bind table: item where:
            is_table(table)
            exist home_office: item : (is_home_office(home_office) and inside(table, home_office))
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bowl_2096_around_drawing_296(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(bowl,drawing_instance)
        else:
            exp(bowl,drawing_instance)
    eff:
        unknown[bowl]=False
        close[bowl,drawing_instance]=True
        close[drawing_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table) 

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        place_bowl_on_table(bowl, home_office_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        place_bowl_on_table(bowl, home_office_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office: item where:
            is_home_office(home_office)
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        place_bowl_on_table(bowl, home_office_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_tray_142_around_home_office_161(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(tray,home_office_instance)
        else:
            exp(tray,home_office_instance)
    eff:
        unknown[tray]=False
        close[tray,home_office_instance]=True
        close[home_office_instance,tray]=True
    

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        bind table: item where:
            is_table(table) and inside(table, is_home_office) and surfaces(table)
        # Select the table inside the home office with a surface
        
        place_bowl_on_table(bowl, table)
        # Place the bowl with water onto the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: is_home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        bind table: item where:
            is_table(table) and inside(table, inside_char(char, is_home_office)) and surfaces(table)
        # Ensure the use of a valid expression for inside() 
        # Select the table with surfaces() in the home office 
            
        place_bowl_on_table(bowl, table)
        # Place the bowl with water onto the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: is_home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2030_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        bind table: item where:
            is_table(table) and inside(table, home_office) and surfaces(table)
        # Ensure the table is within the home office and has a surface 
            
        place_bowl_on_table(bowl, table)
        # Place the bowl with water onto the table in the home office

symbol home_office = exists x:item : (is_home_office(x))

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_pot_2093(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_desk_375(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5871, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2033_around_home_office_161(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(check,home_office_instance)
        else:
            exp(check,home_office_instance)
    eff:
        unknown[check]=False
        close[check,home_office_instance]=True
        close[home_office_instance,check]=True
    

behavior find_bowl_2096_around_cutting_board_2080(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select the bowl with ID 2095

        bind table: item where:
            is_table(table) and id[table]==193
        # Select the table with ID 193, representing the table in the home office
        
        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2096_around_light_258(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==258
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(bowl,light_instance)
        else:
            exp(bowl,light_instance)
    eff:
        unknown[bowl]=False
        close[bowl,light_instance]=True
        close[light_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table


behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select bowl with ID 2095

        bind table: item where:
            is_table(table) 
        # Select a table

        place_bowl_on_table(bowl, table)
        # Place the bowl on the selected table
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2097_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table located in the home office
        
        bind bowl: item where:
            id[bowl] == 2095
        # Select bowl_2095
        
        place_bowl_on_table(bowl, table)
        # Place the specific bowl on the home office table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_bookshelf_188(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office where the table should be located

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table located in the home office
        
        bind bowl: item where:
            id[bowl] == 2095
        # Select bowl_2095
        
        place_bowl_on_table(bowl, table)
        # Place the specific bowl on the home office table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure it is declared

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure it is declared

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_bookshelf_188(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, is_home_office(home_office_table))
        # Select the table located in the home office

        bind water_filled_bowl: item where:
            is_bowl(water_filled_bowl) and has_water(water_filled_bowl)
        # Select the bowl filled with water

        place_bowl_on_table(water_filled_bowl, home_office_table)
        # Place the waterfilled bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::home_office_table, is_home_office(V::home_office_table)
Argument #1 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_desk_261(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office) # Corrected condition
        # Select the table located in the home office

        bind water_filled_bowl: item where:
            is_bowl(water_filled_bowl) and has_water(water_filled_bowl)
        # Select the bowl filled with water

        place_bowl_on_table(water_filled_bowl, home_office_table)
        # Place the waterfilled bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2030_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_bowl_2097_around_cutting_board_2080(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select the table located in the home office

        bind water_filled_bowl: item where:
            is_bowl(water_filled_bowl) and has_water(water_filled_bowl)
        # Select the bowl filled with water

        place_bowl_on_table(water_filled_bowl, home_office_table)
        # Place the waterfilled bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior move_bowl_to_home_office(bowl:item, home_office:item):
    body:
        achieve_once inside(bowl, home_office)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        move_bowl_to_home_office(bowl, home_office)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2030_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2097_around_ironing_board_2099(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(bowl,ironing_board_instance)
        else:
            exp(bowl,ironing_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ironing_board_instance]=True
        close[ironing_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select the bowl with ID 2095

        bind table: item where:
            is_table(table) and is_home_office(inside_char(char, table))
        # Select the table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying is_home_office[observation, state](x: item).
  Arguments: inside_char(O::char, V::table)
Argument #0 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2095_around_bookshelf_188(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select the bowl with ID 2095

        bind table: item where:
            is_table(table) and is_home_office(table) and surfaces(table)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_cup_2006_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl has water
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select bowl_2095

        bind home_office: item where:
            is_home_office(home_office)
        # Select home_office

        foreach table: item:
            if is_table(table) and inside(table, home_office):
                place_bowl_on_table(bowl, table)
                # Place the bowl on a table in the home office
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_ironing_board_2099(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(bowl,ironing_board_instance)
        else:
            exp(bowl,ironing_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ironing_board_instance]=True
        close[ironing_board_instance,bowl]=True
    

behavior find_tape_2028_around_home_office_161(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(tape,home_office_instance)
        else:
            exp(tape,home_office_instance)
    eff:
        unknown[tape]=False
        close[tape,home_office_instance]=True
        close[home_office_instance,tape]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        bind table: item where:
            is_table(table) and is_home_office(inside(table))
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 1 vs 2. Args: (VariableExpression<V::table>,), Types: (ObjectType<item>, ObjectType<item>)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        bind table: item where:
            is_table(table) and is_home_office(inside(table))
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 1 vs 2. Args: (VariableExpression<V::table>,), Types: (ObjectType<item>, ObjectType<item>)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        bind table: item where:
            is_table(table) and inside(table, home_office)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_bench_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        achieve on(bowl, table)
        # Place the bowl with water on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_bookshelf_137(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, h_office) and is_home_office(h_office)
        # Select a table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        achieve on(bowl, table)
        # Place the bowl with water on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: h_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind h_office: item where:
            is_home_office(h_office)
        bind table: item where:
            is_table(table) and inside(table, h_office)
        # Select a table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        achieve on(bowl, table)
        # Place the bowl with water on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2096_around_bookshelf_188(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def inside_home_office(x: item):
    # Function to check if the item is inside the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(x, room))
    return in_home_office

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside_home_office(table)
        # Select a table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select bowl_2095 that is filled with water

        achieve on(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(table: item):
    # Function to check if a table is inside the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select bowl with ID 2095
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table inside the home office
        
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2030_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select bowl_2095

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_crayon_2030_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2095_around_drawing_196(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(bowl,drawing_instance)
        else:
            exp(bowl,drawing_instance)
    eff:
        unknown[bowl]=False
        close[bowl,drawing_instance]=True
        close[drawing_instance,bowl]=True
    

behavior find_cup_2006_around_door_38(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==38
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(cup,door_instance)
        else:
            exp(cup,door_instance)
    eff:
        unknown[cup]=False
        close[cup,door_instance]=True
        close[door_instance,cup]=True
    

#goal_representation
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select bowl_2095

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # Select the bowl filled with water

        bind table: item where:
            is_table(table) and inside(table, home_office) # Select a table in the home office

        place_bowl_on_table(bowl, table) # Execute the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_crayon_2030_around_drawing_196(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==196
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # Select the bowl filled with water

        bind table: item where:
            is_table(table) and inside(table, home_office) # Select a table in the home office

        bind home_office: item where:
            is_home_office(home_office) # Define the home office instance

        place_bowl_on_table(bowl, table) # Execute the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_bench_124(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

behavior find_cup_2089_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # Select the bowl filled with water

        bind home_office: item where:
            is_home_office(home_office) # Define the home office instance

        bind table: item where:
            is_table(table) and inside(table, home_office) # Select a table in the home office

        place_bowl_on_table(bowl, table) # Execute the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Prepare a bowl of water and put the bowl on the table in home office. Then find my cat put it on the table.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_129)', 'walk_executor(kitchen_counter_128)', 'walk_executor(sink_133)', 'walk_executor(table_123)', 'walk_executor(bowl_2095)', 'grab_executor(bowl_2095)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(table_193)', 'put_executor(bowl_2095, table_193)']
Time info:
Time consume: 1857 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 124
goal generate times: 25
goal correct times: 10
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
