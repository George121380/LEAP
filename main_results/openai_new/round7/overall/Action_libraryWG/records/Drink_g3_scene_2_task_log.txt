From agent.py
Reset goals: The sub-goals are: 
['1. Get a cup and fill it with water.', '2. Find a kiwi, slice it, and add the slices to the cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is near the faucet
        achieve_once inside(char, faucet) 
        # Ensure the character is at the faucet to fill the water
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: O::char, V::faucet
Argument #0 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_dress_2075_around_dresser_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is near the faucet
        achieve_once close_char(char, cup) 
        # Ensure the character is near the cup to fill it with water
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is near the faucet
        achieve_once close_char(char, cup) 
        # Ensure the character is near the cup to fill it with water
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(bench_122)exp(cup_2087, bench_122)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(bench_122)
Robot find: mat_114, Robot is close to the bench_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Robot, please navigate to dining_room_1. Once inside, locate table_123. The target item, cup_2087, is on top of table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please navigate to dining_room_1. Once inside, locate table_123. The target item, cup_2087, is on top of table_123.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to cupboard_131.
Action 3: Open cupboard_131.
Action 4: look for cup_2087 around cupboard_131.
Action 5: Walk to faucet_134.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to faucet_134.
Action 9: Walk to kitchen_counter_129.
Action 10: look for cup_2087 around kitchen_counter_129.
Action 11: Walk to faucet_134.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to faucet_134.
Action 15: Walk to sink_133.
Action 16: look for cup_2087 around sink_133.
Action 17: Walk to faucet_134.
Action 18: Walk to bench_122.

##############################
From agent.py
exp(cup_2087, bench_122)
Fail to find cup_2087 around bench_122. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with water.', '2. Slice a kiwi and add the slices to the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_cup_2088_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_cup_found():
    # Function to check if cup_2087 has been found or not
    symbol target_cup_found = exists cup: item : (is_cup(cup) and id[cup] == 2087 and visited(cup))
    return target_cup_found

behavior get_cup_with_water(cup:item):
    body:
        achieve close_char(char, cup) # Approach the cup to fill with water
        achieve has_water(cup) # Fill the cup with water

behavior __goal__():
    body:
        bind room: item where:
            is_dining_room(room) and id[room] == 1
        # Identify dining_room_1

        bind table: item where:
            is_table(table) and id[table] == 123
        # Identify table_123 in the dining room

        if is_target_cup_found():
            # If cup_2087 is found, proceed to fill it with water
            bind cup: item where:
                is_cup(cup) and id[cup] == 2087
            get_cup_with_water(cup)

        else:
            # Otherwise, search for cup_2087 on table_123
            observe(table, "Check if cup_2087 is on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_target_cup_found():
    # Function to check if cup_2087 has been found or not
    symbol target_cup_found = exists cup: item : (is_cup(cup) and id[cup] == 2087 and visited(cup))
    return target_cup_found

behavior get_cup_with_water(cup:item):
    body:
        achieve close_char(char, cup) # Approach the cup to fill with water
        achieve has_water(cup) # Fill the cup with water

behavior __goal__():
    body:
        bind room: item where:
            is_dining_room(room) and id[room] == 1
        # Identify dining_room_1

        bind table: item where:
            is_table(table) and id[table] == 123
        # Identify table_123 in the dining room

        if is_target_cup_found():
            # If cup_2087 is found, proceed to fill it with water
            bind cup: item where:
                is_cup(cup) and id[cup] == 2087
            get_cup_with_water(cup)

        else:
            # Otherwise, search for cup_2087 on table_123
            observe(table, "Check if cup_2087 is on the table")

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Check if cup_2087 is on the table)
##############################
From agent.py
walk_executor(table_123)
Robot find: homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
obs(table_123, Check if cup_2087 is on the table)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill cup_2087 with water, as you have only located the cup on table_123 but have not yet filled it with water.
##############################
From agent.py
Human Instruction: You need to fill cup_2087 with water, as you have only located the cup on table_123 but have not yet filled it with water.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to cupboard_131.
Action 3: Open cupboard_131.
Action 4: look for cup_2087 around cupboard_131.
Action 5: Walk to faucet_134.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to faucet_134.
Action 9: Walk to kitchen_counter_129.
Action 10: look for cup_2087 around kitchen_counter_129.
Action 11: Walk to faucet_134.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to faucet_134.
Action 15: Walk to sink_133.
Action 16: look for cup_2087 around sink_133.
Action 17: Walk to faucet_134.
Action 18: Walk to bench_122.
Action 19: look for cup_2087 around bench_122.
Action 20: Walk to table_123.
Action 21: Observe around table_123 with the question of Check if cup_2087 is on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve once has_water(cup) # Fill the cup with water

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        bind table: item where:
            is_table(table) and id[table]==123
        # Select the table with ID 123
        
        bind cup: item where:
            is_cup(cup) and on(cup, table) 
        # Select cup that is on the table_123
        
        fill_with_water(cup, faucet) # Perform the action of filling the cup with water

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'has_water') at line 5847, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        bind table: item where:
            is_table(table) and id[table]==123
        # Select the table with ID 123
        
        bind cup: item where:
            is_cup(cup) and on(cup, table) 
        # Select cup that is on the table_123
        
        fill_with_water(cup, faucet) # Perform the action of filling the cup with water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup) # Fill the cup with water

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        bind table: item where:
            is_table(table) and id[table]==123
        # Select the table with ID 123
        
        bind cup: item where:
            is_cup(cup) and on(cup, table) 
        # Select cup that is on the table_123
        
        fill_with_water(cup, faucet) # Perform the action of filling the cup with water

##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have found and grabbed cup_2087, but you have not yet filled it with water. Use the faucet to fill the cup with water to complete the sub-task.
##############################
From agent.py
Human Instruction: You have found and grabbed cup_2087, but you have not yet filled it with water. Use the faucet to fill the cup with water to complete the sub-task.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to cupboard_131.
Action 3: Open cupboard_131.
Action 4: look for cup_2087 around cupboard_131.
Action 5: Walk to faucet_134.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to faucet_134.
Action 9: Walk to kitchen_counter_129.
Action 10: look for cup_2087 around kitchen_counter_129.
Action 11: Walk to faucet_134.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to faucet_134.
Action 15: Walk to sink_133.
Action 16: look for cup_2087 around sink_133.
Action 17: Walk to faucet_134.
Action 18: Walk to bench_122.
Action 19: look for cup_2087 around bench_122.
Action 20: Walk to table_123.
Action 21: Observe around table_123 with the question of Check if cup_2087 is on the table.
Action 22: Walk to cup_2087.
Action 23: Grab cup_2087.
Action 24: Walk to faucet_134.
Action 25: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        fill_cup_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the cup_2087. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the cup_2087. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have found and grabbed cup_2087, but you have not yet filled it with water. Use the faucet to fill the cup with water to complete the sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior add_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inhand(kiwi)
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cuttable(kiwi)
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        
        slice_kiwi(kiwi) 
        add_kiwi_to_cup(kiwi, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2089_around_cutting_board_2080(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(cup,cutting_board_instance)
        else:
            exp(cup,cutting_board_instance)
    eff:
        unknown[cup]=False
        close[cup,cutting_board_instance]=True
        close[cutting_board_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, knife:item, cup:item):
    body:
        achieve_once cut(kiwi)
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        bind knife: item where:
            is_knife(knife)
        slice_kiwi_and_add_to_cup(kiwi, knife, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_and_add_kiwi(kiwi:item, cup:item):
    body:
        achieve_once cut(kiwi)
        # Slice the kiwi
        achieve_once inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        bind cup: item where:
            id[cup] == 2087
        # Select the cup with ID 2087
        slice_and_add_kiwi(kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_and_add_kiwi(kiwi:item, cup:item):
    body:
        achieve_once cut(kiwi)
        # Slice the kiwi
        achieve_once inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        bind cup: item where:
            id[cup] == 2087
        # Select the cup with ID 2087
        slice_and_add_kiwi(kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_kiwi_2060, fridge_140)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cutting_board_2080)put_executor(food_kiwi_2060, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the cup_2087. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the cup_2087. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the cup_2087. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_kiwi_2060, fridge_140)
Find food_kiwi_2060. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_kiwi_2060)walk_executor(cutting_board_2080)put_executor(food_kiwi_2060, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
grab_executor(food_kiwi_2060)
Robot find: Robot is close to the cup_2087. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_kiwi_2060 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cup_2087. Robot is close to the food_kiwi_2060. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_kiwi_2060, cutting_board_2080)
Robot find: Robot is close to the cup_2087. Robot is close to the food_kiwi_2060. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_kiwi_2060 is close cutting_board_2080. cutting_board_2080 is close food_kiwi_2060. food_kiwi_2060 is on cutting_board_2080. food_kiwi_2060 released by left hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the cup_2087. Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_359)exp(knife_2036, tablelamp_359)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(tablelamp_359)
Robot find: pillow_370, drawing_389, coin_2004, mat_386, pillow_368, drawing_388, Robot is close to the cup_2087. Robot is close to the nightstand_373. Robot is close to the tablelamp_359. 
##############################
From agent.py
exp(knife_2036, tablelamp_359)
Fail to find knife_2036 around tablelamp_359. 
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_139)exp(knife_2036, stovefan_139)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(stovefan_139)
Robot find: Robot is close to the cup_2087. Robot is close to the stovefan_139. 
##############################
From agent.py
exp(knife_2036, stovefan_139)
Fail to find knife_2036 around stovefan_139. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)open_executor(toilet_302)exp(knife_2036, toilet_302)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(toilet_302)
Robot find: toilet_paper_2118, Robot is close to the cup_2087. Robot is close to the toilet_302. 
##############################
From agent.py
open_executor(toilet_302)
Robot find: Robot is close to the cup_2087. Robot is close to the toilet_302. toilet_302 is opened. 
##############################
From agent.py
exp(knife_2036, toilet_302)
Fail to find knife_2036 around toilet_302. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(knife_2036, bathroom_cabinet_305)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Robot find: Robot is close to the cup_2087. Robot is close to the bathroom_cabinet_305. 
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot find: soap_2038, Robot is close to the cup_2087. Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. bathroom_cabinet_305 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Find knife_2036 inside dishwasher_143, which is located in dining_room_1.
Re-decompose: None

##############################
From agent.py
Human Instruction: You have found and grabbed cup_2087, but you have not yet filled it with water. Use the faucet to fill the cup with water to complete the sub-task.
Find knife_2036 inside dishwasher_143, which is located in dining_room_1.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to cupboard_131.
Action 3: Open cupboard_131.
Action 4: look for cup_2087 around cupboard_131.
Action 5: Walk to faucet_134.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to faucet_134.
Action 9: Walk to kitchen_counter_129.
Action 10: look for cup_2087 around kitchen_counter_129.
Action 11: Walk to faucet_134.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to faucet_134.
Action 15: Walk to sink_133.
Action 16: look for cup_2087 around sink_133.
Action 17: Walk to faucet_134.
Action 18: Walk to bench_122.
Action 19: look for cup_2087 around bench_122.
Action 20: Walk to table_123.
Action 21: Observe around table_123 with the question of Check if cup_2087 is on the table.
Action 22: Walk to cup_2087.
Action 23: Grab cup_2087.
Action 24: Walk to faucet_134.
Action 25: Switch off faucet_134.
Action 26: Walk to faucet_308.
Action 27: Switch off faucet_308.
Action 28: Walk to fridge_140.
Action 29: Switch off fridge_140.
Action 30: Open fridge_140.
Action 31: look for food_kiwi_2060 around fridge_140.
Action 32: Grab food_kiwi_2060.
Action 33: Walk to cutting_board_2080.
Action 34: Put food_kiwi_2060 on cutting_board_2080.
Action 35: Walk to knifeblock_52.
Action 36: look for knife_2036 around knifeblock_52.
Action 37: Walk to tablelamp_359.
Action 38: look for knife_2036 around tablelamp_359.
Action 39: Walk to stovefan_139.
Action 40: look for knife_2036 around stovefan_139.
Action 41: Walk to toilet_302.
Action 42: Open toilet_302.
Action 43: look for knife_2036 around toilet_302.
Action 44: Walk to bathroom_cabinet_305.
Action 45: Open bathroom_cabinet_305.

##############################
From agent.py
exp(knife_2036, bathroom_cabinet_305)
Fail to find knife_2036 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the cup_2087. Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2060)
Robot find: Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_kiwi_2060. 
##############################
From agent.py
cut_executor(food_kiwi_2060)
Robot find: Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_kiwi_2060. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, knife:item, cup:item):
    body:
        achieve_once cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add kiwi slices to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) # Select the kiwi
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2036 # Select the knife with ID 2036

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087 # Select the cup with ID 2087

        slice_kiwi_and_add_to_cup(food_kiwi, knife, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, knife:item, cup:item):
    body:
        achieve_once cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add kiwi slices to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) # Select the kiwi
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2036 # Select the knife with ID 2036

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087 # Select the cup with ID 2087

        slice_kiwi_and_add_to_cup(food_kiwi, knife, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)put_executor(cup_2087, kitchen_counter_128)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(cup_2087, kitchen_counter_128)
Robot find: Robot is close to the cup_2087. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. kitchen_counter_128 is close cup_2087. cup_2087 is close kitchen_counter_128. cup_2087 is on kitchen_counter_128. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(food_kiwi_2060)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_kiwi_2060. 
##############################
From agent.py
grab_executor(food_kiwi_2060)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_kiwi_2060. Grabbing food_kiwi_2060 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the knife_2036. Robot is close to the food_kiwi_2060. Robot is close to the kitchen_counter_128. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(food_kiwi_2060, cup_2087)
Robot find: Robot is close to the knife_2036. Robot is close to the food_kiwi_2060. Robot is close to the kitchen_counter_128. Robot is close to the cup_2087. food_kiwi_2060 is close cup_2087. food_kiwi_2060 is inside cup_2087. cup_2087 is close food_kiwi_2060. food_kiwi_2060 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(faucet_134)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(faucet_134)', 'walk_executor(cupboard_130)', 'walk_executor(faucet_134)', 'walk_executor(kitchen_counter_129)', 'walk_executor(faucet_134)', 'walk_executor(kitchen_counter_128)', 'walk_executor(faucet_134)', 'walk_executor(sink_133)', 'walk_executor(faucet_134)', 'walk_executor(bench_122)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_kiwi_2060)', 'walk_executor(cutting_board_2080)', 'put_executor(food_kiwi_2060, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(tablelamp_359)', 'walk_executor(stovefan_139)', 'walk_executor(toilet_302)', 'open_executor(toilet_302)', 'walk_executor(bathroom_cabinet_305)', 'open_executor(bathroom_cabinet_305)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_kiwi_2060)', 'cut_executor(food_kiwi_2060)', 'grab_executor(food_kiwi_2060) (Failed)', 'walk_executor(kitchen_counter_128)', 'put_executor(cup_2087, kitchen_counter_128)', 'walk_executor(food_kiwi_2060)', 'grab_executor(food_kiwi_2060)', 'walk_executor(cup_2087)', 'putin_executor(food_kiwi_2060, cup_2087)']
Time info:
Time consume: 326 seconds
Exp_helper query times: 2
Guidance query times: 0
library scale: 24
goal generate times: 8
goal correct times: 2
action_num: 45

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
