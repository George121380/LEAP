From agent.py
Reset goals: The sub-goals are: 
['Turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_switch_light_in_bathroom():
    # Check if there is a light with a switch in the bathroom
    foreach light: item :
        if is_light(light) and has_switch(light):
            return True
    return False

behavior turn_on_light(light: item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        if has_switch_light_in_bathroom():
            foreach light: item :
                if is_light(light) and has_switch(light):
                    achieve close_char(char, light)
                    turn_on_light(light)
                    break
        else:
            foreach bath: item:
                if is_bathroom(bath) and not visited(bath):
                    observe(bath, "Check if there is a light with switch in the bathroom")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2124_around_light_73(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==73
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(remote_control,light_instance)
        else:
            exp(remote_control,light_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,light_instance]=True
        close[light_instance,remote_control]=True
    

behavior find_lighter_2039_around_bathroom_cabinet_17(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(lighter,bathroom_cabinet_instance)
        else:
            exp(lighter,bathroom_cabinet_instance)
    eff:
        unknown[lighter]=False
        close[lighter,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,lighter]=True
    

#goal_representation
 
def has_switch_light_in_bathroom():
    # Check if there is a light with a switch in the bathroom
    return exists light: item : (is_light(light) and has_switch(light))

behavior turn_on_light(light: item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        if has_switch_light_in_bathroom():
            bind light: item where:
                is_light(light) and has_switch(light)
            achieve_once close_char(char, light)
            turn_on_light(light)
        else:
            bind bath: item where:
                is_bathroom(bath) and not visited(bath)
            observe(bath, "Check if there is a light with switch in the bathroom")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_switch_light_in_bathroom():
    # Check if there is a light with a switch in the bathroom
    return exists light: item : (is_light(light) and has_switch(light))

behavior turn_on_light(light: item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        if has_switch_light_in_bathroom():
            bind light: item where:
                is_light(light) and has_switch(light)
            achieve_once close_char(char, light)
            turn_on_light(light)
        else:
            bind bath: item where:
                is_bathroom(bath) and not visited(bath)
            observe(bath, "Check if there is a light with switch in the bathroom")

##############################
From agent.py-> find a plan in act()
walk_executor(light_39)switchon_executor(light_39)
##############################
From agent.py
walk_executor(light_39)
Robot find: Robot is close to the light_39. 
##############################
From agent.py
switchon_executor(light_39)
Robot find: Robot is close to the light_39. light_39 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the lights in the bathroom.
Action History:
['walk_executor(light_39)', 'switchon_executor(light_39)']
Time info:
Time consume: 31 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 120
goal generate times: 1
goal correct times: 1
action_num: 2

Task complete rate:
1
Scene_id: 1
##############################
