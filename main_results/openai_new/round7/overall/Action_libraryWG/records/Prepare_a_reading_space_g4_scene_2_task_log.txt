From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_137(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table(table: item):
    # Function to check if a book is on the specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

def is_home_office(table: item):
    # Function to check if the table is in the home office
    symbol in_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_office

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and is_book_on_table(table) and is_home_office(table)):
            # Check if there is a table in the home office with a book
            bind table: item where:
                is_table(table) and is_book_on_table(table) and is_home_office(table)
            # Select the table with a book in the home office
            achieve close_char(char, table)
            # Move the character closer to the table with a book

        else:
            # If no such table is found based on known information, explore to locate one
            foreach table: item:
                if is_table(table) and is_home_office(table) and not visited(table):
                    observe(table, "Check if there is a book on the table")
                    # Observe whether each table in the home office has a book

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select a table in the home office
        put_on_coffee_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select a table in the home office
        put_on_coffee_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_milk(cup:item):
    # Check if the cup contains hot milk
    symbol contains_hot_milk=exists milk: item : (is_milk(milk) and inside(milk, cup))
    return contains_hot_milk

behavior prepare_hot_milk(cup:item):
    body:
        achieve_once has_water(cup)
        # Fill the cup with water, which is essential in preparing hot milk
        achieve_once is_on(cup) 
        # Turn on the heat source to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)  
        # Find a cup to hold the hot milk
       
        if not has_hot_milk(cup):
            # Proceed to prepare hot milk only if its not already present
            prepare_hot_milk(cup)

        bind table: item where:
            is_table(table)
        # Find a table in the home office
        achieve on(cup, table)
        # Place the cup of hot milk on the table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
plain
def has_hot_milk(x:item):
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, x))
    symbol is_hot=exists o: item : (is_on(o) and inside(o, x))
    return has_milk and is_hot

behavior prepare_hot_milk(x:item, stove:item):
    body:
        achieve inhand(x)
        achieve has_hot_milk(stove) 

behavior put_on_table(x:item, table:item):
    body:
        achieve on(x, table)

behavior __goal__():
    body:
        bind milk_cup: item where: 
            is_cup(milk_cup) 

        bind stove: item where:
            is_stove(stove)

        bind home_office_table: item where:
            is_table(home_office_table) and 
            inside(home_office_table, home_office_319)

        prepare_hot_milk(milk_cup, stove)
        put_on_table(milk_cup, home_office_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'plain') at line 5784, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
def is_hot(x: item):
    # Function to check if an item is hot
    return is_on(x)

def is_filled_with_milk(x: item):
    # Function to check if an item is filled with milk
    symbol has_milk = exists o: item: (is_milk(o) and inside(o, x))
    return has_milk

behavior prepare_hot_milk(cup: item, stove: item):
    body:
        achieve_once inhand(cup)
        # Make sure the cup is in hand
        achieve is_filled_with_milk(cup)
        # Fill the cup with milk
        achieve_once on(cup, stove)
        # Place the cup on the stove
        achieve is_hot(cup)
        # Make sure the cup becomes hot

behavior put_on_table(x: item, table: item):
    body:
        achieve on(x, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk_cup: item where:
            is_cup(milk_cup) 

        bind stove: item where:
            is_stove(stove)

        bind home_office_table: item where:
            is_table(home_office_table) and 
            inside(home_office_table, home_office_319)

        prepare_hot_milk(milk_cup, stove)
        put_on_table(milk_cup, home_office_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 5818, column 45.
Expected one of: 
	* DO
	* NONE
	* LONG_STRING
	* STRING
	* DEC_NUMBER
	* NOT
	* HEX_NUMBER
	* OCT_NUMBER
	* IMAG_NUMBER
	* MINUS
	* TILDE
	* BIN_NUMBER
	* FALSE
	* ELLIPSIS
	* VARNAME
	* FLOAT_NUMBER
	* LSQB
	* COLON
	* LPAR
	* PLUS
	* TRUE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def is_hot(x: item):
    # Function to check if an item is hot
    return is_on(x)

def is_filled_with_milk(x: item):
    # Function to check if an item is filled with milk
    symbol has_milk = exists o: item: (is_milk(o) and inside(o, x))
    return has_milk

behavior prepare_hot_milk(cup: item, stove: item):
    body:
        achieve_once inhand(cup)
        # Make sure the cup is in hand
        achieve_once is_filled_with_milk(cup)
        # Fill the cup with milk
        achieve_once on(cup, stove)
        # Place the cup on the stove
        achieve_once is_hot(cup)
        # Make sure the cup becomes hot

behavior put_on_table(x: item, table: item):
    body:
        achieve_once on(x, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk_cup: item where:
            is_cup(milk_cup) 

        bind stove: item where:
            is_stove(stove)

        bind home_office_table: item where:
            is_table(home_office_table) and 
            inside(home_office_table, home_office_319)

        prepare_hot_milk(milk_cup, stove)
        put_on_table(milk_cup, home_office_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_blender_2032_around_kitchen_counter_132(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

behavior find_cup_2006_around_coffe_maker_147(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_milk_on_table(table:item):
    # Helper function to check if there is hot milk on the specified table in home office
    symbol hot_milk=exists o: item : (is_milk(o) and on(o, table))
    return hot_milk

behavior prepare_milk(milk:item, stove:item):
    body:
        achieve_once has_water(milk)
        # Ensure the milk is hot, though the details of achieving hotness are abstracted
        achieve_once is_on(stove)
        # Turn on the stove to heat milk

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        prepare_milk(milk, stove)

        put_milk_on_table(milk, table)
        achieve has_hot_milk_on_table(table)
        # Ensure hot milk is on the home office table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_hot_milk_on_table(table:item):
    # Helper function to check if there is hot milk on the specified table in home office
    symbol hot_milk=exists o: item : (is_milk(o) and on(o, table))
    return hot_milk

behavior prepare_milk(milk:item, stove:item):
    body:
        achieve_once has_water(milk)
        # Ensure the milk is hot, though the details of achieving hotness are abstracted
        achieve_once is_on(stove)
        # Turn on the stove to heat milk

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office in the environment

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        prepare_milk(milk, stove)

        put_milk_on_table(milk, table)
        achieve has_hot_milk_on_table(table)
        # Ensure hot milk is on the home office table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_hot_milk_on_table(table:item):
    # Helper function to check if there is hot milk on the specified table in home office
    symbol hot_milk=exists o: item : (is_milk(o) and on(o, table))
    return hot_milk

behavior prepare_milk(milk:item, stove:item):
    body:
        achieve_once has_water(milk)
        # Ensure the milk is hot, though the details of achieving hotness are abstracted
        achieve_once is_on(stove)
        # Turn on the stove to heat milk

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office in the environment

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        prepare_milk(milk, stove)

        put_milk_on_table(milk, table)
        achieve has_hot_milk_on_table(table)
        # Ensure hot milk is on the home office table

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. table_193 is close milk_2074. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the milk is actually heated and then placed on the table. The given actions only indicate that milk was grabbed and placed on the table, but there is no action related to heating the milk before placing it on the table.
##############################
From agent.py
Human Instruction: You need to ensure the milk is actually heated and then placed on the table. The given actions only indicate that milk was grabbed and placed on the table, but there is no action related to heating the milk before placing it on the table.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Grab book_2091.
Action 5: Walk to table_193.
Action 6: Put book_2091 on table_193.
Action 7: Walk to fridge_140.
Action 8: Switch off fridge_140.
Action 9: Open fridge_140.
Action 10: look for milk_2074 around fridge_140.
Action 11: Walk to milk_2074.
Action 12: Grab milk_2074.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Walk to stove_2090.
Action 16: Switch on stove_2090.
Action 17: Walk to table_193.
Action 18: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_cup_2006_around_coffe_maker_147(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_and_heat_milk(milk:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on, indicating it is ready for use
        bind pot: item where:
            is_pot(pot)
        # Select an available pot to heat the milk in
        achieve_once inside(milk, pot)
        # Pour the milk into the pot for heating
        achieve_once on(pot, stove)
        # Place the pot with the milk on the stove for heating

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the given item on the specified table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2074
        # Select the milk with ID 2074
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090
        
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select table with ID 193 to place milk after heating
        
        prepare_and_heat_milk(milk, stove)
        # Heat the milk using the stove
        
        place_on_table(milk, table)
        # Place the milk on the table after heating

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_and_heat_milk(milk:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on, indicating it is ready for use
        bind pot: item where:
            is_pot(pot)
        # Select an available pot to heat the milk in
        achieve_once inside(milk, pot)
        # Pour the milk into the pot for heating
        achieve_once on(pot, stove)
        # Place the pot with the milk on the stove for heating

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the given item on the specified table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2074
        # Select the milk with ID 2074
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090
        
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select table with ID 193 to place milk after heating
        
        prepare_and_heat_milk(milk, stove)
        # Heat the milk using the stove
        
        place_on_table(milk, table)
        # Place the milk on the table after heating

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the table_193. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the table_193. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(milk_2074, pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. milk_2074 is close pot_2093. milk_2074 is inside pot_2093. pot_2093 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the pot_2093. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the pot_2093. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(pot_2093)', 'putin_executor(milk_2074, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)']
Time info:
Time consume: 278 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 45
goal generate times: 6
goal correct times: 1
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
