From agent.py
Reset goals: The sub-goals are: 
['Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_kitchen_counter_128(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior heat_food_in_microwave(pizza:item, hamburger:item, plate:item, microwave:item):
    body:
        achieve_once inside(pizza, microwave)
        # Place the pizza inside the microwave
        achieve_once inside(hamburger, microwave)
        # Place the hamburger inside the microwave
        achieve_once inside(plate, microwave)
        # Place the plate (with pizza and hamburger)inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior move_plate_to_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        bind table: item where:
            is_table(table)
            and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table in the dining room

        place_items_on_plate(pizza, hamburger, plate)
        # Place pizza and hamburger on the plate
        heat_food_in_microwave(pizza, hamburger, plate, microwave)
        # Heat the pizza and hamburger in the microwave
        move_plate_to_table(plate, table)
        # Move the plate to the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5811, column 17.
Expected one of: 
	* EQUAL
	* __ANON_4
	* AT
	* PERCENT
	* __ANON_1
	* AMPERSAND
	* CIRCUMFLEX
	* IF
	* __ANON_6
	* __ANON_0
	* STAR
	* NOT_EQ
	* SEMICOLON
	* SLASH
	* _NEWLINE
	* __ANON_5
	* GREATER_EQ
	* MORETHAN
	* MINUS
	* RSHIFT
	* LSHIFT
	* VBAR
	* __ANON_8
	* LESS_EQ
	* FLOORDIV
	* LESSTHAN
	* COMMA
	* __ANON_7
	* PLUS
	* __ANON_2
	* DOUBLE_EQUAL
	* AND
	* OR
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation

behavior place_items_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior heat_food_in_microwave(pizza:item, hamburger:item, plate:item, microwave:item):
    body:
        achieve_once inside(pizza, microwave)
        # Place the pizza inside the microwave
        achieve_once inside(hamburger, microwave)
        # Place the hamburger inside the microwave
        achieve_once inside(plate, microwave)
        # Place the plate (with pizza and hamburger)inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior move_plate_to_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        bind table: item where:
            is_table(table)
        # Select a table
         
        symbol is_in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
        
        if is_in_dining_room:
            place_items_on_plate(pizza, hamburger, plate)
            # Place pizza and hamburger on the plate
            heat_food_in_microwave(pizza, hamburger, plate, microwave)
            # Heat the pizza and hamburger in the microwave
            move_plate_to_table(plate, table)
            # Move the plate to the table in the dining room


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(pizza, hamburger, plate)
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        place_on_table(plate, table)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation

behavior place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(pizza, hamburger, plate)
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        place_on_table(plate, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and in_dining_room(table)

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and in_dining_room(table)

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_pizza_2065, fridge_140)
Find food_pizza_2065. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_pizza_2065, plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_pizza_2065. food_pizza_2065 is close plate_2105. food_pizza_2065 is on plate_2105. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_hamburger_2057, plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_hamburger_2057. food_hamburger_2057 is close plate_2105. food_hamburger_2057 is on plate_2105. food_hamburger_2057 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. microwave_149 is close plate_2105. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(plate_2105, table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. plate_2105 is on table_123. table_123 is close plate_2105. plate_2105 is close table_123. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot placed the pizza and hamburger on a plate and heated them in the microwave. However, the plate was placed on table_123, which is not confirmed to be in the dining room. To complete the task, ensure the plate is on a table located in the dining room.
##############################
From agent.py
Human Instruction: The robot placed the pizza and hamburger on a plate and heated them in the microwave. However, the plate was placed on table_123, which is not confirmed to be in the dining room. To complete the task, ensure the plate is on a table located in the dining room.

The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for plate_2105 around table_127.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_pizza_2065 around fridge_140.
Action 7: Grab food_pizza_2065.
Action 8: Walk to plate_2105.
Action 9: Put food_pizza_2065 on plate_2105.
Action 10: Walk to food_hamburger_2057.
Action 11: Grab food_hamburger_2057.
Action 12: Walk to plate_2105.
Action 13: Put food_hamburger_2057 on plate_2105.
Action 14: Walk to microwave_149.
Action 15: Open microwave_149.
Action 16: Walk to plate_2105.
Action 17: Grab plate_2105.
Action 18: Walk to microwave_149.
Action 19: Put plate_2105 into microwave_149.
Action 20: Close microwave_149.
Action 21: Switch on microwave_149.
Action 22: Switch off microwave_149.
Action 23: Open microwave_149.
Action 24: Walk to plate_2105.
Action 25: Grab plate_2105.
Action 26: Walk to table_123.
Action 27: Put plate_2105 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

behavior find_chair_2119_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_towel_rack_298_around_shower_303(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)
        achieve_once open(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select the plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        put_on_plate(pizza, plate)
        put_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)
        achieve_once open(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select the plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        put_on_plate(pizza, plate)
        put_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(plate_2105, table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. plate_2105 is on table_123. plate_2105 is close table_123. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the plate with pizza and hamburger is placed on a table that is confirmed to be in the dining room. Replace the plate on table_123 with a table that is in the dining room according to the goal representation.
##############################
From agent.py
Human Instruction: You need to ensure the plate with pizza and hamburger is placed on a table that is confirmed to be in the dining room. Replace the plate on table_123 with a table that is in the dining room according to the goal representation.

The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for plate_2105 around table_127.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_pizza_2065 around fridge_140.
Action 7: Grab food_pizza_2065.
Action 8: Walk to plate_2105.
Action 9: Put food_pizza_2065 on plate_2105.
Action 10: Walk to food_hamburger_2057.
Action 11: Grab food_hamburger_2057.
Action 12: Walk to plate_2105.
Action 13: Put food_hamburger_2057 on plate_2105.
Action 14: Walk to microwave_149.
Action 15: Open microwave_149.
Action 16: Walk to plate_2105.
Action 17: Grab plate_2105.
Action 18: Walk to microwave_149.
Action 19: Put plate_2105 into microwave_149.
Action 20: Close microwave_149.
Action 21: Switch on microwave_149.
Action 22: Switch off microwave_149.
Action 23: Open microwave_149.
Action 24: Walk to plate_2105.
Action 25: Grab plate_2105.
Action 26: Walk to table_123.
Action 27: Put plate_2105 on table_123.
Action 28: Grab plate_2105.
Action 29: Walk to microwave_149.
Action 30: Put plate_2105 into microwave_149.
Action 31: Close microwave_149.
Action 32: Switch on microwave_149.
Action 33: Switch off microwave_149.
Action 34: Open microwave_149.
Action 35: Walk to plate_2105.
Action 36: Grab plate_2105.
Action 37: Walk to table_123.
Action 38: Put plate_2105 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)
        achieve_once open(microwave)

behavior place_on_dining_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a dining room table

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_dining_table(plate, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5955, column 40.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)
        achieve_once open(microwave)

behavior place_on_dining_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a dining room table

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_dining_table(plate, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5973, column 40.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)
        achieve_once open(microwave)

behavior place_on_dining_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a dining room table

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_dining_table(plate, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

def is_table_in_dining_room(table:item):
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2065, plate) and on(food_hamburger_2057, plate)
        # Select the plate with pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate with pizza and hamburger in microwave

        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        place_on_table(plate, table)
        # Place the heated plate on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2065; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2119_around_table_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def is_table_in_dining_room(table:item):
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)

        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        
        bind plate: item where:
            is_plate(plate) and on(food_pizza, plate) and on(food_hamburger, plate)
        # Select the plate with pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate with pizza and hamburger in microwave

        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        place_on_table(plate, table)
        # Place the heated plate on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_table_in_dining_room(table:item):
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)

        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        
        bind plate: item where:
            is_plate(plate) and on(food_pizza, plate) and on(food_hamburger, plate)
        # Select the plate with pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate with pizza and hamburger in microwave

        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        place_on_table(plate, table)
        # Place the heated plate on the table in the dining room

##############################
From agent.py-> find a plan in act()
grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(plate_2105, table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. plate_2105 is on table_123. plate_2105 is close table_123. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the plate with pizza and hamburger is placed on a table that is confirmed to be in the dining room. Table_123, where the plate was placed, must be verified as being in the dining room according to the goal representation. Make sure the final placement is on a suitable table.
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(table_127)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_pizza_2065)', 'walk_executor(plate_2105)', 'put_executor(food_pizza_2065, plate_2105)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(plate_2105)', 'put_executor(food_hamburger_2057, plate_2105)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(table_123)', 'put_executor(plate_2105, table_123)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(table_123)', 'put_executor(plate_2105, table_123)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(table_123)', 'put_executor(plate_2105, table_123)']
Time info:
Time consume: 276 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 1
action_num: 47

Task complete rate:
1
Scene_id: 2
##############################
