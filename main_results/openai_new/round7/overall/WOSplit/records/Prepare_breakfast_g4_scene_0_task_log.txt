From agent.py
Reset goals: The sub-goals are: 
['Make chicken pasta, put it in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior prepare_chicken_and_pasta(chicken:item, dry_pasta:item, pot:item, knife:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once inhand(knife)
        achieve cut(chicken)
        achieve_once inside(chicken, pot)
        achieve_once inside(dry_pasta, pot)

behavior serve_on_plate(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        
        bind knife: item where:
            is_knife(knife)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind plate: item where:
            is_plate(plate)

        boil_water(pot, stove)
        prepare_chicken_and_pasta(chicken, dry_pasta, pot, knife, cutting_board)
        serve_on_plate(pot, plate)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior prepare_chicken_and_pasta(chicken:item, dry_pasta:item, pot:item, knife:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once inhand(knife)
        achieve cut(chicken)
        achieve_once inside(chicken, pot)
        achieve_once inside(dry_pasta, pot)

behavior serve_on_plate(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        
        bind knife: item where:
            is_knife(knife)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind plate: item where:
            is_plate(plate)

        boil_water(pot, stove)
        prepare_chicken_and_pasta(chicken, dry_pasta, pot, knife, cutting_board)
        serve_on_plate(pot, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_chicken_2017. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by left hand. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(plate_1000, bookshelf_101)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the knife_2050. Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the knife_2050. Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(plate_1000, bookshelf_101)
Fail to find plate_1000 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(closetdrawer_377)exp(plate_1000, closetdrawer_377)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_358. 
##############################
From agent.py
exp(plate_1000, closetdrawer_377)
Fail to find plate_1000 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(closetdrawer_377)exp(plate_1000, closetdrawer_377)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_358. 
##############################
From agent.py
exp(plate_1000, closetdrawer_377)
Fail to find plate_1000 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(closetdrawer_377)exp(plate_1000, closetdrawer_377)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_358. 
##############################
From agent.py
exp(plate_1000, closetdrawer_377)
Fail to find plate_1000 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(closetdrawer_377)exp(plate_1000, closetdrawer_377)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_358. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Robot, you can find plate_1000 in dining_room_201. It is on sink_231, which is nearby. Please look for it directly on the surface of sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, you can find plate_1000 in dining_room_201. It is on sink_231, which is nearby. Please look for it directly on the surface of sink_231.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Grab pot_2069.
Action 5: Walk to stove_2065.
Action 6: Put pot_2069 on stove_2065.
Action 7: Switch on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Switch off fridge_289.
Action 10: Open fridge_289.
Action 11: look for food_chicken_2017 around fridge_289.
Action 12: Grab food_chicken_2017.
Action 13: Walk to cutting_board_2051.
Action 14: Put food_chicken_2017 on cutting_board_2051.
Action 15: Walk to knife_2050.
Action 16: Grab knife_2050.
Action 17: Walk to food_chicken_2017.
Action 18: Cut food_chicken_2017.
Action 19: Walk to pot_2069.
Action 20: Open pot_2069.
Action 21: Walk to food_chicken_2017.
Action 22: Grab food_chicken_2017.
Action 23: Walk to pot_2069.
Action 24: Put food_chicken_2017 into pot_2069.
Action 25: Walk to dry_pasta_2042.
Action 26: Grab dry_pasta_2042.
Action 27: Walk to pot_2069.
Action 28: Put dry_pasta_2042 into pot_2069.
Action 29: Walk to cupboard_229.
Action 30: Open cupboard_229.
Action 31: look for plate_1000 around cupboard_229.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to cutting_board_2051.
Action 35: Put food_chicken_2017 on cutting_board_2051.
Action 36: Walk to food_chicken_2017.
Action 37: Grab food_chicken_2017.
Action 38: Walk to pot_2069.
Action 39: Put food_chicken_2017 into pot_2069.
Action 40: Walk to bookshelf_101.
Action 41: Open bookshelf_101.
Action 42: look for plate_1000 around bookshelf_101.
Action 43: Walk to food_chicken_2017.
Action 44: Grab food_chicken_2017.
Action 45: Walk to cutting_board_2051.
Action 46: Put food_chicken_2017 on cutting_board_2051.
Action 47: Walk to food_chicken_2017.
Action 48: Grab food_chicken_2017.
Action 49: Walk to pot_2069.
Action 50: Put food_chicken_2017 into pot_2069.
Action 51: Walk to closetdrawer_377.
Action 52: look for plate_1000 around closetdrawer_377.
Action 53: Walk to food_chicken_2017.
Action 54: Grab food_chicken_2017.
Action 55: Walk to cutting_board_2051.
Action 56: Put food_chicken_2017 on cutting_board_2051.
Action 57: Walk to food_chicken_2017.
Action 58: Grab food_chicken_2017.
Action 59: Walk to pot_2069.
Action 60: Put food_chicken_2017 into pot_2069.
Action 61: Walk to closetdrawer_377.
Action 62: look for plate_1000 around closetdrawer_377.
Action 63: Walk to food_chicken_2017.
Action 64: Grab food_chicken_2017.
Action 65: Walk to cutting_board_2051.
Action 66: Put food_chicken_2017 on cutting_board_2051.
Action 67: Walk to food_chicken_2017.
Action 68: Grab food_chicken_2017.
Action 69: Walk to pot_2069.
Action 70: Put food_chicken_2017 into pot_2069.
Action 71: Walk to closetdrawer_377.
Action 72: look for plate_1000 around closetdrawer_377.
Action 73: Walk to food_chicken_2017.
Action 74: Grab food_chicken_2017.
Action 75: Walk to cutting_board_2051.
Action 76: Put food_chicken_2017 on cutting_board_2051.
Action 77: Walk to food_chicken_2017.
Action 78: Grab food_chicken_2017.
Action 79: Walk to pot_2069.
Action 80: Put food_chicken_2017 into pot_2069.
Action 81: Walk to closetdrawer_377.

##############################
From agent.py
exp(plate_1000, closetdrawer_377)
Fail to find plate_1000 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(plate_1000)put_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by left hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(pot_2069, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the plate_1000. Robot is close to the sink_231. pot_2069 is close plate_1000. plate_1000 is close pot_2069. pot_2069 is on plate_1000. pot_2069 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the pasta from the pot to the plate. Currently, the pot itself is placed on the plate, which does not satisfy the goal of "serve_on_plate(pasta:item, plate:item)".
##############################
From agent.py
Human Instruction: You need to move the pasta from the pot to the plate. Currently, the pot itself is placed on the plate, which does not satisfy the goal of "serve_on_plate(pasta:item, plate:item)".

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Grab pot_2069.
Action 5: Walk to stove_2065.
Action 6: Put pot_2069 on stove_2065.
Action 7: Switch on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Switch off fridge_289.
Action 10: Open fridge_289.
Action 11: look for food_chicken_2017 around fridge_289.
Action 12: Grab food_chicken_2017.
Action 13: Walk to cutting_board_2051.
Action 14: Put food_chicken_2017 on cutting_board_2051.
Action 15: Walk to knife_2050.
Action 16: Grab knife_2050.
Action 17: Walk to food_chicken_2017.
Action 18: Cut food_chicken_2017.
Action 19: Walk to pot_2069.
Action 20: Open pot_2069.
Action 21: Walk to food_chicken_2017.
Action 22: Grab food_chicken_2017.
Action 23: Walk to pot_2069.
Action 24: Put food_chicken_2017 into pot_2069.
Action 25: Walk to dry_pasta_2042.
Action 26: Grab dry_pasta_2042.
Action 27: Walk to pot_2069.
Action 28: Put dry_pasta_2042 into pot_2069.
Action 29: Walk to cupboard_229.
Action 30: Open cupboard_229.
Action 31: look for plate_1000 around cupboard_229.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to cutting_board_2051.
Action 35: Put food_chicken_2017 on cutting_board_2051.
Action 36: Walk to food_chicken_2017.
Action 37: Grab food_chicken_2017.
Action 38: Walk to pot_2069.
Action 39: Put food_chicken_2017 into pot_2069.
Action 40: Walk to bookshelf_101.
Action 41: Open bookshelf_101.
Action 42: look for plate_1000 around bookshelf_101.
Action 43: Walk to food_chicken_2017.
Action 44: Grab food_chicken_2017.
Action 45: Walk to cutting_board_2051.
Action 46: Put food_chicken_2017 on cutting_board_2051.
Action 47: Walk to food_chicken_2017.
Action 48: Grab food_chicken_2017.
Action 49: Walk to pot_2069.
Action 50: Put food_chicken_2017 into pot_2069.
Action 51: Walk to closetdrawer_377.
Action 52: look for plate_1000 around closetdrawer_377.
Action 53: Walk to food_chicken_2017.
Action 54: Grab food_chicken_2017.
Action 55: Walk to cutting_board_2051.
Action 56: Put food_chicken_2017 on cutting_board_2051.
Action 57: Walk to food_chicken_2017.
Action 58: Grab food_chicken_2017.
Action 59: Walk to pot_2069.
Action 60: Put food_chicken_2017 into pot_2069.
Action 61: Walk to closetdrawer_377.
Action 62: look for plate_1000 around closetdrawer_377.
Action 63: Walk to food_chicken_2017.
Action 64: Grab food_chicken_2017.
Action 65: Walk to cutting_board_2051.
Action 66: Put food_chicken_2017 on cutting_board_2051.
Action 67: Walk to food_chicken_2017.
Action 68: Grab food_chicken_2017.
Action 69: Walk to pot_2069.
Action 70: Put food_chicken_2017 into pot_2069.
Action 71: Walk to closetdrawer_377.
Action 72: look for plate_1000 around closetdrawer_377.
Action 73: Walk to food_chicken_2017.
Action 74: Grab food_chicken_2017.
Action 75: Walk to cutting_board_2051.
Action 76: Put food_chicken_2017 on cutting_board_2051.
Action 77: Walk to food_chicken_2017.
Action 78: Grab food_chicken_2017.
Action 79: Walk to pot_2069.
Action 80: Put food_chicken_2017 into pot_2069.
Action 81: Walk to closetdrawer_377.
Action 82: look for plate_1000 around closetdrawer_377.
Action 83: Walk to food_chicken_2017.
Action 84: Grab food_chicken_2017.
Action 85: Walk to cutting_board_2051.
Action 86: Put food_chicken_2017 on cutting_board_2051.
Action 87: Walk to food_chicken_2017.
Action 88: Grab food_chicken_2017.
Action 89: Walk to pot_2069.
Action 90: Put food_chicken_2017 into pot_2069.
Action 91: Walk to sink_231.
Action 92: look for plate_1000 around sink_231.
Action 93: Walk to food_chicken_2017.
Action 94: Grab food_chicken_2017.
Action 95: Walk to cutting_board_2051.
Action 96: Put food_chicken_2017 on cutting_board_2051.
Action 97: Walk to food_chicken_2017.
Action 98: Grab food_chicken_2017.
Action 99: Walk to pot_2069.
Action 100: Put food_chicken_2017 into pot_2069.
Action 101: Grab pot_2069.
Action 102: Walk to plate_1000.
Action 103: Put pot_2069 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_nightstand_102(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(bowl,nightstand_instance)
        else:
            exp(bowl,nightstand_instance)
    eff:
        unknown[bowl]=False
        close[bowl,nightstand_instance]=True
        close[nightstand_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        # Transfer the pasta from the pot to the plate

behavior ensure_pot_off_plate(pot:item, plate:item):
    body:
        achieve_once not on(pot, plate)
        # Ensure pot is not on the plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_food_noodles(pasta)
        # Select the pasta

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        transfer_pasta_to_plate(pasta, plate)
        ensure_pot_off_plate(pot, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_nightstand_102(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(bowl,nightstand_instance)
        else:
            exp(bowl,nightstand_instance)
    eff:
        unknown[bowl]=False
        close[bowl,nightstand_instance]=True
        close[nightstand_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot initially before transferring
        achieve_once on(pasta, plate)
        # Ensure pasta is transferred onto the plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is heated on stove_2065

        bind plate: item where:
            is_plate(plate)
        # Select a plate to serve the pasta on

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # Select the pasta in the pot

        transfer_pasta_to_plate(pasta, pot, plate)
        # Transfer the pasta from the pot to the plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_fork_2080_around_closetdrawer_377(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot initially before transferring
        achieve_once on(pasta, plate)
        # Ensure pasta is transferred onto the plate

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with the correct ID

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is heated on stove

        bind plate: item where:
            is_plate(plate)
        # Select a plate to serve the pasta on

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # Select the pasta in the pot

        transfer_pasta_to_plate(pasta, pot, plate)
        # Transfer the pasta from the pot to the plate

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, plate:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot
        achieve_once on(pasta, plate)
        # Place pasta on the plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta (dry pasta becomes pasta after being cooked)

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot)
        # Select the pot containing the pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        transfer_pasta_to_plate(pasta, plate, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior transfer_pasta_to_plate(pasta:item, plate:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot
        achieve_once on(pasta, plate)
        # Place pasta on the plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta (dry pasta becomes pasta after being cooked)

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot)
        # Select the pot containing the pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        transfer_pasta_to_plate(pasta, plate, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(plate_1000)put_executor(dry_pasta_2042, plate_1000)
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the dry_pasta_2042. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(dry_pasta_2042, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the dry_pasta_2042. Robot is close to the plate_1000. Robot is close to the sink_231. dry_pasta_2042 is close plate_1000. plate_1000 is close dry_pasta_2042. dry_pasta_2042 is on plate_1000. dry_pasta_2042 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to remove the cooked pasta from the pot and place it onto the plate. The pasta was put into the pot but has not yet been successfully transferred to the plate. Also, it appears the plate was incorrectly identified by previously placing the pot on it instead. The task requires the pasta to be served on the plate.
##############################
From agent.py
Human Instruction: The robot needs to remove the cooked pasta from the pot and place it onto the plate. The pasta was put into the pot but has not yet been successfully transferred to the plate. Also, it appears the plate was incorrectly identified by previously placing the pot on it instead. The task requires the pasta to be served on the plate.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Grab pot_2069.
Action 5: Walk to stove_2065.
Action 6: Put pot_2069 on stove_2065.
Action 7: Switch on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Switch off fridge_289.
Action 10: Open fridge_289.
Action 11: look for food_chicken_2017 around fridge_289.
Action 12: Grab food_chicken_2017.
Action 13: Walk to cutting_board_2051.
Action 14: Put food_chicken_2017 on cutting_board_2051.
Action 15: Walk to knife_2050.
Action 16: Grab knife_2050.
Action 17: Walk to food_chicken_2017.
Action 18: Cut food_chicken_2017.
Action 19: Walk to pot_2069.
Action 20: Open pot_2069.
Action 21: Walk to food_chicken_2017.
Action 22: Grab food_chicken_2017.
Action 23: Walk to pot_2069.
Action 24: Put food_chicken_2017 into pot_2069.
Action 25: Walk to dry_pasta_2042.
Action 26: Grab dry_pasta_2042.
Action 27: Walk to pot_2069.
Action 28: Put dry_pasta_2042 into pot_2069.
Action 29: Walk to cupboard_229.
Action 30: Open cupboard_229.
Action 31: look for plate_1000 around cupboard_229.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to cutting_board_2051.
Action 35: Put food_chicken_2017 on cutting_board_2051.
Action 36: Walk to food_chicken_2017.
Action 37: Grab food_chicken_2017.
Action 38: Walk to pot_2069.
Action 39: Put food_chicken_2017 into pot_2069.
Action 40: Walk to bookshelf_101.
Action 41: Open bookshelf_101.
Action 42: look for plate_1000 around bookshelf_101.
Action 43: Walk to food_chicken_2017.
Action 44: Grab food_chicken_2017.
Action 45: Walk to cutting_board_2051.
Action 46: Put food_chicken_2017 on cutting_board_2051.
Action 47: Walk to food_chicken_2017.
Action 48: Grab food_chicken_2017.
Action 49: Walk to pot_2069.
Action 50: Put food_chicken_2017 into pot_2069.
Action 51: Walk to closetdrawer_377.
Action 52: look for plate_1000 around closetdrawer_377.
Action 53: Walk to food_chicken_2017.
Action 54: Grab food_chicken_2017.
Action 55: Walk to cutting_board_2051.
Action 56: Put food_chicken_2017 on cutting_board_2051.
Action 57: Walk to food_chicken_2017.
Action 58: Grab food_chicken_2017.
Action 59: Walk to pot_2069.
Action 60: Put food_chicken_2017 into pot_2069.
Action 61: Walk to closetdrawer_377.
Action 62: look for plate_1000 around closetdrawer_377.
Action 63: Walk to food_chicken_2017.
Action 64: Grab food_chicken_2017.
Action 65: Walk to cutting_board_2051.
Action 66: Put food_chicken_2017 on cutting_board_2051.
Action 67: Walk to food_chicken_2017.
Action 68: Grab food_chicken_2017.
Action 69: Walk to pot_2069.
Action 70: Put food_chicken_2017 into pot_2069.
Action 71: Walk to closetdrawer_377.
Action 72: look for plate_1000 around closetdrawer_377.
Action 73: Walk to food_chicken_2017.
Action 74: Grab food_chicken_2017.
Action 75: Walk to cutting_board_2051.
Action 76: Put food_chicken_2017 on cutting_board_2051.
Action 77: Walk to food_chicken_2017.
Action 78: Grab food_chicken_2017.
Action 79: Walk to pot_2069.
Action 80: Put food_chicken_2017 into pot_2069.
Action 81: Walk to closetdrawer_377.
Action 82: look for plate_1000 around closetdrawer_377.
Action 83: Walk to food_chicken_2017.
Action 84: Grab food_chicken_2017.
Action 85: Walk to cutting_board_2051.
Action 86: Put food_chicken_2017 on cutting_board_2051.
Action 87: Walk to food_chicken_2017.
Action 88: Grab food_chicken_2017.
Action 89: Walk to pot_2069.
Action 90: Put food_chicken_2017 into pot_2069.
Action 91: Walk to sink_231.
Action 92: look for plate_1000 around sink_231.
Action 93: Walk to food_chicken_2017.
Action 94: Grab food_chicken_2017.
Action 95: Walk to cutting_board_2051.
Action 96: Put food_chicken_2017 on cutting_board_2051.
Action 97: Walk to food_chicken_2017.
Action 98: Grab food_chicken_2017.
Action 99: Walk to pot_2069.
Action 100: Put food_chicken_2017 into pot_2069.
Action 101: Grab pot_2069.
Action 102: Walk to plate_1000.
Action 103: Put pot_2069 on plate_1000.
Action 104: Walk to dry_pasta_2042.
Action 105: Grab dry_pasta_2042.
Action 106: Walk to plate_1000.
Action 107: Put dry_pasta_2042 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, plate)
        # Transfer the pasta from the pot to the plate

behavior correct_plate_position(pot:item, plate:item):
    body:
        if on(pot, plate):
            achieve_once closed(pot)
            # Ensure the pot is not mistakenly on the plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta instance

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot)
        # Select the pot containing the pasta

        bind plate: item where:
            is_plate(plate) and not visited(plate)
        # Select a plate that hasnt been visited yet

        correct_plate_position(pot, plate)
        transfer_pasta_to_plate(pasta, pot, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffe_maker_290(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(bowl,coffe_maker_instance)
        else:
            exp(bowl,coffe_maker_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffe_maker_instance]=True
        close[coffe_maker_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior transfer_pasta_to_plate(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select the plate with ID 1000

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # Select the pasta that is inside the pot_2069

        transfer_pasta_to_plate(pasta, pot, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior serve_pasta_to_plate(pasta: item, plate: item):
    body:
        achieve_once on(pasta, plate) # Put the pasta on the plate

behavior identify_plate_and_serve_pasta():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        bind plate: item where:
            is_plate(plate)

        if not close_char(char, plate):
            achieve close_char(char, plate) # Get close to plate
        
        serve_pasta_to_plate(pasta, plate)
        

behavior __goal__():
    body:
        identify_plate_and_serve_pasta()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

behavior find_vacuum_cleaner_2070_around_closetdrawer_377(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

#goal_representation
 
def has_pasta_in_pot(pot: item):
    # Function to check if there is dry pasta inside the specified pot
    symbol has_pasta=exists o: item : (is_dry_pasta(o) and inside(o, pot))
    return has_pasta

behavior serve_pasta_to_plate(pasta: item, plate: item):
    body:
        achieve_once on(pasta, plate) # Put the pasta on the plate

behavior identify_plate_and_serve_pasta():
    body:
        bind pot: item where:
            is_pot(pot)
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        bind plate: item where:
            is_plate(plate)

        if not close_char(char, plate):
            achieve close_char(char, plate) # Get close to plate
        
        serve_pasta_to_plate(pasta, plate)

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and has_pasta_in_pot(pot)):
            identify_plate_and_serve_pasta()

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make chicken pasta, put it in a plate." ?
Answer: To make chicken pasta, fill a pot with water and put the pot on the stove. Turn on the stove and put the pasta into the pot. In a frying pan, put some oil and put it on the stove. Turn on the stove and put the chicken into the frying pan. Lastly, combine the pasta and chicken on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_bowl_2072_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

behavior find_fork_2081_around_closetdrawer_377(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_pasta_from_pot(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve_once on(pasta, plate)
        # Place the pasta onto the plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot)
        # Select the pot with pasta inside

        bind plate: item where:
            is_plate(plate)
        # Select the plate

        remove_pasta_from_pot(pasta, pot, plate)
        # Remove the pasta from the pot and place it on the plate

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_pasta_from_pot(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, pot)
        # To ensure the pasta is inside the pot initially
        achieve_once on(pasta, plate)
        # Place the pasta on the plate
        
def find_correct_plate():
    foreach plate: item:
        if is_plate(plate) and not visited(plate):
            observe(plate, "Ensure plate is not confused with pot")

behavior place_pasta_on_plate(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        # Place the pasta on the correct plate

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta to be served

        bind pot: item where:
            is_pot(pot)
        # Select the pot containing pasta

        find_correct_plate()
        bind plate: item where:
            is_plate(plate) and on(pot, plate)
        # Ensure the pasta is placed on the correct plate
        
        remove_pasta_from_pot(pasta, pot, plate)
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_bookshelf_354(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#goal_representation
 
behavior find_correct_plate(pot:item):
    body:
        foreach plate: item:
            if is_plate(plate) and not visited(plate):
                observe(plate, "Ensure plate is not confused with pot")
                if not on(pot, plate):
                    return plate

behavior remove_pasta_from_pot(pasta:item, pot:item, plate:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once on(pasta, plate)

behavior place_pasta_on_plate(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind plate: item where:
            is_plate(plate)

        remove_pasta_from_pot(pasta, pot, plate)
        place_pasta_on_plate(pasta, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Return statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_closetdrawer_380(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

behavior find_vacuum_cleaner_2070_around_closetdrawer_377(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

#goal_representation

behavior find_correct_plate(pot:item):
    body:
        foreach plate: item:
            if is_plate(plate) and not visited(plate):
                observe(plate, "Ensure plate is not confused with pot")
                if not on(pot, plate):
                    achieve_once inside(pot, plate)

behavior remove_pasta_from_pot(pasta:item, pot:item, plate:item):
    body:
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind plate: item where:
            is_plate(plate)

        find_correct_plate(pot)
        remove_pasta_from_pot(pasta, pot, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_correct_plate(pot:item):
    body:
        foreach plate: item:
            if is_plate(plate) and not visited(plate):
                observe(plate, "Ensure plate is not confused with pot")
                if not on(pot, plate):
                    achieve_once inside(pot, plate)

behavior remove_pasta_from_pot(pasta:item, pot:item, plate:item):
    body:
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind plate: item where:
            is_plate(plate)

        find_correct_plate(pot)
        remove_pasta_from_pot(pasta, pot, plate)

##############################
From agent.py-> find a plan in act()
obs(plate_1000, Ensure plate is not confused with pot)
##############################
From agent.py
obs(plate_1000, Ensure plate is not confused with pot)
Get this information:  plate_1000 is inside dining_room_201. plate_1000 is close to sink_231. plate_1000 is close to pot_2069. plate_1000 is close to character_65. plate_1000 is close to dry_pasta_2042. pot_2069 is on plate_1000. plate_1000 is on sink_231. dry_pasta_2042 is on plate_1000. plate_1000 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to transfer the pasta from the pot to the plate correctly. Ensure the plate is clean if necessary and complete the task by placing the pasta on the plate, as currently, the pasta hasn't been successfully moved to the plate.
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_chicken_2017)', 'cut_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(closetdrawer_377)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(closetdrawer_377)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(closetdrawer_377)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(closetdrawer_377)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(sink_231)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(plate_1000)', 'put_executor(pot_2069, plate_1000)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(plate_1000)', 'put_executor(dry_pasta_2042, plate_1000)']
Time info:
Time consume: 662 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 15
goal generate times: 9
goal correct times: 3
action_num: 98

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
