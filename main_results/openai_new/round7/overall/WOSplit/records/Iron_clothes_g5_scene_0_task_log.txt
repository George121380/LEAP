From agent.py
Reset goals: The sub-goals are: 
['Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ironing_board(ironing_board:item):
    body:
        achieve_once open(ironing_board)
        # Ensure the ironing board is open before use

behavior plug_and_turn_on_iron(iron:item, socket:item):
    body:
        achieve_once plugged(iron)
        # Plug the iron into the power socket
        achieve_once is_on(iron)
        # Make sure the iron is turned on

behavior iron_clothing(clothing:item, ironing_board:item, iron:item):
    body:
        achieve_once on(clothing, ironing_board)
        # Place the clothing item on the ironing board
        achieve_once clean(clothing)
        # Ensure that the clothing is ironed and clean

behavior unplug_and_turn_off_iron(iron:item):
    body:
        achieve_once is_off(iron)
        # Turn off the iron
        achieve_once unplugged(iron)
        # Unplug the iron after use

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind socket: item where:
            is_powersocket(socket)
        # Select a power socket
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt

        prepare_ironing_board(ironing_board)
        plug_and_turn_on_iron(iron, socket)
        iron_clothing(shirt, ironing_board, iron)
        iron_clothing(skirt, ironing_board, iron)
        unplug_and_turn_off_iron(iron)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron
        achieve has_a_free_hand(char)
        # Ensure the character has a free hand after setting up the iron
        achieve is_on(iron)
        # Turn on the iron

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once on(clothes, ironing_board)
        # Place the clothing on the ironing board
        achieve_once inhand(iron)
        # Temporarily hold the iron while ironing the clothes

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        prepare_iron(iron)
        iron_clothes(shirt, iron, ironing_board)
        iron_clothes(skirt, iron, ironing_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, ironing_board:item, clothing:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once on(clothing, ironing_board)
        # Place the clothing on the ironing board for ironing
        achieve clean(clothing)
        # Ensure the clothing is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt
        iron_clothes(iron, ironing_board, shirt)
        iron_clothes(iron, ironing_board, skirt)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior iron_clothes(iron:item, ironing_board:item, clothing:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once on(clothing, ironing_board)
        # Place the clothing on the ironing board for ironing
        achieve clean(clothing)
        # Ensure the clothing is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt
        iron_clothes(iron, ironing_board, shirt)
        iron_clothes(iron, ironing_board, skirt)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(kitchen_counter_230)put_executor(clothes_shirt_2086, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(clothes_skirt_2088)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(kitchen_counter_230)put_executor(clothes_shirt_2086, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(clothes_skirt_2088)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(kitchen_counter_230)put_executor(clothes_shirt_2086, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(clothes_skirt_2088)switchoff_executor(faucet_232)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_skirt_2088 by left hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_skirt_2088. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by left hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. Grabbing clothes_skirt_2088 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(clothes_shirt_2086, kitchen_counter_230)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close clothes_shirt_2086. clothes_shirt_2086 is close kitchen_counter_230. clothes_shirt_2086 is on kitchen_counter_230. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. clothes_skirt_2088 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure both the shirt and the skirt are ironed. So far, the shirt and skirt have only been washed and not ironed. Make sure to place each item on the ironing board and apply the iron to achieve the sub-task's goal.
##############################
From agent.py
Human Instruction: The robot needs to ensure both the shirt and the skirt are ironed. So far, the shirt and skirt have only been washed and not ironed. Make sure to place each item on the ironing board and apply the iron to achieve the sub-task's goal.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for iron_2089 around ironing_board_2074.
Action 3: Walk to iron_2089.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Grab clothes_shirt_2086.
Action 9: Walk to ironing_board_2074.
Action 10: Put clothes_shirt_2086 on ironing_board_2074.
Action 11: Walk to clothes_shirt_2086.
Action 12: Grab clothes_shirt_2086.
Action 13: Walk to faucet_43.
Action 14: Switch on faucet_43.
Action 15: Wash clothes_shirt_2086.
Action 16: Switch off faucet_43.
Action 17: Walk to clothes_skirt_2088.
Action 18: Grab clothes_skirt_2088.
Action 19: Walk to ironing_board_2074.
Action 20: Put clothes_skirt_2088 on ironing_board_2074.
Action 21: Walk to clothes_skirt_2088.
Action 22: Grab clothes_skirt_2088.
Action 23: Walk to kitchen_counter_230.
Action 24: Put clothes_shirt_2086 on kitchen_counter_230.
Action 25: Switch on faucet_232.
Action 26: Wash clothes_skirt_2088.
Action 27: Switch off faucet_232.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(item:item, iron:item, ironing_board:item):
    body:
        achieve_once on(item, ironing_board)
        # Ensure the clothing item is on the ironing board
        achieve_once close_char(char, iron)
        # Ensure proximity to the iron for effective ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select the iron that is plugged in and turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_clothes(shirt, iron, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, iron, ironing_board)
        # Iron the skirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_clothes(item:item, iron:item, ironing_board:item):
    body:
        achieve_once on(item, ironing_board)
        # Ensure the clothing item is on the ironing board
        achieve_once close_char(char, iron)
        # Ensure proximity to the iron for effective ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select the iron that is plugged in and turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_clothes(shirt, iron, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, iron, ironing_board)
        # Iron the skirt

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the kitchen_counter_230. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to apply the iron on both the skirt and the shirt to complete the task. While you have placed both items on the ironing board, ironing them with the iron has not been performed.
##############################
From agent.py
Human Instruction: You need to apply the iron on both the skirt and the shirt to complete the task. While you have placed both items on the ironing board, ironing them with the iron has not been performed.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for iron_2089 around ironing_board_2074.
Action 3: Walk to iron_2089.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Grab clothes_shirt_2086.
Action 9: Walk to ironing_board_2074.
Action 10: Put clothes_shirt_2086 on ironing_board_2074.
Action 11: Walk to clothes_shirt_2086.
Action 12: Grab clothes_shirt_2086.
Action 13: Walk to faucet_43.
Action 14: Switch on faucet_43.
Action 15: Wash clothes_shirt_2086.
Action 16: Switch off faucet_43.
Action 17: Walk to clothes_skirt_2088.
Action 18: Grab clothes_skirt_2088.
Action 19: Walk to ironing_board_2074.
Action 20: Put clothes_skirt_2088 on ironing_board_2074.
Action 21: Walk to clothes_skirt_2088.
Action 22: Grab clothes_skirt_2088.
Action 23: Walk to kitchen_counter_230.
Action 24: Put clothes_shirt_2086 on kitchen_counter_230.
Action 25: Switch on faucet_232.
Action 26: Wash clothes_skirt_2088.
Action 27: Switch off faucet_232.
Action 28: Grab clothes_shirt_2086.
Action 29: Walk to ironing_board_2074.
Action 30: Put clothes_shirt_2086 on ironing_board_2074.
Action 31: Put clothes_skirt_2088 on ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_clothes_scarf_2048_around_washing_machine_2007(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_scarf,washing_machine_instance)
        else:
            exp(clothes_scarf,washing_machine_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,washing_machine_instance]=True
        close[washing_machine_instance,clothes_scarf]=True
    

behavior find_hanger_361_around_closetdrawer_116(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation

behavior iron_clothes(iron:item, shirt:item, skirt:item):
    body:
        achieve plugged(iron) # Ensure that the iron is plugged in
        achieve is_on(iron) # Ensure that the iron is turned on
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once on(skirt, ironing_board) # Place the skirt on the ironing board

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        achieve close_char(char, ironing_board) 
        # Ensure the character is close to the ironing board
        
        iron_clothes(iron, shirt, skirt)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<iron: item>, Variable<shirt: item>, Variable<skirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
behavior iron_clothes(iron:item, shirt:item, skirt:item, ironing_board:item):
    body:
        achieve plugged(iron) # Ensure that the iron is plugged in
        achieve is_on(iron) # Ensure that the iron is turned on
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once on(skirt, ironing_board) # Place the skirt on the ironing board

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        achieve close_char(char, ironing_board) 
        # Ensure the character is close to the ironing board
        
        iron_clothes(iron, shirt, skirt, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_clothes_with_iron(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once plugged(iron)
        # Ensure the iron is plugged in
        achieve_once is_on(iron)
        # Ensure the iron is switched on
        achieve_once close_char(char, ironing_board)
        # Ensure the character is close to the ironing board
        achieve_once on(clothes, ironing_board)
        # Place the clothes on the ironing board
        achieve_once clean(clothes)
        # Iron and thus clean the clothes using the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and on(clothes_shirt, ironing_board)
        # Select the shirt on the ironing board

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and on(clothes_skirt, ironing_board)
        # Select the skirt on the ironing board

        iron_clothes_with_iron(clothes_shirt, iron, ironing_board)
        iron_clothes_with_iron(clothes_skirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, clothes: item):
    body:
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        foreach cloth: item:
            # Iron each piece of clothing
            if is_clothes(cloth) and (id[cloth] == id[clothes]):
                achieve_once on(cloth, ironing_board)
                # Place cloth on the ironing board

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_clothes(iron, clothes_shirt)
        # Iron the shirt

        iron_clothes(iron, clothes_skirt)
        # Iron the skirt

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<iron: item>, Variable<clothes: item>, Variable<cloth: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#goal_representation
 
behavior iron_clothes(iron:item, clothes: item, ironing_board: item):
    body:
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        achieve_once on(clothes, ironing_board)
        # Place clothes on the ironing board
        achieve clean(clothes)
        # Iron the clothes to ensure they are clean

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_clothes(iron, clothes_shirt, ironing_board)
        # Iron the shirt

        iron_clothes(iron, clothes_skirt, ironing_board)
        # Iron the skirt

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "iron the shirt and the skirt." ?
Answer: For each piece of clothing, place it on the ironing board. Turn on the iron, then put the iron on the clothing, push and pull the iron.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_116(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_116(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_116(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_116(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(cloth:item, iron:item, board:item):
    body:
        achieve_once on(cloth, board)
        # Ensure the cloth is on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        bind board: item where:
            is_ironing_board(board)
        # Select the ironing board
        
        iron_clothes(shirt, iron, board)
        iron_clothes(skirt, iron, board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior iron_clothes(ironing_board:item, iron:item, clothes:item):
    body:
        achieve_once on(clothes, ironing_board)
        # Ensure the clothes are placed on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on while ironing
        achieve_once clean(clothes)
        # Ensure the clothes are ironed and cleaned

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select and ensure the iron is plugged in and turned on

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and on(clothes_shirt, ironing_board)
        # Select the shirt which is on the ironing board

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and on(clothes_skirt, ironing_board)
        # Select the skirt which is on the ironing board

        iron_clothes(ironing_board, iron, clothes_shirt)
        iron_clothes(ironing_board, iron, clothes_skirt)
        # Iron both the shirt and the skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_116(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_116(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(char: character, clothes:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        # Get close to the ironing board
        achieve_once on(clothes, ironing_board)
        # Place the clothes on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_clothes(char, clothes_shirt, iron, ironing_board)
        iron_clothes(char, clothes_skirt, iron, ironing_board)
        # Iron both the shirt and skirt

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothes:item, ironing_board:item, iron:item):
    body:
        achieve_once on(clothes, ironing_board)
        # Place clothes on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once close_char(char, clothes)
        # Get close to the clothes to iron
        achieve_once on(clothes, char)
        # Iron clothes by making contact with them

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_clothes(shirt, ironing_board, iron)
        iron_clothes(skirt, ironing_board, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: V::clothes, O::char
Argument #1 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation

behavior iron_clothes(clothes:item, ironing_board:item, iron:item):
    body:
        achieve_once on(clothes, ironing_board)
        # Place clothes on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once close_char(char, clothes)
        # Get close to the clothes to iron
        achieve_once close_char(char, ironing_board)
        # Get close to the ironing board (as char interacts with clothes on it)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_clothes(shirt, ironing_board, iron)
        iron_clothes(skirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_clothes_on_ironing_board(clothes:item, ironing_board:item):
    body:
        achieve_once on(clothes, ironing_board) 

behavior apply_iron(ironing_board:item, iron:item, clothes:item):
    body:
        achieve is_on(iron)
        achieve_once on(clothes, ironing_board)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)

        place_clothes_on_ironing_board(clothes_shirt, ironing_board)
        place_clothes_on_ironing_board(clothes_skirt, ironing_board)
        apply_iron(ironing_board, iron, clothes_shirt)
        apply_iron(ironing_board, iron, clothes_skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, clothes:item): 
    body:
        achieve_once on(clothes, ironing_board) 
        # Ensure the clothes are on the ironing board
        achieve is_on(iron) 
        # Ensure the iron is turned on and ready for use
        # You dont need to define further specific actions because the achieve will handle the process implicitly

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt to be ironed

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt to be ironed
        
        iron_clothes(iron, clothes_shirt)
        iron_clothes(iron, clothes_skirt)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<iron: item>, Variable<clothes: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior iron_clothes(iron:item, clothes:item, ironing_board:item): 
    body:
        achieve_once on(clothes, ironing_board) 
        # Ensure the clothes are on the ironing board
        achieve is_on(iron) 
        # Ensure the iron is turned on and ready for use

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt to be ironed

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt to be ironed

        iron_clothes(iron, clothes_shirt, ironing_board)
        iron_clothes(iron, clothes_skirt, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "iron the shirt and the skirt." ?
Answer: For each piece of clothing, place it on the ironing board. Turn on the iron, then put the iron on the clothing, push and pull the iron.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_122(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_116(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothes:item, ironing_board:item, iron:item):
    body:
        achieve_once on(clothes, ironing_board)
        # Place the clothing on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        push(clothes)
        # Iron the clothing by applying pressure and moving the iron
        pull(clothes)
        # Complete the ironing process with a pulling action

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_clothes(shirt, ironing_board, iron)
        iron_clothes(skirt, ironing_board, iron)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
push_executor(clothes_shirt_2086)pull_executor(clothes_shirt_2086)push_executor(clothes_skirt_2088)pull_executor(clothes_skirt_2088)
##############################
From agent.py
push_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
pull_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
push_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
pull_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has placed the shirt and skirt on the ironing board and turned on the iron. However, the robot has not yet performed the action of applying the iron on the clothing by explicitly pushing and pulling the iron over the clothing. These steps need to be carried out to complete the task.
##############################
From agent.py
Human Instruction: The robot has placed the shirt and skirt on the ironing board and turned on the iron. However, the robot has not yet performed the action of applying the iron on the clothing by explicitly pushing and pulling the iron over the clothing. These steps need to be carried out to complete the task.

Human Guidance: For each piece of clothing, place it on the ironing board. Turn on the iron, then put the iron on the clothing, push and pull the iron.
The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for iron_2089 around ironing_board_2074.
Action 3: Walk to iron_2089.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Grab clothes_shirt_2086.
Action 9: Walk to ironing_board_2074.
Action 10: Put clothes_shirt_2086 on ironing_board_2074.
Action 11: Walk to clothes_shirt_2086.
Action 12: Grab clothes_shirt_2086.
Action 13: Walk to faucet_43.
Action 14: Switch on faucet_43.
Action 15: Wash clothes_shirt_2086.
Action 16: Switch off faucet_43.
Action 17: Walk to clothes_skirt_2088.
Action 18: Grab clothes_skirt_2088.
Action 19: Walk to ironing_board_2074.
Action 20: Put clothes_skirt_2088 on ironing_board_2074.
Action 21: Walk to clothes_skirt_2088.
Action 22: Grab clothes_skirt_2088.
Action 23: Walk to kitchen_counter_230.
Action 24: Put clothes_shirt_2086 on kitchen_counter_230.
Action 25: Switch on faucet_232.
Action 26: Wash clothes_skirt_2088.
Action 27: Switch off faucet_232.
Action 28: Grab clothes_shirt_2086.
Action 29: Walk to ironing_board_2074.
Action 30: Put clothes_shirt_2086 on ironing_board_2074.
Action 31: Put clothes_skirt_2088 on ironing_board_2074.
Action 32: Push clothes_shirt_2086.
Action 33: Pull clothes_shirt_2086.
Action 34: Push clothes_skirt_2088.
Action 35: Pull clothes_skirt_2088.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_116(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_116(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation

behavior apply_iron(clothes:item, iron:item):
    body:
        achieve_once close_char(char, ironing_board_2074)
        # Ensure character is close to the ironing board
        achieve_once on(clothes, ironing_board_2074)
        # Ensure clothes are on the ironing board
        achieve_once is_on(iron)
        # Ensure iron is turned on
        push(clothes)
        # Push the iron across the clothes
        pull(clothes)
        # Pull the iron across the clothes

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the pluggedin iron
        apply_iron(shirt, iron)
        apply_iron(skirt, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<clothes: item>, Variable<iron: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_116(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#goal_representation
 
behavior apply_iron(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        # Ensure character is close to the ironing board
        achieve_once on(clothes, ironing_board)
        # Ensure clothes are on the ironing board
        achieve_once is_on(iron)
        # Ensure iron is turned on
        push(clothes)
        # Push the iron across the clothes
        pull(clothes)
        # Pull the iron across the clothes

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the plugged in iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        apply_iron(shirt, iron, ironing_board)
        apply_iron(skirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior apply_iron(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        # Ensure character is close to the ironing board
        achieve_once on(clothes, ironing_board)
        # Ensure clothes are on the ironing board
        achieve_once is_on(iron)
        # Ensure iron is turned on
        push(clothes)
        # Push the iron across the clothes
        pull(clothes)
        # Pull the iron across the clothes

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the plugged in iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        apply_iron(shirt, iron, ironing_board)
        apply_iron(skirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
push_executor(clothes_shirt_2086)pull_executor(clothes_shirt_2086)push_executor(clothes_skirt_2088)pull_executor(clothes_skirt_2088)
##############################
From agent.py
push_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
pull_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
push_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
pull_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt.
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(kitchen_counter_230)', 'put_executor(clothes_shirt_2086, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(clothes_skirt_2088)', 'switchoff_executor(faucet_232)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)', 'push_executor(clothes_shirt_2086)', 'pull_executor(clothes_shirt_2086)', 'push_executor(clothes_skirt_2088)', 'pull_executor(clothes_skirt_2088)', 'push_executor(clothes_shirt_2086)', 'pull_executor(clothes_shirt_2086)', 'push_executor(clothes_skirt_2088)', 'pull_executor(clothes_skirt_2088)']
Time info:
Time consume: 425 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 3
goal generate times: 15
goal correct times: 3
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
