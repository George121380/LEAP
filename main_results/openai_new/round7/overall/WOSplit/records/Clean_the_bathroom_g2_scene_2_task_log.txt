From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind soap: item where:
            is_soap(soap) and inside(soap, bathroom)

        ensure_faucet_is_off(faucet)
        fill_sink_with_water(sink, faucet)
        combine_water_and_soap(sink, soap)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_bookshelf_137(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bills,bookshelf_instance)
        else:
            exp(bills,bookshelf_instance)
    eff:
        unknown[bills]=False
        close[bills,bookshelf_instance]=True
        close[bookshelf_instance,bills]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)

        bind soap: item where:
            is_soap(soap) and close(soap, sink)

        ensure_faucet_is_off(faucet)
        fill_sink_with_water(sink, faucet)
        combine_water_and_soap(sink, soap)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bills_2009_around_bookshelf_137(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bills,bookshelf_instance)
        else:
            exp(bills,bookshelf_instance)
    eff:
        unknown[bills]=False
        close[bills,bookshelf_instance]=True
        close[bookshelf_instance,bills]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)

        bind soap: item where:
            is_soap(soap)

        ensure_faucet_is_off(faucet)
        fill_sink_with_water(sink, faucet)
        combine_water_and_soap(sink, soap)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "prepare a sink of soapy water in the bathroom." ?
Answer: Put soap in the sink, then turn on the faucet to fill the sink with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior put_soap_in_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind soap: item where:
            is_soap(soap)

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, bathroom)

        put_soap_in_sink(sink, soap)
        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_306)exp(soap_2037, bathroom_counter_306)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(bathroom_counter_306)
Robot find: towel_rack_298, drawing_296, Robot is close to the bathroom_counter_306. 
##############################
From agent.py
exp(soap_2037, bathroom_counter_306)
Fail to find soap_2037 around bathroom_counter_306. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(soap_2037, bathroom_cabinet_305)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Robot find: Robot is close to the bathroom_cabinet_305. 
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot find: soap_2038, Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. bathroom_cabinet_305 is opened. 
##############################
From agent.py
exp(soap_2037, bathroom_cabinet_305)
Fail to find soap_2037 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
grab_executor(soap_2038)walk_executor(sink_307)putin_executor(soap_2038, sink_307)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
grab_executor(soap_2038)
Robot find: Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. Grabbing soap_2038 by right hand. 
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, Robot is close to the soap_2038. Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
putin_executor(soap_2038, sink_307)
Robot find: Robot is close to the soap_2038. Robot is close to the bathroom_counter_306. Robot is close to the sink_307. soap_2038 is close sink_307. sink_307 is close soap_2038. soap_2038 is inside sink_307. soap_2038 released by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on the faucet to fill the sink with water and complete the goal of preparing a sink of soapy water.
##############################
From agent.py
Human Instruction: You need to turn on the faucet to fill the sink with water and complete the goal of preparing a sink of soapy water.

Human Guidance: Put soap in the sink, then turn on the faucet to fill the sink with water.
The actions you have taken:
Action 1: Walk to bathroom_counter_306.
Action 2: look for soap_2037 around bathroom_counter_306.
Action 3: Walk to bathroom_cabinet_305.
Action 4: Open bathroom_cabinet_305.
Action 5: look for soap_2037 around bathroom_cabinet_305.
Action 6: Grab soap_2038.
Action 7: Walk to sink_307.
Action 8: Put soap_2038 into sink_307.
Action 9: Walk to faucet_308.
Action 10: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_soap_2037_around_wallshelf_187(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(soap,wallshelf_instance)
        else:
            exp(soap,wallshelf_instance)
    eff:
        unknown[soap]=False
        close[soap,wallshelf_instance]=True
        close[wallshelf_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior ensure_faucet_is_on(faucet:item):
    body:
        achieve is_on(faucet)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind soap: item where:
            is_soap(soap) and inside(soap, bathroom)

        ensure_faucet_is_off(faucet)
        combine_water_and_soap(sink, soap)
        ensure_faucet_is_on(faucet)
        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink) 

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet) 

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind soap: item where:
            is_soap(soap)

        ensure_faucet_is_off(faucet)
        add_soap_to_sink(sink, soap)
        fill_sink_with_water(sink, faucet)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bed_376(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(soap,bed_instance)
        else:
            exp(soap,bed_instance)
    eff:
        unknown[soap]=False
        close[soap,bed_instance]=True
        close[bed_instance,soap]=True
    

behavior find_mouse_2112_around_kitchen_counter_132(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mouse,kitchen_counter_instance)
        else:
            exp(mouse,kitchen_counter_instance)
    eff:
        unknown[mouse]=False
        close[mouse,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind soap: item where:
            is_soap(soap) and close(soap, sink)

        ensure_faucet_is_off(faucet)
        combine_water_and_soap(sink, soap)
        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "prepare a sink of soapy water in the bathroom." ?
Answer: Put soap in the sink, then turn on the faucet to fill the sink with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_cpuscreen_383(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(soap,cpuscreen_instance)
        else:
            exp(soap,cpuscreen_instance)
    eff:
        unknown[soap]=False
        close[soap,cpuscreen_instance]=True
        close[cpuscreen_instance,soap]=True
    

behavior find_bills_2009_around_bookshelf_137(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bills,bookshelf_instance)
        else:
            exp(bills,bookshelf_instance)
    eff:
        unknown[bills]=False
        close[bills,bookshelf_instance]=True
        close[bookshelf_instance,bills]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(faucet:item, sink:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior prepare_sink_of_soapy_water(faucet:item, sink:item, soap:item):
    body:
        ensure_faucet_is_off(faucet)
        combine_water_and_soap(sink, soap)
        fill_sink_with_water(faucet, sink)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind sink: item where:
            is_sink(sink)
        
        bind soap: item where:
            is_soap(soap)
        
        prepare_sink_of_soapy_water(faucet, sink, soap)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_faucet_is_off(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_sink_with_water(faucet:item, sink:item):
    body:
        achieve has_water(sink)

behavior combine_water_and_soap(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior prepare_sink_of_soapy_water(faucet:item, sink:item, soap:item):
    body:
        ensure_faucet_is_off(faucet)
        combine_water_and_soap(sink, soap)
        fill_sink_with_water(faucet, sink)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind sink: item where:
            is_sink(sink)
        
        bind soap: item where:
            is_soap(soap)
        
        prepare_sink_of_soapy_water(faucet, sink, soap)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(bathroom_counter_306)', 'walk_executor(bathroom_cabinet_305)', 'open_executor(bathroom_cabinet_305)', 'grab_executor(soap_2038)', 'walk_executor(sink_307)', 'putin_executor(soap_2038, sink_307)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)']
Time info:
Time consume: 153 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 54
goal generate times: 8
goal correct times: 0
action_num: 13

Task complete rate:
1
Scene_id: 2
##############################
