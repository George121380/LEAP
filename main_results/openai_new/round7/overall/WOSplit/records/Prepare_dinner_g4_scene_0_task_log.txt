From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_rice_for_frying(rice:item, pot:item, stove:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water

        achieve_once inside(rice, pot)
        # Place the rice inside the pot filled with water

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling the rice

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cut before frying
        
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        
        achieve_once inside(rice, fryingpan)
        # Add cooked rice to the frying pan
        
        achieve_once inside(egg, fryingpan)
        # Add cut egg to the frying pan
        
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind oil: item where:
            is_oil(oil)
        # Select oil

        prepare_rice_for_frying(rice, pot, stove, faucet)
        fry_rice_with_egg(rice, egg, fryingpan, stove, oil)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_kitchen_counter_230(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior cook_fried_rice(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        bind rice: item where:
            is_food_rice(rice)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_ingredients(rice, egg, fryingpan, stove)
        cook_fried_rice(fryingpan, stove)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_ingredients(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior cook_fried_rice(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        bind rice: item where:
            is_food_rice(rice)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_ingredients(rice, egg, fryingpan, stove)
        cook_fried_rice(fryingpan, stove)


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_rice_2036, cupboard_229)
Fail to find food_rice_2036 around cupboard_229. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

behavior find_towel_2056_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_rice_and_frying_pan(rice: item, frying_pan: item, kitchen_counter: item):
    body:
        achieve_once close_char(char, rice)
        achieve_once close_char(char, frying_pan)

behavior start_cooking_ingredients(rice: item, frying_pan: item, stove: item, oil: item, egg: item):
    body:
        achieve_once inside(oil, frying_pan)
        # Add oil to the frying pan
        achieve_once inside(rice, frying_pan)
        # Add rice to the frying pan
        achieve_once inside(egg, frying_pan)
        # Crack the egg into the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start cooking

behavior serve_fried_rice(frying_pan: item, plate: item):
    body:
        achieve_once inside(frying_pan, plate)
        # Transfer the cooked rice and egg to a plate

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 230
        # Select kitchen counter

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2083
        # Select frying pan with ID 2083

        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard] == 229
        # Select cupboard

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        bind stove: item where:
            is_stove(stove)
        # Select stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        gather_rice_and_frying_pan(rice, frying_pan, kitchen_counter)
        start_cooking_ingredients(rice, frying_pan, stove, oil, egg)
        serve_fried_rice(frying_pan, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_118(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==118
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior add_rice_and_egg_to_fryingpan(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        # Add rice to the frying pan
        achieve_once inside(egg, fryingpan)
        # Add egg to the frying pan

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        prepare_fryingpan(fryingpan, stove)
        add_rice_and_egg_to_fryingpan(rice, egg, fryingpan)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior add_rice_and_egg_to_fryingpan(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        # Add rice to the frying pan
        achieve_once inside(egg, fryingpan)
        # Add egg to the frying pan

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        prepare_fryingpan(fryingpan, stove)
        add_rice_and_egg_to_fryingpan(rice, egg, fryingpan)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 168 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 56
goal generate times: 4
goal correct times: 0
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
