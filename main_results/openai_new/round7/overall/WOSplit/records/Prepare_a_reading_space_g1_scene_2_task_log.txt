From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the coffee table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table that is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table that is in the home office

        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Fail to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(book_2091, wallshelf_187)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(book_2091, wallshelf_187)
Fail to find book_2091 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2091 ?
Answer: Locate dining_room_1. Inside dining_room_1, find bookshelf_136. Book_2091 is on bookshelf_136. Retrieve book_2091 from there.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate dining_room_1. Inside dining_room_1, find bookshelf_136. Book_2091 is on bookshelf_136. Retrieve book_2091 from there.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to wallshelf_187.
Action 11: look for book_2091 around wallshelf_187.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.
Action 14: look for book_2091 around bookshelf_189.
Action 15: Walk to bookshelf_137.
Action 16: Open bookshelf_137.

##############################
From agent.py
exp(book_2091, bookshelf_137)
Fail to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
grab_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. Grabbing book_2092 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the book_2092. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2092, table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. table_193 is close book_2092. book_2092 is close table_193. book_2092 is on table_193. book_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate book_2091 as instructed and place it on the coffee table in the home office. Currently, book_2092 was found and placed on a table_193, which is not identified as the coffee table in the required location. Follow the instructions to find bookshelf_136, retrieve book_2091, and then place book_2091 on the correct coffee table.
##############################
From agent.py
Human Instruction: You need to locate book_2091 as instructed and place it on the coffee table in the home office. Currently, book_2092 was found and placed on a table_193, which is not identified as the coffee table in the required location. Follow the instructions to find bookshelf_136, retrieve book_2091, and then place book_2091 on the correct coffee table.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to wallshelf_187.
Action 11: look for book_2091 around wallshelf_187.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.
Action 14: look for book_2091 around bookshelf_189.
Action 15: Walk to bookshelf_137.
Action 16: Open bookshelf_137.
Action 17: look for book_2091 around bookshelf_137.
Action 18: Walk to book_2092.
Action 19: Grab book_2092.
Action 20: Walk to table_193.
Action 21: Put book_2092 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the coffee table in the home office

        place_book_on_coffee_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the coffee table in the home office

        place_book_on_coffee_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(book_2091, table_123)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(book_2091, table_123)
Fail to find book_2091 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that book_2091 is placed on the correct coffee table identified by its correct location as the home office, not necessarily where table_193 currently is. Verify the location of table_193 and confirm it is in the home office, or find the correct table and place book_2091 there.
##############################
From agent.py
Human Instruction: You need to ensure that book_2091 is placed on the correct coffee table identified by its correct location as the home office, not necessarily where table_193 currently is. Verify the location of table_193 and confirm it is in the home office, or find the correct table and place book_2091 there.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to wallshelf_187.
Action 11: look for book_2091 around wallshelf_187.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.
Action 14: look for book_2091 around bookshelf_189.
Action 15: Walk to bookshelf_137.
Action 16: Open bookshelf_137.
Action 17: look for book_2091 around bookshelf_137.
Action 18: Walk to book_2092.
Action 19: Grab book_2092.
Action 20: Walk to table_193.
Action 21: Put book_2092 on table_193.
Action 22: Walk to table_123.
Action 23: look for book_2091 around table_123.
Action 24: Walk to bookshelf_136.
Action 25: look for book_2091 around bookshelf_136.
Action 26: Walk to book_2091.
Action 27: Grab book_2091.
Action 28: Walk to table_193.
Action 29: Put book_2091 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_wallshelf_191(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior verify_table_location(table:item, home_office:item):
    body:
        if not inside(table, home_office):
            move(table)
        achieve inside(table, home_office)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        # Select the specific book to place

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Select the specific table

        verify_table_location(table_193, home_office)
        place_book_on_table(book_2091, table_193)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_wallshelf_301(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior verify_home_office_table(table:item):
    body:
        observe(table, "Verify the location of table_193")

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind book: item where:
            is_book(book) and id[book]==2091

        bind table_193: item where:
            is_table(table_193) and id[table_193]==193

        verify_home_office_table(table_193)

        if inside(table_193, home_office):
            place_book_on_coffee_table(book, table_193)
        else:
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in home office")
                    if inside(table, home_office):
                        place_book_on_coffee_table(book, table)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_wallshelf_190(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

#goal_representation
 
behavior verify_home_office_table(table:item):
    body:
        observe(table, "Verify the location of table_193")

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind book: item where:
            is_book(book) and id[book]==2091

        bind table_193: item where:
            is_table(table_193) and id[table_193]==193

        verify_home_office_table(table_193)

        if inside(table_193, home_office):
            place_book_on_coffee_table(book, table_193)
        else:
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in home office")
                    if inside(table, home_office):
                        place_book_on_coffee_table(book, table)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cereal_2048_around_fridge_140(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#goal_representation
 
behavior verify_home_office_table(table:item):
    body:
        observe(table, "Verify the location of table_193")

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind book: item where:
            is_book(book) and id[book]==2091

        bind table_193: item where:
            is_table(table_193) and id[table_193]==193

        verify_home_office_table(table_193)

        if inside(table_193, home_office):
            place_book_on_coffee_table(book, table_193)
        else:
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in home office")
                    if inside(table, home_office):
                        place_book_on_coffee_table(book, table)
                        break

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find the book and put it on the coffee table in home office." ?
Answer: Find the book on the bookshelf and put it on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_wallshelf_301(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_box_2023_around_wallshelf_190(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(box,wallshelf_instance)
        else:
            exp(box,wallshelf_instance)
    eff:
        unknown[box]=False
        close[box,wallshelf_instance]=True
        close[wallshelf_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_table_in_home_office_and_place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind book_2091: item where:
            is_book(book_2091) and id[book_2091]==2091

        bind table_193: item where:
            is_table(table_193) and id[table_193]==193

        achieve close_char(char, home_office)
        observe(table_193, "Verify if it is inside home office")
        if inside(table_193, home_office):
            find_table_in_home_office_and_place_book(book_2091, table_193)
        else:
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if it is the correct coffee table")
                    if inside(table, home_office):
                        find_table_in_home_office_and_place_book(book_2091, table)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation

behavior find_table_in_home_office_and_place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind book_2091: item where:
            is_book(book_2091) and id[book_2091]==2091

        bind table_193: item where:
            is_table(table_193) and id[table_193]==193

        achieve close_char(char, home_office)
        observe(table_193, "Verify if it is inside home office")
        if inside(table_193, home_office):
            find_table_in_home_office_and_place_book(book_2091, table_193)
        else:
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if it is the correct coffee table")
                    if inside(table, home_office):
                        find_table_in_home_office_and_place_book(book_2091, table)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cereal_2048_around_fridge_140(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#goal_representation

behavior find_table_in_home_office_and_place_book(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193

        achieve close_char(char, home_office)
        observe(table_193, "Verify if it is inside home office")
        if inside(table_193, home_office):
            find_table_in_home_office_and_place_book(book_2091, table_193)
        else:
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if it is the correct coffee table")
                    if inside(table, home_office):
                        find_table_in_home_office_and_place_book(book_2091, table)
                        break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_wallshelf_191(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_chair_138_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior verify_table_location(table:item):
    body:
        observe(table, "Check if the table is inside the home office")

behavior move_book_to_correct_table(book:item, table:item):
    body:
        achieve inside(book, table)
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        bind table: item where:
            is_table(table)
        
        verify_table_location(table)
        
        if not inside(table, home_office):
            move_book_to_correct_table(book, table)
        else:
            place_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior verify_table_location(table:item):
    body:
        observe(table, "Check if the table is inside the home office")

behavior move_book_to_correct_table(book:item, table:item):
    body:
        achieve inside(book, table)
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        bind table: item where:
            is_table(table)
        
        verify_table_location(table)
        
        if not inside(table, home_office):
            move_book_to_correct_table(book, table)
        else:
            place_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
obs(table_193, Check if the table is inside the home office)
##############################
From agent.py
obs(table_193, Check if the table is inside the home office)
Get this information:  computer_2110 is on table_193. book_2091 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to book_2092. table_193 is close to character_219. table_193 is close to book_2091. table_193 is facing drawing_196. keyboard_2111 is on table_193. book_2092 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(wallshelf_187)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'grab_executor(book_2092)', 'walk_executor(table_193)', 'put_executor(book_2092, table_193)', 'walk_executor(table_123)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)']
Time info:
Time consume: 235 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 13
goal generate times: 7
goal correct times: 2
action_num: 21

Task complete rate:
1
Scene_id: 2
##############################
