From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_clothes_skirt_2116_around_basket_for_clothes_2040(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_detergent_2108_around_bathroom_counter_306(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(pot_2093, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_128)
Fail to find pot_2093 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(food_egg_2053, kitchen_counter_132)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. food_egg_2053 is close pot_54. pot_54 is close food_egg_2053. food_egg_2053 is inside pot_54. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The sub-task of boiling the egg is not completed. The robot needs to fill the pot with water from the faucet before placing it on the stove and turning the stove on.
##############################
From agent.py
Human Instruction: The sub-task of boiling the egg is not completed. The robot needs to fill the pot with water from the faucet before placing it on the stove and turning the stove on.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_2093 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for pot_2093 around cupboard_130.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_egg_2053 around fridge_140.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to food_egg_2053.
Action 17: Grab food_egg_2053.
Action 18: Walk to pot_54.
Action 19: Put food_egg_2053 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Put pot_54 on stove_2090.
Action 22: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
## Output:
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water from the faucet before placing it on the stove and turning the stove on. This step is necessary to prepare the pot for boiling the egg.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water from the faucet before placing it on the stove and turning the stove on. This step is necessary to prepare the pot for boiling the egg.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_2093 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for pot_2093 around cupboard_130.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_egg_2053 around fridge_140.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to food_egg_2053.
Action 17: Grab food_egg_2053.
Action 18: Walk to pot_54.
Action 19: Put food_egg_2053 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Put pot_54 on stove_2090.
Action 22: Switch on stove_2090.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet
        achieve_once inside(egg, pot)
        # Place the egg inside the pot filled with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        boil_egg(egg, pot, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2025_around_computer_379(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laser_pointer,computer_instance)
        else:
            exp(laser_pointer,computer_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,computer_instance]=True
        close[computer_instance,laser_pointer]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind egg: item where:
            is_food_egg(egg)

        prepare_pot_for_boiling_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        place_egg_in_pot(egg, pot)
        turn_on_stove(stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)

        prepare_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

behavior find_video_game_controller_2019_around_computer_379(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(video_game_controller,computer_instance)
        else:
            exp(video_game_controller,computer_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,computer_instance]=True
        close[computer_instance,video_game_controller]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        prepare_pot_with_water(pot, faucet)
        turn_on_stove(stove)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation

behavior boil_egg(egg:item, pot:item, faucet:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot filled with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_egg(egg, pot, faucet, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_egg(egg:item, pot:item, faucet:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot filled with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_egg(egg, pot, faucet, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_2093. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_2093. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. food_egg_2053 is close pot_2093. pot_2093 is close food_egg_2053. food_egg_2053 is inside pot_2093. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot still needs to be filled with water. You need to walk to the faucet, open it, place the pot under the faucet to fill it with water, and then perform the subsequent steps for boiling the egg.
##############################
From agent.py
Human Instruction: The pot still needs to be filled with water. You need to walk to the faucet, open it, place the pot under the faucet to fill it with water, and then perform the subsequent steps for boiling the egg.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Open pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_egg_2053.
Action 16: Grab food_egg_2053.
Action 17: Walk to pot_2093.
Action 18: Put food_egg_2053 into pot_2093.
Action 19: Walk to stove_2090.
Action 20: Put pot_2093 on stove_2090.
Action 21: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water. You need to walk to the faucet with the pot, switch on the faucet, place the pot under the faucet to fill it with water, and then proceed with boiling the egg.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water. You need to walk to the faucet with the pot, switch on the faucet, place the pot under the faucet to fill it with water, and then proceed with boiling the egg.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Open pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_egg_2053.
Action 16: Grab food_egg_2053.
Action 17: Walk to pot_2093.
Action 18: Put food_egg_2053 into pot_2093.
Action 19: Walk to stove_2090.
Action 20: Put pot_2093 on stove_2090.
Action 21: Switch on stove_2090.
Action 22: Grab pot_2093.
Action 23: Walk to faucet_134.
Action 24: Switch on faucet_134.
Action 25: Switch off faucet_134.
Action 26: Walk to stove_2090.
Action 27: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot filled with water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill pot with water

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot) # Put egg in pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place pot on stove
        achieve is_on(stove) # Turn on stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg: item, pot: item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)
        
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2006_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        place_egg_in_pot(egg, pot)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
            
        bind pot: item where:
            is_pot(pot)
            
        bind stove: item where:
            is_stove(stove)
            
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        place_egg_in_pot(egg, pot)
        turn_on_stove(stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
            
        bind pot: item where:
            is_pot(pot)
            
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_toaster_144(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(blender,toaster_instance)
        else:
            exp(blender,toaster_instance)
    eff:
        unknown[blender]=False
        close[blender,toaster_instance]=True
        close[toaster_instance,blender]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_blender_2032_around_kitchen_counter_128(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot of water

behavior turn_on_stove_and_boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior boil_egg(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        boil_egg(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        place_egg_in_pot(egg, pot)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cpuscreen_383(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==383
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_orange,cpuscreen_instance)
        else:
            exp(food_orange,cpuscreen_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cpuscreen_instance]=True
        close[cpuscreen_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove_and_turn_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind faucet: item where:
            is_faucet(faucet)

        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove)

        prepare_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove_and_turn_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind egg: item where:
            is_food_egg(egg)
        
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_toaster_144(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(blender,toaster_instance)
        else:
            exp(blender,toaster_instance)
    eff:
        unknown[blender]=False
        close[blender,toaster_instance]=True
        close[toaster_instance,blender]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior turn_on_stove_with_pot(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_with_pot(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior turn_on_stove_and_boil(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_pot_for_boiling(pot, faucet)
        place_egg_in_pot(egg, pot)
        turn_on_stove_and_boil(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_clothes_shirt_2114_around_washing_machine_2041(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_shirt,washing_machine_instance)
        else:
            exp(clothes_shirt,washing_machine_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,washing_machine_instance]=True
        close[washing_machine_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
## Output:

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
            
        fill_pot_with_water(pot, faucet)
        put_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_2093)', 'putin_executor(food_egg_2053, pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)']
Time info:
Time consume: 403 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 96
goal generate times: 26
goal correct times: 0
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
