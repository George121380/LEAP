From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior fill_water_in_coffee_maker(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(cup)
        # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_water_in_coffee_maker(coffee_maker, faucet)
        plug_in_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_water_in_coffee_maker(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(cup)
        # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_water_in_coffee_maker(coffee_maker, faucet)
        plug_in_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(cup_2132, table_270)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(cup_2132, table_270)
Fail to find cup_2132 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water from the faucet and pour coffee into the cup. The actions taken do not indicate that water was filled into the coffee maker nor that coffee was poured into the cup.
##############################
From agent.py
Human Instruction: You need to fill the coffee maker with water from the faucet and pour coffee into the cup. The actions taken do not indicate that water was filled into the coffee maker nor that coffee was poured into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for cup_2132 around cupboard_117.
Action 8: Walk to table_270.
Action 9: look for cup_2132 around table_270.
Action 10: Walk to table_114.
Action 11: look for cup_2132 around table_114.
Action 12: Walk to cup_2132.
Action 13: Grab cup_2132.
Action 14: Walk to faucet_20.
Action 15: Switch on faucet_20.
Action 16: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_bookshelf_124(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(coffee_filter,bookshelf_instance)
        else:
            exp(coffee_filter,bookshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bookshelf_instance]=True
        close[bookshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water inside

behavior pour_coffee_into_cup(cup:item, coffee_maker:item):
    body:
        achieve_once has_water(cup)
        # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker, faucet)
        pour_coffee_into_cup(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once inside(coffee_maker, cup)
        # Brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker, faucet)
        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)

behavior pour_coffee_into_cup(cup:item, coffee_maker:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup has coffee inside

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker, faucet)
        pour_coffee_into_cup(cup, coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior add_coffee_to_cup(coffee: item, cup: item):
    body:
        achieve_once inside(coffee, cup)
        # Add coffee to the cup

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee: item where:
            is_food_coffee(coffee)
        # Select some coffee

        fill_coffee_maker_with_water(coffee_maker, faucet)
        start_coffee_maker(coffee_maker)
        add_coffee_to_cup(coffee, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior add_coffee_to_cup(coffee: item, cup: item):
    body:
        achieve_once inside(coffee, cup)
        # Add coffee to the cup

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee: item where:
            is_food_food(coffee)
        # Select some coffee

        fill_coffee_maker_with_water(coffee_maker, faucet)
        start_coffee_maker(coffee_maker)
        add_coffee_to_cup(coffee, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior add_coffee_to_cup(coffee: item, cup: item):
    body:
        achieve_once inside(coffee, cup)
        # Add coffee to the cup

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee: item where:
            is_food_food(coffee)
        # Select some coffee

        fill_coffee_maker_with_water(coffee_maker, faucet)
        start_coffee_maker(coffee_maker)
        add_coffee_to_cup(coffee, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(food_food_2021)grab_executor(food_food_2021)walk_executor(cup_2132)putin_executor(food_food_2021, cup_2132)
##############################
From agent.py
walk_executor(food_food_2021)
Robot find: Robot is close to the cup_2132. Robot is close to the table_114. Robot is close to the food_food_2021. 
##############################
From agent.py
grab_executor(food_food_2021)
Robot find: Robot is close to the cup_2132. Robot is close to the table_114. Robot is close to the food_food_2021. Grabbing food_food_2021 by left hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the food_food_2021. 
##############################
From agent.py
putin_executor(food_food_2021, cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the food_food_2021. food_food_2021 is inside cup_2132. cup_2132 is close food_food_2021. food_food_2021 is close cup_2132. food_food_2021 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water from the faucet and ensure the coffee is poured into the cup. These steps have not been completed based on the actions taken.
##############################
From agent.py
Human Instruction: You need to fill the coffee maker with water from the faucet and ensure the coffee is poured into the cup. These steps have not been completed based on the actions taken.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for cup_2132 around cupboard_117.
Action 8: Walk to table_270.
Action 9: look for cup_2132 around table_270.
Action 10: Walk to table_114.
Action 11: look for cup_2132 around table_114.
Action 12: Walk to cup_2132.
Action 13: Grab cup_2132.
Action 14: Walk to faucet_20.
Action 15: Switch on faucet_20.
Action 16: Switch off faucet_20.
Action 17: Walk to food_food_2021.
Action 18: Grab food_food_2021.
Action 19: Walk to cup_2132.
Action 20: Put food_food_2021 into cup_2132.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item, water_source:item):
    symbol has_water_source=exists o: item : (is_faucet(o) and close(o, water_source))
    return has_water_source

behavior fill_coffee_maker_with_water(coffee_maker:item, water_source:item):
    body:
        achieve_once has_water(coffee_maker)

behavior place_cup_under_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once inside(coffee_maker, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        bind faucet: item where:
            is_faucet(faucet)

        bind cup: item where:
            is_cup(cup)

        if not is_coffee_maker_ready(coffee_maker, faucet):
            fill_coffee_maker_with_water(coffee_maker, faucet)
        
        place_cup_under_coffee_maker(cup, coffee_maker)
        make_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_water_and_add_coffee(water_source:item, coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is started

behavior pour_coffee_into_cup(coffee:item, cup:item):
    body:
        achieve_once inside(coffee, cup)
        # Pour the coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a water source (faucet)

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_water_and_add_coffee(faucet, coffee_maker)
        start_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)
        # Execute the steps to make a cup of coffee
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup into the coffee maker
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior pour_coffee_into_cup(coffee:item, cup:item, coffee_maker:item):
    body:
        achieve_once inside(coffee, cup)
        # Ensure coffee is poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker, faucet)
        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup into the coffee maker
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior pour_coffee_into_cup(coffee:item, cup:item, coffee_maker:item):
    body:
        achieve_once inside(coffee, cup)
        # Ensure coffee is poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker, faucet)
        prepare_coffee(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2132. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water; currently, there is no action indicating that water was poured into the coffee maker. Also, the coffee maker was turned on before the cup was placed, and the coffee is not confirmed to be inside the cup.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(table_270)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_food_2021)', 'grab_executor(food_food_2021)', 'walk_executor(cup_2132)', 'putin_executor(food_food_2021, cup_2132)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)']
Time info:
Time consume: 213 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 46
goal generate times: 8
goal correct times: 1
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
