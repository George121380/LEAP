From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_spectacles_2106_around_bookshelf_372(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind book: item where:
            is_book(book)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_item_on_table(spectacles, coffee_table)
        place_item_on_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind book: item where:
            is_book(book)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_item_on_table(spectacles, coffee_table)
        place_item_on_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(spectacles_2106, bookshelf_372)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_372)
Fail to find spectacles_2106 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(spectacles_2106, wallshelf_190)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_190)
Fail to find spectacles_2106 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(spectacles_2106, wallshelf_187)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_187)
Fail to find spectacles_2106 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_42)exp(spectacles_2106, ceilinglamp_42)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(ceilinglamp_42)
Robot find: drawing_118, Robot is close to the ceilinglamp_42. 
##############################
From agent.py
exp(spectacles_2106, ceilinglamp_42)
Fail to find spectacles_2106 around ceilinglamp_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(spectacles_2106, bookshelf_189)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_189)
Fail to find spectacles_2106 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_193)exp(spectacles_2106, table_193)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: Go to dining_room_1 and locate kitchen_counter_128. The spectacles_2106 can be found on top of kitchen_counter_128.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1 and locate kitchen_counter_128. The spectacles_2106 can be found on top of kitchen_counter_128.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for spectacles_2106 around bookshelf_372.
Action 4: Walk to wallshelf_190.
Action 5: look for spectacles_2106 around wallshelf_190.
Action 6: Walk to wallshelf_187.
Action 7: look for spectacles_2106 around wallshelf_187.
Action 8: Walk to ceilinglamp_42.
Action 9: look for spectacles_2106 around ceilinglamp_42.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for spectacles_2106 around bookshelf_189.
Action 13: Walk to table_193.

##############################
From agent.py
exp(spectacles_2106, table_193)
Fail to find spectacles_2106 around table_193. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The spectacles and book have been placed on table_193, but they need to be placed on the coffee table in the home office to complete the task. Move both items to the correct location.
##############################
From agent.py
Human Instruction: The spectacles and book have been placed on table_193, but they need to be placed on the coffee table in the home office to complete the task. Move both items to the correct location.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for spectacles_2106 around bookshelf_372.
Action 4: Walk to wallshelf_190.
Action 5: look for spectacles_2106 around wallshelf_190.
Action 6: Walk to wallshelf_187.
Action 7: look for spectacles_2106 around wallshelf_187.
Action 8: Walk to ceilinglamp_42.
Action 9: look for spectacles_2106 around ceilinglamp_42.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for spectacles_2106 around bookshelf_189.
Action 13: Walk to table_193.
Action 14: look for spectacles_2106 around table_193.
Action 15: Walk to kitchen_counter_128.
Action 16: look for spectacles_2106 around kitchen_counter_128.
Action 17: Walk to spectacles_2106.
Action 18: Grab spectacles_2106.
Action 19: Walk to table_193.
Action 20: Put spectacles_2106 on table_193.
Action 21: Walk to bookshelf_260.
Action 22: Open bookshelf_260.
Action 23: look for book_2091 around bookshelf_260.
Action 24: Walk to bookshelf_188.
Action 25: Open bookshelf_188.
Action 26: look for book_2091 around bookshelf_188.
Action 27: Walk to bookshelf_136.
Action 28: look for book_2091 around bookshelf_136.
Action 29: Walk to book_2091.
Action 30: Grab book_2091.
Action 31: Walk to table_193.
Action 32: Put book_2091 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_light_325(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==325
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(book,light_instance)
        else:
            exp(book,light_instance)
    eff:
        unknown[book]=False
        close[book,light_instance]=True
        close[light_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2106
        # Select spectacles

        bind book: item where:
            is_book(book) and id[book]==2091
        # Select a book

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table that is in the home office

        place_spectacles_on_table(spectacles, table)
        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_wallshelf_191(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(book,wallshelf_instance)
        else:
            exp(book,wallshelf_instance)
    eff:
        unknown[book]=False
        close[book,wallshelf_instance]=True
        close[wallshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior move_book_to_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind table: item where:
            is_table(table) and surfaces(table)

        move_spectacles_to_coffee_table(spectacles, table)
        move_book_to_coffee_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Place the spectacles on the coffee table

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2106
        # Select spectacles with ID 2106

        bind book: item where:
            is_book(book) and id[book]==2091
        # Select book with ID 2091

        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table that is inside the home office

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find my spectacles and put it on the coffe table in home office. then find the book and put it on the coffe table in home office." ?
Answer: Find the spectacles and put it on the coffee table in the home office. Then, find the book on the bookshelf and put it on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_coffee_table(spectacles, coffee_table)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior move_book_to_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        move_spectacles_to_table(spectacles, coffee_table)
        move_book_to_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
            
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        move_spectacles_to_table(spectacles, coffee_table)
        move_book_to_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_and_book_to_table(spectacles:item, book:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_and_book_to_table(spectacles, book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find my spectacles and put it on the coffe table in home office. then find the book and put it on the coffe table in home office." ?
Answer: Find the spectacles and put it on the coffee table in the home office. Find the book on the bookshelf and put it on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_basket_for_clothes_2040(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(tape,basket_for_clothes_instance)
        else:
            exp(tape,basket_for_clothes_instance)
    eff:
        unknown[tape]=False
        close[tape,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,tape]=True
    

behavior find_book_2092_around_light_325(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==325
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(book,light_instance)
        else:
            exp(book,light_instance)
    eff:
        unknown[book]=False
        close[book,light_instance]=True
        close[light_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)
        
behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table) 

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind book: item where:
            is_book(book)

        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_item_to_table(item: item, table: item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind book: item where:
            is_book(book)
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        
        move_item_to_table(spectacles, coffee_table)
        move_item_to_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        bind spectacles: item where:
            is_spectacles(spectacles)

        bind book: item where:
            is_book(book)
        
        move_spectacles_to_table(spectacles, coffee_table)
        move_book_to_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Place the spectacles on the coffee table

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind book: item where:
            is_book(book)
        # Select the book

        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find my spectacles and put it on the coffe table in home office. then find the book and put it on the coffe table in home office." ?
Answer: Find the spectacles and put it on the coffee table in the home office. Then, find the book on the bookshelf and put it on the coffee table in the home office.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles with ID 2106

        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091

        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table that is in the home office

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        place_spectacles_on_table(spectacles, table_193)
        place_book_on_table(book, table_193)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2063_around_fridge_140(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_oatmeal,fridge_instance)
        else:
            exp(food_oatmeal,fridge_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,fridge_instance]=True
        close[fridge_instance,food_oatmeal]=True
    

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation

behavior place_spectacles_on_coffee_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Place the spectacles on the coffee table

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind table193: item where:
            is_table(table193) and id[table193] == 193
        # Select table with ID 193

        bind spectacles: item where:
            is_spectacles(spectacles) and on(spectacles, table193)
        # Select the spectacles on table_193

        bind book: item where:
            is_book(book) and on(book, table193)
        # Select the book on table_193

        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        
        place_spectacles_on_coffee_table(spectacles, coffee_table)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_kitchen_counter_129(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_book_2092_around_wallshelf_191(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(book,wallshelf_instance)
        else:
            exp(book,wallshelf_instance)
    eff:
        unknown[book]=False
        close[book,wallshelf_instance]=True
        close[wallshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_coffee_table(item:item, coffee_table:item):
    body:
        achieve_once on(item, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        bind spectacles: item where:
            is_spectacles(spectacles)

        bind book: item where:
            is_book(book)

        place_item_on_coffee_table(spectacles, coffee_table)
        place_item_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Place the spectacles on the coffee table

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) # Identify the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) 
        # Select the coffee table that is in the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with specific id

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_wallshelf_191(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(book,wallshelf_instance)
        else:
            exp(book,wallshelf_instance)
    eff:
        unknown[book]=False
        close[book,wallshelf_instance]=True
        close[wallshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        
        place_spectacles_on_table(spectacles, coffee_table)
        move_book_to_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind book: item where:
            is_book(book) and id[book] == 2091

        place_spectacles_on_table(spectacles, coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(wallshelf_190)', 'walk_executor(wallshelf_187)', 'walk_executor(ceilinglamp_42)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(table_193)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)']
Time info:
Time consume: 417 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 26
goal generate times: 25
goal correct times: 1
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
