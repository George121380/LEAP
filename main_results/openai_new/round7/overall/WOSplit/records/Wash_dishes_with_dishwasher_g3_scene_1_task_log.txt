From agent.py
Reset goals: The sub-goals are: 
['Wash the bowls and plates with dishwasher. And wash forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_dishwasher_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_117(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_fork_2150_around_cupboard_117(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)exp(bowl_2141, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)exp(bowl_2142, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)walk_executor(cupboard_117)exp(fork_2150, cupboard_117)walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(fork_2150)switchoff_executor(faucet_20)walk_executor(cupboard_117)exp(fork_2151, cupboard_117)walk_executor(fork_2151)grab_executor(fork_2151)walk_executor(kitchen_counter_119)put_executor(fork_2150, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(fork_2151)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(bowl_2140, dishwasher_129)
Fail to find bowl_2140 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(cupboard_117)exp(bowl_2141, cupboard_117)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(cupboard_117)exp(bowl_2142, cupboard_117)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)walk_executor(sink_120)exp(fork_2150, sink_120)walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(fork_2150)switchoff_executor(faucet_20)walk_executor(sink_120)exp(fork_2151, sink_120)walk_executor(fork_2151)grab_executor(fork_2151)walk_executor(kitchen_counter_119)put_executor(fork_2150, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(fork_2151)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(cupboard_118)exp(bowl_2141, cupboard_118)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(cupboard_118)exp(bowl_2142, cupboard_118)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(cupboard_118)exp(plate_2152, cupboard_118)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)walk_executor(sink_120)exp(fork_2150, sink_120)walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(fork_2150)switchoff_executor(faucet_20)walk_executor(sink_120)exp(fork_2151, sink_120)walk_executor(fork_2151)grab_executor(fork_2151)walk_executor(kitchen_counter_119)put_executor(fork_2150, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(fork_2151)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(kitchen_counter_119)exp(bowl_2141, kitchen_counter_119)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(kitchen_counter_119)exp(bowl_2142, kitchen_counter_119)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(kitchen_counter_123)exp(plate_2152, kitchen_counter_123)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)walk_executor(sink_120)exp(fork_2150, sink_120)walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(fork_2150)switchoff_executor(faucet_20)walk_executor(sink_120)exp(fork_2151, sink_120)walk_executor(fork_2151)grab_executor(fork_2151)walk_executor(kitchen_counter_119)put_executor(fork_2150, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(fork_2151)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2140. bowl_2140 is close dishwasher_129. bowl_2140 is inside dishwasher_129. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2141. bowl_2141 is inside dishwasher_129. bowl_2141 is close dishwasher_129. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. 
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. dishwasher_129 is close bowl_2142. bowl_2142 is close dishwasher_129. bowl_2142 is inside dishwasher_129. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. 
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. dishwasher_129 is close plate_2152. plate_2152 is inside dishwasher_129. plate_2152 is close dishwasher_129. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the forks by hand.
##############################
From agent.py
Human Instruction: You need to wash the forks by hand.

The actions you have taken:
Action 1: Walk to dishwasher_129.
Action 2: Open dishwasher_129.
Action 3: look for bowl_2140 around dishwasher_129.
Action 4: Walk to cupboard_117.
Action 5: look for bowl_2140 around cupboard_117.
Action 6: Walk to cupboard_118.
Action 7: Open cupboard_118.
Action 8: look for bowl_2140 around cupboard_118.
Action 9: Walk to kitchen_counter_119.
Action 10: look for bowl_2140 around kitchen_counter_119.
Action 11: Walk to bowl_2140.
Action 12: Grab bowl_2140.
Action 13: Walk to dishwasher_129.
Action 14: Put bowl_2140 into dishwasher_129.
Action 15: Walk to bowl_2141.
Action 16: Grab bowl_2141.
Action 17: Walk to dishwasher_129.
Action 18: Put bowl_2141 into dishwasher_129.
Action 19: Walk to bowl_2142.
Action 20: Grab bowl_2142.
Action 21: Walk to dishwasher_129.
Action 22: Put bowl_2142 into dishwasher_129.
Action 23: Walk to plate_2152.
Action 24: Grab plate_2152.
Action 25: Walk to dishwasher_129.
Action 26: Put plate_2152 into dishwasher_129.
Action 27: Close dishwasher_129.
Action 28: Switch on dishwasher_129.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2155_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        
        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)
        # Load all dirty bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
        # Wash each dirty fork by hand

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "wash the bowls and plates with dishwasher. and wash forks by hand." ?
Answer: Put all the bowls and plates into the dishwasher. Turn on the dishwasher. Wash the forks by hand.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)
        # Load all dirty bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
        # Wash all dirty forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2011_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)
        # Ensure the fork becomes clean after washing

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)
        # Load all dirty bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
        # Wash each dirty fork by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2011_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand
        achieve clean(fork)
        # Ensure the fork is clean after washing

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)
        # Load all dirty bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
        # Wash each dirty fork by hand

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wash the bowls and plates with dishwasher. And wash forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_sink_120(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(bowl_or_plate:item, dishwasher:item):
    body:
        achieve_once inside(bowl_or_plate, dishwasher)
        # Place the bowl or plate inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) 
        # Close the dishwasher door
        achieve_once is_on(dishwasher) 
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand
        achieve clean(fork)
        # Ensure the fork is clean after washing

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)
        # Load all dirty bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
        # Wash all dirty forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2155_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior hand_wash_fork(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                hand_wash_fork(fork)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2011_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not clean(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "wash the bowls and plates with dishwasher. and wash forks by hand." ?
Answer: Put all the bowls and plates into the dishwasher. Turn on the dishwasher. Wash the forks by hand.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129

        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and inside(item, dishwasher):
                load_dishwasher(item, dishwasher)
        
        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129

        foreach item: item:
            if (is_bowl(item) or is_plate(item)):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)

        foreach fork: item:
            if is_fork(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(fork_2150)switchoff_executor(faucet_20)walk_executor(fork_2151)grab_executor(fork_2151)walk_executor(kitchen_counter_119)put_executor(fork_2150, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(fork_2151)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Grabbing fork_2150 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the fork_2150. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the fork_2150. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the fork_2150. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
grab_executor(fork_2151)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. Grabbing fork_2151 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
put_executor(fork_2150, kitchen_counter_119)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. fork_2150 is close kitchen_counter_119. fork_2150 is on kitchen_counter_119. fork_2150 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. faucet_121 is turned on. 
##############################
From agent.py
wash_executor(fork_2151)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. faucet_121 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2140, dishwasher_129)', 'walk_executor(bowl_2141)', 'grab_executor(bowl_2141)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2141, dishwasher_129)', 'walk_executor(bowl_2142)', 'grab_executor(bowl_2142)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2142, dishwasher_129)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'putin_executor(plate_2152, dishwasher_129)', 'close_executor(dishwasher_129)', 'switchon_executor(dishwasher_129)', 'walk_executor(fork_2150)', 'grab_executor(fork_2150)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(fork_2150)', 'switchoff_executor(faucet_20)', 'walk_executor(fork_2151)', 'grab_executor(fork_2151)', 'walk_executor(kitchen_counter_119)', 'put_executor(fork_2150, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'wash_executor(fork_2151)', 'switchoff_executor(faucet_121)']
Time info:
Time consume: 557 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 72
goal generate times: 12
goal correct times: 0
action_num: 37

Task complete rate:
1
Scene_id: 1
##############################
