From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor by push and pull the vacuume clearner.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_table_193(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation

behavior plug_in_vacuum_cleaner(vacuum_cleaner:item, power_socket:item):
    body:
        achieve_once plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior push_pull_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        push(vacuum_cleaner)
        pull(vacuum_cleaner)

behavior turn_off_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)

behavior unplug_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve_once unplugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        bind power_socket: item where:
            is_powersocket(power_socket)

        bind floor: item where:
            is_floor(floor)

        plug_in_vacuum_cleaner(vacuum_cleaner, power_socket)
        turn_on_vacuum_cleaner(vacuum_cleaner)
        push_pull_vacuum_cleaner(vacuum_cleaner, floor)
        turn_off_vacuum_cleaner(vacuum_cleaner)
        unplug_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_table_123(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_vacuum_cleaner(vacuum_cleaner: item, power_socket: item):
    body:
        achieve_once plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor) # Ensure the floor becomes clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        bind power_socket: item where:
            is_powersocket(power_socket)

        bind floor: item where:
            is_floor(floor)

        plug_in_vacuum_cleaner(vacuum_cleaner, power_socket)
        turn_on_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_vacuum_cleaner(vacuum_cleaner: item, power_socket: item):
    body:
        achieve_once plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor) # Ensure the floor becomes clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        bind power_socket: item where:
            is_powersocket(power_socket)

        bind floor: item where:
            is_floor(floor)

        plug_in_vacuum_cleaner(vacuum_cleaner, power_socket)
        turn_on_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(vacuum_cleaner_2094, table_123)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(vacuum_cleaner_2094, table_123)
Fail to find vacuum_cleaner_2094 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(vacuum_cleaner_2094, ironing_board_2099)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the ironing_board_2099. 
##############################
From agent.py
exp(vacuum_cleaner_2094, ironing_board_2099)
Fail to find vacuum_cleaner_2094 around ironing_board_2099. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_360)exp(vacuum_cleaner_2094, trashcan_360)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(trashcan_360)
Robot find: box_2023, needle_2012, drawing_388, Robot is close to the box_2023. Robot is close to the trashcan_360. Robot is close to the needle_2012. 
##############################
From agent.py
exp(vacuum_cleaner_2094, trashcan_360)
Fail to find vacuum_cleaner_2094 around trashcan_360. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(vacuum_cleaner_2094, fridge_140)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(vacuum_cleaner_2094, fridge_140)
Fail to find vacuum_cleaner_2094 around fridge_140. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(vacuum_cleaner_2094, basket_for_clothes_2040)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(vacuum_cleaner_2094, basket_for_clothes_2040)
Fail to find vacuum_cleaner_2094 around basket_for_clothes_2040. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_303)exp(vacuum_cleaner_2094, shower_303)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(shower_303)
Robot find: Robot is close to the shower_303. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find vacuum_cleaner_2094 ?
Answer: Go to the home office labeled as home_office_161. Inside, you will find vacuum_cleaner_2094 positioned close to couch_192. Look near couch_192 to locate the vacuum_cleaner_2094.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the home office labeled as home_office_161. Inside, you will find vacuum_cleaner_2094 positioned close to couch_192. Look near couch_192 to locate the vacuum_cleaner_2094.

The actions you have taken:
Action 1: Walk to table_123.
Action 2: look for vacuum_cleaner_2094 around table_123.
Action 3: Walk to ironing_board_2099.
Action 4: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 5: Walk to trashcan_360.
Action 6: look for vacuum_cleaner_2094 around trashcan_360.
Action 7: Walk to fridge_140.
Action 8: Switch off fridge_140.
Action 9: Open fridge_140.
Action 10: look for vacuum_cleaner_2094 around fridge_140.
Action 11: Walk to basket_for_clothes_2040.
Action 12: look for vacuum_cleaner_2094 around basket_for_clothes_2040.
Action 13: Walk to shower_303.

##############################
From agent.py
exp(vacuum_cleaner_2094, shower_303)
Fail to find vacuum_cleaner_2094 around shower_303. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(vacuum_cleaner_2094, couch_192)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(couch_192)
Robot find: pillow_195, vacuum_cleaner_2094, drawing_196, cat_2082, Robot is close to the couch_192. 
##############################
From agent.py
exp(vacuum_cleaner_2094, couch_192)
Find vacuum_cleaner_2094. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py
plugin_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. vacuum_cleaner_2094 is plugged in. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. vacuum_cleaner_2094 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The vacuum cleaner has been plugged in and turned on, but you need to push and pull the vacuum cleaner to vacuum the floor and achieve "clean(floor)."
##############################
From agent.py
Human Instruction: The vacuum cleaner has been plugged in and turned on, but you need to push and pull the vacuum cleaner to vacuum the floor and achieve "clean(floor)."

The actions you have taken:
Action 1: Walk to table_123.
Action 2: look for vacuum_cleaner_2094 around table_123.
Action 3: Walk to ironing_board_2099.
Action 4: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 5: Walk to trashcan_360.
Action 6: look for vacuum_cleaner_2094 around trashcan_360.
Action 7: Walk to fridge_140.
Action 8: Switch off fridge_140.
Action 9: Open fridge_140.
Action 10: look for vacuum_cleaner_2094 around fridge_140.
Action 11: Walk to basket_for_clothes_2040.
Action 12: look for vacuum_cleaner_2094 around basket_for_clothes_2040.
Action 13: Walk to shower_303.
Action 14: look for vacuum_cleaner_2094 around shower_303.
Action 15: Walk to couch_192.
Action 16: look for vacuum_cleaner_2094 around couch_192.
Action 17: Walk to vacuum_cleaner_2094.
Action 18: Plug in vacuum_cleaner_2094.
Action 19: Switch on vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve clean(vacuum_cleaner)
        # Ensure the vacuum cleaner is utilized to clean

behavior ensure_floor_is_clean(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor becomes clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        bind floor: item where:
            is_floor(floor)
            
        operate_vacuum_cleaner(vacuum_cleaner)
        ensure_floor_is_clean(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        achieve is_on(vacuum_cleaner)

        achieve plugged(vacuum_cleaner)

        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)

        achieve clean(floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: floor; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_check_2033_around_photoframe_210(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==210
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(check,photoframe_instance)
        else:
            exp(check,photoframe_instance)
    eff:
        unknown[check]=False
        close[check,photoframe_instance]=True
        close[photoframe_instance,check]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        bind floor: item where:
            is_floor(floor)

        achieve is_on(vacuum_cleaner)
        achieve plugged(vacuum_cleaner)

        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)

        achieve clean(floor)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)

        bind floor: item where:
            is_floor(floor)

        achieve is_on(vacuum_cleaner)
        achieve plugged(vacuum_cleaner)

        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)

        achieve clean(floor)

##############################
From agent.py-> find a plan in act()
push_executor(vacuum_cleaner_2094)pull_executor(vacuum_cleaner_2094)
##############################
From agent.py
push_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py
pull_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Vacuum the floor by push and pull the vacuume clearner.
Action History:
['walk_executor(table_123)', 'walk_executor(ironing_board_2099)', 'walk_executor(trashcan_360)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(basket_for_clothes_2040)', 'walk_executor(shower_303)', 'walk_executor(couch_192)', 'walk_executor(vacuum_cleaner_2094)', 'plugin_executor(vacuum_cleaner_2094)', 'switchon_executor(vacuum_cleaner_2094)', 'push_executor(vacuum_cleaner_2094)', 'pull_executor(vacuum_cleaner_2094)']
Time info:
Time consume: 244 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 11
goal generate times: 4
goal correct times: 1
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 1 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
