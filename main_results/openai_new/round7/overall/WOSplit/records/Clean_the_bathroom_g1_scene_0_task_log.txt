From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior clean_sink(sink:item):
    body:
        wash(sink)
        # Wash the sink to remove any dirt or grime
        achieve clean(sink)
        # Ensure the sink becomes clean after washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the bathroom sink to clean

        clean_sink(sink)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior clean_sink_directly(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        
        clean_sink_directly(sink)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior clean_sink_directly(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        
        clean_sink_directly(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink_directly(sink:item):
    body:
        achieve_once close_char(char, sink)
        # Get close to the sink
        wash(sink)
        # Wash the sink
        achieve clean(sink)
        # Ensure the sink is clean after washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42
        
        clean_bathroom_sink_directly(sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_sink_with_towel(sink:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held to wipe the sink
        wipe(sink)
        # Wipe the sink using the towel
        achieve clean(sink)
        # Ensure the sink becomes clean after wiping

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        wipe_sink_with_towel(sink, towel)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wipe_sink_with_towel(sink:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held to wipe the sink
        wipe(sink)
        # Wipe the sink using the towel
        achieve clean(sink)
        # Ensure the sink becomes clean after wiping

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        wipe_sink_with_towel(sink, towel)
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_34)exp(towel_2056, towel_rack_34)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(towel_rack_34)
Robot find: towel_rack_33, towel_2059, Robot is close to the towel_rack_34. 
##############################
From agent.py
exp(towel_2056, towel_rack_34)
Fail to find towel_2056 around towel_rack_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_2059)grab_executor(towel_2059)walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(towel_2059)
Robot find: Robot is close to the towel_rack_34. Robot is close to the towel_2059. 
##############################
From agent.py
grab_executor(towel_2059)
Robot find: Robot is close to the towel_rack_34. Robot is close to the towel_2059. Grabbing towel_2059 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the towel_2059. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
wipe_executor(sink_42)
Robot find: Robot is close to the towel_2059. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. sink_42 is cleaned. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_42)', 'wipe_executor(sink_42) (Failed)', 'walk_executor(towel_rack_34)', 'walk_executor(towel_2059)', 'grab_executor(towel_2059)', 'walk_executor(sink_42)', 'wipe_executor(sink_42)']
Time info:
Time consume: 152 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 71
goal generate times: 4
goal correct times: 0
action_num: 7

Task complete rate:
1
Scene_id: 0
##############################
