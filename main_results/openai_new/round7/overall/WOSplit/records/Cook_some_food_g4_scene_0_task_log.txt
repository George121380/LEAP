From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior boil_vegetables(pot:item, stove:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot)
        # Put vegetables inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the vegetables

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select some vegetables to boil

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge to store the pot

        fill_pot_with_water(pot, faucet)
        turn_on_stove(stove)
        boil_vegetables(pot, stove, vegetable)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(pot:item, stove:item, vegetable:item):
    body:
        achieve_once inside(vegetable, pot) # Put the vegetable inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge) # Store the pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge) # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        boil_vegetables_with_pot(pot, stove, vegetable)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_vegetables_and_water(pot:item, vegetables:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve inside(vegetables, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind fridge: item where:
            is_fridge(fridge)

        fill_pot_with_vegetables_and_water(pot, vegetables, faucet)
        boil_vegetables(pot, stove)
        turn_on_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some vegetables with pot. then store the whole pot in the fridge." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove. Put the pot in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_phone_2077_around_wallshelf_35(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(phone,wallshelf_instance)
        else:
            exp(phone,wallshelf_instance)
    eff:
        unknown[phone]=False
        close[phone,wallshelf_instance]=True
        close[wallshelf_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)
        # Ensure the vegetables are washed clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_pot_on_stove not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_hairbrush_2002_around_closetdrawer_380(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

behavior find_phone_2077_around_nightstand_102(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        boil_vegetables(pot, stove)
        store_pot_in_fridge(pot, fridge)
        close_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item, faucet:item):
    body:
        achieve_once clean(vegetable)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetable, faucet)
        fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetable, pot)
        put_on_stove(pot, stove)
        turn_on_stove(stove)
        # After boiling is completed
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function put_on_stove not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_hairbrush_2002_around_closetdrawer_380(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

behavior find_phone_2077_around_nightstand_100(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

#goal_representation

behavior wash_vegetables(vegetable:item, faucet:item):
    body:
        achieve_once clean(vegetable)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetable, faucet)
        fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        # After boiling is completed
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetables before boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select some vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_vegetables(vegetable)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        put_vegetables_in_pot(vegetable, pot)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once clean(vegetables)
        # Ensure the vegetables are clean after washing

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve inside(vegetables, pot)
        # Ensure the vegetables are inside the pot
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the pot inside the fridge
        achieve_once closed(fridge)
        # Ensure the fridge is closed after storing

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind sink: item where:
            is_sink(sink)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        
        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_vegetables(pot, stove, vegetables)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once clean(vegetables)
        # Wash the vegetables in the sink

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior boil_vegetables(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put vegetables inside the pot

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior move_pot_to_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Move the pot into the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        boil_vegetables(vegetables, pot)
        turn_off_stove(stove)
        move_pot_to_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some vegetables with pot. then store the whole pot in the fridge." ?
Answer: Wash vegetables. Fill a pot with water. Put the vegetables inside the pot. Put the pot on the stove. Turn on the stove. Then turn off the stove. Put the pot in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_cutting_board_2051(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables: item):
    body:
        wash(vegetables)
        achieve clean(vegetables)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_on_and_off_stove(stove:item):
    body:
        achieve_once is_on(stove)
        achieve_once is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetables, pot)
        achieve_once on(pot, stove)
        turn_on_and_off_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(pot_2069, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_vegetable_2041, kitchen_counter_230)
Fail to find food_vegetable_2041 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)exp(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
exp(food_vegetable_2041, cutting_board_2051)
Fail to find food_vegetable_2041 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(food_vegetable_2041, wallshelf_234)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(food_vegetable_2041, wallshelf_234)
Fail to find food_vegetable_2041 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_vegetable_2041, cupboard_229)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, cupboard_229)
Fail to find food_vegetable_2041 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_26)exp(food_vegetable_2041, ceilinglamp_26)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(ceilinglamp_26)
Robot find: Robot is close to the ceilinglamp_26. 
##############################
From agent.py
exp(food_vegetable_2041, ceilinglamp_26)
Fail to find food_vegetable_2041 around ceilinglamp_26. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_peanut_butter_2033_around_wallshelf_35(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_peanut_butter,wallshelf_instance)
        else:
            exp(food_peanut_butter,wallshelf_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,wallshelf_instance]=True
        close[wallshelf_instance,food_peanut_butter]=True
    

behavior find_food_carrot_2014_around_sink_231(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_carrot,sink_instance)
        else:
            exp(food_carrot,sink_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,sink_instance]=True
        close[sink_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_sink_231(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_vegetable,sink_instance)
        else:
            exp(food_vegetable,sink_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,sink_instance]=True
        close[sink_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Ensure the vegetables are washed

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place vegetables inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the whole pot in the fridge

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind pot: item where:
            is_pot(pot)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetable)
        fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_sink_231(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_vegetable,sink_instance)
        else:
            exp(food_vegetable,sink_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,sink_instance]=True
        close[sink_instance,food_vegetable]=True
    

behavior find_hairbrush_2002_around_nightstand_102(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(hairbrush,nightstand_instance)
        else:
            exp(hairbrush,nightstand_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,nightstand_instance]=True
        close[nightstand_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables_and_fill_pot_with_water(vegetables:item, pot:item, faucet:item):
    body:
        wash(vegetables)
        # Wash the vegetables
        achieve_once inside(vegetables, pot)
        # Put washed vegetables inside the pot
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling
        achieve_once is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables_and_fill_pot_with_water(vegetables, pot, faucet)
        boil_vegetables_on_stove(pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_vegetable_2041_around_sink_231(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_vegetable,sink_instance)
        else:
            exp(food_vegetable,sink_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,sink_instance]=True
        close[sink_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once clean(vegetables)
        # Wash the vegetables in the sink to ensure they are clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the washed vegetables inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_off_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on to start boiling
        achieve is_off(stove)
        # Ensure to turn off the stove after boiling

behavior put_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot in the fridge for storage

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door after storing the pot

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_off_stove(stove)
        put_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once clean(vegetables)
        # Wash the vegetables in the sink to ensure they are clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the washed vegetables inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_off_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on to start boiling
        achieve is_off(stove)
        # Ensure to turn off the stove after boiling

behavior put_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot in the fridge for storage

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door after storing the pot

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_off_stove(stove)
        put_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(food_vegetable_2041, sink_231)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(pot_2069, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_vegetable_2041 ?
Answer: The target item, food_vegetable_2041, is located inside fridge_289. You can find fridge_289 in dining_room_201. To assist in identification, note that food_vegetable_2041 is stored close to the door shelves inside fridge_289.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, food_vegetable_2041, is located inside fridge_289. You can find fridge_289 in dining_room_201. To assist in identification, note that food_vegetable_2041 is stored close to the door shelves inside fridge_289.

Human Guidance: Wash vegetables. Fill a pot with water. Put the vegetables inside the pot. Put the pot on the stove. Turn on the stove. Then turn off the stove. Put the pot in the fridge.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_vegetable_2041 around kitchen_counter_230.
Action 3: Walk to cutting_board_2051.
Action 4: look for food_vegetable_2041 around cutting_board_2051.
Action 5: Walk to wallshelf_234.
Action 6: look for food_vegetable_2041 around wallshelf_234.
Action 7: Walk to cupboard_229.
Action 8: Open cupboard_229.
Action 9: look for food_vegetable_2041 around cupboard_229.
Action 10: Walk to ceilinglamp_26.
Action 11: look for food_vegetable_2041 around ceilinglamp_26.
Action 12: Walk to sink_231.

##############################
From agent.py
exp(food_vegetable_2041, sink_231)
Fail to find food_vegetable_2041 around sink_231. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)
        # Ensure the vegetables are washed

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the washed vegetables inside the pot

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables
        achieve_once is_off(stove)
        # Then turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot in the fridge

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select fridge with ID 289

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and close(food_vegetable, fridge)
        # Select the vegetables close to the fridge door

        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Assume vegetables are on the kitchen counter

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        wash_vegetables(food_vegetable)
        fill_pot_with_water(pot)
        put_vegetables_in_pot(food_vegetable, pot)
        boil_vegetables(pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_bowl_2072_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        achieve_once is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior __goal__():
    body:
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable]==2041
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        wash_vegetables(food_vegetable)
        fill_pot_with_water(pot)
        place_vegetables_in_pot(food_vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)
        # Wash the vegetables before cooking

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the washed vegetables inside the pot

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge where the vegetables are stored

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_pot_on_stove not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_tray_296_around_wallshelf_35(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(tray,wallshelf_instance)
        else:
            exp(tray,wallshelf_instance)
    eff:
        unknown[tray]=False
        close[tray,wallshelf_instance]=True
        close[wallshelf_instance,tray]=True
    

#goal_representation

behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)
        # Wash the vegetables before cooking

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the washed vegetables inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge where the vegetables are stored

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some vegetables with pot. then store the whole pot in the fridge." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Turn off the stove. Put the pot in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_pot_2069(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item, sink:item):
    body:
        achieve_once clean(vegetable)
        # Wash the vegetable to make it clean

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove to start boiling the vegetables
        turn_on_stove(stove)
        # Keep the stove on until the vegetables are boiled

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Move the whole pot into the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        bind vegetable: item where:
            is_food_vegetable(vegetable) and close(vegetable, fridge)
        # Select the specific vegetable close to the door shelves inside fridge

        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select a sink, currently assuming sink_231 is in the kitchen

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        wash_vegetables(vegetable, sink)
        fill_pot_with_water(pot, sink)
        boil_vegetables_in_pot(vegetable, pot, stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables)
        # Wash the vegetables to ensure they are clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the entire pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        
        bind pot: item where:
            is_pot(pot)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        
        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once close_char(char, sink)
        # Get close to the sink to wash the vegetables
        achieve_once inside(vegetables, sink)
        # Place the vegetables inside the sink for washing
        wash(vegetables)
        # Wash the vegetables
        achieve clean(vegetables)
        # Ensure the vegetables are clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure fridge door is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the specific vegetables to boil

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with specific ID
        bind sink: item where:
            is_sink(sink)
        # Select a sink to wash the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
        boil_vegetables(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation

behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Put the whole pot in the fridge
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        wash_vegetables(vegetables)
        boil_vegetables(pot, stove, vegetables)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_potato_2035_around_pot_2069(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_potato,pot_instance)
        else:
            exp(food_potato,pot_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,pot_instance]=True
        close[pot_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_wallshelf_35(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_carrot,wallshelf_instance)
        else:
            exp(food_carrot,wallshelf_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,wallshelf_instance]=True
        close[wallshelf_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables: item):
    body:
        wash(vegetables)
        achieve clean(vegetables)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior cool_and_store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289

        bind vegetables: item where:
            is_food_vegetable(vegetables) and close(vegetables, fridge)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        put_vegetables_in_pot(vegetables, pot)
        turn_off_stove(stove)
        cool_and_store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_peanut_butter_2033_around_wallshelf_35(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_peanut_butter,wallshelf_instance)
        else:
            exp(food_peanut_butter,wallshelf_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,wallshelf_instance]=True
        close[wallshelf_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior retrieve_and_wash_vegetables(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Place vegetables inside the sink
        wash(vegetable)
        # Wash the vegetables
        achieve_once clean(vegetable)
        # Ensure vegetables are clean after washing

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot
        achieve is_on(stove)
        # Ensure the stove is on to boil the vegetables

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the whole pot in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2041
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        bind sink: item where:
            is_sink(sink)
        
        retrieve_and_wash_vegetables(vegetable, sink)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_vegetables(vegetable, pot, stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)
        # Wash vegetables to ensure they are clean

behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve on(pot, stove) 
        # Place pot on the stove
        achieve is_on(stove) 
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put vegetables inside the pot
        achieve is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the target vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        boil_vegetables(pot, stove, vegetables)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_salt_2037_around_wallshelf_35(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_salt,wallshelf_instance)
        else:
            exp(food_salt,wallshelf_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,wallshelf_instance]=True
        close[wallshelf_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables)
        # Wash the vegetables to ensure they are clean

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, vegetables:item, stove:item):
    body:
        achieve clean(vegetables) # Ensure vegetables are washed
        achieve_once on(vegetables, pot) # Put vegetables in the pot
        achieve on(pot, stove) # Place pot on the stove
        achieve is_on(stove) # Turn on the stove
        achieve_once is_off(stove) # Turn off the stove once boiling is done

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot with boiled vegetables in the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        bind dining_room: item where:
            is_dining_room(dining_room) and inside(fridge, dining_room)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and close(vegetables, fridge)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        boil_vegetables(pot, vegetables, stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2030_around_wallshelf_35(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_oatmeal,wallshelf_instance)
        else:
            exp(food_oatmeal,wallshelf_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,wallshelf_instance]=True
        close[wallshelf_instance,food_oatmeal]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_boiling_stove(stove:item):
    body:
        achieve is_on(stove)

behavior stop_boiling_stove(stove:item):
    body:
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        wash_vegetables(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        start_boiling_stove(stove)
        stop_boiling_stove(stove)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cutting_board_2051)', 'walk_executor(wallshelf_234)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(ceilinglamp_26)', 'walk_executor(sink_231)']
Time info:
Time consume: 691 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 7
goal generate times: 25
goal correct times: 2
action_num: 7

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 17 steps
Keystate: k3 - Requires: 12 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
