From agent.py
Reset goals: The sub-goals are: 
['1. Clean and prepare the fish and any other ingredients for the soup.', '2. Cook all ingredients together in a pot to make the fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_ingredients(fish:item, vegetable:item):
    body:
        if not visited(fish):
            observe(fish, "Check if the fish is suitable for cleaning")
        if not close_char(char, fish):
            walk_to(fish)
        if not inhand(fish):
            grab(fish)
        if not visited(vegetable):
            observe(vegetable, "Check if the vegetable is suitable for cleaning")
        if not close_char(char, vegetable):
            walk_to(vegetable)
        if not inhand(vegetable):
            grab(vegetable)

behavior clean_ingredients(fish:item, vegetable:item, sink:item):
    body:
        if dirty(fish):
            walk_to(sink)
            wash(fish)
        if dirty(vegetable):
            walk_to(sink)
            wash(vegetable)

behavior cut_ingredients(fish:item, vegetable:item, cutting_board:item):
    body:
        if not cut(fish) and cuttable(fish):
            put_on(fish, cutting_board)
            cuts(fish)
        if not cut(vegetable) and cuttable(vegetable):
            put_on(vegetable, cutting_board)
            cuts(vegetable)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind sink: item where:
            is_sink(sink)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        approach_ingredients(fish, vegetable)
        clean_ingredients(fish, vegetable, sink)
        cut_ingredients(fish, vegetable, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior approach_ingredients(fish:item, vegetable:item):
    body:
        if not visited(fish):
            observe(fish, "Check if the fish is suitable for cleaning")
        if not close_char(char, fish):
            walk_to(fish)
        if not inhand(fish):
            grab(fish)
        if not visited(vegetable):
            observe(vegetable, "Check if the vegetable is suitable for cleaning")
        if not close_char(char, vegetable):
            walk_to(vegetable)
        if not inhand(vegetable):
            grab(vegetable)

behavior clean_ingredients(fish:item, vegetable:item, sink:item):
    body:
        if dirty(fish):
            walk_to(sink)
            wash(fish)
        if dirty(vegetable):
            walk_to(sink)
            wash(vegetable)

behavior cut_ingredients(fish:item, vegetable:item, cutting_board:item):
    body:
        if not cut(fish) and cuttable(fish):
            put_on(fish, cutting_board)
            cuts(fish)
        if not cut(vegetable) and cuttable(vegetable):
            put_on(vegetable, cutting_board)
            cuts(vegetable)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind sink: item where:
            is_sink(sink)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        approach_ingredients(fish, vegetable)
        clean_ingredients(fish, vegetable, sink)
        cut_ingredients(fish, vegetable, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Check if the fish is suitable for cleaning)grab_executor(food_fish_2054)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if the vegetable is suitable for cleaning)grab_executor(food_vegetable_2072)walk_executor(cutting_board_2080)put_executor(food_fish_2054, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2054, Check if the fish is suitable for cleaning)grab_executor(food_fish_2054)obs(food_vegetable_2072, Check if the vegetable is suitable for cleaning)grab_executor(food_vegetable_2072)walk_executor(sink_133)wash_executor(food_fish_2054)put_executor(food_vegetable_2072, kitchen_counter_132)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(kitchen_counter_132)put_executor(food_fish_2054, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(cutting_board_2080)put_executor(food_fish_2054, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
obs(food_fish_2054, Check if the fish is suitable for cleaning)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
obs(food_vegetable_2072, Check if the vegetable is suitable for cleaning)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, pot_54, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_fish_2054 is cleaned. 
##############################
From agent.py
put_executor(food_vegetable_2072, kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_vegetable_2072 is close kitchen_counter_132. kitchen_counter_132 is close food_vegetable_2072. food_vegetable_2072 is on kitchen_counter_132. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
put_executor(food_fish_2054, kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. food_fish_2054 is close kitchen_counter_132. kitchen_counter_132 is close food_fish_2054. food_fish_2054 is on kitchen_counter_132. food_fish_2054 released by right hand. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the food_vegetable_2072. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_fish_2054, cutting_board_2080)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_fish_2054. food_fish_2054 is close cutting_board_2080. food_fish_2054 is on cutting_board_2080. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(food_vegetable_2072)walk_executor(cutting_board_2080)put_executor(food_fish_2054, cutting_board_2080)walk_executor(ceilinglamp_42)exp(knife_2036, ceilinglamp_42)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_fish_2054, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_fish_2054 is close cutting_board_2080. food_fish_2054 is on cutting_board_2080. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(ceilinglamp_42)
Robot find: drawing_118, Robot is close to the food_vegetable_2072. Robot is close to the ceilinglamp_42. 
##############################
From agent.py
exp(knife_2036, ceilinglamp_42)
Fail to find knife_2036 around ceilinglamp_42. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the fish and any vegetables needed for the soup.', '2. Prepare the cleaned ingredients by cutting them if necessary.', '3. Cook the fish and prepared vegetables in a pot with water and seasonings to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_stove_2090(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(knife,stove_instance)
        else:
            exp(knife,stove_instance)
    eff:
        unknown[knife]=False
        close[knife,stove_instance]=True
        close[stove_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def clean_and_prepare_ingredients(item:item):
    # Function to ensure the item is clean and ready for soup preparation
    if dirty(item):
        wash(item)

behavior process_fish(fish:item, cutting_board:item):
    body:
        # Ensure the fish is clean
        clean_and_prepare_ingredients(fish)
        
        # Place and prepare the fish on the cutting board
        if not on(fish, cutting_board):
            if not inhand(fish):
                grab(fish)
            put_on(fish, cutting_board)

behavior process_vegetable(vegetable:item, kitchen_counter:item):
    body:
        # Ensure the vegetable is clean
        clean_and_prepare_ingredients(vegetable)

        # Store the clean vegetable on the kitchen counter for later use
        if not on(vegetable, kitchen_counter):
            if not inhand(vegetable):
                grab(vegetable)
            put_on(vegetable, kitchen_counter)

behavior __goal__():
    body:
        # Bind fish and vegetable to their respective items
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2080

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 132

        # Execute the process of preparing fish and vegetable
        process_fish(fish, cutting_board)
        process_vegetable(vegetable, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_light_384(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==384
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(knife,light_instance)
        else:
            exp(knife,light_instance)
    eff:
        unknown[knife]=False
        close[knife,light_instance]=True
        close[light_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cleaned(item: item):
    # Function to check if an item is cleaned
    return clean(item)

def is_on_cutting_board(item: item, board: item):
    # Function to check if an item is on the cutting board
    return on(item, board)

behavior clean_items(fish: item, vegetable: item, sink: item):
    body:
        if not is_cleaned(fish):
            if not close_char(char, fish):
                walk_to(fish)
            grab(fish)
            if not close_char(char, sink):
                walk_to(sink)
            wash(fish)
            empty_a_hand()

        if not is_cleaned(vegetable):
            if not close_char(char, vegetable):
                walk_to(vegetable)
            grab(vegetable)
            if not close_char(char, sink):
                walk_to(sink)
            wash(vegetable)
            empty_a_hand()

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
            
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
            
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2080
            
        bind sink: item where:
            is_sink(sink) and id[sink] == 133
            
        clean_items(fish, vegetable, sink)
        if not is_on_cutting_board(fish, cutting_board):
            grab(fish)
            walk_to(cutting_board)
            put_on(fish, cutting_board)
            empty_a_hand()

        if not is_on_cutting_board(vegetable, cutting_board):
            grab(vegetable)
            walk_to(cutting_board)
            put_on(vegetable, cutting_board)
            empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_ceilinglamp_43(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==43
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(knife,ceilinglamp_instance)
        else:
            exp(knife,ceilinglamp_instance)
    eff:
        unknown[knife]=False
        close[knife,ceilinglamp_instance]=True
        close[ceilinglamp_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_food(item:item):
    body:
        if dirty(item) and is_food(item):
            wash(item)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        
        clean_food(fish)
        clean_food(vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_washing_machine_2041(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(knife,washing_machine_instance)
        else:
            exp(knife,washing_machine_instance)
    eff:
        unknown[knife]=False
        close[knife,washing_machine_instance]=True
        close[washing_machine_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fish_and_vegetables(fish:item, vegetable:item, sink:item):
    body:
        if not clean(fish):
            wash(fish)
        if not clean(vegetable):
            wash(vegetable)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and dirty(vegetable)
        bind sink: item where:
            is_sink(sink) and id[sink] == 133

        clean_fish_and_vegetables(fish, vegetable, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_stove_2090(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(knife,stove_instance)
        else:
            exp(knife,stove_instance)
    eff:
        unknown[knife]=False
        close[knife,stove_instance]=True
        close[stove_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item, sink:item):
    body:
        if dirty(item):
            walk_to(sink)
            wash(item)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind sink: item where:
            is_sink(sink)
        clean_item(fish, sink)
        clean_item(vegetable, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cupboard_131(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior clean_fish_and_vegetables(fish:item, vegetable:item):
    body:
        if dirty(fish):
            wash(fish)
        if dirty(vegetable):
            wash(vegetable)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072

        clean_fish_and_vegetables(fish, vegetable)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the necessary ingredients for the fish soup and wash them.', '2. Cook the ingredients together in a pot to make the fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_toaster_144(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(knife,toaster_instance)
        else:
            exp(knife,toaster_instance)
    eff:
        unknown[knife]=False
        close[knife,toaster_instance]=True
        close[toaster_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior find_ingredients_for_soup(fish:item, vegetable:item):
    body:
        if not visited(fish):
            observe(fish, "Check if the fish is suitable for cleaning")
        if not visited(vegetable):
            observe(vegetable, "Check if the vegetable is suitable for cleaning")

behavior wash_ingredients(fish:item, vegetable:item, sink:item):
    body:
        if not clean(fish):
            grab(fish)
            if not close_char(char, sink):
                walk_to(sink)
            wash(fish)
            empty_a_hand()
        
        if not clean(vegetable):
            grab(vegetable)
            if not close_char(char, sink):
                walk_to(sink)
            wash(vegetable)

behavior __goal__():
    body:
        bind food_fish: item where:
            is_food_fish(food_fish)
        
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        
        bind sink: item where:
            is_sink(sink) and id[sink]==133

        find_ingredients_for_soup(food_fish, food_vegetable)
        wash_ingredients(food_fish, food_vegetable, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_dishwasher_143(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_ingredients_for_soup(fridge:item):
    # Function to check if there are fish and vegetables around the fridge
    symbol has_fish=exists o: item : (is_food_fish(o) and close(o, fridge))
    symbol has_vegetables=exists v: item : (is_food_vegetable(v) and close(v, fridge))
    return has_fish and has_vegetables

behavior grab_and_wash_ingredients(fish:item, vegetable:item, faucet:item):
    body:
        if not inhand(fish):
            grab(fish)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if dirty(fish):
            wash(fish)
        if inhand(fish):
            empty_a_hand()

        if not inhand(vegetable):
            grab(vegetable)
        if dirty(vegetable):
            wash(vegetable)
        if inhand(vegetable):
            empty_a_hand()

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select fridge with ID 140 

        if exists o: item : close(o, fridge) and find_ingredients_for_soup(fridge):
            # Check if fish and vegetables are available around the fridge
            bind fish: item where:
                is_food_fish(fish) and close(fish, fridge)
            bind vegetable: item where:
                is_food_vegetable(vegetable) and close(vegetable, fridge)
            
            bind faucet: item where:
                is_faucet(faucet) and id[faucet] == 308
            # Use faucet with ID 308 for washing

            grab_and_wash_ingredients(fish, vegetable, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_dishwasher_143(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_ingredients_and_prepare_for_washing(fish:item, vegetable:item):
    body:
        if not visited(fish):
            observe(fish,"Check if fish is suitable for cleaning")
        if not visited(vegetable):
            observe(vegetable,"Check if vegetable is suitable for cleaning")
        if not inhand(fish):
            grab(fish)
        if not clean(fish):
            if not close_char(char, sink):
                walk_to(sink)
            wash(fish)
            put_on(fish, kitchen_counter)
        if not inhand(vegetable):
            grab(vegetable)
        if not clean(vegetable):
            if not close_char(char, sink):
                walk_to(sink)
            wash(vegetable)
            put_on(vegetable, kitchen_counter)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 132
        find_ingredients_and_prepare_for_washing(fish, vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_dishwasher_143(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior locate_ingredients_for_fish_soup(fish:item, vegetable:item, fridge:item, sink:item):
    body:
        if not visited(fish):
            walk_to(fridge)
            if is_off(fridge):
                switch_on(fridge)
            opens(fridge)
            observe(fish, "Check if fish is suitable for cleaning")
            grab(fish)

        if not visited(vegetable):
            observe(vegetable, "Check if vegetable is suitable for cleaning")
            grab(vegetable)

        walk_to(sink)
        
        if dirty(fish):
            wash(fish)
            empty_a_hand()

        if not on(vegetable, sink):
            put_on(vegetable, sink)
        
        grab(vegetable)
        if dirty(vegetable):
            wash(vegetable)
            empty_a_hand()

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind fridge: item where:
            is_fridge(fridge)
        
        bind sink: item where:
            is_sink(sink)

        locate_ingredients_for_fish_soup(fish, vegetable, fridge, sink)
#goal_representation_end

##############################
From agent.py->reset_goal

behavior locate_ingredients_for_fish_soup(fish:item, vegetable:item, fridge:item, sink:item):
    body:
        if not visited(fish):
            walk_to(fridge)
            if is_off(fridge):
                switch_on(fridge)
            opens(fridge)
            observe(fish, "Check if fish is suitable for cleaning")
            grab(fish)

        if not visited(vegetable):
            observe(vegetable, "Check if vegetable is suitable for cleaning")
            grab(vegetable)

        walk_to(sink)
        
        if dirty(fish):
            wash(fish)
            empty_a_hand()

        if not on(vegetable, sink):
            put_on(vegetable, sink)
        
        grab(vegetable)
        if dirty(vegetable):
            wash(vegetable)
            empty_a_hand()

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind fridge: item where:
            is_fridge(fridge)
        
        bind sink: item where:
            is_sink(sink)

        locate_ingredients_for_fish_soup(fish, vegetable, fridge, sink)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)put_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
put_executor(food_vegetable_2072, sink_133)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_vegetable_2072 is close sink_133. sink_133 is close food_vegetable_2072. food_vegetable_2072 is on sink_133. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the sink_133. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_118_around_drawing_118(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==118
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_ingredients_to_pot(fish:item, vegetable:item, pot:item):
    body:
        if not inside(fish, pot):
            put_inside(fish, pot)
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        add_ingredients_to_pot(fish, vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_389_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_knife_2036_around_stove_2090(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(knife,stove_instance)
        else:
            exp(knife,stove_instance)
    eff:
        unknown[knife]=False
        close[knife,stove_instance]=True
        close[stove_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients_for_soup(fish:item, vegetable:item, pot:item):
    body:
        if not inhand(fish):
            grab(fish)
        if not inhand(vegetable) and has_a_free_hand(char):
            grab(vegetable)
        if not inside(fish, pot):
            put_inside(fish, pot)
        if inhand(fish):
            empty_a_hand()
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior cook_fish_soup(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and clean(vegetable)

        bind pot: item where:
            is_pot(pot) and recipient(pot)

        bind stove: item where:
            is_stove(stove)

        prepare_ingredients_for_soup(fish, vegetable, pot)
        cook_fish_soup(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_389_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_knife_2036_around_stove_2090(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(knife,stove_instance)
        else:
            exp(knife,stove_instance)
    eff:
        unknown[knife]=False
        close[knife,stove_instance]=True
        close[stove_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredients_for_soup(ingredients:list, pot:item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients and not inside(ingredient, pot):
                grab(ingredient)
                walk_to(pot)
                put_inside(ingredient, pot)
                empty_a_hand()
                
behavior cook_soup(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        
        gather_ingredients_for_soup([fish, vegetable], pot)
        cook_soup(pot, stove)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_238_around_drawing_118(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==118
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
def prepare_ingredients_for_soup(pot: item, fish: item, vegetable: item):
    # Prepare all ingredients by placing them into the pot
    if not inside(fish, pot):
        put_inside(fish, pot)
    if not inside(vegetable, pot):
        put_inside(vegetable, pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
            
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        
        prepare_ingredients_for_soup(pot, fish, vegetable)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_196_around_table_193(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(drawing,table_instance)
        else:
            exp(drawing,table_instance)
    eff:
        unknown[drawing]=False
        close[drawing,table_instance]=True
        close[table_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_ingredients_to_pot(fish:item, vegetable:item, pot:item):
    body:
        if not inside(fish, pot):
            put_inside(fish, pot)
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior cook_ingredients_in_pot(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        add_ingredients_to_pot(fish, vegetable, pot)
        cook_ingredients_in_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_drawing_388_around_table_193(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(drawing,table_instance)
        else:
            exp(drawing,table_instance)
    eff:
        unknown[drawing]=False
        close[drawing,table_instance]=True
        close[table_instance,drawing]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_ingredients_in_pot(fish:item, vegetables:item, pot:item):
    body:
        if not inside(fish, pot):
            put_inside(fish, pot)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior cook_soup_on_stove(stove:item, pot:item):
    body:
        if open(stove):
            closes(stove)
        if is_off(stove):
            switch_on(stove)
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        
        place_ingredients_in_pot(fish, vegetables, pot)

        cook_soup_on_stove(stove, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'grab_executor(food_vegetable_2072)', 'walk_executor(sink_133)', 'wash_executor(food_fish_2054)', 'put_executor(food_vegetable_2072, kitchen_counter_132)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(sink_133)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(kitchen_counter_132)', 'put_executor(food_fish_2054, kitchen_counter_132)', 'switchoff_executor(faucet_134)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(cutting_board_2080)', 'put_executor(food_fish_2054, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(food_vegetable_2072)', 'walk_executor(cutting_board_2080)', 'put_executor(food_fish_2054, cutting_board_2080)', 'walk_executor(ceilinglamp_42)', 'walk_executor(sink_133)', 'put_executor(food_vegetable_2072, sink_133)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)']
Time info:
Time consume: 279 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 130
goal generate times: 17
goal correct times: 0
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 21 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
