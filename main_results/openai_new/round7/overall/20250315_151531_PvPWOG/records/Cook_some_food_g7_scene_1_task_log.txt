From agent.py
Reset goals: The sub-goals are: 
['1. Find the ice cream and the jam.', '2. Scoop the ice cream into a bowl and add some jam on top.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2097_around_fridge_126(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_food_jam_2098_around_fridge_126(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_jam,fridge_instance)
        else:
            exp(food_jam,fridge_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,fridge_instance]=True
        close[fridge_instance,food_jam]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_ice_cream_and_jam(ice_cream:item, jam:item):
    body:
        if not visited(ice_cream):
            observe(ice_cream, "Check where the ice cream is located")
        if not visited(jam):
            observe(jam, "Check where the jam is located")

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)

        bind jam: item where:
            is_food_jam(jam)

        locate_ice_cream_and_jam(ice_cream, jam)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_ice_cream_and_jam(ice_cream:item, jam:item):
    body:
        if not visited(ice_cream):
            observe(ice_cream, "Check where the ice cream is located")
        if not visited(jam):
            observe(jam, "Check where the jam is located")

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)

        bind jam: item where:
            is_food_jam(jam)

        locate_ice_cream_and_jam(ice_cream, jam)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_ice_cream_2097, fridge_126)walk_executor(food_ice_cream_2097)obs(food_ice_cream_2097, Check where the ice cream is located)walk_executor(fridge_126)exp(food_jam_2098, fridge_126)walk_executor(food_jam_2098)open_executor(food_jam_2098)obs(food_jam_2098, Check where the jam is located)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_ice_cream_2097, fridge_126)
Find food_ice_cream_2097. 
##############################
From agent.py-> find a plan in act()
obs(food_ice_cream_2097, Check where the ice cream is located)open_executor(food_jam_2098)obs(food_jam_2098, Check where the jam is located)
##############################
From agent.py
obs(food_ice_cream_2097, Check where the ice cream is located)
Get this information:  food_ice_cream_2097 is inside dining_room_41. food_ice_cream_2097 is inside fridge_126. food_ice_cream_2097 is close to fridge_126. food_ice_cream_2097 is close to character_240. food_ice_cream_2097 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_122(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_ice_cream_and_jam():
    body:
        foreach item: item:
            if not visited(item) and (is_food_ice_cream(item) or is_food_jam(item)):
                observe(item, "Check where the item is located")

behavior __goal__():
    body:
        find_ice_cream_and_jam()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_ice_cream_and_jam():
    body:
        foreach item: item:
            if not visited(item) and (is_food_ice_cream(item) or is_food_jam(item)):
                observe(item, "Check where the item is located")

behavior __goal__():
    body:
        find_ice_cream_and_jam()

##############################
From agent.py-> find a plan in act()
obs(food_ice_cream_2097, Check where the item is located)open_executor(food_jam_2098)obs(food_jam_2098, Check where the item is located)
##############################
From agent.py
obs(food_ice_cream_2097, Check where the item is located)
Get this information:  food_ice_cream_2097 is inside dining_room_41. food_ice_cream_2097 is inside fridge_126. food_ice_cream_2097 is close to fridge_126. food_ice_cream_2097 is close to character_240. food_ice_cream_2097 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_122(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_cheese_2088_around_kitchen_counter_123(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_items():
    body:
        foreach item: item:
            if (is_food_ice_cream(item) or is_food_jam(item)) and not visited(item):
                observe(item, "Check where the item is located")

behavior __goal__():
    body:
        observe_items()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_items():
    body:
        foreach item: item:
            if (is_food_ice_cream(item) or is_food_jam(item)) and not visited(item):
                observe(item, "Check where the item is located")

behavior __goal__():
    body:
        observe_items()

##############################
From agent.py-> find a plan in act()
obs(food_ice_cream_2097, Check where the item is located)open_executor(food_jam_2098)obs(food_jam_2098, Check where the item is located)
##############################
From agent.py
obs(food_ice_cream_2097, Check where the item is located)
Get this information:  food_ice_cream_2097 is inside dining_room_41. food_ice_cream_2097 is inside fridge_126. food_ice_cream_2097 is close to fridge_126. food_ice_cream_2097 is close to character_240. food_ice_cream_2097 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_cheese_2088_around_cupboard_118(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_fridge_and_unopened(item:item):
    # Check if the item is inside the fridge and not visited yet
    return inside(item, fridge) and not visited(item)

def is_in_jam_category(item:item):
    # Check if the item belongs to the jam category
    return is_food_jam(item)

behavior find_ice_cream_and_jam(fridge_126: item):
    body:
        foreach item: item:
            if (is_food_ice_cream(item) or is_in_jam_category(item)) and is_in_fridge_and_unopened(item):
                observe(item, "Check where the item is located")
                # Attempt to locate both the ice cream and a suitable jam inside the fridge

behavior __goal__():
    body:
        bind fridge_126: item where:
            is_fridge(fridge_126)
        find_ice_cream_and_jam(fridge_126)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_items():
    body:
        foreach item: item:
            if not visited(item) and (is_food_ice_cream(item) or is_food_jam(item)):
                observe(item, "Check where the item is located")
                
behavior __goal__():
    body:
        locate_items()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_items():
    body:
        foreach item: item:
            if not visited(item) and (is_food_ice_cream(item) or is_food_jam(item)):
                observe(item, "Check where the item is located")
                
behavior __goal__():
    body:
        locate_items()

##############################
From agent.py-> find a plan in act()
obs(food_ice_cream_2097, Check where the item is located)open_executor(food_jam_2098)obs(food_jam_2098, Check where the item is located)
##############################
From agent.py
obs(food_ice_cream_2097, Check where the item is located)
Get this information:  food_ice_cream_2097 is inside dining_room_41. food_ice_cream_2097 is inside fridge_126. food_ice_cream_2097 is close to fridge_126. food_ice_cream_2097 is close to character_240. food_ice_cream_2097 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_cheese_2088_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation

behavior find_item_locations(ice_cream:item, jam:item):
    body:
        if not visited(ice_cream):
            observe(ice_cream, "Check where the ice cream is located")
        if not visited(jam):
            observe(jam, "Check where the jam is located")

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        bind jam: item where:
            is_food_jam(jam)
        find_item_locations(ice_cream, jam)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_item_locations(ice_cream:item, jam:item):
    body:
        if not visited(ice_cream):
            observe(ice_cream, "Check where the ice cream is located")
        if not visited(jam):
            observe(jam, "Check where the jam is located")

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        bind jam: item where:
            is_food_jam(jam)
        find_item_locations(ice_cream, jam)

##############################
From agent.py-> find a plan in act()
obs(food_ice_cream_2097, Check where the ice cream is located)open_executor(food_jam_2098)obs(food_jam_2098, Check where the jam is located)
##############################
From agent.py
obs(food_ice_cream_2097, Check where the ice cream is located)
Get this information:  food_ice_cream_2097 is inside dining_room_41. food_ice_cream_2097 is inside fridge_126. food_ice_cream_2097 is close to fridge_126. food_ice_cream_2097 is close to character_240. food_ice_cream_2097 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
def has_ice_cream_and_jam_around(fridge:item):
    # Function to check if there is ice cream and jam around the fridge
    symbol has_ice_cream=exists o: item : ((is_food_ice_cream(o) or is_food_jam(o)) and close(o, fridge))
    return has_ice_cream

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select fridge with ID 126

        if exists o: item : close(o, fridge) and has_ice_cream_and_jam_around(fridge):
            # Check if the ice cream and jam are around the fridge based on the available information
            observe(fridge, "Check where the ice cream and jam are located")
            # Observe whether the items are close to the fridge
        else:
            # If the ice cream and jam are not found, initiate exploration to locate them
            foreach o: item:
                if (is_food_ice_cream(o) or is_food_jam(o)) and not visited(o):
                    observe(o, "Check if the item is ice cream or jam")
                    # Observe each unvisited food item to determine its type
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_ice_cream_and_jam_around(fridge:item):
    # Function to check if there is ice cream and jam around the fridge
    symbol has_ice_cream=exists o: item : ((is_food_ice_cream(o) or is_food_jam(o)) and close(o, fridge))
    return has_ice_cream

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select fridge with ID 126

        if exists o: item : close(o, fridge) and has_ice_cream_and_jam_around(fridge):
            # Check if the ice cream and jam are around the fridge based on the available information
            observe(fridge, "Check where the ice cream and jam are located")
            # Observe whether the items are close to the fridge
        else:
            # If the ice cream and jam are not found, initiate exploration to locate them
            foreach o: item:
                if (is_food_ice_cream(o) or is_food_jam(o)) and not visited(o):
                    observe(o, "Check if the item is ice cream or jam")
                    # Observe each unvisited food item to determine its type
 
##############################
From agent.py-> find a plan in act()
obs(fridge_126, Check where the ice cream and jam are located)
##############################
From agent.py
obs(fridge_126, Check where the ice cream and jam are located)
Get this information:  sauce_2148 is inside fridge_126. food_snack_2110 is inside fridge_126. fridge_126 is on floor_44. food_steak_2080 is inside fridge_126. food_donut_2091 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_vegetable_2113 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. fridge_126 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. food_food_2046 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_hamburger_2096 is inside fridge_126. food_potato_2107 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. fridge_126 is PLUGGED_IN. fridge_126 is OPEN. fridge_126 is OFF. fridge_126 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_bowl_2140_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_scoopable_item(item:item):
    # Function to check if an item is scoopable, ie, ice cream
    symbol is_scoopable=exists o: item : (is_food_ice_cream(o) and grabbable(o))
    return is_scoopable

behavior scoop_ice_cream_into_bowl(ice_cream:item, bowl:item):
    body:
        if not inside(ice_cream, bowl):
            put_inside(ice_cream, bowl)

behavior add_jam_on_ice_cream(bowl:item, jam:item):
    body:
        if inside(ice_cream, bowl):
            if not on(jam, ice_cream):
                put_on(jam, ice_cream)

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        bind jam: item where:
            is_food_jam(jam)

        scoop_ice_cream_into_bowl(ice_cream, bowl)
        add_jam_on_ice_cream(bowl, jam)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior scoop_ice_cream_and_add_jam(ice_cream:item, jam:item, bowl:item):
    body:
        if not inhand(ice_cream):
            grab(ice_cream)
        if not close_char(char, bowl):
            walk_to(bowl)
        if not inside(ice_cream, bowl):
            put_inside(ice_cream, bowl)
        if inhand(ice_cream):
            empty_a_hand()
        
        if not inhand(jam):
            grab(jam)
        if not on(jam, ice_cream):
            put_on(jam, ice_cream)

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and id[ice_cream] == 2097
        
        bind jam: item where:
            is_food_jam(jam) and id[jam] == 2098
        
        bind bowl: item where:
            is_bowl(bowl)
        
        scoop_ice_cream_and_add_jam(ice_cream, jam, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scoop_ice_cream_and_add_jam(ice_cream:item, jam:item, bowl:item):
    body:
        if not inhand(ice_cream):
            grab(ice_cream)
        if not close_char(char, bowl):
            walk_to(bowl)
        if not inside(ice_cream, bowl):
            put_inside(ice_cream, bowl)
        if inhand(ice_cream):
            empty_a_hand()
        
        if not inhand(jam):
            grab(jam)
        if not on(jam, ice_cream):
            put_on(jam, ice_cream)

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and id[ice_cream] == 2097
        
        bind jam: item where:
            is_food_jam(jam) and id[jam] == 2098
        
        bind bowl: item where:
            is_bowl(bowl)
        
        scoop_ice_cream_and_add_jam(ice_cream, jam, bowl)

##############################
From agent.py-> find a plan in act()
grab_executor(food_ice_cream_2097)walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)putin_executor(food_ice_cream_2097, bowl_2140)walk_executor(food_jam_2098)grab_executor(food_jam_2098)walk_executor(food_ice_cream_2097)put_executor(food_jam_2098, food_ice_cream_2097)
##############################
From agent.py
grab_executor(food_ice_cream_2097)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_ice_cream_2097 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the food_ice_cream_2097. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(bowl_2140)putin_executor(food_ice_cream_2097, bowl_2140)walk_executor(food_jam_2098)grab_executor(food_jam_2098)walk_executor(food_ice_cream_2097)put_executor(food_jam_2098, food_ice_cream_2097)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the food_ice_cream_2097. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Fail to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)putin_executor(food_ice_cream_2097, bowl_2140)walk_executor(food_jam_2098)grab_executor(food_jam_2098)walk_executor(food_ice_cream_2097)put_executor(food_jam_2098, food_ice_cream_2097)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_ice_cream_2097. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)putin_executor(food_ice_cream_2097, bowl_2140)walk_executor(food_jam_2098)grab_executor(food_jam_2098)walk_executor(food_ice_cream_2097)put_executor(food_jam_2098, food_ice_cream_2097)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the food_ice_cream_2097. Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
putin_executor(food_ice_cream_2097, bowl_2140)
Robot find: Robot is close to the food_ice_cream_2097. Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. food_ice_cream_2097 is inside bowl_2140. bowl_2140 is close food_ice_cream_2097. food_ice_cream_2097 is close bowl_2140. food_ice_cream_2097 released by right hand. 
##############################
From agent.py
walk_executor(food_jam_2098)
Robot find: Robot is close to the food_jam_2098. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_jam_2098)
Robot find: Robot is close to the food_jam_2098. Robot is close to the fridge_126. Grabbing food_jam_2098 by right hand. 
##############################
From agent.py
walk_executor(food_ice_cream_2097)
Robot find: Robot is close to the food_jam_2098. Robot is close to the food_ice_cream_2097. Robot is close to the bowl_2140. 
##############################
From agent.py
put_executor(food_jam_2098, food_ice_cream_2097)
Robot find: Robot is close to the food_jam_2098. Robot is close to the food_ice_cream_2097. Robot is close to the bowl_2140. food_ice_cream_2097 is close food_jam_2098. food_jam_2098 is close food_ice_cream_2097. food_jam_2098 is on food_ice_cream_2097. food_jam_2098 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a bowl of ice cream and add some jam on the top.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'open_executor(food_jam_2098) (Failed)', 'open_executor(food_jam_2098) (Failed)', 'open_executor(food_jam_2098) (Failed)', 'open_executor(food_jam_2098) (Failed)', 'open_executor(food_jam_2098) (Failed)', 'grab_executor(food_ice_cream_2097)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'putin_executor(food_ice_cream_2097, bowl_2140)', 'walk_executor(food_jam_2098)', 'grab_executor(food_jam_2098)', 'walk_executor(food_ice_cream_2097)', 'put_executor(food_jam_2098, food_ice_cream_2097)']
Time info:
Time consume: 125 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 128
goal generate times: 9
goal correct times: 0
action_num: 18

Task complete rate:
1
Scene_id: 1
##############################
