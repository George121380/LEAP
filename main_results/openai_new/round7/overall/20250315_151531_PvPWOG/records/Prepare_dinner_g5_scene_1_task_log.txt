From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_instrument_guitar_2028_around_bookshelf_275(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(instrument_guitar,bookshelf_instance)
        else:
            exp(instrument_guitar,bookshelf_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,bookshelf_instance]=True
        close[bookshelf_instance,instrument_guitar]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_the_steak(steak:item, fryingpan:item, stove:item):
    body:
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
        # Assume action is taken and steak gets fried
        observe(fryingpan, "Check if the steak is fried")

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        fry_the_steak(steak, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fry_the_steak(steak:item, fryingpan:item, stove:item):
    body:
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
        # Assume action is taken and steak gets fried
        observe(fryingpan, "Check if the steak is fried")

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        fry_the_steak(steak, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if the steak is fried)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if the steak is fried)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if the steak is fried)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if the steak is fried)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_steak_2080, fridge_126)
Find food_steak_2080. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if the steak is fried)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_steak_2080, fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_steak_2080 is close fryingpan_2154. fryingpan_2154 is close food_steak_2080. food_steak_2080 is on fryingpan_2154. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(fryingpan_2154, Check if the steak is fried)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to food_steak_2080. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. food_steak_2080 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_steak(steak:item):
    body:
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        cut_steak(steak)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_steak(steak:item):
    body:
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        cut_steak(steak)

##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_steak_2080. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_steak_2080. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_steak_2080. food_steak_2080 is close cutting_board_2123. food_steak_2080 is on cutting_board_2123. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_209)exp(knife_2122, computer_209)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
walk_executor(computer_209)
Robot find: chair_194, keyboard_211, mouse_213, Robot is close to the computer_209. 
##############################
From agent.py
exp(knife_2122, computer_209)
Fail to find knife_2122 around computer_209. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the knife_2037. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_steak_2080)
Robot find: Robot is close to the knife_2037. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_coffe_maker_130(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(knife,coffe_maker_instance)
        else:
            exp(knife,coffe_maker_instance)
    eff:
        unknown[knife]=False
        close[knife,coffe_maker_instance]=True
        close[coffe_maker_instance,knife]=True
    

behavior find_tray_128_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def has_fried_steak_on_cutting_board(cutting_board:item):
    # Check if there is a fried steak on the cutting board
    symbol has_steak=exists steak: item : (is_food_steak(steak) and cut(steak) and on(steak, cutting_board))
    return has_steak

behavior move_steak_onto_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            grab(steak)
            walk_to(plate)
            put_on(steak, plate)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind plate: item where:
            is_plate(plate)
        
        if exists steak: item : (is_food_steak(steak) and has_fried_steak_on_cutting_board(cutting_board)):
            bind steak: item where:
                is_food_steak(steak) and on(steak, cutting_board) and cut(steak)
                
            move_steak_onto_plate(steak, plate)
        else:
            observe(cutting_board, "Check if the cut, fried steak is on the cutting board")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_fried_steak_on_cutting_board(cutting_board:item):
    # Check if there is a fried steak on the cutting board
    symbol has_steak=exists steak: item : (is_food_steak(steak) and cut(steak) and on(steak, cutting_board))
    return has_steak

behavior move_steak_onto_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            grab(steak)
            walk_to(plate)
            put_on(steak, plate)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind plate: item where:
            is_plate(plate)
        
        if exists steak: item : (is_food_steak(steak) and has_fried_steak_on_cutting_board(cutting_board)):
            bind steak: item where:
                is_food_steak(steak) and on(steak, cutting_board) and cut(steak)
                
            move_steak_onto_plate(steak, plate)
        else:
            observe(cutting_board, "Check if the cut, fried steak is on the cutting board")

##############################
From agent.py-> find a plan in act()
obs(cutting_board_2123, Check if the cut, fried steak is on the cutting board)
##############################
From agent.py
obs(cutting_board_2123, Check if the cut, fried steak is on the cutting board)
Get this information:  cutting_board_2123 is close to kitchen_counter_119. cutting_board_2123 is close to food_steak_2080. cutting_board_2123 is close to character_240. cutting_board_2123 is on kitchen_counter_119. cutting_board_2123 is inside dining_room_41. food_steak_2080 is on cutting_board_2123. cutting_board_2123 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the cut steak onto a plate. At the moment, the steak is cut but on the cutting board, not on a plate.
##############################
From agent.py
Human Instruction: You need to put the cut steak onto a plate. At the moment, the steak is cut but on the cutting board, not on a plate.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to cupboard_117.
Action 5: look for fryingpan_2154 around cupboard_117.
Action 6: Walk to kitchen_counter_122.
Action 7: look for fryingpan_2154 around kitchen_counter_122.
Action 8: Walk to fridge_126.
Action 9: Switch off fridge_126.
Action 10: Open fridge_126.
Action 11: look for food_steak_2080 around fridge_126.
Action 12: Grab food_steak_2080.
Action 13: Walk to fryingpan_2154.
Action 14: Put food_steak_2080 on fryingpan_2154.
Action 15: Walk to stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to fryingpan_2154.
Action 18: Observe around fryingpan_2154 with the question of Check if the steak is fried.
Action 19: Walk to food_steak_2080.
Action 20: Grab food_steak_2080.
Action 21: Walk to cutting_board_2123.
Action 22: Put food_steak_2080 on cutting_board_2123.
Action 23: Walk to knifeblock_76.
Action 24: look for knife_2122 around knifeblock_76.
Action 25: Walk to computer_209.
Action 26: look for knife_2122 around computer_209.
Action 27: Walk to cupboard_118.
Action 28: Open cupboard_118.
Action 29: look for knife_2122 around cupboard_118.
Action 30: Grab knife_2037.
Action 31: Walk to food_steak_2080.
Action 32: Cut food_steak_2080.
Action 33: Invalid parameter input.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_coffe_maker_130(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(knife,coffe_maker_instance)
        else:
            exp(knife,coffe_maker_instance)
    eff:
        unknown[knife]=False
        close[knife,coffe_maker_instance]=True
        close[coffe_maker_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cut_steak_on_cutting_board(steak: item, cutting_board: item):
    # Function to check if the cut steak is on the cutting board
    symbol steak_on_cutting_board=exists o: item : (o == steak and on(o, cutting_board) and cut(o))
    return steak_on_cutting_board

behavior move_steak_to_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            grab(steak)
            put_on(steak, plate)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2123
        # Select the cutting board with ID 2123

        bind steak: item where:
            is_food_steak(steak) and is_cut_steak_on_cutting_board(steak, cutting_board)
        # Ensure the steak is cut and on the cutting board

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        move_steak_to_plate(steak, plate)
        # Move the cut steak to the plate

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_dishwasher_129(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_bathroom_cabinet_17(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(knife,bathroom_cabinet_instance)
        else:
            exp(knife,bathroom_cabinet_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak
        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak
        put_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_couch_269(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(food_food,couch_instance)
        else:
            exp(food_food,couch_instance)
    eff:
        unknown[food_food]=False
        close[food_food,couch_instance]=True
        close[couch_instance,food_food]=True
    

behavior find_knife_2122_around_bathroom_cabinet_17(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(knife,bathroom_cabinet_instance)
        else:
            exp(knife,bathroom_cabinet_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(cut_steak:item, plate:item):
    body:
        if not on(cut_steak, plate):
            put_on(cut_steak, plate)

behavior __goal__():
    body:
        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(cut_steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_bathroom_cabinet_17(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(knife,bathroom_cabinet_instance)
        else:
            exp(knife,bathroom_cabinet_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,knife]=True
    

behavior find_tray_128_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)
            # Put the steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(steak, plate)
        # Put the cut steak onto the plate

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_bathroom_cabinet_17(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(knife,bathroom_cabinet_instance)
        else:
            exp(knife,bathroom_cabinet_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak) and cut(food_steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(food_steak, plate)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_bed_197(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(knife,bed_instance)
        else:
            exp(knife,bed_instance)
    eff:
        unknown[knife]=False
        close[knife,bed_instance]=True
        close[bed_instance,knife]=True
    

behavior find_tray_2068_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        bind plate: item where:
            is_plate(plate)
        put_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_bathroom_cabinet_17(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(knife,bathroom_cabinet_instance)
        else:
            exp(knife,bathroom_cabinet_instance)
    eff:
        unknown[knife]=False
        close[knife,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,knife]=True
    

behavior find_tray_2068_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2080
        # Select steak with ID 2080

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2080
        # Select steak with ID 2080

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the knife_2037. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Grabbing food_steak_2080 by left hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the knife_2037. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, plate_2152)
Robot find: Robot is close to the knife_2037. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_steak_2080 is close plate_2152. plate_2152 is close food_steak_2080. food_steak_2080 is on plate_2152. food_steak_2080 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_steak_2080)', 'walk_executor(fryingpan_2154)', 'put_executor(food_steak_2080, fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fryingpan_2154)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(cutting_board_2123)', 'put_executor(food_steak_2080, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(computer_209)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_steak_2080)', 'cut_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(plate_2152)', 'put_executor(food_steak_2080, plate_2152)']
Time info:
Time consume: 195 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 11
goal correct times: 0
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
