From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken in the kitchen.', '2. Boil the noodles and chicken together in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_kitchen_counter_122(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_kitchen_counter_122(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_in_kitchen(item:item):
    # Function to check if an item is classified as noodles or chicken and is in the kitchen
    symbol is_food=exists room: item : (is_kitchen(room) and inside(item, room))
    return is_food

behavior find_noodles_and_chicken_in_kitchen():
    body:
        foreach item: item:
            if (is_food_noodles(item) or is_food_chicken(item)) and not visited(item):
                observe(item, "Check if it is in the kitchen")

behavior __goal__():
    body:
        if exists item: item : (is_food_noodles(item) or is_food_chicken(item)) and is_food_in_kitchen(item):
            # Check if there is noodles or chicken in the kitchen based on the available information
            bind item: item where:
                (is_food_noodles(item) or is_food_chicken(item)) and is_food_in_kitchen(item)
            walk_to(item)
        else:
            find_noodles_and_chicken_in_kitchen()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_in_kitchen(item:item):
    # Function to check if an item is classified as noodles or chicken and is in the kitchen
    symbol is_food=exists room: item : (is_kitchen(room) and inside(item, room))
    return is_food

behavior find_noodles_and_chicken_in_kitchen():
    body:
        foreach item: item:
            if (is_food_noodles(item) or is_food_chicken(item)) and not visited(item):
                observe(item, "Check if it is in the kitchen")

behavior __goal__():
    body:
        if exists item: item : (is_food_noodles(item) or is_food_chicken(item)) and is_food_in_kitchen(item):
            # Check if there is noodles or chicken in the kitchen based on the available information
            bind item: item where:
                (is_food_noodles(item) or is_food_chicken(item)) and is_food_in_kitchen(item)
            walk_to(item)
        else:
            find_noodles_and_chicken_in_kitchen()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_chicken_2089, kitchen_counter_122)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if it is in the kitchen)walk_executor(kitchen_counter_122)exp(food_noodles_2101, kitchen_counter_122)walk_executor(food_noodles_2101)obs(food_noodles_2101, Check if it is in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_chicken_2089, kitchen_counter_122)
Fail to find food_chicken_2089 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if it is in the kitchen)walk_executor(kitchen_counter_119)exp(food_noodles_2101, kitchen_counter_119)walk_executor(food_noodles_2101)obs(food_noodles_2101, Check if it is in the kitchen)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Check if it is in the kitchen)obs(food_noodles_2101, Check if it is in the kitchen)
##############################
From agent.py
obs(food_chicken_2089, Check if it is in the kitchen)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
obs(food_noodles_2101, Check if it is in the kitchen)
Get this information:  food_noodles_2101 is close to fridge_126. food_noodles_2101 is close to character_240. food_noodles_2101 is inside dining_room_41. food_noodles_2101 is inside fridge_126. food_noodles_2101 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

behavior find_milk_2115_around_toilet_15(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(milk,toilet_instance)
        else:
            exp(milk,toilet_instance)
    eff:
        unknown[milk]=False
        close[milk,toilet_instance]=True
        close[toilet_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(pot:item, noodles:item, chicken:item):
    body:
        if not inside(noodles, pot) or not inside(chicken, pot):
            put_inside(noodles, pot)
            put_inside(chicken, pot)

behavior prepare_pot(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        prepare_pot(pot, stove)
        boil_noodles_and_chicken(pot, noodles, chicken)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_to_boil(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_ingredients_in_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
            
behavior boil_noodles_and_chicken(noodles:item, chicken:item, pot:item, stove:item):
    body:
        prepare_pot_to_boil(pot)
        place_ingredients_in_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        boil_noodles_and_chicken(noodles, chicken, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

behavior find_milk_2115_around_toilet_15(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(milk,toilet_instance)
        else:
            exp(milk,toilet_instance)
    eff:
        unknown[milk]=False
        close[milk,toilet_instance]=True
        close[toilet_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_pot_with_noodles_and_chicken(pot: item, noodles: item, chicken: item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior add_water_to_pot(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        prepare_pot_with_noodles_and_chicken(pot, noodles, chicken)
        add_water_to_pot(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_and_boil(pot:item, noodle:item, chicken:item):
    body:
        if not inside(noodle, pot):
            observe(noodle, "Check where the noodles are so they can be boiled with the chicken")
        if not inside(chicken, pot):
            observe(chicken, "Check where the chicken is so they can be boiled with the noodles")
        if has_water(pot) and (inside(noodle, pot) or inside(chicken, pot)):
             If the pot has water and contains either the noodles or chicken, boil them
             Here you can assume a boil action or similarly defined step might happen

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
         Assuming noodles and chicken are objects that have been inspected
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        observe_and_boil(pot, noodles, chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_ingredients_to_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior wait_until_noodles_and_chicken_boiled(noodles:item, chicken:item, pot:item):
    body:
        if inside(noodles, pot) and inside(chicken, pot):
            observe(pot, "Observe to ensure the noodles and chicken are boiled together")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        bind noodles: item where:
            is_food_noodles(noodles)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        add_ingredients_to_pot(noodles, chicken, pot)
        
        wait_until_noodles_and_chicken_boiled(noodles, chicken, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior add_noodles_and_chicken_to_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind noodles: item where:
            is_food_noodles(noodles)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        add_noodles_and_chicken_to_pot(noodles, chicken, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_noodles_2101)grab_executor(food_noodles_2101)walk_executor(pot_78)putin_executor(food_noodles_2101, pot_78)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(pot_78)']
Time info:
Time consume: 113 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 74
goal generate times: 7
goal correct times: 0
action_num: 5

Task complete rate:
Keystate: k1 - Requires: 24 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
