From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Wash and chop the vegetables.', '3. Slice the lemon and add it to the vegetables.', '4. Combine the boiled eggs with the lemon and vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_pot_with_egg(pot:item, egg:item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior boil_egg(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind egg: item where:
            is_food_egg(egg)

        prepare_pot_with_egg(pot, egg)
        boil_egg(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior prepare_pot_with_egg(pot:item, egg:item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior boil_egg(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind egg: item where:
            is_food_egg(egg)

        prepare_pot_with_egg(pot, egg)
        boil_egg(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. food_egg_2053 is close pot_54. pot_54 is close food_egg_2053. food_egg_2053 is inside pot_54. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_bookshelf_189(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_onion,bookshelf_instance)
        else:
            exp(food_onion,bookshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bookshelf_instance]=True
        close[bookshelf_instance,food_onion]=True
    

behavior find_homework_2011_around_bookshelf_189(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetable(vegetable: item):
    body:
        if dirty(vegetable):
            wash(vegetable)

behavior chop_vegetable(vegetable: item):
    body:
        if not cut(vegetable):
            cuts(vegetable)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_vegetable(vegetable)
                chop_vegetable(vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_bookshelf_189(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_onion,bookshelf_instance)
        else:
            exp(food_onion,bookshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bookshelf_instance]=True
        close[bookshelf_instance,food_onion]=True
    

behavior find_box_2023_around_cutting_board_2080(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(box,cutting_board_instance)
        else:
            exp(box,cutting_board_instance)
    eff:
        unknown[box]=False
        close[box,cutting_board_instance]=True
        close[cutting_board_instance,box]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable)

behavior chop_vegetables(vegetable:item):
    body:
        if not cut(vegetable) and cuttable(vegetable):
            cuts(vegetable)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_vegetables(vegetable)
                chop_vegetables(vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable)

behavior chop_vegetables(vegetable:item):
    body:
        if not cut(vegetable) and cuttable(vegetable):
            cuts(vegetable)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_vegetables(vegetable)
                chop_vegetables(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(knife_2036, filing_cabinet_378)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Robot find: food_bread_2016, crayon_2020, needle_2024, check_2033, alcohol_2002, coffee_filter_2035, soap_2037, bills_2009, drawing_387, Robot is close to the food_bread_2016. Robot is close to the crayon_2020. Robot is close to the needle_2024. Robot is close to the check_2033. Robot is close to the alcohol_2002. Robot is close to the coffee_filter_2035. Robot is close to the soap_2037. Robot is close to the bills_2009. Robot is close to the filing_cabinet_378. 
##############################
From agent.py
exp(knife_2036, filing_cabinet_378)
Fail to find knife_2036 around filing_cabinet_378. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(knife_2036, bookshelf_137)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(knife_2036, bookshelf_137)
Fail to find knife_2036 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(knife_2036, bookshelf_188)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(knife_2036, bookshelf_188)
Fail to find knife_2036 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_122)exp(knife_2036, bench_122)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(bench_122)
Robot find: mat_114, Robot is close to the bench_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Navigate to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_egg_2053.
Action 16: Grab food_egg_2053.
Action 17: Walk to pot_54.
Action 18: Put food_egg_2053 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.
Action 22: Walk to food_vegetable_2072.
Action 23: Grab food_vegetable_2072.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Wash food_vegetable_2072.
Action 27: Switch off faucet_134.
Action 28: Walk to cutting_board_2080.
Action 29: Put food_vegetable_2072 on cutting_board_2080.
Action 30: Walk to knifeblock_52.
Action 31: look for knife_2036 around knifeblock_52.
Action 32: Walk to filing_cabinet_378.
Action 33: look for knife_2036 around filing_cabinet_378.
Action 34: Walk to bookshelf_137.
Action 35: Open bookshelf_137.
Action 36: look for knife_2036 around bookshelf_137.
Action 37: Walk to bookshelf_188.
Action 38: Open bookshelf_188.
Action 39: look for knife_2036 around bookshelf_188.
Action 40: Walk to bench_122.

##############################
From agent.py
exp(knife_2036, bench_122)
Fail to find knife_2036 around bench_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_lemon(lemon:item):
    body:
        if not cut(lemon):
            cuts(lemon)

behavior add_lemon_to_vegetables(lemon:item, vegetables:item):
    body:
        if cut(lemon) and not on(lemon, vegetables):
            put_on(lemon, vegetables)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        slice_lemon(lemon)
        add_lemon_to_vegetables(lemon, vegetables)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_lemon(lemon:item):
    body:
        if not cut(lemon):
            cuts(lemon)

behavior add_lemon_to_vegetables(lemon:item, vegetables:item):
    body:
        if cut(lemon) and not on(lemon, vegetables):
            put_on(lemon, vegetables)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        slice_lemon(lemon)
        add_lemon_to_vegetables(lemon, vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(food_vegetable_2072)put_executor(food_lemon_2061, food_vegetable_2072)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. cutting_board_2080 is close food_lemon_2061. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Grabbing food_lemon_2061 by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
put_executor(food_lemon_2061, food_vegetable_2072)
Robot find: Robot is close to the knife_2036. Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the food_vegetable_2072. food_lemon_2061 is close food_vegetable_2072. food_vegetable_2072 is close food_lemon_2061. food_lemon_2061 is on food_vegetable_2072. food_lemon_2061 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def combine_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior approach_bowl(bowl:item):
    body:
        if not close_char(char, bowl):
            walk_to(bowl)

behavior transfer_ingredients(items: list, bowl: item):
    body:
        foreach item: item in items:
            if not inside(item, bowl):
                put_inside(item, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and id[boiled_egg] == 2053
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2061
        
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        approach_bowl(bowl)
        combine_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior combine_ingredients_in_bowl(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        combine_ingredients_in_bowl(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(boiled_eggs: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(boiled_eggs):
            grab(boiled_eggs)
        if not inhand(lemon):
            grab(lemon)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)
        if not on(lemon, bowl):
            put_on(lemon, bowl)
        if not on(boiled_eggs, bowl):
            put_on(boiled_eggs, bowl)

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and id[boiled_eggs] == 2053 # Ensuring its the boiled egg
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients(boiled_eggs, lemon, vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_ingredients(boiled_eggs: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(boiled_eggs):
            grab(boiled_eggs)
        if not inhand(lemon):
            grab(lemon)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)
        if not on(lemon, bowl):
            put_on(lemon, bowl)
        if not on(boiled_eggs, bowl):
            put_on(boiled_eggs, bowl)

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and id[boiled_eggs] == 2053 # Ensuring its the boiled egg
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients(boiled_eggs, lemon, vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)put_executor(food_vegetable_2072, bowl_2095)put_executor(food_lemon_2061, bowl_2095)put_executor(food_egg_2053, bowl_2095)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the pot_54. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_lemon_2061. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def combine_ingredients_in_bowl(boiled_egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind bowl: item where:
            is_bowl(bowl) and clean(bowl)

        combine_ingredients_in_bowl(boiled_egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2096_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, vegetable:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2061

        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients(egg, vegetable, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if inhand(egg):
            put_inside(egg, bowl)
        if inhand(lemon):
            put_inside(lemon, bowl)
        if inhand(vegetables):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, cutting_board_2080)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and inside(lemon, cutting_board_2080)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables) and inside(vegetables, cutting_board_2080)
        
        bind bowl: item where:
            is_bowl(bowl)

        grab(egg)
        grab(lemon)
        if not inhand(vegetables):
            empty_a_hand()
            grab(vegetables)
        
        walk_to(bowl)
        combine_ingredients(egg, lemon, vegetables, bowl)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_egg_vegetables_lemon(egg: item, vegetables: item, lemon: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)

        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        combine_egg_vegetables_lemon(egg, vegetables, lemon, bowl)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_eggs_with_lemon_and_vegetables(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select cut boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for the salad

        combine_eggs_with_lemon_and_vegetables(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(boiled_egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(bowl):
            grab(bowl)
        walk_to(boiled_egg)
        walk_to(lemon)
        walk_to(vegetables)
        
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        
        combine_ingredients(boiled_egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2096_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind bowl: item where:
            is_bowl(bowl)

        combine_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2096_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind bowl: item where:
            is_bowl(bowl)
        combine_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        combine_ingredients_in_bowl(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        combine_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior combine_into_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2061
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        
        combine_into_bowl(egg, lemon, vegetables, bowl)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_54)', 'putin_executor(food_egg_2053, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_vegetable_2072, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(filing_cabinet_378)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bench_122)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_vegetable_2072)', 'cut_executor(food_vegetable_2072)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(food_lemon_2061)', 'cut_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(food_vegetable_2072)', 'put_executor(food_lemon_2061, food_vegetable_2072)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061) (Failed)', 'walk_executor(cupboard_130)']
Time info:
Time consume: 364 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 98
goal generate times: 19
goal correct times: 0
action_num: 53

Task complete rate:
Keystate: k1 - Requires: 13 steps
Keystate: k2 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
