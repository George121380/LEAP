From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.', '4. Remove the fried bananas from the pan and drain excess oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana)

behavior slice_banana(banana:item, cutting_board:item):
    body:
        if not dirty(cutting_board):
            put_on(banana, cutting_board)
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        peel_banana(banana)
        slice_banana(banana, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana)

behavior slice_banana(banana:item, cutting_board:item):
    body:
        if not dirty(cutting_board):
            put_on(banana, cutting_board)
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        peel_banana(banana)
        slice_banana(banana, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_fryingpan_2083(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(mat,fryingpan_instance)
        else:
            exp(mat,fryingpan_instance)
    eff:
        unknown[mat]=False
        close[mat,fryingpan_instance]=True
        close[fryingpan_instance,mat]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_rack_31_around_sink_42(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel_rack,sink_instance)
        else:
            exp(towel_rack,sink_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,sink_instance]=True
        close[sink_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(pan:item, stove:item, oil:item):
    body:
        if not inside(oil, pan):
            put_inside(oil, pan)
        if not on(pan, stove):
            put_on(pan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        heat_oil_in_pan(pan, stove, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(pan:item, stove:item, oil:item):
    body:
        if not inside(oil, pan):
            put_inside(oil, pan)
        if not on(pan, stove):
            put_on(pan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        heat_oil_in_pan(pan, stove, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_napkin_2005(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind napkin_instance:item where:
            is_napkin(napkin_instance) and id[napkin_instance]==2005
        achieve close_char(char,napkin_instance)
        if can_open(napkin_instance):
            achieve_once open(napkin_instance)
            exp(mat,napkin_instance)
        else:
            exp(mat,napkin_instance)
    eff:
        unknown[mat]=False
        close[mat,napkin_instance]=True
        close[napkin_instance,mat]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_frying_banana(banana: item, fryingpan: item, stove: item):
    body:
        if not close_char(char, stove):
            walk_to(stove)
        if not on(banana, fryingpan):
            put_inside(banana, fryingpan)

behavior fry_banana(banana: item, fryingpan: item):
    body:
        if not cut(banana):
            cuts(banana)
        if is_off(stove):
            switch_on(stove)
        # Observe to ensure banana slices are fried until golden brown
        observe(fryingpan, "Check if the banana slices are golden brown")
        if is_on(stove):
            switch_off(stove)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        approach_frying_banana(banana, fryingpan, stove)
        fry_banana(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    symbol on_stove=exists o: item : (is_fryingpan(o) and on(o, stove))
    return on_stove

behavior fry_banana_slices(fryingpan:item, stove:item): 
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior check_banana_slices(fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_on_stove(fryingpan, stove)
        fry_banana_slices(fryingpan, stove)
        check_banana_slices(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(fryingpan:item, stove:item, bananas:item):
    body:
        if inhand(bananas):
            put_on(bananas, fryingpan)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas) and inhand(bananas)
        fry_bananas(fryingpan, stove, bananas)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan:item):
    body:
        if not dirty(fryingpan):
            observe(fryingpan, "Check if it is ready for frying banana slices")
        if dirty(fryingpan):
            observe(fryingpan, "Check if the banana slices are frying")
            watch(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        
        walk_to(stove_2065)
        fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan:item, banana_slices:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and close(slice, fryingpan):
                put_inside(slice, fryingpan)
        
        if not is_on(stove_2065):
            switch_on(stove_2065)

behavior observe_bananas(fryingpan:item):
    body:
        while not browned(banana_slices):
            observe(fryingpan, "Check if banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        
        fry_banana_slices(fryingpan, banana_slices)
        observe_bananas(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_banana_and_fry(banana:item, fryingpan:item, stove:item):
    body:
        if not inhand(banana):
            grab(banana)
        if not on(banana, fryingpan):
            put_on(banana, fryingpan)
        if not is_on(stove):
            switch_on(stove)

behavior fry_banana_slices(fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")
        # Assume observation determines when bananas are finished frying

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        grab_banana_and_fry(banana, fryingpan, stove)
        fry_banana_slices(fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_banana_and_fry(banana:item, fryingpan:item, stove:item):
    body:
        if not inhand(banana):
            grab(banana)
        if not on(banana, fryingpan):
            put_on(banana, fryingpan)
        if not is_on(stove):
            switch_on(stove)

behavior fry_banana_slices(fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")
        # Assume observation determines when bananas are finished frying

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        grab_banana_and_fry(banana, fryingpan, stove)
        fry_banana_slices(fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on stove_2065. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has not successfully completed the sub-task of frying the banana slices until golden brown because the observation did not confirm that the banana slices are indeed golden brown.
##############################
From agent.py
Human Instruction: The robot has not successfully completed the sub-task of frying the banana slices until golden brown because the observation did not confirm that the banana slices are indeed golden brown.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to food_banana_2011.
Action 17: Cut food_banana_2011.
Action 18: Walk to oil_2079.
Action 19: Grab oil_2079.
Action 20: Walk to fryingpan_2083.
Action 21: Put oil_2079 into fryingpan_2083.
Action 22: Grab fryingpan_2083.
Action 23: Walk to stove_2065.
Action 24: Put fryingpan_2083 on stove_2065.
Action 25: Switch on stove_2065.
Action 26: Walk to food_banana_2011.
Action 27: Grab food_banana_2011.
Action 28: Walk to fryingpan_2083.
Action 29: Put food_banana_2011 on fryingpan_2083.
Action 30: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_golden_brown(banana:item):
    # Function to check if the banana is golden brown
    symbol golden_brown=exists o: item : (is_food_banana(o) and visited(o))
    return golden_brown

behavior fry_banana(banana:item, fryingpan:item):
    body:
        if not visited(banana) or not is_banana_golden_brown(banana):
            observe(fryingpan, "Check if the banana slices are golden brown")
            
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        fry_banana(banana, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_banana_golden_brown(banana:item):
    # Function to check if the banana is golden brown
    symbol golden_brown=exists o: item : (is_food_banana(o) and visited(o))
    return golden_brown

behavior fry_banana(banana:item, fryingpan:item):
    body:
        if not visited(banana) or not is_banana_golden_brown(banana):
            observe(fryingpan, "Check if the banana slices are golden brown")
            
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        fry_banana(banana, fryingpan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on stove_2065. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The task of frying the banana slices until golden brown has not been completed. You need to continue frying the banana slices and observe them until they are confirmed to be golden brown.
##############################
From agent.py
Human Instruction: The task of frying the banana slices until golden brown has not been completed. You need to continue frying the banana slices and observe them until they are confirmed to be golden brown.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to food_banana_2011.
Action 17: Cut food_banana_2011.
Action 18: Walk to oil_2079.
Action 19: Grab oil_2079.
Action 20: Walk to fryingpan_2083.
Action 21: Put oil_2079 into fryingpan_2083.
Action 22: Grab fryingpan_2083.
Action 23: Walk to stove_2065.
Action 24: Put fryingpan_2083 on stove_2065.
Action 25: Switch on stove_2065.
Action 26: Walk to food_banana_2011.
Action 27: Grab food_banana_2011.
Action 28: Walk to fryingpan_2083.
Action 29: Put food_banana_2011 on fryingpan_2083.
Action 30: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 31: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_banana_slices_golden_brown(pan:item):
    # Check if the banana slices in the pan are golden brown
    symbol banana_slices_golden_brown=exists o: item : (is_food_banana(o) and on(o, pan) and visited(o))
    return banana_slices_golden_brown

behavior fry_banana_slices(pan:item, stove:item):
    body:
        if not is_banana_slices_golden_brown(pan):
            walk_to(pan)
            if is_off(stove):
                switch_on(stove)
            observe(pan, "Check if the banana slices are golden brown")
            # Continue frying until the banana slices are golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        fry_banana_slices(pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_banana_slices_golden_brown(pan:item):
    # Check if the banana slices in the pan are golden brown
    symbol banana_slices_golden_brown=exists o: item : (is_food_banana(o) and on(o, pan) and visited(o))
    return banana_slices_golden_brown

behavior fry_banana_slices(pan:item, stove:item):
    body:
        if not is_banana_slices_golden_brown(pan):
            walk_to(pan)
            if is_off(stove):
                switch_on(stove)
            observe(pan, "Check if the banana slices are golden brown")
            # Continue frying until the banana slices are golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2083
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        fry_banana_slices(pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on stove_2065. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The banana slices are not yet confirmed to be golden brown. You need to continue frying the banana slices on the stove and observe them until they reach the golden brown stage as indicated by the desired color change.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_slices_golden(fryingpan:item):
    # Function to check if the banana slices are golden brown
    symbol golden_brown=exists o: item : (is_food_banana(o) and close(o, fryingpan) and visited(o))
    return golden_brown

behavior remove_fried_bananas_and_drain_oil(banana:item, fry_pan:item):
    body:
        if golden_brown(fry_pan):
            grab(banana)
            if inhand(banana):
                observe(banana, "Check for excess oil")
                if has_water(banana):  # Assuming this indicates excess oil
                    squeeze(banana)  # Drain excess oil
            empty_a_hand()

behavior continue_frying(fry_pan:item):
    body:
        if not is_banana_slices_golden(fry_pan):
            observe(fry_pan, "Check if the banana slices are golden brown")
            continue_frying(fry_pan)

behavior __goal__():
    body:
        bind fry_pan: item where:
             is_fryingpan(fry_pan) and id[fry_pan] == 2083

        foreach banana: item:
            if is_food_banana(banana) and on(banana, fry_pan) and not visited(banana):
                continue_frying(fry_pan)
                remove_fried_bananas_and_drain_oil(banana, fry_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_sink_42(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_bananas_from_fryingpan(bananas:item, fryingpan:item):
    body:
        if not inhand(bananas):
            grab(bananas)
            # Grab the bananas from the frying pan

behavior drain_excess_oil(bananas:item, tray:item):
    body:
        if not on(bananas, tray):
            put_on(bananas, tray)
            # Put the bananas on the tray to drain excess oil

behavior observe_banana_color(bananas:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")
        # Observe to check the color of the banana slices in frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        observe_banana_color(bananas, fryingpan)
        grab_bananas_from_fryingpan(bananas, fryingpan)
        walk_to(fryingpan)
        bind tray: item where:
            is_tray(tray)
        drain_excess_oil(bananas, tray)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_bananas_from_fryingpan(bananas:item, fryingpan:item):
    body:
        if not inhand(bananas):
            grab(bananas)
            # Grab the bananas from the frying pan

behavior drain_excess_oil(bananas:item, tray:item):
    body:
        if not on(bananas, tray):
            put_on(bananas, tray)
            # Put the bananas on the tray to drain excess oil

behavior observe_banana_color(bananas:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")
        # Observe to check the color of the banana slices in frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        observe_banana_color(bananas, fryingpan)
        grab_bananas_from_fryingpan(bananas, fryingpan)
        walk_to(fryingpan)
        bind tray: item where:
            is_tray(tray)
        drain_excess_oil(bananas, tray)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the banana slices are golden brown)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)walk_executor(sink_42)exp(tray_296, sink_42)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on stove_2065. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Robot is close to the stove_2065. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(tray_296, sink_42)
Fail to find tray_296 around sink_42. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_sink_231(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_banana_slices(fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior remove_bananas_from_pan(fryingpan:item, tray:item):
    body:
        if not on(tray, fryingpan):
            put_on(tray, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind tray: item where:
            is_tray(tray) and close(tray, sink_42)
        
        check_banana_slices(fryingpan) 
        
        remove_bananas_from_pan(fryingpan, tray)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_sink_231(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def are_bananas_golden(fryingpan:item):
    symbol bananas_golden=exists o: item : (is_food_banana(o) and cut(o) and visited(o))
    return bananas_golden

behavior grab_and_drain_bananas(banana:item, tray:item):
    body:
        if not inhand(banana):
            grab(banana)
        if not close(banana, tray):
            put_on(banana, tray)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        if not are_bananas_golden(fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

        if are_bananas_golden(fryingpan):
            bind banana: item where:
                is_food_banana(banana) and cut(banana) and visited(banana)
            bind tray: item where:
                is_tray(tray)
            walk_to(banana)
            grab_and_drain_bananas(banana, tray)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def are_bananas_golden(fryingpan:item):
    symbol bananas_golden=exists o: item : (is_food_banana(o) and cut(o) and visited(o))
    return bananas_golden

behavior grab_and_drain_bananas(banana:item, tray:item):
    body:
        if not inhand(banana):
            grab(banana)
        if not close(banana, tray):
            put_on(banana, tray)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        if not are_bananas_golden(fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

        if are_bananas_golden(fryingpan):
            bind banana: item where:
                is_food_banana(banana) and cut(banana) and visited(banana)
            bind tray: item where:
                is_tray(tray)
            walk_to(banana)
            grab_and_drain_bananas(banana, tray)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is close to character_65. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue frying the banana slices in the pan until they are confirmed to be golden brown. Once they are golden brown, remove them from the pan and drain the excess oil.
##############################
From agent.py
Human Instruction: You need to continue frying the banana slices in the pan until they are confirmed to be golden brown. Once they are golden brown, remove them from the pan and drain the excess oil.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to food_banana_2011.
Action 17: Cut food_banana_2011.
Action 18: Walk to oil_2079.
Action 19: Grab oil_2079.
Action 20: Walk to fryingpan_2083.
Action 21: Put oil_2079 into fryingpan_2083.
Action 22: Grab fryingpan_2083.
Action 23: Walk to stove_2065.
Action 24: Put fryingpan_2083 on stove_2065.
Action 25: Switch on stove_2065.
Action 26: Walk to food_banana_2011.
Action 27: Grab food_banana_2011.
Action 28: Walk to fryingpan_2083.
Action 29: Put food_banana_2011 on fryingpan_2083.
Action 30: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 31: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 32: Walk to fryingpan_2083.
Action 33: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 34: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 35: Walk to food_banana_2011.
Action 36: Grab food_banana_2011.
Action 37: Walk to fryingpan_2083.
Action 38: Walk to sink_42.
Action 39: look for tray_296 around sink_42.
Action 40: Walk to fryingpan_2083.
Action 41: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_tray_296_around_sink_231(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_fried_bananas(banana:item, fryingpan:item):
    body:
        if on(banana, fryingpan):
            grab(banana)
        
behavior drain_excess_oil(banana:item, tray:item):
    body:
        if inhand(banana):
            put_on(banana, tray)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind tray: item where:
            is_tray(tray) and id[tray] == 296
            
        remove_fried_bananas(banana, fryingpan)
        walk_to(tray)
        drain_excess_oil(banana, tray)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior remove_fried_bananas(banana:item, fryingpan:item):
    body:
        if on(banana, fryingpan):
            grab(banana)
        
behavior drain_excess_oil(banana:item, tray:item):
    body:
        if inhand(banana):
            put_on(banana, tray)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind tray: item where:
            is_tray(tray) and id[tray] == 296
            
        remove_fried_bananas(banana, fryingpan)
        walk_to(tray)
        drain_excess_oil(banana, tray)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(tray_296, sink_231)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(tray_296, sink_231)
Fail to find tray_296 around sink_231. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

#exp_behavior_end

#goal_representation

behavior remove_fried_bananas(fried_bananas: item, tray: item, fryingpan: item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if inhand(fried_bananas):
            if not close_char(char, tray):
                walk_to(tray)
            put_on(fried_bananas, tray)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083

        bind tray: item where:
            is_tray(tray) and id[tray] == 296
        
        foreach fried_bananas: item:
            # Ensure all banana slices that have been fried are removed from the frying pan
            if is_food_banana(fried_bananas) and on(fried_bananas, fryingpan):
                grab(fried_bananas)
                remove_fried_bananas(fried_bananas, tray, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_faucet_43(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==43
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(tray,faucet_instance)
        else:
            exp(tray,faucet_instance)
    eff:
        unknown[tray]=False
        close[tray,faucet_instance]=True
        close[faucet_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_fried_banana(fried_banana:item, fryingpan:item):
    body:
        if on(fried_banana, fryingpan):
            grab(fried_banana)
            
behavior drain_oil_from_banana(fried_banana:item, tray:item):
    body:
        if inhand(fried_banana):
            if not on(fried_banana, tray):
                put_on(fried_banana, tray)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind fried_banana: item where:
            is_food_banana(fried_banana) and cut(fried_banana)
        bind tray: item where:
            is_tray(tray)
        
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        
        remove_fried_banana(fried_banana, fryingpan)
        
        if not close_char(char, tray):
            walk_to(tray)
        
        drain_oil_from_banana(fried_banana, tray)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior remove_fried_banana(fried_banana:item, fryingpan:item):
    body:
        if on(fried_banana, fryingpan):
            grab(fried_banana)
            
behavior drain_oil_from_banana(fried_banana:item, tray:item):
    body:
        if inhand(fried_banana):
            if not on(fried_banana, tray):
                put_on(fried_banana, tray)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind fried_banana: item where:
            is_food_banana(fried_banana) and cut(fried_banana)
        bind tray: item where:
            is_tray(tray)
        
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        
        remove_fried_banana(fried_banana, fryingpan)
        
        if not close_char(char, tray):
            walk_to(tray)
        
        drain_oil_from_banana(fried_banana, tray)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)walk_executor(faucet_43)exp(tray_296, faucet_43)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
exp(tray_296, faucet_43)
Fail to find tray_296 around faucet_43. 
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(fryingpan_2083)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'walk_executor(sink_42)', 'walk_executor(fryingpan_2083)', 'walk_executor(sink_231)', 'walk_executor(fryingpan_2083)', 'walk_executor(faucet_43)']
Time info:
Time consume: 246 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 38
goal generate times: 17
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
