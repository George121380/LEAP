From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_dessert_2051_around_fridge_140(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior wait_until_vegetables_boiled(vegetables: item, pot: item):
    body:
        if inside(vegetables, pot):
            observe(pot, "Observe to ensure the vegetables are boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        fill_pot_with_water(pot)
        add_vegetables_to_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        wait_until_vegetables_boiled(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_dessert_2051_around_kitchen_counter_128(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_for_boiling_vegetables(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove_and_turn_on(stove:item, pot:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior wait_until_vegetables_boiled(vegetables:item, pot:item):
    body:
        if inside(vegetables, pot):
            observe(pot, "Observe to ensure the vegetables are boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        prepare_pot_for_boiling_vegetables(pot)
        place_pot_on_stove_and_turn_on(stove, pot)
        
        add_vegetables_to_pot(vegetables, pot)
        
        wait_until_vegetables_boiled(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior wait_until_vegetables_boiled(vegetables:item, pot:item):
    body:
        if inside(vegetables, pot):
            observe(pot, "Observe to ensure the vegetables are boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        fill_pot_with_water(pot)
        add_vegetables_to_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        wait_until_vegetables_boiled(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if not has_water(pot):
            get_water(pot)
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_vegetables(vegetables, pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not inside(vegetable, pot):
                put_inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        foreach vegetables: item:
            if is_food_vegetable(vegetables):
                add_vegetables_to_pot(vegetables, pot)

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_dessert_2051_around_kitchen_counter_128(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_54, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_132)']
Time info:
Time consume: 92 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 130
goal generate times: 6
goal correct times: 0
action_num: 1

Task complete rate:
Keystate: k1 - Requires: 15 steps
Keystate: k2 - Requires: 16 steps
Keystate: k3 - Requires: 7 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
