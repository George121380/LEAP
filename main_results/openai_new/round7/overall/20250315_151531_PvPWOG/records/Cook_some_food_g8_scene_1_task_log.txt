From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Prepare the vegetables and lemon by washing and cutting them as needed.', '3. Mix the boiled eggs, vegetables, and lemon in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_pot_to_boil_egg(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior wait_until_egg_boiled(egg:item, pot:item):
    body:
        if inside(egg, pot):
            observe(pot, "Observe to ensure the egg is boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_pot_to_boil_egg(pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        add_egg_to_pot(egg, pot)
        
        wait_until_egg_boiled(egg, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_pot_to_boil_egg(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior wait_until_egg_boiled(egg:item, pot:item):
    body:
        if inside(egg, pot):
            observe(pot, "Observe to ensure the egg is boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_pot_to_boil_egg(pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        add_egg_to_pot(egg, pot)
        
        wait_until_egg_boiled(egg, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)obs(pot_2138, Observe to ensure the egg is boiled)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)obs(pot_78, Observe to ensure the egg is boiled)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)obs(pot_78, Observe to ensure the egg is boiled)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py
obs(pot_78, Observe to ensure the egg is boiled)
Get this information:  pot_78 is close to stove_2135. pot_78 is close to character_240. pot_78 is close to food_egg_2092. pot_78 is on stove_2135. food_egg_2092 is inside pot_78. pot_78 is inside dining_room_41. pot_78 is CLEAN. pot_78 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_bowl_2141(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_kiwi,bowl_instance)
        else:
            exp(food_kiwi,bowl_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bowl_instance]=True
        close[bowl_instance,food_kiwi]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_bowl_2141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vegetables_and_lemon(vegetable:item, lemon:item):
    body:
        if dirty(vegetable):
            wash(vegetable)
        if dirty(lemon):
            wash(lemon)
        if not cut(vegetable):
            cuts(vegetable)
        if not cut(lemon):
            cuts(lemon)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        prepare_vegetables_and_lemon(vegetable, lemon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_vegetables_and_lemon(vegetable:item, lemon:item):
    body:
        if dirty(vegetable):
            wash(vegetable)
        if dirty(lemon):
            wash(lemon)
        if not cut(vegetable):
            cuts(vegetable)
        if not cut(lemon):
            cuts(lemon)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        prepare_vegetables_and_lemon(vegetable, lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)put_executor(food_vegetable_2113, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, cutting_board_2123)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_vegetable_2113. food_vegetable_2113 is close cutting_board_2123. food_vegetable_2113 is on cutting_board_2123. food_vegetable_2113 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(fork_2151)exp(knife_2122, fork_2151)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
exp(knife_2122, fork_2151)
Fail to find knife_2122 around fork_2151. 
##############################
From agent.py-> find a plan in act()
walk_executor(television_281)exp(knife_2122, television_281)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)
##############################
From agent.py
walk_executor(television_281)
Robot find: drawing_288, cd_2145, mat_284, headset_2131, cd_player_2129, remote_control_2124, dvd_player_2130, Robot is close to the television_281. Robot is close to the tvstand_273. 
##############################
From agent.py
exp(knife_2122, television_281)
Fail to find knife_2122 around television_281. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. Grabbing food_lemon_2100 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_lemon_2100, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_lemon_2100. food_lemon_2100 is close cutting_board_2123. food_lemon_2100 is on cutting_board_2123. food_lemon_2100 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_all_items_in_bowl(bowl:item):
    # Function to check if all ingredients are in the bowl
    symbol has_all_items=exists o1, o2, o3: item : (is_food_egg(o1) and inside(o1, bowl)) and (is_food_vegetable(o2) and inside(o2, bowl)) and (is_food_lemon(o3) and inside(o3, bowl))
    return has_all_items

behavior mix_ingredients(bowl:item):
    body:
        if not has_all_items_in_bowl(bowl):
            foreach item: item:
                if (is_food_egg(item) or is_food_vegetable(item) or is_food_lemon(item)) and not inside(item, bowl):
                    put_inside(item, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        mix_ingredients(bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_pot_2040_around_bowl_2141(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(pot,bowl_instance)
        else:
            exp(pot,bowl_instance)
    eff:
        unknown[pot]=False
        close[pot,bowl_instance]=True
        close[bowl_instance,pot]=True
    

behavior find_cup_2133_around_bowl_2141(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients_in_bowl(boiled_egg:item, vegetable:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg) # Assuming boiled eggs are already cooked and cut

        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable) # Assuming vegetables are already washed and cut

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) # Assuming lemon is already cut

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        mix_ingredients_in_bowl(boiled_egg, vegetable, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_bowl_2141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_pot_78_around_nightstand_192(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pot,nightstand_instance)
        else:
            exp(pot,nightstand_instance)
    eff:
        unknown[pot]=False
        close[pot,nightstand_instance]=True
        close[nightstand_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(bowl:item, eggs:item, vegetables:item, lemon:item):
    body:
        if not inhand(eggs):
            grab(eggs)
        if not inside(eggs, bowl):
            put_inside(eggs, bowl)
            if inhand(eggs):
                empty_a_hand()
        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
            if inhand(vegetables):
                empty_a_hand()
        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
            if inhand(lemon):
                empty_a_hand()

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        mix_ingredients(bowl, eggs, vegetables, lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_bowl_2141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_pot_2040_around_bowl_2141(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(pot,bowl_instance)
        else:
            exp(pot,bowl_instance)
    eff:
        unknown[pot]=False
        close[pot,bowl_instance]=True
        close[bowl_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients_in_bowl(boiled_eggs:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_eggs, bowl):
            put_inside(boiled_eggs, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_eggs: item where:
            is_food_egg(boiled_eggs) and cut(boiled_eggs)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        
        mix_ingredients_in_bowl(boiled_eggs, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_bowl_2141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_pot_2138_around_bowl_2141(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(pot,bowl_instance)
        else:
            exp(pot,bowl_instance)
    eff:
        unknown[pot]=False
        close[pot,bowl_instance]=True
        close[bowl_instance,pot]=True
    

behavior find_box_2038_around_bowl_2141(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(box,bowl_instance)
        else:
            exp(box,bowl_instance)
    eff:
        unknown[box]=False
        close[box,bowl_instance]=True
        close[bowl_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092  # Select boiled egg with known ID

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113  # Select prepared vegetables with known ID

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100  # Select cut lemon with known ID

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)  # Select a bowl

        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_bowl_2141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_hanger_294_around_bowl_2141(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(hanger,bowl_instance)
        else:
            exp(hanger,bowl_instance)
    eff:
        unknown[hanger]=False
        close[hanger,bowl_instance]=True
        close[bowl_instance,hanger]=True
    

behavior find_pot_78_around_bookshelf_196(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pot,bookshelf_instance)
        else:
            exp(pot,bookshelf_instance)
    eff:
        unknown[pot]=False
        close[pot,bookshelf_instance]=True
        close[bookshelf_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        mix_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_box_2038_around_bowl_2141(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(box,bowl_instance)
        else:
            exp(box,bowl_instance)
    eff:
        unknown[box]=False
        close[box,bowl_instance]=True
        close[bowl_instance,box]=True
    

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if cut(egg) and close_char(char, egg):
            grab(egg)
        if cut(vegetables) and close_char(char, vegetables):
            grab(vegetables)
        if cut(lemon) and close_char(char, lemon):
            grab(lemon)
        if on(egg, bowl) or on(vegetables, bowl) or on(lemon, bowl):
            put_on(egg, bowl)
            put_on(vegetables, bowl)
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def can_mix_egg_salad(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    # Check if the boiled eggs, vegetables, and lemon can be mixed in the bowl
    symbol is_egg_salad_possible = inside(boiled_egg, bowl) and inside(vegetables, bowl) and inside(lemon, bowl)
    return is_egg_salad_possible

behavior mix_ingredients_in_bowl(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        if not can_mix_egg_salad(boiled_egg, vegetables, lemon, bowl):
            mix_ingredients_in_bowl(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def mix_ingredients_in_bowl(egg:item, vegetable:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        
        mix_ingredients_in_bowl(egg, vegetable, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_box_2038_around_bowl_2141(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(box,bowl_instance)
        else:
            exp(box,bowl_instance)
    eff:
        unknown[box]=False
        close[box,bowl_instance]=True
        close[bowl_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(boiled_egg):
            grab(boiled_egg)
        if not inhand(vegetables):
            grab(vegetables)
        if not close_char(char, bowl):
            walk_to(bowl)
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if inhand(lemon):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        
        grab_and_mix_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_bowl_2141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_hanger_294_around_bowl_2141(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(hanger,bowl_instance)
        else:
            exp(hanger,bowl_instance)
    eff:
        unknown[hanger]=False
        close[hanger,bowl_instance]=True
        close[bowl_instance,hanger]=True
    

behavior find_food_onion_2048_around_bowl_2141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_bowl_2141(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if cut(vegetables) and cut(lemon):
            if not inside(boiled_egg, bowl):
                put_inside(boiled_egg, bowl)
            if not inside(vegetables, bowl):
                put_inside(vegetables, bowl)
            if not inside(lemon, bowl):
                put_inside(lemon, bowl)

behavior reach_the_bowl(bowl:item):
    body:
        if not close_char(char, bowl):
            walk_to(bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)

        reach_the_bowl(bowl)
        mix_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_box_2038_around_bowl_2141(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(box,bowl_instance)
        else:
            exp(box,bowl_instance)
    eff:
        unknown[box]=False
        close[box,bowl_instance]=True
        close[bowl_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_ingredients_and_mix(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not close_char(char, bowl):
            walk_to(bowl)
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if inhand(egg):
            empty_a_hand()
        
        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if inhand(vegetables):
            empty_a_hand()
        
        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
            
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100
            
        bind bowl: item where:
            is_bowl(bowl)

        grab_ingredients_and_mix(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2141)putin_executor(food_egg_2092, bowl_2141)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(bowl_2141)putin_executor(food_lemon_2100, bowl_2141)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the pot_78. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'walk_executor(pot_78)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(cutting_board_2123)', 'put_executor(food_vegetable_2113, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(fork_2151)', 'walk_executor(television_281)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_vegetable_2113)', 'cut_executor(food_vegetable_2113)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100)', 'walk_executor(cutting_board_2123)', 'put_executor(food_lemon_2100, cutting_board_2123)', 'walk_executor(food_lemon_2100)', 'cut_executor(food_lemon_2100)', 'walk_executor(food_egg_2092)']
Time info:
Time consume: 337 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 111
goal generate times: 14
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
