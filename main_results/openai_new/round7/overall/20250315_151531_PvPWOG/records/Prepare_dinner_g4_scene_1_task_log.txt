From agent.py
Reset goals: The sub-goals are: 
['1. Wash and cook the rice.', '2. Fry the egg and mix it with the cooked rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_cupboard_117(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation

def is_food_rice_in_pot(pot: item):
    # Function to check if there is rice inside the pot
    symbol has_rice=exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_rice

behavior wash_and_cook_rice(rice:item, pot:item, stove:item):
    body:
        if dirty(rice):
            wash(rice) # Wash the rice if it is dirty
        if not inside(rice, pot):
            put_inside(rice, pot) # Put the rice inside the pot
        if not has_water(pot):
            get_water(pot) # Get water in the pot
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot with rice on the stove
        if is_off(stove) and has_switch(stove):
            switch_on(stove) # Turn on the stove to start cooking the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) # Select rice
        bind pot: item where:
            is_pot(pot) # Select a pot
        bind stove: item where:
            is_stove(stove) # Select a stove

        wash_and_cook_rice(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_food_rice_in_pot(pot: item):
    # Function to check if there is rice inside the pot
    symbol has_rice=exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_rice

behavior wash_and_cook_rice(rice:item, pot:item, stove:item):
    body:
        if dirty(rice):
            wash(rice) # Wash the rice if it is dirty
        if not inside(rice, pot):
            put_inside(rice, pot) # Put the rice inside the pot
        if not has_water(pot):
            get_water(pot) # Get water in the pot
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot with rice on the stove
        if is_off(stove) and has_switch(stove):
            switch_on(stove) # Turn on the stove to start cooking the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) # Select rice
        bind pot: item where:
            is_pot(pot) # Select a pot
        bind stove: item where:
            is_stove(stove) # Select a stove

        wash_and_cook_rice(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(cupboard_117)exp(food_rice_2108, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_rice_2108, kitchen_counter_119)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_119)
Fail to find food_rice_2108 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_rice_2108, pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_rice_2108. food_rice_2108 is inside pot_78. food_rice_2108 is close pot_78. food_rice_2108 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_stereo_2050_around_tvstand_116(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def fry_egg(egg:item, frying_pan:item, stove:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, frying_pan):
            put_on(egg, frying_pan) # Crack and place the egg on the frying pan
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        observe(frying_pan, "Observe to check if the egg is cooked")
        
behavior mix_egg_with_rice(egg:item, rice:item, frying_pan:item):
    body:
        if cut(egg) and not inside(rice, frying_pan):
            put_inside(rice, frying_pan) # Mix the cooked egg with the cooked rice 

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        fry_egg(egg, frying_pan, stove)
        mix_egg_with_rice(egg, rice, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_egg(fryingpan:item, egg:item, stove:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if inhand(egg):
            if open(stove):
                closes(stove)
            if is_off(stove):
                switch_on(stove)
            if not on(egg, fryingpan):
                put_on(egg, fryingpan)

behavior mix_egg_with_rice(egg:item, rice:item, spoon:item):
    body:
        if not on(egg, rice):
            if not inhand(spoon):
                grab(spoon)
            put_on(egg, rice)
            # The mixing action could be inferred hence put egg on rice represents the mix

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice)
        bind spoon: item where:
            is_wooden_spoon(spoon)
        
        fry_egg(fryingpan, egg, stove)
        mix_egg_with_rice(egg, rice, spoon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_egg(fryingpan:item, egg:item, stove:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if inhand(egg):
            if open(stove):
                closes(stove)
            if is_off(stove):
                switch_on(stove)
            if not on(egg, fryingpan):
                put_on(egg, fryingpan)

behavior mix_egg_with_rice(egg:item, rice:item, spoon:item):
    body:
        if not on(egg, rice):
            if not inhand(spoon):
                grab(spoon)
            put_on(egg, rice)
            # The mixing action could be inferred hence put egg on rice represents the mix

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        bind rice: item where:
            is_food_rice(rice)
        bind spoon: item where:
            is_wooden_spoon(spoon)
        
        fry_egg(fryingpan, egg, stove)
        mix_egg_with_rice(egg, rice, spoon)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)walk_executor(kitchen_counter_122)exp(wooden_spoon_2000, kitchen_counter_122)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)walk_executor(kitchen_counter_122)exp(wooden_spoon_2000, kitchen_counter_122)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(kitchen_counter_122)exp(wooden_spoon_2000, kitchen_counter_122)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(wooden_spoon_2000, kitchen_counter_122)
Fail to find wooden_spoon_2000 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(cupboard_117)exp(wooden_spoon_2000, cupboard_117)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(wooden_spoon_2000, cupboard_117)
Fail to find wooden_spoon_2000 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(dresser_274)open_executor(dresser_274)exp(wooden_spoon_2000, dresser_274)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
walk_executor(dresser_274)
Robot find: Robot is close to the dresser_274. 
##############################
From agent.py
open_executor(dresser_274)
Robot find: hanger_292, hanger_293, hanger_294, blow_dryer_2057, cat_2069, check_2075, clothes_pants_2036, Robot is close to the hanger_292. Robot is close to the hanger_293. Robot is close to the hanger_294. Robot is close to the blow_dryer_2057. Robot is close to the dresser_274. Robot is close to the cat_2069. Robot is close to the check_2075. dresser_274 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find wooden_spoon_2000 ?
Answer: Go to bedroom_162 and locate table_199. The wooden_spoon_2000 is on table_199.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to bedroom_162 and locate table_199. The wooden_spoon_2000 is on table_199.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to kitchen_counter_119.
Action 5: look for food_rice_2108 around kitchen_counter_119.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_rice_2108 around fridge_126.
Action 10: Grab food_rice_2108.
Action 11: Walk to pot_78.
Action 12: Put food_rice_2108 into pot_78.
Action 13: Grab pot_78.
Action 14: Walk to faucet_20.
Action 15: Switch on faucet_20.
Action 16: Switch off faucet_20.
Action 17: Walk to stove_2135.
Action 18: Put pot_78 on stove_2135.
Action 19: Switch on stove_2135.
Action 20: Walk to kitchen_counter_123.
Action 21: look for fryingpan_2154 around kitchen_counter_123.
Action 22: Walk to kitchen_counter_122.
Action 23: look for fryingpan_2154 around kitchen_counter_122.
Action 24: Walk to fryingpan_2154.
Action 25: Walk to kitchen_counter_122.
Action 26: look for wooden_spoon_2000 around kitchen_counter_122.
Action 27: Walk to fryingpan_2154.
Action 28: Walk to cupboard_117.
Action 29: look for wooden_spoon_2000 around cupboard_117.
Action 30: Walk to fryingpan_2154.
Action 31: Walk to dresser_274.
Action 32: Open dresser_274.

##############################
From agent.py
exp(wooden_spoon_2000, dresser_274)
Fail to find wooden_spoon_2000 around dresser_274. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(table_199)exp(wooden_spoon_2000, table_199)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, mat_203, tea_bag_2023, drawing_201, drawing_202, Robot is close to the table_199. 
##############################
From agent.py
exp(wooden_spoon_2000, table_199)
Find wooden_spoon_2000. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(food_rice_2108)put_executor(food_egg_2092, food_rice_2108)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
walk_executor(wooden_spoon_2000)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the table_199. 
##############################
From agent.py
grab_executor(wooden_spoon_2000)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the table_199. Grabbing wooden_spoon_2000 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. 
##############################
From agent.py
put_executor(food_egg_2092, food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. food_rice_2108 is close food_egg_2092. food_egg_2092 is close food_rice_2108. food_egg_2092 is on food_rice_2108. food_egg_2092 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fry the egg by placing it on the frying pan and turning on the stove, if it is not already on. After frying the egg, it should be mixed with the rice using the wooden spoon. Currently, the egg has been placed on the rice but hasn't been fried yet.
##############################
From agent.py
Human Instruction: The robot needs to fry the egg by placing it on the frying pan and turning on the stove, if it is not already on. After frying the egg, it should be mixed with the rice using the wooden spoon. Currently, the egg has been placed on the rice but hasn't been fried yet.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to kitchen_counter_119.
Action 5: look for food_rice_2108 around kitchen_counter_119.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_rice_2108 around fridge_126.
Action 10: Grab food_rice_2108.
Action 11: Walk to pot_78.
Action 12: Put food_rice_2108 into pot_78.
Action 13: Grab pot_78.
Action 14: Walk to faucet_20.
Action 15: Switch on faucet_20.
Action 16: Switch off faucet_20.
Action 17: Walk to stove_2135.
Action 18: Put pot_78 on stove_2135.
Action 19: Switch on stove_2135.
Action 20: Walk to kitchen_counter_123.
Action 21: look for fryingpan_2154 around kitchen_counter_123.
Action 22: Walk to kitchen_counter_122.
Action 23: look for fryingpan_2154 around kitchen_counter_122.
Action 24: Walk to fryingpan_2154.
Action 25: Walk to kitchen_counter_122.
Action 26: look for wooden_spoon_2000 around kitchen_counter_122.
Action 27: Walk to fryingpan_2154.
Action 28: Walk to cupboard_117.
Action 29: look for wooden_spoon_2000 around cupboard_117.
Action 30: Walk to fryingpan_2154.
Action 31: Walk to dresser_274.
Action 32: Open dresser_274.
Action 33: look for wooden_spoon_2000 around dresser_274.
Action 34: Walk to fryingpan_2154.
Action 35: Walk to table_199.
Action 36: look for wooden_spoon_2000 around table_199.
Action 37: Walk to fryingpan_2154.
Action 38: Walk to wooden_spoon_2000.
Action 39: Grab wooden_spoon_2000.
Action 40: Walk to food_egg_2092.
Action 41: Grab food_egg_2092.
Action 42: Walk to food_rice_2108.
Action 43: Put food_egg_2092 on food_rice_2108.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_egg_and_mix_with_rice(fryingpan:item, food_egg:item, food_rice:item, wooden_spoon:item, stove:item):
    body:
        if not on(food_egg, fryingpan):
            put_on(food_egg, fryingpan)
            # Place the egg on the frying pan
        
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove if it is off

        if not close_char(char, food_rice):
            walk_to(food_rice)

        if not inhand(wooden_spoon):
            grab(wooden_spoon)

        if on(food_egg, fryingpan) and inhand(wooden_spoon):
            # Mix the egg with the rice using the wooden spoon
            observe(fryingpan, "Ensure the egg is fried properly")
            put_close(wooden_spoon, food_rice)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind food_egg: item where:
            is_food_egg(food_egg) and on(food_egg, food_rice)
        
        bind food_rice: item where:
            is_food_rice(food_rice)
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)

        bind stove: item where:
            is_stove(stove)

        fry_egg_and_mix_with_rice(fryingpan, food_egg, food_rice, wooden_spoon, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on(stove: item):
    # Function to check if the stove is turned on
    symbol stove_on = is_on(stove)
    return stove_on

behavior fry_egg_and_mix_with_rice(fryingpan: item, stove: item, egg: item, rice: item, wooden_spoon: item):
    body:
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        if not is_stove_on(stove):
            switch_on(stove)
        observe(fryingpan, "Observe to ensure the egg is fried")
        put_on(fryingpan, rice)
        if not on(rice, fryingpan):
            observe(rice, "Check if rice can be mixed with an egg")
            put_on(rice, fryingpan)
        if not inhand(wooden_spoon):
            grab(wooden_spoon)
        observe(fryingpan, "Mix the egg and rice using the wooden spoon")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon) and id[wooden_spoon] == 2000
        
        fry_egg_and_mix_with_rice(fryingpan, stove, egg, rice, wooden_spoon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_stove_on(stove: item):
    # Function to check if the stove is turned on
    symbol stove_on = is_on(stove)
    return stove_on

behavior fry_egg_and_mix_with_rice(fryingpan: item, stove: item, egg: item, rice: item, wooden_spoon: item):
    body:
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        if not is_stove_on(stove):
            switch_on(stove)
        observe(fryingpan, "Observe to ensure the egg is fried")
        put_on(fryingpan, rice)
        if not on(rice, fryingpan):
            observe(rice, "Check if rice can be mixed with an egg")
            put_on(rice, fryingpan)
        if not inhand(wooden_spoon):
            grab(wooden_spoon)
        observe(fryingpan, "Mix the egg and rice using the wooden spoon")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon) and id[wooden_spoon] == 2000
        
        fry_egg_and_mix_with_rice(fryingpan, stove, egg, rice, wooden_spoon)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(fryingpan_2154)put_executor(food_egg_2092, fryingpan_2154)obs(fryingpan_2154, Observe to ensure the egg is fried)grab_executor(fryingpan_2154)walk_executor(food_rice_2108)put_executor(fryingpan_2154, food_rice_2108)obs(food_rice_2108, Check if rice can be mixed with an egg)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)put_executor(food_rice_2108, fryingpan_2154)obs(fryingpan_2154, Mix the egg and rice using the wooden spoon)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 is on fryingpan_2154. food_egg_2092 released by left hand. 
##############################
From agent.py
obs(fryingpan_2154, Observe to ensure the egg is fried)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_egg_2092. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. food_egg_2092 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. Robot is close to the pot_78. 
##############################
From agent.py
put_executor(fryingpan_2154, food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. Robot is close to the pot_78. fryingpan_2154 is close food_rice_2108. food_rice_2108 is close fryingpan_2154. fryingpan_2154 is on food_rice_2108. fryingpan_2154 released by left hand. 
##############################
From agent.py
obs(food_rice_2108, Check if rice can be mixed with an egg)
Get this information:  food_rice_2108 is inside dining_room_41. food_rice_2108 is inside pot_78. food_rice_2108 is close to pot_78. food_rice_2108 is close to food_egg_2092. food_rice_2108 is close to character_240. food_rice_2108 is close to fryingpan_2154. fryingpan_2154 is on food_rice_2108. food_rice_2108 is CLEAN.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. Robot is close to the pot_78. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. 
##############################
From agent.py
put_executor(food_rice_2108, fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. food_rice_2108 is close fryingpan_2154. food_rice_2108 is on fryingpan_2154. food_rice_2108 released by left hand. 
##############################
From agent.py
obs(fryingpan_2154, Mix the egg and rice using the wooden spoon)
Get this information:  fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_rice_2108. fryingpan_2154 is on food_rice_2108. fryingpan_2154 is inside dining_room_41. food_egg_2092 is on fryingpan_2154. food_rice_2108 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the egg is fried by turning on the stove before mixing the rice with the egg on the frying pan.
##############################
From agent.py
Human Instruction: The robot needs to ensure the egg is fried by turning on the stove before mixing the rice with the egg on the frying pan.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to kitchen_counter_119.
Action 5: look for food_rice_2108 around kitchen_counter_119.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_rice_2108 around fridge_126.
Action 10: Grab food_rice_2108.
Action 11: Walk to pot_78.
Action 12: Put food_rice_2108 into pot_78.
Action 13: Grab pot_78.
Action 14: Walk to faucet_20.
Action 15: Switch on faucet_20.
Action 16: Switch off faucet_20.
Action 17: Walk to stove_2135.
Action 18: Put pot_78 on stove_2135.
Action 19: Switch on stove_2135.
Action 20: Walk to kitchen_counter_123.
Action 21: look for fryingpan_2154 around kitchen_counter_123.
Action 22: Walk to kitchen_counter_122.
Action 23: look for fryingpan_2154 around kitchen_counter_122.
Action 24: Walk to fryingpan_2154.
Action 25: Walk to kitchen_counter_122.
Action 26: look for wooden_spoon_2000 around kitchen_counter_122.
Action 27: Walk to fryingpan_2154.
Action 28: Walk to cupboard_117.
Action 29: look for wooden_spoon_2000 around cupboard_117.
Action 30: Walk to fryingpan_2154.
Action 31: Walk to dresser_274.
Action 32: Open dresser_274.
Action 33: look for wooden_spoon_2000 around dresser_274.
Action 34: Walk to fryingpan_2154.
Action 35: Walk to table_199.
Action 36: look for wooden_spoon_2000 around table_199.
Action 37: Walk to fryingpan_2154.
Action 38: Walk to wooden_spoon_2000.
Action 39: Grab wooden_spoon_2000.
Action 40: Walk to food_egg_2092.
Action 41: Grab food_egg_2092.
Action 42: Walk to food_rice_2108.
Action 43: Put food_egg_2092 on food_rice_2108.
Action 44: Grab food_egg_2092.
Action 45: Walk to fryingpan_2154.
Action 46: Put food_egg_2092 on fryingpan_2154.
Action 47: Observe around fryingpan_2154 with the question of Observe to ensure the egg is fried.
Action 48: Grab fryingpan_2154.
Action 49: Walk to food_rice_2108.
Action 50: Put fryingpan_2154 on food_rice_2108.
Action 51: Observe around food_rice_2108 with the question of Check if rice can be mixed with an egg.
Action 52: Grab food_rice_2108.
Action 53: Walk to fryingpan_2154.
Action 54: Put food_rice_2108 on fryingpan_2154.
Action 55: Observe around fryingpan_2154 with the question of Mix the egg and rice using the wooden spoon.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_fried(egg:item, fryingpan:item):
    # Checks if the egg is fried on the frying pan
    observe(fryingpan, "Observe to ensure the egg is fried")
    
def can_mix_egg_with_rice(egg:item, rice:item, fryingpan:item):
    # Checks if rice can be mixed with the egg on the frying pan
    observe(fryingpan, "Check if rice can be mixed with an egg")

behavior fry_egg(egg:item, fryingpan:item):
    body:
        if is_food_egg(egg) and is_fryingpan(fryingpan):
            walk_to(fryingpan)
            put_on(egg, fryingpan)
            is_egg_fried(egg, fryingpan)

behavior mix_egg_with_rice(egg:item, rice:item, fryingpan:item):
    body:
        if is_food_rice(rice) and is_fryingpan(fryingpan):
            can_mix_egg_with_rice(egg, rice, fryingpan)
            put_on(rice, fryingpan)
            observe(fryingpan, "Mix the egg and rice using the wooden spoon")
            
behavior turn_on_stove_if_off(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        
        turn_on_stove_if_off(stove)
        fry_egg(egg, fryingpan)
        mix_egg_with_rice(egg, rice, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_powersocket_72(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==72
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(food_butter,powersocket_instance)
        else:
            exp(food_butter,powersocket_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,powersocket_instance]=True
        close[powersocket_instance,food_butter]=True
    

behavior find_dry_pasta_2114_around_pot_2138(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(dry_pasta,pot_instance)
        else:
            exp(dry_pasta,pot_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,pot_instance]=True
        close[pot_instance,dry_pasta]=True
    

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior fry_egg_and_mix_with_rice(stove:item, egg:item, fryingpan:item, rice:item, wooden_spoon:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        observe(fryingpan, "Observe to ensure the egg is fried")
        if not inside(rice, fryingpan):
            put_inside(rice, fryingpan)
        observe(fryingpan, "Mix the egg and rice using the wooden spoon")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108

        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon) and id[wooden_spoon] == 2000
        
        fry_egg_and_mix_with_rice(stove, egg, fryingpan, rice, wooden_spoon)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_egg_and_mix_with_rice(stove:item, egg:item, fryingpan:item, rice:item, wooden_spoon:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        observe(fryingpan, "Observe to ensure the egg is fried")
        if not inside(rice, fryingpan):
            put_inside(rice, fryingpan)
        observe(fryingpan, "Mix the egg and rice using the wooden spoon")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108

        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon) and id[wooden_spoon] == 2000
        
        fry_egg_and_mix_with_rice(stove, egg, fryingpan, rice, wooden_spoon)
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Observe to ensure the egg is fried)grab_executor(food_rice_2108)putin_executor(food_rice_2108, fryingpan_2154)obs(fryingpan_2154, Mix the egg and rice using the wooden spoon)
##############################
From agent.py
obs(fryingpan_2154, Observe to ensure the egg is fried)
Get this information:  fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_rice_2108. fryingpan_2154 is on food_rice_2108. fryingpan_2154 is inside dining_room_41. food_egg_2092 is on fryingpan_2154. food_rice_2108 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the food_rice_2108. food_rice_2108 is inside fryingpan_2154. food_rice_2108 is close fryingpan_2154. food_rice_2108 released by left hand. 
##############################
From agent.py
obs(fryingpan_2154, Mix the egg and rice using the wooden spoon)
Get this information:  food_rice_2108 is inside fryingpan_2154. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_rice_2108. fryingpan_2154 is on food_rice_2108. fryingpan_2154 is inside dining_room_41. food_egg_2092 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_rice_2108)', 'walk_executor(pot_78)', 'putin_executor(food_rice_2108, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(cupboard_117)', 'walk_executor(fryingpan_2154)', 'walk_executor(dresser_274)', 'open_executor(dresser_274)', 'walk_executor(fryingpan_2154)', 'walk_executor(table_199)', 'walk_executor(fryingpan_2154)', 'walk_executor(wooden_spoon_2000)', 'grab_executor(wooden_spoon_2000)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(food_rice_2108)', 'put_executor(food_egg_2092, food_rice_2108)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'put_executor(food_egg_2092, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(food_rice_2108)', 'put_executor(fryingpan_2154, food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(fryingpan_2154)', 'put_executor(food_rice_2108, fryingpan_2154)', 'grab_executor(food_rice_2108)', 'putin_executor(food_rice_2108, fryingpan_2154)']
Time info:
Time consume: 271 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 65
goal generate times: 7
goal correct times: 0
action_num: 45

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
