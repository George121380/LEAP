From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_oven_295(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_potato,oven_instance)
        else:
            exp(food_potato,oven_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,oven_instance]=True
        close[oven_instance,food_potato]=True
    

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_stove_and_steak(stove:item, steak:item):
    body:
        if not visited(stove):
            walk_to(stove)
        if not close_char(char, steak):
            walk_to(steak)

behavior fry_steak_on_stove(stove:item, fryingpan:item, steak:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind steak: item where:
            is_food_steak(steak)
        
        locate_stove_and_steak(stove, steak)
        fry_steak_on_stove(stove, fryingpan, steak)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_stove_and_steak(stove:item, steak:item):
    body:
        if not visited(stove):
            walk_to(stove)
        if not close_char(char, steak):
            walk_to(steak)

behavior fry_steak_on_stove(stove:item, fryingpan:item, steak:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind steak: item where:
            is_food_steak(steak)
        
        locate_stove_and_steak(stove, steak)
        fry_steak_on_stove(stove, fryingpan, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fryingpan_2083)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)put_executor(food_steak_2008, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_steak_2008, fridge_289)
Find food_steak_2008. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)walk_executor(food_steak_2008)walk_executor(fryingpan_2083)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)put_executor(food_steak_2008, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fridge_289. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fridge_289. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_steak_2008 is close fryingpan_2083. fryingpan_2083 is close food_steak_2008. food_steak_2008 is on fryingpan_2083. food_steak_2008 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_steak_cut_and_on_plate(steak:item, plate:item):
    # Function to check if the steak is cut and on the plate
    symbol on_plate=exists o: item : (is_food_steak(o) and cut(o) and on(o, plate))
    return on_plate

behavior cut_steak(steak:item):
    body:
        if not cut(steak):
            cuts(steak)

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind plate: item where:
            is_plate(plate)
        
        cut_steak(steak)
        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_steak_cut_and_on_plate(steak:item, plate:item):
    # Function to check if the steak is cut and on the plate
    symbol on_plate=exists o: item : (is_food_steak(o) and cut(o) and on(o, plate))
    return on_plate

behavior cut_steak(steak:item):
    body:
        if not cut(steak):
            cuts(steak)

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind plate: item where:
            is_plate(plate)
        
        cut_steak(steak)
        place_steak_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(cutting_board_2051)put_executor(food_steak_2008, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_steak_2008)cut_executor(food_steak_2008)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, cutting_board_2051)
Robot find: Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_steak_2008. food_steak_2008 is close cutting_board_2051. food_steak_2008 is on cutting_board_2051. food_steak_2008 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. plate_1000 is close food_steak_2008. food_steak_2008 is on plate_1000. food_steak_2008 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'walk_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'put_executor(food_steak_2008, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(cutting_board_2051)', 'put_executor(food_steak_2008, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_steak_2008)', 'cut_executor(food_steak_2008)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(sink_231)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)']
Time info:
Time consume: 116 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 148
goal generate times: 2
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
