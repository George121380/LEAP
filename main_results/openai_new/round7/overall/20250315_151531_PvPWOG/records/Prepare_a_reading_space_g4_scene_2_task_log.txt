From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_book(book: item):
    body:
        if not visited(book):
            observe(book, "Check if it is a book")
            # Determine if an item is a book

behavior place_book_on_coffee_table(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)
            # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        foreach book: item:
            # Identify the book in the scene
            if is_book(book) and not visited(book):
                locate_book(book)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure that the coffee_table is inside the home office

        bind book: item where:
            is_book(book)
        # Bind the identified book to the variable book
        
        if not inhand(book):
            grab(book)

        if not close_char(char, coffee_table):
            walk_to(coffee_table)

        place_book_on_coffee_table(book, coffee_table)
  

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_263_around_bed_264(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(chair,bed_instance)
        else:
            exp(chair,bed_instance)
    eff:
        unknown[chair]=False
        close[chair,bed_instance]=True
        close[bed_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book(book:item):
    body:
        if not visited(book):
            observe(book, "Check if the book is in the home office and if its grabbable")

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            if not close_char(char, coffee_table):
                walk_to(coffee_table)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        find_book(book)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book(book:item):
    body:
        if not visited(book):
            observe(book, "Check if the book is in the home office and if its grabbable")

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            if not close_char(char, coffee_table):
                walk_to(coffee_table)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        find_book(book)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        
        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office and if its grabbable)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Fail to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office and if its grabbable)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office and if its grabbable)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office and if its grabbable)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
open_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. book_2091 is opened. 
##############################
From agent.py
obs(book_2091, Check if the book is in the home office and if its grabbable)
Get this information:  book_2091 is on bookshelf_136. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is inside dining_room_1. book_2091 is OPEN.
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot found the book and placed it on table_193, but it must place the book on the coffee table in the home office to complete this sub-task. The robot needs to identify and move the book to the appropriate coffee table located in the home office.
##############################
From agent.py
Human Instruction: The robot found the book and placed it on table_193, but it must place the book on the coffee table in the home office to complete this sub-task. The robot needs to identify and move the book to the appropriate coffee table located in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_136.
Action 8: look for book_2091 around bookshelf_136.
Action 9: Walk to book_2091.
Action 10: Open book_2091.
Action 11: Observe around book_2091 with the question of Check if the book is in the home office and if its grabbable.
Action 12: Walk to table_193.
Action 13: Walk to book_2091.
Action 14: Grab book_2091.
Action 15: Walk to table_193.
Action 16: Put book_2091 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_374_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table:item):
    # Function to check if a coffee table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office

behavior move_book_to_correct_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            grab(book)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091

        if exists coffee_table: item : is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table):
            # Check if there is a coffee table in the home office based on the available information
            bind coffee_table: item where:
                is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table)
            # Select a coffee table in the home office

            walk_to(coffee_table)
            # Move the character closer to the coffee table

            move_book_to_correct_table(book, coffee_table)
            # Move the book to the correct coffee table

        else:
            # If no coffee table is found in the home office, initiate exploration to locate one
            foreach coffee_table: item:
                if is_table(coffee_table) and surfaces(coffee_table) and not visited(coffee_table):
                    observe(coffee_table, "Check if the table is a coffee table in the home office")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_table_in_home_office(coffee_table:item):
    # Function to check if a coffee table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office

behavior move_book_to_correct_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            grab(book)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091

        if exists coffee_table: item : is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table):
            # Check if there is a coffee table in the home office based on the available information
            bind coffee_table: item where:
                is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table)
            # Select a coffee table in the home office

            walk_to(coffee_table)
            # Move the character closer to the coffee table

            move_book_to_correct_table(book, coffee_table)
            # Move the book to the correct coffee table

        else:
            # If no coffee table is found in the home office, initiate exploration to locate one
            foreach coffee_table: item:
                if is_table(coffee_table) and surfaces(coffee_table) and not visited(coffee_table):
                    observe(coffee_table, "Check if the table is a coffee table in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(table_193)
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to identify the coffee table located in the home office and move book_2091 to it. Currently, the book has been placed on table_193, but it is not confirmed to be the coffee table in the home office.
##############################
From agent.py
Human Instruction: The robot needs to identify the coffee table located in the home office and move book_2091 to it. Currently, the book has been placed on table_193, but it is not confirmed to be the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_136.
Action 8: look for book_2091 around bookshelf_136.
Action 9: Walk to book_2091.
Action 10: Open book_2091.
Action 11: Observe around book_2091 with the question of Check if the book is in the home office and if its grabbable.
Action 12: Walk to table_193.
Action 13: Walk to book_2091.
Action 14: Grab book_2091.
Action 15: Walk to table_193.
Action 16: Put book_2091 on table_193.
Action 17: Walk to table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table:item):
    # Function to check if a coffee table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office

behavior find_and_move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            grab(book)
            walk_to(coffee_table)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        
        bind book: item where:
            is_book(book) and id[book] == 2091
        
        find_and_move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_put_on_coffee_table(book: item, coffee_table: item):
    body:
        if not on(book, coffee_table):
            grab(book)
            walk_to(coffee_table)
            put_on(book, coffee_table)

def is_coffee_table_in_home_office(table: item):
    # Function to check if a table is a coffee table in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and is_coffee_table_in_home_office(coffee_table)

        find_book_and_put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_374_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table:item):
    # Function to check if a table is the coffee table in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office and surfaces(coffee_table)

def find_book_on_table(book:item, table:item):
    # Check if the book is on a specific table
    symbol found=exists o: item : (is_book(o) and on(o, table))
    return found

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select the coffee table inside the home office

        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        if not find_book_on_table(book, coffee_table):
            walk_to(table_193)
            if on(book, table_193):
                grab(book)
                walk_to(coffee_table)
                place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(table:item):
    # Function to check if a table is a coffee table in the home office
    symbol is_coffee_table=exists room: item : (is_home_office(room) and is_table(table) and surfaces(table) and inside(table, room))
    return is_coffee_table

behavior find_and_place_book(book:item, table:item):
    body:
        if not on(book, table):
            if not close_char(char, book):
                walk_to(book)
            if not onboard(book):
                grab(book)
            
            if not close_char(char, table):
                walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)
        
        bind book: item where:
            is_book(book) and id[book] == 2091
        
        find_and_place_book(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book(book:item):
    body:
        if not close_char(char, book):
            walk_to(book)
        if not inhand(book):
            grab(book)

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Locate book with ID 2091
        find_book(book)

        foreach table: item:
            if is_table(table) and surfaces(table) and is_in_home_office(table) and not visited(table):
                observe(table, "Check if it is the coffee table in the home office")
                if not on(book, table):
                    place_book_on_coffee_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book(book:item):
    body:
        if not close_char(char, book):
            walk_to(book)
        if not inhand(book):
            grab(book)

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Locate book with ID 2091
        find_book(book)

        foreach table: item:
            if is_table(table) and surfaces(table) and is_in_home_office(table) and not visited(table):
                observe(table, "Check if it is the coffee table in the home office")
                if not on(book, table):
                    place_book_on_coffee_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)obs(table_193, Check if it is the coffee table in the home office)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the table_193. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the table_193. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. Robot is close to the book_2091. 
##############################
From agent.py
obs(table_193, Check if it is the coffee table in the home office)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is close to book_2091. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the table_193. Robot is close to the book_2091. book_2091 is on table_193. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_2093_around_washing_machine_2041(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(pot,washing_machine_instance)
        else:
            exp(pot,washing_machine_instance)
    eff:
        unknown[pot]=False
        close[pot,washing_machine_instance]=True
        close[washing_machine_instance,pot]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_132(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(milk:item, pot:item, stove:item):
    body:
        if not has_water(pot) or not inside(milk, pot):
            get_water(pot)
            put_inside(milk, pot)
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior serve_hot_milk(milk:item, coffee_table:item):
    body:
        if inhand(milk):
            put_on(milk, coffee_table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        prepare_hot_milk(milk, pot, stove)

        grab(milk)
        serve_hot_milk(milk, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_blender_2032_around_kitchen_counter_132(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(microwave:item, milk:item):
    body:
        if open(microwave):
            closes(microwave) # Close the microwave door if it is open
        if is_off(microwave):
            switch_on(microwave) # Turn on the microwave to heat the milk

behavior put_hot_milk_on_table(milk:item, table:item):
    body:
        if not on(milk, table):
            put_on(milk, table) # Place the hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind table: item where:
            is_table(table) and surfaces(table) and id[table] == 193
        # Select table_193
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        if not inhand(milk): 
            grab(milk) # Grab the milk to move it
        
        if not close_char(char, microwave):
            walk_to(microwave) # Move closer to the microwave
        
        put_inside(milk, microwave)
        prepare_hot_milk(microwave, milk)
        
        empty_a_hand() # Empty a hand to grab the milk again
        grab(milk) # Grab the milk from microwave

        if not close_char(char, table):
            walk_to(table) # Move closer to the table 

        put_hot_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk_cup: item, stove: item):
    body:
        if not has_water(milk_cup):
            get_water(milk_cup)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
        if not on(milk_cup, stove):
            put_on(milk_cup, stove)
        observe(milk_cup, "Check if the milk is hot")

behavior put_milk_on_table(milk_cup: item, table: item):
    body:
        if not on(milk_cup, table):
            put_on(milk_cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        bind stove: item where:
            is_stove(stove)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        grab(milk)
        walk_to(cup)
        put_close(milk, cup)
        walk_to(stove)

        heat_milk(cup, stove)
        walk_to(coffee_table)
        put_milk_on_table(cup, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_milk(milk_cup: item, stove: item):
    body:
        if not has_water(milk_cup):
            get_water(milk_cup)
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
        if not on(milk_cup, stove):
            put_on(milk_cup, stove)
        observe(milk_cup, "Check if the milk is hot")

behavior put_milk_on_table(milk_cup: item, table: item):
    body:
        if not on(milk_cup, table):
            put_on(milk_cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        bind stove: item where:
            is_stove(stove)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        grab(milk)
        walk_to(cup)
        put_close(milk, cup)
        walk_to(stove)

        heat_milk(cup, stove)
        walk_to(coffee_table)
        put_milk_on_table(cup, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the milk_2074. Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the milk_2074. Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the cupboard_131. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
put_executor(milk_2074, kitchen_counter_132)grab_executor(milk_2074)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
put_executor(milk_2074, kitchen_counter_132)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. milk_2074 is close kitchen_counter_132. kitchen_counter_132 is close milk_2074. milk_2074 is on kitchen_counter_132. milk_2074 released by left hand. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the milk_2074. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: The target item, cup_2087, is located inside dining_room_1. It can be found on top of table_123. Look for table_123 in the dining room and you will find cup_2087 on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot needs to identify the coffee table located in the home office and move book_2091 to it. Currently, the book has been placed on table_193, but it is not confirmed to be the coffee table in the home office.
The target item, cup_2087, is located inside dining_room_1. It can be found on top of table_123. Look for table_123 in the dining room and you will find cup_2087 on it.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_136.
Action 8: look for book_2091 around bookshelf_136.
Action 9: Walk to book_2091.
Action 10: Open book_2091.
Action 11: Observe around book_2091 with the question of Check if the book is in the home office and if its grabbable.
Action 12: Walk to table_193.
Action 13: Walk to book_2091.
Action 14: Grab book_2091.
Action 15: Walk to table_193.
Action 16: Put book_2091 on table_193.
Action 17: Walk to table_193.
Action 18: Walk to book_2091.
Action 19: Grab book_2091.
Action 20: Walk to table_193.
Action 21: Observe around table_193 with the question of Check if it is the coffee table in the home office.
Action 22: Put book_2091 on table_193.
Action 23: Walk to fridge_140.
Action 24: Switch off fridge_140.
Action 25: Open fridge_140.
Action 26: look for milk_2074 around fridge_140.
Action 27: Walk to milk_2074.
Action 28: Grab milk_2074.
Action 29: Walk to cupboard_131.
Action 30: Open cupboard_131.
Action 31: look for cup_2087 around cupboard_131.
Action 32: Grab milk_2074.
Action 33: Walk to kitchen_counter_132.
Action 34: look for cup_2087 around kitchen_counter_132.
Action 35: Put milk_2074 on kitchen_counter_132.
Action 36: Grab milk_2074.
Action 37: Walk to cupboard_130.
Action 38: look for cup_2087 around cupboard_130.
Action 39: Grab milk_2074.
Action 40: Walk to kitchen_counter_129.

##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
put_executor(milk_2074, kitchen_counter_129)grab_executor(milk_2074)walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
put_executor(milk_2074, kitchen_counter_129)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. milk_2074 is close kitchen_counter_129. kitchen_counter_129 is close milk_2074. milk_2074 is on kitchen_counter_129. milk_2074 released by left hand. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(cup_2087)put_executor(milk_2074, cup_2087)walk_executor(stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(cup_2087, stove_2090)walk_executor(cup_2087)obs(cup_2087, Check if the milk is hot)walk_executor(table_193)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
put_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. cup_2087 is close milk_2074. milk_2074 is on cup_2087. milk_2074 released by left hand. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
put_executor(cup_2087, stove_2090)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. cup_2087 is close stove_2090. cup_2087 is on stove_2090. stove_2090 is close cup_2087. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the stove_2090. 
##############################
From agent.py
obs(cup_2087, Check if the milk is hot)
Get this information:  cup_2087 is inside dining_room_1. cup_2087 is close to character_219. cup_2087 is close to stove_2090. cup_2087 is on stove_2090. milk_2074 is on cup_2087.
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the stove_2090. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the stove_2090. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the cup_2087. Robot is close to the table_193. 
##############################
From agent.py
put_executor(cup_2087, table_193)
Robot find: Robot is close to the cup_2087. Robot is close to the table_193. table_193 is close cup_2087. cup_2087 is close table_193. cup_2087 is on table_193. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'open_executor(book_2091)', 'walk_executor(table_193)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(table_193)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'grab_executor(milk_2074)', 'walk_executor(kitchen_counter_132)', 'put_executor(milk_2074, kitchen_counter_132)', 'grab_executor(milk_2074)', 'walk_executor(cupboard_130)', 'grab_executor(milk_2074)', 'walk_executor(kitchen_counter_129)', 'put_executor(milk_2074, kitchen_counter_129)', 'grab_executor(milk_2074)', 'walk_executor(table_123)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'put_executor(milk_2074, cup_2087)', 'walk_executor(stove_2090)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'put_executor(cup_2087, stove_2090)', 'walk_executor(cup_2087)', 'walk_executor(table_193)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(table_193)', 'put_executor(cup_2087, table_193)']
Time info:
Time consume: 312 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 35
goal generate times: 11
goal correct times: 0
action_num: 51

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 12 steps
Keystate: k3 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
