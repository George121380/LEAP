From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and cut the vegetables.', '3. Mix the boiled egg, vegetables, and lemon together in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_pot_to_boil_egg(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior wait_until_egg_boiled(egg:item, pot:item):
    body:
        if inside(egg, pot):
            observe(pot, "Observe to ensure the egg is boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_pot_to_boil_egg(pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        add_egg_to_pot(egg, pot)
        
        wait_until_egg_boiled(egg, pot)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior prepare_pot_to_boil_egg(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior wait_until_egg_boiled(egg:item, pot:item):
    body:
        if inside(egg, pot):
            observe(pot, "Observe to ensure the egg is boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)
        
        prepare_pot_to_boil_egg(pot)
        place_pot_on_stove(pot, stove)
        
        turn_on_stove(stove)
        
        add_egg_to_pot(egg, pot)
        
        wait_until_egg_boiled(egg, pot)
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)obs(pot_2069, Observe to ensure the egg is boiled)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)obs(pot_2069, Observe to ensure the egg is boiled)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)obs(pot_2069, Observe to ensure the egg is boiled)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
obs(pot_2069, Observe to ensure the egg is boiled)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to stove_2065. pot_2069 is close to character_65. pot_2069 is close to food_egg_2020. pot_2069 is on stove_2065. food_egg_2020 is inside pot_2069. pot_2069 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable) # Wash the vegetable if it is dirty
        if not cut(vegetable) and cuttable(vegetable):
            cuts(vegetable) # Cut the vegetable if it is not already cut and can be cut

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_and_cut_vegetables(vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_cut_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable) # Wash the vegetable if it is dirty
        if not cut(vegetable) and cuttable(vegetable):
            cuts(vegetable) # Cut the vegetable if it is not already cut and can be cut

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_and_cut_vegetables(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and id[boiled_egg] == 2020
            # Select the boiled egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
            # Select the vegetables

        bind lemon: item where:
            is_food_lemon(lemon)
            # Select the lemon

        bind bowl: item where:
            is_bowl(bowl)
            # Select the bowl

        mix_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the boiled egg with a specific ID

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the washed and cut vegetables with a specific ID

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select any available lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_bowls(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
            # Grab the boiled egg

        if not inhand(vegetables):
            grab(vegetables)
            # Grab the vegetables

        if not inhand(lemon):
            grab(lemon)
            # Grab the lemon

        if not inhand(bowl):
            grab(bowl)
            # Grab the bowl

behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if inhand(bowl):
            if not inside(egg, bowl):
                put_inside(egg, bowl)
                # Put the egg in the bowl
            
            if not inside(vegetables, bowl):
                put_inside(vegetables, bowl)
                # Put the vegetables in the bowl

            if not inside(lemon, bowl):
                put_inside(lemon, bowl)
                # Put the lemon in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the boiled and cut egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        # Select a bowl suitable for receiving ingredients

        grab_bowls(egg, vegetables, lemon, bowl)
        # Execute the behavior to grab all necessary items

        mix_ingredients(egg, vegetables, lemon, bowl)
        # Execute the behavior to mix all ingredients in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_elements_in_bowl(egg:item, vegetable:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        mix_elements_in_bowl(egg, vegetable, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_mix(egg: item, vegetables: item, lemon: item):
    # Function to check if the egg is boiled, vegetables are cut and clean, and a lemon is present
    symbol ready=exists o: item : (is_food_egg(egg) and is_food_vegetable(vegetables) and is_food_lemon(lemon) and cut(vegetables))
    return ready

behavior prepare_ingredients_for_mixing(egg: item, vegetables: item, lemon: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)

        if is_ready_to_mix(egg, vegetables, lemon):
            prepare_ingredients_for_mixing(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_items_and_mix(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg) # Grab the boiled egg

        if not inhand(vegetables):
            grab(vegetables) # Grab the cut vegetables

        if not inhand(lemon):
            grab(lemon) # Grab the lemon

        if not inhand(bowl):
            grab(bowl) # Ensure all items are in hand for mixing

behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if inhand(egg) and inhand(vegetables) and inhand(lemon) and inhand(bowl):
            put_inside(egg, bowl) # Mix the egg inside the bowl
            put_inside(vegetables, bowl) # Mix the vegetables inside the bowl
            squeeze(lemon) # Squeeze the lemon
            put_inside(lemon, bowl) # Mix the lemon juice inside the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        
        grab_items_and_mix(egg, vegetables, lemon, bowl)
        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_items_and_mix(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg) # Grab the boiled egg

        if not inhand(vegetables):
            grab(vegetables) # Grab the cut vegetables

        if not inhand(lemon):
            grab(lemon) # Grab the lemon

        if not inhand(bowl):
            grab(bowl) # Ensure all items are in hand for mixing

behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if inhand(egg) and inhand(vegetables) and inhand(lemon) and inhand(bowl):
            put_inside(egg, bowl) # Mix the egg inside the bowl
            put_inside(vegetables, bowl) # Mix the vegetables inside the bowl
            squeeze(lemon) # Squeeze the lemon
            put_inside(lemon, bowl) # Mix the lemon juice inside the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        
        grab_items_and_mix(egg, vegetables, lemon, bowl)
        mix_ingredients(egg, vegetables, lemon, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(wallshelf_35)exp(bowl_2071, wallshelf_35)walk_executor(bowl_2071)grab_executor(bowl_2071)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_salad(egg:item, vegetable:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg) and id[egg] == 2020
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable) and id[vegetable] == 2041
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2055
        bind bowl: item where:
            is_bowl(bowl)
        mix_salad(egg, vegetable, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(bowl:item, egg:item, vegetables:item, lemon:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        mix_ingredients(bowl, egg, vegetables, lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_towel_rack_31_around_towel_rack_31(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation

def prepare_bowl(bowl:item):
    if not visited(bowl):
        observe(bowl, "Check if the bowl is available")

behavior mix_ingredients_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)

        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        
        bind lemon: item where:
            is_food_lemon(lemon)

        bind bowl: item where:
            is_bowl(bowl)
        
        prepare_bowl(bowl)
        
        mix_ingredients_in_bowl(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_item_if_necessary(item:item):
    body:
        if not inhand(item):
            grab(item)

behavior mix_items_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and id[boiled_egg] == 2020
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        bind lemon: item where:
            is_food_lemon(lemon)

        grab_item_if_necessary(boiled_egg)
        grab_item_if_necessary(vegetables)
        grab_item_if_necessary(lemon)

        if not close_char(char, bowl):
            walk_to(bowl)

        mix_items_in_bowl(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_items_and_mix(egg: item, vegetables: item, lemon: item, bowl: item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inhand(vegetables):
            grab(vegetables)
        if not inhand(lemon):
            grab(lemon)

        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041

        bind lemon: item where:
            is_food_lemon(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        grab_items_and_mix(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2072, sink_42)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041) (Failed)', 'walk_executor(sink_42)']
Time info:
Time consume: 236 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 46
goal generate times: 14
goal correct times: 0
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
