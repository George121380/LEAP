From agent.py
Reset goals: The sub-goals are: 
['1. Locate the coffee maker and check it for functionality.', '2. Find coffee grounds and a cup.', '3. Brew the coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior locate_coffee_maker(coffee_maker:item):
    body:
        if not visited(coffee_maker):
            walk_to(coffee_maker)
            observe(coffee_maker, "Check if the coffee maker is functional")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        locate_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_coffee_maker(coffee_maker:item):
    body:
        if not visited(coffee_maker):
            walk_to(coffee_maker)
            observe(coffee_maker, "Check if the coffee maker is functional")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        locate_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Check if the coffee maker is functional)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Check if the coffee maker is functional)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is OPEN. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_grounds_and_cup():
    # Check if there is a cup or coffee grounds present
    symbol has_cup=exists o: item : (is_cup(o))
    symbol has_coffee_grounds=exists o: item : (is_food_coffee(o))
    return has_cup and has_coffee_grounds

behavior find_coffee_grounds_and_cup():
    body:
        # Check all items in the environment that have not been visited
        foreach o: item:
            if not visited(o) and (is_cup(o) or is_food_coffee(o)):
                observe(o, "Check if it is a coffee ground or a cup")
                
behavior __goal__():
    body:
        if not has_coffee_grounds_and_cup():
            find_coffee_grounds_and_cup()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def has_coffee_grounds_and_cup_visible(surface:item):
    # Function to check if coffee grounds and a cup are visible on a surface
    symbol has_items = exists item1: item : ((is_cup(item1) or is_coffee_filter(item1)) and on(item1, surface))
    return has_items

behavior __goal__():
    body:
        if exists surface: item : surfaces(surface) and has_coffee_grounds_and_cup_visible(surface):
            # Check if there is a surface with visible coffee grounds or a cup on it
            bind surface: item where:
                surfaces(surface) and has_coffee_grounds_and_cup_visible(surface)
            # Select a surface with coffee grounds or a cup on it
            walk_to(surface) 
            # Approach the surface with coffee grounds or a cup

        else:
            # If no surface with coffee grounds or a cup is found, initiate exploration
            foreach surface: item:
                if surfaces(surface) and not visited(surface):
                    observe(surface, "Check for coffee grounds or cup")
                    # Observe each unvisited surface for coffee grounds or a cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_food_2073_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation

behavior locate_coffee_essentials(coffee_grounds:item, cup:item):
    body:
        if not visited(coffee_grounds):
            observe(coffee_grounds, "Check if it is coffee grounds")
        if not visited(cup):
            observe(cup, "Check if it is a cup")

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds)
        bind cup: item where:
            is_cup(cup)
        
        locate_coffee_essentials(coffee_grounds, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior locate_coffee_essentials(coffee_grounds:item, cup:item):
    body:
        if not visited(coffee_grounds):
            observe(coffee_grounds, "Check if it is coffee grounds")
        if not visited(cup):
            observe(cup, "Check if it is a cup")

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds)
        bind cup: item where:
            is_cup(cup)
        
        locate_coffee_essentials(coffee_grounds, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_food_2094, kitchen_counter_123)walk_executor(food_food_2094)obs(food_food_2094, Check if it is coffee grounds)walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_food_2094, kitchen_counter_123)
Fail to find food_food_2094 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_food_2094, kitchen_counter_119)walk_executor(food_food_2094)obs(food_food_2094, Check if it is coffee grounds)walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_food_2094, kitchen_counter_119)
Fail to find food_food_2094 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_food_2094, fridge_126)walk_executor(food_food_2094)obs(food_food_2094, Check if it is coffee grounds)walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_food_2094, fridge_126)
Find food_food_2094. 
##############################
From agent.py-> find a plan in act()
obs(food_food_2094, Check if it is coffee grounds)walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
obs(food_food_2094, Check if it is coffee grounds)
Get this information:  food_food_2094 is inside dining_room_41. food_food_2094 is inside fridge_126. food_food_2094 is close to fridge_126. food_food_2094 is close to character_240. food_food_2094 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_306)exp(cup_2132, walllamp_306)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(walllamp_306)
Robot find: drawing_288, Robot is close to the walllamp_306. 
##############################
From agent.py
exp(cup_2132, walllamp_306)
Fail to find cup_2132 around walllamp_306. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(cup_2132, bookshelf_124)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: The target item, cup_2132, is located inside dining_room_41. You will find cup_2132 placed on table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, cup_2132, is located inside dining_room_41. You will find cup_2132 placed on table_114.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Open coffe_maker_130.
Action 3: Observe around coffe_maker_130 with the question of Check if the coffee maker is functional.
Action 4: Walk to kitchen_counter_123.
Action 5: look for food_food_2094 around kitchen_counter_123.
Action 6: Walk to kitchen_counter_119.
Action 7: look for food_food_2094 around kitchen_counter_119.
Action 8: Walk to fridge_126.
Action 9: Switch off fridge_126.
Action 10: Open fridge_126.
Action 11: look for food_food_2094 around fridge_126.
Action 12: Observe around food_food_2094 with the question of Check if it is coffee grounds.
Action 13: Walk to cupboard_118.
Action 14: Open cupboard_118.
Action 15: look for cup_2132 around cupboard_118.
Action 16: Walk to cupboard_117.
Action 17: look for cup_2132 around cupboard_117.
Action 18: Walk to walllamp_306.
Action 19: look for cup_2132 around walllamp_306.
Action 20: Walk to bookshelf_124.
Action 21: Open bookshelf_124.

##############################
From agent.py
exp(cup_2132, bookshelf_124)
Fail to find cup_2132 around bookshelf_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)obs(cup_2132, Check if it is a cup)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
obs(cup_2132, Check if it is a cup)
Get this information:  cup_2132 is inside dining_room_41. cup_2132 is close to table_114. cup_2132 is close to character_240. cup_2132 is on table_114.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_food_food_1000(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

behavior find_food_food_2074_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_coffee_maker_and_brew(coffee_maker: item, coffee_grounds: item, cup: item):
    body:
        if not visited(coffee_maker):
            observe(coffee_maker, "Check if coffee maker is functional and ready to brew")

        if is_coffe_maker(coffee_maker) and has_switch(coffee_maker) and plugged(coffee_maker):
            if open(coffee_maker):
                put_inside(coffee_grounds, coffee_maker)
                put_under(cup, coffee_maker) # Assuming there is a placeholder for a cup
                switch_on(coffee_maker)  # Start the brewing process

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        
        check_coffee_maker_and_brew(coffee_maker, coffee_grounds, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2064_around_toaster_132(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_food,toaster_instance)
        else:
            exp(food_food,toaster_instance)
    eff:
        unknown[food_food]=False
        close[food_food,toaster_instance]=True
        close[toaster_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker_and_brew(coffee_maker:item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(coffee_maker:item, coffee_grounds:item, cup:item):
    body:
        if open(coffee_maker):
            put_close(coffee_grounds, coffee_maker)
        if inhand(coffee_grounds):
            empty_a_hand()
        if inhand(cup):
            empty_a_hand()
        put_inhand(coffee, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132

        plug_in_coffee_maker_and_brew(coffee_maker)
        brew_coffee(coffee_maker, coffee_grounds, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_knifeblock_76(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(measuring_cup,knifeblock_instance)
        else:
            exp(measuring_cup,knifeblock_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,knifeblock_instance]=True
        close[knifeblock_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffe_maker:item, coffee_grounds:item, cup:item):
    body:
        if not open(coffe_maker):
            opens(coffe_maker)
        if not inside(coffee_grounds, coffe_maker):
            put_inside(coffee_grounds, coffe_maker)
        if not inside(cup, coffe_maker):
            put_inside(cup, coffe_maker)
        if is_off(coffe_maker):
            switch_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        brew_coffee(coffe_maker, coffee_grounds, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_cutting_board_2123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(measuring_cup,cutting_board_instance)
        else:
            exp(measuring_cup,cutting_board_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cutting_board_instance]=True
        close[cutting_board_instance,measuring_cup]=True
    

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior add_coffee_grounds_and_water(coffe_maker:item, coffee_grounds:item):
    body:
        if open(coffe_maker):
            if not inside(coffee_grounds, coffe_maker):
                put_inside(coffee_grounds, coffe_maker)
            if not has_water(coffe_maker):
                get_water(coffe_maker)

behavior start_coffee_maker(coffe_maker:item):
    body:
        if is_off(coffe_maker):
            switch_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        
        add_coffee_grounds_and_water(coffe_maker, coffee_grounds)
        start_coffee_maker(coffe_maker)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_coffee_grounds_and_water(coffe_maker:item, coffee_grounds:item):
    body:
        if open(coffe_maker):
            if not inside(coffee_grounds, coffe_maker):
                put_inside(coffee_grounds, coffe_maker)
            if not has_water(coffe_maker):
                get_water(coffe_maker)

behavior start_coffee_maker(coffe_maker:item):
    body:
        if is_off(coffe_maker):
            switch_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        
        add_coffee_grounds_and_water(coffe_maker, coffee_grounds)
        start_coffee_maker(coffe_maker)
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_2094)grab_executor(food_food_2094)walk_executor(coffe_maker_130)putin_executor(food_food_2094, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(food_food_2094)
Robot find: Robot is close to the food_food_2094. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_food_2094)
Robot find: Robot is close to the food_food_2094. Robot is close to the fridge_126. Grabbing food_food_2094 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_food_2094, coffe_maker_130)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close food_food_2094. food_food_2094 is close coffe_maker_130. food_food_2094 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(walllamp_306)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'walk_executor(food_food_2094)', 'grab_executor(food_food_2094)', 'walk_executor(coffe_maker_130)', 'putin_executor(food_food_2094, coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)']
Time info:
Time consume: 158 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 73
goal generate times: 8
goal correct times: 0
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
