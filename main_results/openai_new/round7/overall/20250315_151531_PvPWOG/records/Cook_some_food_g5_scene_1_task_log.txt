From agent.py
Reset goals: The sub-goals are: 
['1. Peel the bananas.', '2. Heat oil in a pan.', '3. Fry the bananas in the hot oil until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_bananas(banana:item):
    body:
        if not cut(banana) and is_food_banana(banana):
            cuts(banana)

behavior __goal__():
    body:
        foreach banana: item:
            if is_food_banana(banana):
                peel_bananas(banana)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation

behavior peel_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        peel_banana(banana)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        if is_food_banana(banana) and not cut(banana):
            cuts(banana)
            # Cut the banana to remove the peel if necessary

behavior __goal__():
    body:
        foreach banana: item:
            if is_food_banana(banana):
                peel_banana(banana)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        if is_food_banana(banana) and not cut(banana):
            cuts(banana)
            # Cut the banana to remove the peel if necessary

behavior __goal__():
    body:
        foreach banana: item:
            if is_food_banana(banana):
                peel_banana(banana)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, fryingpan:item, stove:item):
    body:
        if not on(oil, fryingpan):
            put_on(oil, fryingpan)
        if open(stove):
            closes(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        heat_oil_in_pan(oil, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, fryingpan:item, stove:item):
    body:
        if not on(oil, fryingpan):
            put_on(oil, fryingpan)
        if open(stove):
            closes(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        heat_oil_in_pan(oil, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(kitchen_counter_122)exp(oil_2149, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 is on fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
close_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is closed. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2037_around_tvstand_116(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(knife,tvstand_instance)
        else:
            exp(knife,tvstand_instance)
    eff:
        unknown[knife]=False
        close[knife,tvstand_instance]=True
        close[tvstand_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil(oil:item, fryingpan:item, stove:item):
    body:
        if not on(oil, fryingpan):
            put_on(oil, fryingpan)
        if is_off(stove):
            switch_on(stove)

behavior fry_bananas_in_oil(bananas:item, oil:item, fryingpan:item):
    body:
        if not inside(bananas, fryingpan):
            put_inside(bananas, fryingpan)
        observe(fryingpan, "Ensure the bananas are fried until golden brown")

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)

        heat_oil(oil, fryingpan, stove)
        fry_bananas_in_oil(bananas, oil, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_cupboard_117(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior fry_bananas_in_oil(fryingpan: item, banana: item, stove: item):
    body:
        if not on(banana, fryingpan):
            put_on(banana, fryingpan)
        if is_off(stove):
            switch_on(stove)
        if not is_on(fryingpan):
            observe(fryingpan, "Ensure frying pan is on and oil is hot")
        watch(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154

        bind banana: item where:
            is_food_banana(banana) and cut(banana) and not on(banana, fryingpan)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        fry_bananas_in_oil(fryingpan, banana, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_tvstand_273(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(oil,tvstand_instance)
        else:
            exp(oil,tvstand_instance)
    eff:
        unknown[oil]=False
        close[oil,tvstand_instance]=True
        close[tvstand_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_ready(oil:item):
    # Function to check if the oil is ready for frying
    symbol is_ready=exists o: item : (is_oil(o) and is_on(o))
    return is_ready

behavior fry_bananas(bananas:item, fryingpan:item, oil:item):
    body:
        if not inside(bananas, fryingpan):
            put_inside(bananas, fryingpan)
        # Put the bananas into the frying pan

        if not is_frying_ready(oil):
            observe(oil, "Check if the oil is ready for frying")
        # Ensure the oil is ready for frying

behavior wait_until_golden_brown(bananas:item):
    body:
        observe(bananas, "Observe to ensure the bananas are golden brown")
        # Wait and observe until the bananas are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the bananas that have been cut
        
        bind oil: item where:
            is_oil(oil) and on(oil, fryingpan)
        # Select oil, assuming the oil is on the frying pan
        
        fry_bananas(bananas, fryingpan, oil)
        wait_until_golden_brown(bananas)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_tvstand_273(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(oil,tvstand_instance)
        else:
            exp(oil,tvstand_instance)
    eff:
        unknown[oil]=False
        close[oil,tvstand_instance]=True
        close[tvstand_instance,oil]=True
    

behavior find_knife_2037_around_tvstand_116(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(knife,tvstand_instance)
        else:
            exp(knife,tvstand_instance)
    eff:
        unknown[knife]=False
        close[knife,tvstand_instance]=True
        close[tvstand_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior fry_bananas(fryingpan:item, stove:item, bananas:item):
    body:
        if not on(bananas, fryingpan):
            put_on(bananas, fryingpan)
            # Place the bananas in the frying pan
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat the oil
        observe(fryingpan, "Fry the bananas until golden brown")
        # Fry the bananas until they are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is already on

        bind bananas: item where:
            is_food_banana(bananas) and id[bananas] == 2083
        # Select the bananas you want to fry

        fry_bananas(fryingpan, stove, bananas)
        # Begin frying the bananas
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_bananas(fryingpan:item, stove:item, bananas:item):
    body:
        if not on(bananas, fryingpan):
            put_on(bananas, fryingpan)
            # Place the bananas in the frying pan
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat the oil
        observe(fryingpan, "Fry the bananas until golden brown")
        # Fry the bananas until they are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is already on

        bind bananas: item where:
            is_food_banana(bananas) and id[bananas] == 2083
        # Select the bananas you want to fry

        fry_bananas(fryingpan, stove, bananas)
        # Begin frying the bananas
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)obs(fryingpan_2154, Fry the bananas until golden brown)
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 is on fryingpan_2154. food_banana_2083 released by left hand. 
##############################
From agent.py
obs(fryingpan_2154, Fry the bananas until golden brown)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to oil_2149. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_banana_2083. fryingpan_2154 is on kitchen_counter_122. oil_2149 is on fryingpan_2154. fryingpan_2154 is inside dining_room_41. food_banana_2083 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fry the bananas until they are golden brown. Currently, the bananas have been placed in the frying pan and the stove is turned on, but there is no indication that the bananas have been fried to the desired golden brown state.
##############################
From agent.py
Human Instruction: The robot needs to fry the bananas until they are golden brown. Currently, the bananas have been placed in the frying pan and the stove is turned on, but there is no indication that the bananas have been fried to the desired golden brown state.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for knife_2122 around cupboard_118.
Action 13: Grab knife_2037.
Action 14: Walk to food_banana_2083.
Action 15: Cut food_banana_2083.
Action 16: Walk to stove_2135.
Action 17: Open stove_2135.
Action 18: look for fryingpan_2154 around stove_2135.
Action 19: Walk to kitchen_counter_122.
Action 20: look for fryingpan_2154 around kitchen_counter_122.
Action 21: Walk to kitchen_counter_123.
Action 22: look for oil_2149 around kitchen_counter_123.
Action 23: Walk to oil_2149.
Action 24: Grab oil_2149.
Action 25: Walk to fryingpan_2154.
Action 26: Put oil_2149 on fryingpan_2154.
Action 27: Walk to stove_2135.
Action 28: Close stove_2135.
Action 29: Switch on stove_2135.
Action 30: Walk to food_banana_2083.
Action 31: Grab food_banana_2083.
Action 32: Walk to fryingpan_2154.
Action 33: Put food_banana_2083 on fryingpan_2154.
Action 34: Observe around fryingpan_2154 with the question of Fry the bananas until golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_bananas(fryingpan:item):
    body:
        observe(fryingpan, "Fry the bananas until golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        observe_bananas(fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_bananas(fryingpan:item):
    body:
        observe(fryingpan, "Fry the bananas until golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        observe_bananas(fryingpan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Fry the bananas until golden brown)
##############################
From agent.py
obs(fryingpan_2154, Fry the bananas until golden brown)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to oil_2149. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_banana_2083. fryingpan_2154 is on kitchen_counter_122. oil_2149 is on fryingpan_2154. fryingpan_2154 is inside dining_room_41. food_banana_2083 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to continue frying the bananas until they turn golden brown. As per the provided actions and information, there is no indication that the bananas have achieved the desired golden brown state.
##############################
From agent.py
Human Instruction: The robot needs to continue frying the bananas until they turn golden brown. As per the provided actions and information, there is no indication that the bananas have achieved the desired golden brown state.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for knife_2122 around cupboard_118.
Action 13: Grab knife_2037.
Action 14: Walk to food_banana_2083.
Action 15: Cut food_banana_2083.
Action 16: Walk to stove_2135.
Action 17: Open stove_2135.
Action 18: look for fryingpan_2154 around stove_2135.
Action 19: Walk to kitchen_counter_122.
Action 20: look for fryingpan_2154 around kitchen_counter_122.
Action 21: Walk to kitchen_counter_123.
Action 22: look for oil_2149 around kitchen_counter_123.
Action 23: Walk to oil_2149.
Action 24: Grab oil_2149.
Action 25: Walk to fryingpan_2154.
Action 26: Put oil_2149 on fryingpan_2154.
Action 27: Walk to stove_2135.
Action 28: Close stove_2135.
Action 29: Switch on stove_2135.
Action 30: Walk to food_banana_2083.
Action 31: Grab food_banana_2083.
Action 32: Walk to fryingpan_2154.
Action 33: Put food_banana_2083 on fryingpan_2154.
Action 34: Observe around fryingpan_2154 with the question of Fry the bananas until golden brown.
Action 35: Observe around fryingpan_2154 with the question of Fry the bananas until golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior observe_banana_until_golden_brown(banana:item, fryingpan:item):
    body:
        if is_food_banana(banana) and on(banana, fryingpan) and not visited(banana):
            observe(fryingpan, "Fry the bananas until golden brown")
            # Continue to observe the banana until it turns golden brown

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        observe_banana_until_golden_brown(banana, fryingpan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior observe_banana_until_golden_brown(banana:item, fryingpan:item):
    body:
        if is_food_banana(banana) and on(banana, fryingpan) and not visited(banana):
            observe(fryingpan, "Fry the bananas until golden brown")
            # Continue to observe the banana until it turns golden brown

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        observe_banana_until_golden_brown(banana, fryingpan)
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Fry the bananas until golden brown)
##############################
From agent.py
obs(fryingpan_2154, Fry the bananas until golden brown)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to oil_2149. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_banana_2083. fryingpan_2154 is on kitchen_counter_122. oil_2149 is on fryingpan_2154. fryingpan_2154 is inside dining_room_41. food_banana_2083 is on fryingpan_2154. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue observing the bananas until they achieve a golden brown color in the frying pan. The frying process has not been visually confirmed to reach the desired state.
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'put_executor(oil_2149, fryingpan_2154)', 'walk_executor(stove_2135)', 'close_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'put_executor(food_banana_2083, fryingpan_2154)']
Time info:
Time consume: 187 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 148
goal generate times: 10
goal correct times: 0
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
