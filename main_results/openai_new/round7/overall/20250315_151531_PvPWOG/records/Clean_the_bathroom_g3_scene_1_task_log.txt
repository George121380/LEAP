From agent.py
Reset goals: The sub-goals are: 
['1. Wipe the toilet with toilet paper.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)
            # Wipe the toilet to make it clean

behavior throw_toilet_paper_in_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)
            # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        wipe_toilet(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            if not inhand(toilet_paper):
                grab(toilet_paper)
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)

        wipe_toilet_with_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)

        if not inhand(toilet_paper):
            grab(toilet_paper)
        
        if not close_char(char, toilet):
            walk_to(toilet)

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)

        if not inhand(toilet_paper):
            grab(toilet_paper)
        
        if not close_char(char, toilet):
            walk_to(toilet)

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(toilet_paper_2076, bathroom_cabinet_17)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: drawing_33, Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_cabinet_17)
Fail to find toilet_paper_2076 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(toilet_paper_2076, cupboard_117)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(toilet_paper_2076, cupboard_117)
Fail to find toilet_paper_2076 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)open_executor(toilet_15)exp(toilet_paper_2076, toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, Robot is close to the toilet_15. 
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, toilet_15)
Find toilet_paper_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the action "wipe" on the toilet using the toilet paper you are holding.
##############################
From agent.py
Human Instruction: You need to perform the action "wipe" on the toilet using the toilet paper you are holding.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_17.
Action 2: Open bathroom_cabinet_17.
Action 3: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 4: Walk to cupboard_117.
Action 5: look for toilet_paper_2076 around cupboard_117.
Action 6: Walk to toilet_15.
Action 7: Open toilet_15.
Action 8: look for toilet_paper_2076 around toilet_15.
Action 9: Walk to toilet_paper_2076.
Action 10: Grab toilet_paper_2076.
Action 11: Walk to toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            wipe(toilet)
        
behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        
        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_basket_for_clothes_2078(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(rag,basket_for_clothes_instance)
        else:
            exp(rag,basket_for_clothes_instance)
    eff:
        unknown[rag]=False
        close[rag,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,rag]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if dirty(toilet):
            walk_to(toilet)
            if open(toilet):
                grab(toilet_paper)
                wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        
        wipe_toilet_with_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_bathroom_counter_18(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(brush,bathroom_counter_instance)
        else:
            exp(brush,bathroom_counter_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,brush]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet_paper: item, toilet: item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        wipe_toilet_with_paper(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            wipe(toilet)
            
behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        
        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_shower_16(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(brush,shower_instance)
        else:
            exp(brush,shower_instance)
    eff:
        unknown[brush]=False
        close[brush,shower_instance]=True
        close[shower_instance,brush]=True
    

behavior find_cleaning_solution_2143_around_kitchen_counter_119(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_towel_2128_around_shower_16(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_toilet_paper_and_toilet(toilet_paper:item, toilet:item):
    body:
        if not close_char(char, toilet_paper):
            walk_to(toilet_paper)
            # Move to the location of the toilet paper
            
        if not inhand(toilet_paper):
            grab(toilet_paper)
            # Grab the toilet paper

        if not close_char(char, toilet):
            walk_to(toilet)
            # Move to the location of the toilet

behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        wipe(toilet)
        # Perform the wipe action on the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet)
        approach_toilet_paper_and_toilet(toilet_paper, toilet)
        wipe_toilet_with_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior approach_toilet_paper_and_toilet(toilet_paper:item, toilet:item):
    body:
        if not close_char(char, toilet_paper):
            walk_to(toilet_paper)
            # Move to the location of the toilet paper
            
        if not inhand(toilet_paper):
            grab(toilet_paper)
            # Grab the toilet paper

        if not close_char(char, toilet):
            walk_to(toilet)
            # Move to the location of the toilet

behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        wipe(toilet)
        # Perform the wipe action on the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet)
        approach_toilet_paper_and_toilet(toilet_paper, toilet)
        wipe_toilet_with_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_15)
##############################
From agent.py
wipe_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_shower_16(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_box_2038_around_kitchen_counter_122(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(box,kitchen_counter_instance)
        else:
            exp(box,kitchen_counter_instance)
    eff:
        unknown[box]=False
        close[box,kitchen_counter_instance]=True
        close[kitchen_counter_instance,box]=True
    

#exp_behavior_end

#goal_representation

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select the toilet paper with ID 2076

        throw_toilet_paper_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select the toilet paper with ID 2076

        throw_toilet_paper_into_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(cupboard_117)', 'walk_executor(toilet_15)', 'open_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'wipe_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)']
Time info:
Time consume: 102 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 59
goal generate times: 9
goal correct times: 0
action_num: 10

Task complete rate:
1
Scene_id: 1
##############################
