From agent.py
Reset goals: The sub-goals are: 
['Scramble an egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def egg_in_fryingpan(fryingpan:item, egg:item):
    # Function to check if the egg is in the frying pan
    symbol in_fryingpan=exists o: item : (is_food_egg(o) and inside(o, fryingpan))
    return in_fryingpan

behavior prepare_egg_and_fryingpan(egg:item, fryingpan:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside_char(char, fryingpan):
            put_inside(egg, fryingpan)
            empty_a_hand()

behavior cook_egg(fryingpan:item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg)
        prepare_egg_and_fryingpan(egg, fryingpan)
        if egg_in_fryingpan(fryingpan, egg):
            cook_egg(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_crack_egg(egg:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)

behavior place_frying_pan_on_stove(frying_pan:item, stove:item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior scramble_egg_in_pan(egg:item, frying_pan:item):
    body:
        if inside(egg, frying_pan):
            observe(frying_pan, "Ensure the egg is scrambled properly in the pan")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        
        bind stove: item where:
            is_stove(stove)
        
        grab_and_crack_egg(egg)
        
        place_frying_pan_on_stove(frying_pan, stove)
        
        turn_on_stove(stove)
        
        if inhand(egg) and not inside(egg, frying_pan):
            put_inside(egg, frying_pan)
        
        scramble_egg_in_pan(egg, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_items_needed_for_scrambling_eggs(egg:item, fryingpan:item):
    body:
        if not visited(egg):
            observe(egg, "Locate the egg")
        if not visited(fryingpan):
            observe(fryingpan, "Locate the frying pan")

behavior prepare_to_scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        if not close_char(char, egg):
            walk_to(egg)
        grab(egg)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if is_off(stove):
            switch_on(stove)

behavior cook_egg(egg: item, fryingpan: item):
    body:
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        observe(fryingpan, "Check if the egg is scrambled and cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        observe_items_needed_for_scrambling_eggs(egg, fryingpan)
        prepare_to_scramble_eggs(egg, fryingpan, stove)
        cook_egg(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior observe_items_needed_for_scrambling_eggs(egg:item, fryingpan:item):
    body:
        if not visited(egg):
            observe(egg, "Locate the egg")
        if not visited(fryingpan):
            observe(fryingpan, "Locate the frying pan")

behavior prepare_to_scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        if not close_char(char, egg):
            walk_to(egg)
        grab(egg)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if is_off(stove):
            switch_on(stove)

behavior cook_egg(egg: item, fryingpan: item):
    body:
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        observe(fryingpan, "Check if the egg is scrambled and cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        observe_items_needed_for_scrambling_eggs(egg, fryingpan)
        prepare_to_scramble_eggs(egg, fryingpan, stove)
        cook_egg(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Locate the egg)walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fryingpan_2083)obs(fryingpan_2083, Locate the frying pan)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)obs(fryingpan_2083, Check if the egg is scrambled and cooked)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2020, Locate the egg)walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fryingpan_2083)obs(fryingpan_2083, Locate the frying pan)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)obs(fryingpan_2083, Check if the egg is scrambled and cooked)
##############################
From agent.py
obs(food_egg_2020, Locate the egg)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(fryingpan_2083, stove_2065)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)obs(fryingpan_2083, Locate the frying pan)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)obs(fryingpan_2083, Check if the egg is scrambled and cooked)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(fryingpan_2083, Locate the frying pan)
Get this information:  fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is CLEAN.
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
obs(fryingpan_2083, Check if the egg is scrambled and cooked)
Get this information:  fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on kitchen_counter_230. food_egg_2020 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually scramble the egg in the frying pan. Although you put the egg on the frying pan and checked its state, you did not perform any action to scramble the egg itself. Please scramble the egg in the frying pan to complete this sub-task.
##############################
From agent.py
Human Instruction: You need to actually scramble the egg in the frying pan. Although you put the egg on the frying pan and checked its state, you did not perform any action to scramble the egg itself. Please scramble the egg in the frying pan to complete this sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Observe around food_egg_2020 with the question of Locate the egg.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for fryingpan_2083 around stove_2065.
Action 9: Walk to fryingpan_2083.
Action 10: Observe around fryingpan_2083 with the question of Locate the frying pan.
Action 11: Walk to food_egg_2020.
Action 12: Grab food_egg_2020.
Action 13: Walk to fryingpan_2083.
Action 14: Walk to stove_2065.
Action 15: Switch on stove_2065.
Action 16: Walk to fryingpan_2083.
Action 17: Put food_egg_2020 on fryingpan_2083.
Action 18: Observe around fryingpan_2083 with the question of Check if the egg is scrambled and cooked.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_the_egg(egg:item, fryingpan:item):
    body:
        if on(egg, fryingpan):
            observe(fryingpan, "Check if the egg is scrambled and cooked")
        else:
            walk_to(egg)
            grab(egg)
            walk_to(fryingpan)
            put_on(egg, fryingpan)
            observe(fryingpan, "Check if the egg is scrambled and cooked")
            # Ensure that the egg is scrambled in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        scramble_the_egg(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_the_egg(egg:item, fryingpan:item):
    body:
        if on(egg, fryingpan):
            observe(fryingpan, "Check if the egg is scrambled and cooked")
        else:
            walk_to(egg)
            grab(egg)
            walk_to(fryingpan)
            put_on(egg, fryingpan)
            observe(fryingpan, "Check if the egg is scrambled and cooked")
            # Ensure that the egg is scrambled in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        scramble_the_egg(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the egg is scrambled and cooked)
##############################
From agent.py
obs(fryingpan_2083, Check if the egg is scrambled and cooked)
Get this information:  fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on kitchen_counter_230. food_egg_2020 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to scramble the egg in the frying pan, as merely placing it there and switching on the stove is not sufficient. Perform an action to scramble the egg.
##############################
From agent.py
Human Instruction: You need to scramble the egg in the frying pan, as merely placing it there and switching on the stove is not sufficient. Perform an action to scramble the egg.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Observe around food_egg_2020 with the question of Locate the egg.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for fryingpan_2083 around stove_2065.
Action 9: Walk to fryingpan_2083.
Action 10: Observe around fryingpan_2083 with the question of Locate the frying pan.
Action 11: Walk to food_egg_2020.
Action 12: Grab food_egg_2020.
Action 13: Walk to fryingpan_2083.
Action 14: Walk to stove_2065.
Action 15: Switch on stove_2065.
Action 16: Walk to fryingpan_2083.
Action 17: Put food_egg_2020 on fryingpan_2083.
Action 18: Observe around fryingpan_2083 with the question of Check if the egg is scrambled and cooked.
Action 19: Observe around fryingpan_2083 with the question of Check if the egg is scrambled and cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_closetdrawer_384(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_scramble_egg(egg:item, fryingpan:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        if not cut(egg):
            cuts(egg)  # Simulate scrambling the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        grab_and_scramble_egg(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_and_scramble_egg(egg:item, fryingpan:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)
        if not cut(egg):
            cuts(egg)  # Simulate scrambling the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        grab_and_scramble_egg(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the action to scramble the egg in the frying pan. Cutting the egg on the cutting board does not complete the task of scrambling it in the frying pan.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'put_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(food_egg_2020)', 'put_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)']
Time info:
Time consume: 114 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 145
goal generate times: 5
goal correct times: 0
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
