From agent.py
Reset goals: The sub-goals are: 
['1. Pour milk into a pot and heat it until hot.', '2. Add cereal to the hot milk in a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_clothes_dress_2075_around_dresser_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_into_pot_and_heat(milk:item, pot:item, stove:item):
    body:
        if not inhand(milk):
            grab(milk)
        if not inside(milk, pot):
            put_inside(milk, pot)
            # Pour the milk into the pot
        if inhand(milk):
            empty_a_hand()
            # Release the milk after pouring
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        pour_milk_into_pot_and_heat(milk, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior pour_milk_into_pot_and_heat(milk:item, pot:item, stove:item):
    body:
        if not inhand(milk):
            grab(milk)
        if not inside(milk, pot):
            put_inside(milk, pot)
            # Pour the milk into the pot
        if inhand(milk):
            empty_a_hand()
            # Release the milk after pouring
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        pour_milk_into_pot_and_heat(milk, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(kitchen_counter_128)exp(pot_2093, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(kitchen_counter_128)exp(pot_2093, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the milk_2074. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_128)
Fail to find pot_2093 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
putin_executor(milk_2074, pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. milk_2074 is close pot_2093. milk_2074 is inside pot_2093. pot_2093 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind cup: item where:
            is_cup(cup)
        # Select the cup containing hot milk

        add_cereal_to_hot_milk(cereal, cup)
        # Perform the behavior to add cereal to the hot milk in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind cup: item where:
            is_cup(cup)
        # Select the cup containing hot milk

        add_cereal_to_hot_milk(cereal, cup)
        # Perform the behavior to add cereal to the hot milk in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(cup_2087, bookshelf_137)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(cup_2087, bookshelf_137)
Fail to find cup_2087 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2089)putin_executor(food_cereal_2048, cup_2089)
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2089)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2089)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. cup_2089 is close food_cereal_2048. food_cereal_2048 is close cup_2089. food_cereal_2048 is inside cup_2089. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add the hot milk to the cup containing the cereal in order to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to add the hot milk to the cup containing the cereal in order to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for milk_2074 around fridge_140.
Action 5: Walk to milk_2074.
Action 6: Grab milk_2074.
Action 7: Walk to kitchen_counter_128.
Action 8: look for pot_2093 around kitchen_counter_128.
Action 9: Walk to stove_2090.
Action 10: Open stove_2090.
Action 11: look for pot_2093 around stove_2090.
Action 12: Walk to pot_2093.
Action 13: Open pot_2093.
Action 14: Put milk_2074 into pot_2093.
Action 15: Grab pot_2093.
Action 16: Walk to stove_2090.
Action 17: Put pot_2093 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to cupboard_130.
Action 20: look for cup_2087 around cupboard_130.
Action 21: Walk to bookshelf_137.
Action 22: Open bookshelf_137.
Action 23: look for cup_2087 around bookshelf_137.
Action 24: Walk to food_cereal_2048.
Action 25: Grab food_cereal_2048.
Action 26: Walk to cup_2089.
Action 27: Put food_cereal_2048 into cup_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_bowl_2096_around_couch_192(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(bowl,couch_instance)
        else:
            exp(bowl,couch_instance)
    eff:
        unknown[bowl]=False
        close[bowl,couch_instance]=True
        close[couch_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2048

        bind cup: item where:
            is_cup(cup) and id[cup] == 2089

        add_cereal_to_milk(cereal, cup)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_bookshelf_136(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cup,bookshelf_instance)
        else:
            exp(cup,bookshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,bookshelf_instance]=True
        close[bookshelf_instance,cup]=True
    

behavior find_bowl_2096_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2048
        # Select the cereal

        bind cup: item where:
            is_cup(cup) and id[cup] == 2089
        # Select the cup with hot milk

        add_cereal_to_hot_milk(cereal, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_tvstand_186(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_cup_2087_around_drawing_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==118
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(cup,drawing_instance)
        else:
            exp(cup,drawing_instance)
    eff:
        unknown[cup]=False
        close[cup,drawing_instance]=True
        close[drawing_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_cup(cup:item, cereal:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2089
        # Select the specific cup with ID 2089
        
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2048
        # Select the cereal with ID 2048
        
        add_cereal_to_cup(cup, cereal)
        # Add the cereal to the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_bookshelf_136(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

behavior find_plate_2105_around_table_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_cereal_in_cup(cup: item):
    # Function to check if there is cereal in the cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

behavior add_cereal_to_hot_milk(cereal: item, cup: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not close_char(char, cup):
            walk_to(cup)
        if not has_cereal_in_cup(cup):
            put_inside(cereal, cup)
        if inhand(cereal):
            empty_a_hand()

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2048
        # Select the cereal with the ID 2048
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2089
        # Select the cup with the ID 2089
        
        add_cereal_to_hot_milk(cereal, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cereal_in_cup(cup: item):
    # Function to check if there is cereal in the cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

behavior add_cereal_to_hot_milk(cereal: item, cup: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not close_char(char, cup):
            walk_to(cup)
        if not has_cereal_in_cup(cup):
            put_inside(cereal, cup)
        if inhand(cereal):
            empty_a_hand()

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2048
        # Select the cereal with the ID 2048
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2089
        # Select the cup with the ID 2089
        
        add_cereal_to_hot_milk(cereal, cup)

##############################
From agent.py-> find a plan in act()
grab_executor(food_cereal_2048)putin_executor(food_cereal_2048, cup_2089)
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2089)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. food_cereal_2048 is close cup_2089. food_cereal_2048 is inside cup_2089. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add the hot milk from the pot into the cup that already contains the cereal.
##############################
From agent.py
Human Instruction: You need to add the hot milk from the pot into the cup that already contains the cereal.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for milk_2074 around fridge_140.
Action 5: Walk to milk_2074.
Action 6: Grab milk_2074.
Action 7: Walk to kitchen_counter_128.
Action 8: look for pot_2093 around kitchen_counter_128.
Action 9: Walk to stove_2090.
Action 10: Open stove_2090.
Action 11: look for pot_2093 around stove_2090.
Action 12: Walk to pot_2093.
Action 13: Open pot_2093.
Action 14: Put milk_2074 into pot_2093.
Action 15: Grab pot_2093.
Action 16: Walk to stove_2090.
Action 17: Put pot_2093 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to cupboard_130.
Action 20: look for cup_2087 around cupboard_130.
Action 21: Walk to bookshelf_137.
Action 22: Open bookshelf_137.
Action 23: look for cup_2087 around bookshelf_137.
Action 24: Walk to food_cereal_2048.
Action 25: Grab food_cereal_2048.
Action 26: Walk to cup_2089.
Action 27: Put food_cereal_2048 into cup_2089.
Action 28: Grab food_cereal_2048.
Action 29: Put food_cereal_2048 into cup_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2013_around_bookshelf_372(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(glue,bookshelf_instance)
        else:
            exp(glue,bookshelf_instance)
    eff:
        unknown[glue]=False
        close[glue,bookshelf_instance]=True
        close[bookshelf_instance,glue]=True
    

behavior find_food_butter_2018_around_couch_192(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(food_butter,couch_instance)
        else:
            exp(food_butter,couch_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,couch_instance]=True
        close[couch_instance,food_butter]=True
    

behavior find_bowl_2096_around_bookshelf_136(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

behavior find_cup_2088_around_wallshelf_301(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, hot_milk:item, cup:item):
    body:
        if not close_char(char, cup):
            walk_to(cup)
        if not inside(hot_milk, cup):
            grab(hot_milk)
            put_inside(hot_milk, cup)
            empty_a_hand()
        if inhand(cereal):
            put_inside(cereal, cup)
            empty_a_hand()

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind hot_milk: item where:
            is_milk(hot_milk) and not inhand(hot_milk)
        # Select the hot milk which is not in the hand

        bind cup: item where:
            is_cup(cup) and recipient(cup) and inside(cereal, cup)
        # Select the recipient cup that already has cereal inside

        add_cereal_to_milk(cereal, hot_milk, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2089

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2048

        add_cereal_to_milk(cereal, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2096_around_bookshelf_372(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(milk:item, cereal:item, cup:item):
    body:
        if not inhand(cup):
            grab(milk)
        if not close_char(char, cereal):
            observe(cereal, "Check if the cereal can be grabbed")
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind cereal: item where:
            is_food_cereal(cereal)
        add_cereal_to_hot_milk(cereal, cereal, cup)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_hot_milk(milk:item, cereal:item, cup:item):
    body:
        if not inhand(cup):
            grab(milk)
        if not close_char(char, cereal):
            observe(cereal, "Check if the cereal can be grabbed")
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind cereal: item where:
            is_food_cereal(cereal)
        add_cereal_to_hot_milk(cereal, cereal, cup)


##############################
From agent.py-> find a plan in act()
grab_executor(food_cereal_2048)putin_executor(food_cereal_2048, cup_2089)
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2089)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the cup_2089. Robot is close to the bookshelf_137. food_cereal_2048 is close cup_2089. food_cereal_2048 is inside cup_2089. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add the hot milk from the pot into the cup that already contains the cereal.
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(kitchen_counter_128)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'putin_executor(milk_2074, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(cupboard_130)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2089)', 'putin_executor(food_cereal_2048, cup_2089)', 'grab_executor(food_cereal_2048)', 'putin_executor(food_cereal_2048, cup_2089)', 'grab_executor(food_cereal_2048)', 'putin_executor(food_cereal_2048, cup_2089)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 114
goal generate times: 9
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
