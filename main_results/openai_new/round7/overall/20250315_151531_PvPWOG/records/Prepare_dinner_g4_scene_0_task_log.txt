From agent.py
Reset goals: The sub-goals are: 
['1. Wash and prepare the ingredients, including rice and eggs.', '2. Cook the rice and fry it with eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

def has_rice_or_egg_needing_preparation(item: item):
    # Function to check if there are rice or eggs that need preparation
    symbol needs_preparation=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and dirty(o))
    return needs_preparation

behavior wash_and_prepare_ingredients(item: item):
    body:
        if dirty(item):
            wash(item) # Wash the item if it is dirty

behavior __goal__():
    body:
        foreach item: item:
            if is_food_rice(item) or is_food_egg(item):
                if has_rice_or_egg_needing_preparation(item):
                    wash_and_prepare_ingredients(item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item, sink:item):
    body:
        if not clean(item):
            wash(item)
          
behavior prepare_ingredients(rice:item, egg:item, sink:item):
    body:
        if not clean(rice):
            wash_item(rice, sink)
        if not clean(egg):
            wash_item(egg, sink)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind sink: item where:
            is_sink(sink)

        prepare_ingredients(rice, egg, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient(x: item):
    # Function to check if an item is an ingredient (rice or egg)
    symbol is_ingredient=exists y: item : ((is_food_rice(y) or is_food_egg(y)) and id[y] == id[x])
    return is_ingredient

behavior wash_ingredient(ingredient:item):
    body:
        if dirty(ingredient):
            wash(ingredient)
        if not clean(ingredient):
            rinse(ingredient)

behavior prepare_wash_area(wash_area:item):
    body:
        if not visited(wash_area):
            walk_to(wash_area)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_ingredient(ingredient) and not clean(ingredient):
                bind wash_area: item where:
                    is_sink(wash_area)
                prepare_wash_area(wash_area)
                wash_ingredient(ingredient)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient(x: item):
    # Function to check if an item is an ingredient (rice or egg)
    symbol is_ingredient=exists y: item : ((is_food_rice(y) or is_food_egg(y)) and id[y] == id[x])
    return is_ingredient

behavior wash_ingredient(ingredient:item):
    body:
        if dirty(ingredient):
            wash(ingredient)
        if not clean(ingredient):
            rinse(ingredient)

behavior prepare_wash_area(wash_area:item):
    body:
        if not visited(wash_area):
            walk_to(wash_area)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_ingredient(ingredient) and not clean(ingredient):
                bind wash_area: item where:
                    is_sink(wash_area)
                prepare_wash_area(wash_area)
                wash_ingredient(ingredient)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)rinse_executor(food_egg_2020)walk_executor(sink_231)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)rinse_executor(food_rice_2036)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs.', '2. Cook the rice and scramble the eggs together.', '3. Serve the fried rice with egg on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior locate_rice_and_eggs(rice:item, egg:item, fridge:item):
    body:
        if not close_char(char, fridge):
            walk_to(fridge)
        if not open(fridge):
            opens(fridge)
        if not visited(egg):
            observe(fridge, "Look for food_egg_2020")
        if not visited(rice):
            observe(fridge, "Look for food_rice")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020

        bind rice: item where:
            is_food_rice(rice)

        locate_rice_and_eggs(rice, egg, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior locate_rice_and_eggs(rice:item, egg:item, fridge:item):
    body:
        if not close_char(char, fridge):
            walk_to(fridge)
        if not open(fridge):
            opens(fridge)
        if not visited(egg):
            observe(fridge, "Look for food_egg_2020")
        if not visited(rice):
            observe(fridge, "Look for food_rice")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020

        bind rice: item where:
            is_food_rice(rice)

        locate_rice_and_eggs(rice, egg, fridge)

##############################
From agent.py-> find a plan in act()
obs(fridge_289, Look for food_egg_2020)obs(fridge_289, Look for food_rice)
##############################
From agent.py
obs(fridge_289, Look for food_egg_2020)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OPEN. fridge_289 is OFF. fridge_289 is CLEAN.
##############################
From agent.py
obs(fridge_289, Look for food_rice)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OPEN. fridge_289 is OFF. fridge_289 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_oil_2079_around_stove_2065(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_stove_for_cooking(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)

behavior combine_egg_and_rice(egg:item, rice:item, fryingpan:item):
    body:
        if is_food_egg(egg) and is_food_rice(rice) and on(fryingpan):
            put_inside(egg, fryingpan)
            put_inside(rice, fryingpan)

behavior scramble_egg_and_rice(fryingpan:item):
    body:
        observe(fryingpan, "Ensure rice and egg are being scrambled together")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        prepare_stove_for_cooking(stove)
        place_fryingpan_on_stove(fryingpan, stove)

        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        combine_egg_and_rice(egg, rice, fryingpan)
        scramble_egg_and_rice(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior cook_rice_and_scramble_eggs(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        if not inhand(rice):
            grab(rice)
        if not inhand(egg):
            grab(egg)
        
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        
        if not inside(rice, fryingpan):
            put_inside(rice, fryingpan)
        
        if not broken(egg) and not inside(egg, fryingpan):
            put_inside(egg, fryingpan)
        
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        
        if is_off(stove):
            switch_on(stove)
        
        observe(fryingpan, "Check if the rice and egg are cooked together")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2012
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        
        cook_rice_and_scramble_eggs(rice, egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs(rice:item, eggs:item, stove:item, pan:item):
    body:
        if not inside(rice, pan):
            put_inside(rice, pan)
        if not inside(eggs, pan):
            put_inside(eggs, pan)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind stove: item where:
            is_stove(stove)
        
        bind pan: item where:
            is_fryingpan(pan)
        
        cook_rice_and_scramble_eggs(rice, eggs, stove, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_and_scramble_eggs(rice:item, eggs:item, stove:item, pan:item):
    body:
        if not inside(rice, pan):
            put_inside(rice, pan)
        if not inside(eggs, pan):
            put_inside(eggs, pan)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind stove: item where:
            is_stove(stove)
        
        bind pan: item where:
            is_fryingpan(pan)
        
        cook_rice_and_scramble_eggs(rice, eggs, stove, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(fryingpan_2083, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(fryingpan_2083, cupboard_229)
Fail to find fryingpan_2083 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(fryingpan_2083, stove_2065)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_closetdrawer_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(plate,closetdrawer_instance)
        else:
            exp(plate,closetdrawer_instance)
    eff:
        unknown[plate]=False
        close[plate,closetdrawer_instance]=True
        close[closetdrawer_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_fried_rice_and_plate(fried_rice:item, plate:item):
    body:
        if not inhand(fried_rice):
            grab(fried_rice)
        if not inhand(plate):
            grab(plate)

behavior serve_fried_rice_on_plate(fried_rice:item, plate:item):
    body:
        if not on(fried_rice, plate):
            put_on(fried_rice, plate)

behavior __goal__():
    body:
        bind fried_rice: item where:
            is_food_rice(fried_rice) and id[fried_rice] == 2036
        bind plate: item where:
            is_plate(plate)
        grab_fried_rice_and_plate(fried_rice, plate)
        serve_fried_rice_on_plate(fried_rice, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_fried_rice_and_plate(fried_rice:item, plate:item):
    body:
        if not inhand(fried_rice):
            grab(fried_rice)
        if not inhand(plate):
            grab(plate)

behavior serve_fried_rice_on_plate(fried_rice:item, plate:item):
    body:
        if not on(fried_rice, plate):
            put_on(fried_rice, plate)

behavior __goal__():
    body:
        bind fried_rice: item where:
            is_food_rice(fried_rice) and id[fried_rice] == 2036
        bind plate: item where:
            is_plate(plate)
        grab_fried_rice_and_plate(fried_rice, plate)
        serve_fried_rice_on_plate(fried_rice, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(closetdrawer_143)exp(plate_1000, closetdrawer_143)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(closetdrawer_143)
Robot find: Robot is close to the food_rice_2036. Robot is close to the dresser_123. 
##############################
From agent.py
exp(plate_1000, closetdrawer_143)
Fail to find plate_1000 around closetdrawer_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_143)exp(plate_1000, closetdrawer_143)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(closetdrawer_143)
Robot find: Robot is close to the food_rice_2036. Robot is close to the dresser_123. 
##############################
From agent.py
exp(plate_1000, closetdrawer_143)
Fail to find plate_1000 around closetdrawer_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_143)exp(plate_1000, closetdrawer_143)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(closetdrawer_143)
Robot find: Robot is close to the food_rice_2036. Robot is close to the dresser_123. 
##############################
From agent.py
exp(plate_1000, closetdrawer_143)
Fail to find plate_1000 around closetdrawer_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_143)exp(plate_1000, closetdrawer_143)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(closetdrawer_143)
Robot find: Robot is close to the food_rice_2036. Robot is close to the dresser_123. 
##############################
From agent.py
exp(plate_1000, closetdrawer_143)
Fail to find plate_1000 around closetdrawer_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_143)exp(plate_1000, closetdrawer_143)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(closetdrawer_143)
Robot find: Robot is close to the food_rice_2036. Robot is close to the dresser_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Locate sink_231, and you will find plate_1000 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. Locate sink_231, and you will find plate_1000 on top of it.

The actions you have taken:
Action 1: Walk to sink_42.
Action 2: Walk to fridge_289.
Action 3: Switch off fridge_289.
Action 4: Open fridge_289.
Action 5: look for food_egg_2020 around fridge_289.
Action 6: Observe around fridge_289 with the question of Look for food_egg_2020.
Action 7: Observe around fridge_289 with the question of Look for food_rice.
Action 8: Walk to cupboard_229.
Action 9: Open cupboard_229.
Action 10: look for fryingpan_2083 around cupboard_229.
Action 11: Walk to stove_2065.
Action 12: Open stove_2065.
Action 13: look for fryingpan_2083 around stove_2065.
Action 14: Walk to food_rice_2036.
Action 15: Grab food_rice_2036.
Action 16: Walk to fryingpan_2083.
Action 17: Put food_rice_2036 into fryingpan_2083.
Action 18: Walk to food_egg_2020.
Action 19: Grab food_egg_2020.
Action 20: Walk to fryingpan_2083.
Action 21: Put food_egg_2020 into fryingpan_2083.
Action 22: Walk to stove_2065.
Action 23: Switch on stove_2065.
Action 24: Walk to food_rice_2036.
Action 25: Grab food_rice_2036.
Action 26: Walk to closetdrawer_143.
Action 27: look for plate_1000 around closetdrawer_143.
Action 28: Walk to closetdrawer_143.
Action 29: look for plate_1000 around closetdrawer_143.
Action 30: Walk to closetdrawer_143.
Action 31: look for plate_1000 around closetdrawer_143.
Action 32: Walk to closetdrawer_143.
Action 33: look for plate_1000 around closetdrawer_143.
Action 34: Walk to closetdrawer_143.

##############################
From agent.py
exp(plate_1000, closetdrawer_143)
Fail to find plate_1000 around closetdrawer_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(plate_1000)grab_executor(plate_1000)put_executor(food_rice_2036, plate_1000)
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_rice_2036. Robot is close to the sink_231. Robot is close to the plate_1000. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the food_rice_2036. Robot is close to the sink_231. Robot is close to the plate_1000. Grabbing plate_1000 by left hand. 
##############################
From agent.py
put_executor(food_rice_2036, plate_1000)
Robot find: Robot is close to the food_rice_2036. Robot is close to the sink_231. Robot is close to the plate_1000. plate_1000 is close food_rice_2036. food_rice_2036 is close plate_1000. food_rice_2036 is on plate_1000. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(sink_42)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(closetdrawer_143)', 'walk_executor(closetdrawer_143)', 'walk_executor(closetdrawer_143)', 'walk_executor(closetdrawer_143)', 'walk_executor(closetdrawer_143)', 'walk_executor(sink_231)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'put_executor(food_rice_2036, plate_1000)']
Time info:
Time consume: 211 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 87
goal generate times: 8
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 14 steps
Keystate: k2 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
