From agent.py
Reset goals: The sub-goals are: 
['1. Find chicken and noodles in the kitchen.', '2. Boil the chicken and noodles together in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_128(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_kitchen_counter_128(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chicken_and_noodles(chicken:item, noodles:item, kitchen:item):
    body:
        if not visited(chicken):
            if not close_char(char, kitchen):
                walk_to(kitchen)
            observe(chicken, "Check if the chicken is in the kitchen")
            
        if not visited(noodles):
            if not close_char(char, kitchen):
                walk_to(kitchen)
            observe(noodles, "Check if the noodles are in the kitchen")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
            
        bind noodles: item where:
            is_food_noodles(noodles)
            
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        
        find_chicken_and_noodles(chicken, noodles, kitchen)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_chicken_and_noodles(chicken:item, noodles:item, kitchen:item):
    body:
        if not visited(chicken):
            if not close_char(char, kitchen):
                walk_to(kitchen)
            observe(chicken, "Check if the chicken is in the kitchen")
            
        if not visited(noodles):
            if not close_char(char, kitchen):
                walk_to(kitchen)
            observe(noodles, "Check if the noodles are in the kitchen")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
            
        bind noodles: item where:
            is_food_noodles(noodles)
            
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        
        find_chicken_and_noodles(chicken, noodles, kitchen)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_chicken_2050, kitchen_counter_128)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check if the chicken is in the kitchen)walk_executor(kitchen_counter_128)exp(food_noodles_2062, kitchen_counter_128)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check if the noodles are in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_128)
Fail to find food_chicken_2050 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check if the chicken is in the kitchen)walk_executor(kitchen_counter_128)walk_executor(cupboard_130)exp(food_noodles_2062, cupboard_130)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check if the noodles are in the kitchen)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check if the chicken is in the kitchen)walk_executor(kitchen_counter_128)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check if the noodles are in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
obs(food_chicken_2050, Check if the chicken is in the kitchen)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
obs(food_noodles_2062, Check if the noodles are in the kitchen)
Get this information:  food_noodles_2062 is inside dining_room_1. food_noodles_2062 is inside fridge_140. food_noodles_2062 is close to fridge_140. food_noodles_2062 is close to character_219. food_noodles_2062 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_for_boiling(pot: item, chicken: item, noodles: item):
    # Function to check if the pot, chicken, and noodles are ready for boiling
    symbol ready=exists water: item : (has_water(pot) and clean(pot) and clean(chicken) and clean(noodles))
    return ready

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior clean_items(pot: item, chicken: item, noodles: item):
    body:
        if dirty(pot):
            wash(pot)
        if dirty(chicken):
            wash(chicken)
        if dirty(noodles):
            wash(noodles)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_ingredients_to_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior wait_until_boiled(pot: item):
    body:
        if has_water(pot):
            observe(pot, "Observe to ensure the chicken and noodles are boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind noodles: item where:
            is_food_noodles(noodles)
        
        if not is_ready_for_boiling(pot, chicken, noodles):
            fill_pot_with_water(pot)
            clean_items(pot, chicken, noodles)
        
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        add_ingredients_to_pot(chicken, noodles, pot)
        wait_until_boiled(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior prepare_chicken_and_noodles(chicken:item, noodles:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior boil_chicken_and_noodles(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind noodles: item where:
            is_food_noodles(noodles)
        
        fill_pot_with_water(pot)
        prepare_chicken_and_noodles(chicken, noodles, pot)
        boil_chicken_and_noodles(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior add_chicken_and_noodles_to_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)
        
        fill_pot_with_water(pot)
        add_chicken_and_noodles_to_pot(chicken, noodles, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_ironing_board_2099(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_kitchen_pot(pot:item):
    body:
        if not close_char(char, pot):
            walk_to(pot)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior add_noodles_and_chicken_to_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior wait_until_noodles_and_chicken_boiled(pot:item):
    body:
        if has_water(pot):
            observe(pot, "Observe to ensure the noodles and chicken are boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        approach_kitchen_pot(pot)
        fill_pot_with_water(pot)
        add_noodles_and_chicken_to_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)

        turn_on_stove(stove)
        
        wait_until_noodles_and_chicken_boiled(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_chicken_and_noodles(chicken:item, noodles:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)    # Place chicken in the pot
        if not inside(noodles, pot):
            put_inside(noodles, pot)    # Place noodles in the pot

behavior prepare_pot_for_boiling(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)    # Fill the pot with water

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)    # Turn on the stove

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)    # Place the pot on the stove

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2062
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        prepare_pot_for_boiling(pot)
        boil_chicken_and_noodles(chicken, noodles, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_vacuum_cleaner_2094_around_ironing_board_2099(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior boil_chicken_and_noodles_together(pot:item, chicken:item, noodles:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior place_pot_on_stove_and_heat(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind stove: item where:
            is_stove(stove)
        
        boil_chicken_and_noodles_together(pot, chicken, noodles)
        place_pot_on_stove_and_heat(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_54, cupboard_130)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(kitchen_counter_128)', 'walk_executor(food_chicken_2050)', 'walk_executor(kitchen_counter_128)', 'walk_executor(food_noodles_2062)', 'walk_executor(cupboard_130)']
Time info:
Time consume: 106 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 114
goal generate times: 7
goal correct times: 0
action_num: 9

Task complete rate:
Keystate: k1 - Requires: 28 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
