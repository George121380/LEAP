From agent.py
Reset goals: The sub-goals are: 
['1. Find the bowls, plates, and forks.', '2. Load the bowls and plates into the dishwasher and start it.', '3. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_fork_2151_around_kitchen_counter_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_dining_items(item: item):
    body:
        if not visited(item) and (is_bowl(item) or is_plate(item) or is_fork(item)):
            observe(item, "Find the location of the item")

behavior __goal__():
    body:
        foreach item: item:
            if is_bowl(item) or is_plate(item) or is_fork(item):
                locate_dining_items(item)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_dining_items(item: item):
    body:
        if not visited(item) and (is_bowl(item) or is_plate(item) or is_fork(item)):
            observe(item, "Find the location of the item")

behavior __goal__():
    body:
        foreach item: item:
            if is_bowl(item) or is_plate(item) or is_fork(item):
                locate_dining_items(item)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)obs(bowl_2140, Find the location of the item)walk_executor(kitchen_counter_123)exp(bowl_2141, kitchen_counter_123)walk_executor(bowl_2141)obs(bowl_2141, Find the location of the item)walk_executor(kitchen_counter_123)exp(bowl_2142, kitchen_counter_123)walk_executor(bowl_2142)obs(bowl_2142, Find the location of the item)walk_executor(kitchen_counter_123)exp(fork_2150, kitchen_counter_123)walk_executor(fork_2150)obs(fork_2150, Find the location of the item)walk_executor(kitchen_counter_123)exp(fork_2151, kitchen_counter_123)walk_executor(fork_2151)obs(fork_2151, Find the location of the item)walk_executor(kitchen_counter_123)exp(plate_2152, kitchen_counter_123)walk_executor(plate_2152)obs(plate_2152, Find the location of the item)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)obs(bowl_2140, Find the location of the item)walk_executor(kitchen_counter_119)exp(bowl_2141, kitchen_counter_119)walk_executor(bowl_2141)obs(bowl_2141, Find the location of the item)walk_executor(kitchen_counter_119)exp(bowl_2142, kitchen_counter_119)walk_executor(bowl_2142)obs(bowl_2142, Find the location of the item)walk_executor(kitchen_counter_122)exp(fork_2150, kitchen_counter_122)walk_executor(fork_2150)obs(fork_2150, Find the location of the item)walk_executor(kitchen_counter_122)exp(fork_2151, kitchen_counter_122)walk_executor(fork_2151)obs(fork_2151, Find the location of the item)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(plate_2152, dishwasher_129)walk_executor(plate_2152)obs(plate_2152, Find the location of the item)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)obs(bowl_2140, Find the location of the item)walk_executor(bowl_2141)obs(bowl_2141, Find the location of the item)walk_executor(bowl_2142)obs(bowl_2142, Find the location of the item)walk_executor(fork_2150)obs(fork_2150, Find the location of the item)walk_executor(fork_2151)obs(fork_2151, Find the location of the item)walk_executor(plate_2152)obs(plate_2152, Find the location of the item)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
obs(bowl_2140, Find the location of the item)
Get this information:  bowl_2140 is close to kitchen_counter_119. bowl_2140 is close to character_240. bowl_2140 is on kitchen_counter_119. bowl_2140 is inside dining_room_41. bowl_2140 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2141. 
##############################
From agent.py
obs(bowl_2141, Find the location of the item)
Get this information:  bowl_2141 is inside dining_room_41. bowl_2141 is close to kitchen_counter_119. bowl_2141 is close to character_240. bowl_2141 is on kitchen_counter_119. bowl_2141 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the kitchen_counter_119. Robot is close to the bowl_2142. 
##############################
From agent.py
obs(bowl_2142, Find the location of the item)
Get this information:  bowl_2142 is close to iron_2161. bowl_2142 is close to kitchen_counter_119. bowl_2142 is close to character_240. iron_2161 is on bowl_2142. bowl_2142 is on kitchen_counter_119. bowl_2142 is inside dining_room_41. bowl_2142 is DIRTY.
##############################
From agent.py
walk_executor(fork_2150)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the fork_2150. 
##############################
From agent.py
obs(fork_2150, Find the location of the item)
Get this information:  fork_2150 is close to kitchen_counter_119. fork_2150 is close to character_240. fork_2150 is on kitchen_counter_119. fork_2150 is inside dining_room_41. fork_2150 is CLEAN.
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
obs(fork_2151, Find the location of the item)
Get this information:  fork_2151 is inside dining_room_41. fork_2151 is close to kitchen_counter_119. fork_2151 is close to character_240. fork_2151 is on kitchen_counter_119. fork_2151 is CLEAN.
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the plate_2152. 
##############################
From agent.py
obs(plate_2152, Find the location of the item)
Get this information:  plate_2152 is inside dining_room_41. plate_2152 is close to kitchen_counter_119. plate_2152 is close to character_240. plate_2152 is on kitchen_counter_119. plate_2152 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(dish:item, dishwasher:item):
    body:
        if not inside(dish, dishwasher):
            put_inside(dish, dishwasher)
            # Place the dish inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        if open(dishwasher):
            closes(dishwasher) # Close the dishwasher door
        if is_off(dishwasher):
            switch_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        
        foreach dish: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(dish) or is_plate(dish):
                load_dishwasher(dish, dishwasher)
                
        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_dishwasher(dish:item, dishwasher:item):
    body:
        if not inside(dish, dishwasher):
            put_inside(dish, dishwasher)
            # Place the dish inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        if open(dishwasher):
            closes(dishwasher) # Close the dishwasher door
        if is_off(dishwasher):
            switch_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        
        foreach dish: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(dish) or is_plate(dish):
                load_dishwasher(dish, dishwasher)
                
        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2140. bowl_2140 is close dishwasher_129. bowl_2140 is inside dishwasher_129. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2141. bowl_2141 is inside dishwasher_129. bowl_2141 is close dishwasher_129. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. 
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. dishwasher_129 is close bowl_2142. bowl_2142 is close dishwasher_129. bowl_2142 is inside dishwasher_129. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. 
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. dishwasher_129 is close plate_2152. plate_2152 is inside dishwasher_129. plate_2152 is close dishwasher_129. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_fork_and_wash_by_hand(fork:item):
    body:
        if not inhand(fork):
            observe(fork, "Find the fork and prepare for washing")
            grab(fork)
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and clean(fork) == False:
                locate_fork_and_wash_by_hand(fork)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'walk_executor(bowl_2141)', 'walk_executor(bowl_2142)', 'walk_executor(fork_2150)', 'walk_executor(fork_2151)', 'walk_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2140, dishwasher_129)', 'walk_executor(bowl_2141)', 'grab_executor(bowl_2141)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2141, dishwasher_129)', 'walk_executor(bowl_2142)', 'grab_executor(bowl_2142)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2142, dishwasher_129)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'putin_executor(plate_2152, dishwasher_129)', 'close_executor(dishwasher_129)', 'switchon_executor(dishwasher_129)']
Time info:
Time consume: 171 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 109
goal generate times: 20
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
