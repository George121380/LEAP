From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.  ', '2. Put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish: item, sink: item):
    body:
        if not clean(fish):
            if not inhand(fish):
                grab(fish)
            if not close_char(char, sink):
                walk_to(sink)
            if is_off(sink):
                switch_on(sink)
            wash(fish)
            if is_on(sink):
                switch_off(sink)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        wash_fish(fish, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish: item, sink: item):
    body:
        if not clean(fish):
            if not inhand(fish):
                grab(fish)
            if not close_char(char, sink):
                walk_to(sink)
            if is_off(sink):
                switch_on(sink)
            wash(fish)
            if is_on(sink):
                switch_off(sink)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        wash_fish(fish, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(food_fish_2093, sink_120)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Robot find: fork_2150, bowl_2142, food_salt_2041, soap_2126, pot_78, soap_2010, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_fish_2093, sink_120)
Fail to find food_fish_2093 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_shower_16(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(milk,shower_instance)
        else:
            exp(milk,shower_instance)
    eff:
        unknown[milk]=False
        close[milk,shower_instance]=True
        close[shower_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

##############################
From agent.py-> find a plan in act()
walk_executor(shower_16)exp(milk_2115, shower_16)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(shower_16)
Robot find: Robot is close to the food_fish_2093. Robot is close to the shower_16. 
##############################
From agent.py
exp(milk_2115, shower_16)
Fail to find milk_2115 around shower_16. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2141)exp(milk_2115, bowl_2141)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, bowl_2141)
Fail to find milk_2115 around bowl_2141. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(milk_2115, cutting_board_2123)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_119. Robot is close to the cutting_board_2123. 
##############################
From agent.py
exp(milk_2115, cutting_board_2123)
Fail to find milk_2115 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(milk_2115, kitchen_counter_123)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_123)
Fail to find milk_2115 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_192)exp(milk_2115, nightstand_192)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(nightstand_192)
Robot find: pillow_208, drawing_201, Robot is close to the food_fish_2093. Robot is close to the nightstand_192. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Go to dining_room_41. Locate table_114. You will find milk_2115 placed on table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41. Locate table_114. You will find milk_2115 placed on table_114.

The actions you have taken:
Action 1: Walk to sink_120.
Action 2: look for food_fish_2093 around sink_120.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_fish_2093 around fridge_126.
Action 7: Grab food_fish_2093.
Action 8: Walk to sink_19.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Wash food_fish_2093.
Action 12: Switch off faucet_20.
Action 13: Walk to shower_16.
Action 14: look for milk_2115 around shower_16.
Action 15: Walk to bowl_2141.
Action 16: look for milk_2115 around bowl_2141.
Action 17: Walk to cutting_board_2123.
Action 18: look for milk_2115 around cutting_board_2123.
Action 19: Walk to kitchen_counter_123.
Action 20: look for milk_2115 around kitchen_counter_123.
Action 21: Walk to nightstand_192.

##############################
From agent.py
exp(milk_2115, nightstand_192)
Fail to find milk_2115 around nightstand_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Grabbing food_fish_2093 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by left hand. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put milk_2115 on the table in the dining room.
##############################
From agent.py
Human Instruction: You need to put milk_2115 on the table in the dining room.

The actions you have taken:
Action 1: Walk to sink_120.
Action 2: look for food_fish_2093 around sink_120.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_fish_2093 around fridge_126.
Action 7: Grab food_fish_2093.
Action 8: Walk to sink_19.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Wash food_fish_2093.
Action 12: Switch off faucet_20.
Action 13: Walk to shower_16.
Action 14: look for milk_2115 around shower_16.
Action 15: Walk to bowl_2141.
Action 16: look for milk_2115 around bowl_2141.
Action 17: Walk to cutting_board_2123.
Action 18: look for milk_2115 around cutting_board_2123.
Action 19: Walk to kitchen_counter_123.
Action 20: look for milk_2115 around kitchen_counter_123.
Action 21: Walk to nightstand_192.
Action 22: look for milk_2115 around nightstand_192.
Action 23: Walk to table_114.
Action 24: look for milk_2115 around table_114.
Action 25: Walk to food_turkey_2112.
Action 26: Grab food_turkey_2112.
Action 27: Walk to table_114.
Action 28: Put food_turkey_2112 on table_114.
Action 29: Walk to food_egg_2092.
Action 30: Grab food_egg_2092.
Action 31: Walk to table_114.
Action 32: Put food_egg_2092 on table_114.
Action 33: Walk to food_fish_2093.
Action 34: Grab food_fish_2093.
Action 35: Walk to table_114.
Action 36: Put food_fish_2093 on table_114.
Action 37: Walk to food_chicken_2089.
Action 38: Grab food_chicken_2089.
Action 39: Walk to table_114.
Action 40: Put food_chicken_2089 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_cheese_2072_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_bed_197(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

behavior find_food_cheese_2088_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the specific milk with ID 2115

        bind turkey: item where:
            id[turkey] == 2112 and is_food_turkey(turkey)
        # Select the specific turkey with ID 2112

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select the specific egg with ID 2092

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093
        # Select the specific fish with ID 2093

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select the specific chicken with ID 2089
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_cheese_2072_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

behavior find_food_carrot_2015_around_stove_2135(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        if not on(milk, table):
            grab(milk)
            walk_to(table)
            put_on(milk, table)
            empty_a_hand()
        
        if not on(turkey, table):
            grab(turkey)
            walk_to(table)
            put_on(turkey, table)
            empty_a_hand()

        if not on(egg, table):
            grab(egg)
            walk_to(table)
            put_on(egg, table)
            empty_a_hand()

        if not on(fish, table):
            grab(fish)
            walk_to(table)
            put_on(fish, table)
            empty_a_hand()

        if not on(chicken, table):
            grab(chicken)
            walk_to(table)
            put_on(chicken, table)
            empty_a_hand()

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the specific milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place all selected food items on the chosen dining table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_dvd_player_2130_around_tvstand_116(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk_2115: item where:
            is_milk(milk_2115)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk_2115, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_cheese_2088_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_chessboard_2070_around_drawing_201(chessboard:item):
    goal: not unknown(chessboard)
    body:
        assert is_chessboard(chessboard)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==201
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(chessboard,drawing_instance)
        else:
            exp(chessboard,drawing_instance)
    eff:
        unknown[chessboard]=False
        close[chessboard,drawing_instance]=True
        close[drawing_instance,chessboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)

        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_cheese_2088_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

behavior find_food_food_2074_around_food_orange_2027(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_food,food_orange_instance)
        else:
            exp(food_food,food_orange_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_orange_instance]=True
        close[food_orange_instance,food_food]=True
    

behavior find_food_orange_2027_around_food_orange_2027(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_orange,food_orange_instance)
        else:
            exp(food_orange,food_orange_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,food_orange_instance]=True
        close[food_orange_instance,food_orange]=True
    

behavior find_food_peanut_butter_2105_around_cupboard_118(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_carrot_2015_around_stove_2135(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_284_around_food_orange_2027(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(mat,food_orange_instance)
        else:
            exp(mat,food_orange_instance)
    eff:
        unknown[mat]=False
        close[mat,food_orange_instance]=True
        close[food_orange_instance,mat]=True
    

behavior find_food_onion_2104_around_stove_2135(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_instrument_guitar_2028_around_bed_197(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(instrument_guitar,bed_instance)
        else:
            exp(instrument_guitar,bed_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,bed_instance]=True
        close[bed_instance,instrument_guitar]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select milk_2115

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, fish)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_stove_2135(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_cheese_2088_around_stove_2135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cheese,stove_instance)
        else:
            exp(food_cheese,stove_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,stove_instance]=True
        close[stove_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        if not on(milk, table):
            grab(milk)
            walk_to(table)
            put_on(milk, table)

        if not on(turkey, table):
            grab(turkey)
            walk_to(table)
            put_on(turkey, table)

        if not on(egg, table):
            grab(egg)
            walk_to(table)
            put_on(egg, table)

        if not on(fish, table):
            grab(fish)
            walk_to(table)
            put_on(fish, table)

        if not on(chicken, table):
            grab(chicken)
            walk_to(table)
            put_on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, is_dining_room(table))
        # Select a table located in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_stove_2135(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_carrot_2086_around_stove_2135(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_orange_2103_around_food_orange_2027(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_orange,food_orange_instance)
        else:
            exp(food_orange,food_orange_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,food_orange_instance]=True
        close[food_orange_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table:item, item1:item, item2:item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)

        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(table: item, item1: item, item2: item):
    body:
        if not on(item1, table):
            grab(item1)
            walk_to(table)
            put_on(item1, table)
        
        if not on(item2, table):
            grab(item2)
            walk_to(table)
            put_on(item2, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(table, milk, turkey)
        place_items_on_table(table, egg, fish)
        place_items_on_table(table, chicken, turkey)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(sink_120)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(sink_19)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(shower_16)', 'walk_executor(bowl_2141)', 'walk_executor(cutting_board_2123)', 'walk_executor(kitchen_counter_123)', 'walk_executor(nightstand_192)', 'walk_executor(table_114)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)']
Time info:
Time consume: 323 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 111
goal generate times: 20
goal correct times: 0
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
