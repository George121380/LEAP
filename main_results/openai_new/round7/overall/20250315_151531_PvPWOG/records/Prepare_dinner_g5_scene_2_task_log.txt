From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the fried steak.', '3. Put the cut steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_food_cheese_2049_around_fridge_140(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_steak_and_fry(fryingpan:item, stove:item, food_steak:item):
    body:
        if not visited(stove):
            if not close_char(char, stove):
                walk_to(stove)
            observe(stove, "Check which stove can be used")

        if not inhand(fryingpan):
            grab(fryingpan)

        if not inhand(food_steak):
            grab(food_steak)

        if not on(fryingpan, stove):
            put_on(fryingpan, stove)

        if not inside(food_steak, fryingpan):
            put_inside(food_steak, fryingpan)

        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 121
        bind stove: item where:
            is_stove(stove) and id[stove] == 473
        bind food_steak: item where:
            is_food_steak(food_steak) and id[food_steak] == 2071
        find_steak_and_fry(fryingpan, stove, food_steak)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pajamas_2039_around_bed_376(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pajamas,bed_instance)
        else:
            exp(pajamas,bed_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,bed_instance]=True
        close[bed_instance,pajamas]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_128(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_frying_area(stove:item, fryingpan:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)

behavior fry_steak(fryingpan:item, steak:item):
    body:
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        observe(fryingpan, "Observe to ensure the steak is frying")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind steak: item where:
            is_food_steak(steak)
        
        prepare_frying_area(stove, fryingpan)
        fry_steak(fryingpan, steak)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_frying_area(stove:item, fryingpan:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)

behavior fry_steak(fryingpan:item, steak:item):
    body:
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        observe(fryingpan, "Observe to ensure the steak is frying")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind steak: item where:
            is_food_steak(steak)
        
        prepare_frying_area(stove, fryingpan)
        fry_steak(fryingpan, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_128)exp(fryingpan_2107, kitchen_counter_128)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_steak_2042, fridge_140)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(fryingpan_2107)put_executor(food_steak_2042, fryingpan_2107)obs(fryingpan_2107, Observe to ensure the steak is frying)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_128)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_steak_2042, fridge_140)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(fryingpan_2107)put_executor(food_steak_2042, fryingpan_2107)obs(fryingpan_2107, Observe to ensure the steak is frying)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_steak_2042, fridge_140)
Find food_steak_2042. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2042)walk_executor(fryingpan_2107)put_executor(food_steak_2042, fryingpan_2107)obs(fryingpan_2107, Observe to ensure the steak is frying)
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_steak_2042 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_steak_2042. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_steak_2042, fryingpan_2107)
Robot find: Robot is close to the food_steak_2042. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_steak_2042 is close fryingpan_2107. fryingpan_2107 is close food_steak_2042. food_steak_2042 is on fryingpan_2107. food_steak_2042 released by right hand. 
##############################
From agent.py
obs(fryingpan_2107, Observe to ensure the steak is frying)
Get this information:  fryingpan_2107 is on stove_2090. fryingpan_2107 is inside dining_room_1. fryingpan_2107 is close to stove_2090. fryingpan_2107 is close to character_219. fryingpan_2107 is close to food_steak_2042. food_steak_2042 is on fryingpan_2107. fryingpan_2107 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_knife():
    # Function to check if there is a knife available
    symbol has_knife=exists knife: item : (is_knife(knife))
    return has_knife

behavior grab_and_cut_steak(knife:item, steak:item):
    body:
        if not inhand(knife):
            grab(knife)
        if not close_char(char, steak):
            walk_to(steak)
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2042

        if has_knife():
            bind knife: item where:
                is_knife(knife)
            grab_and_cut_steak(knife, steak)
        else:
            foreach item: item:
                if is_knife(item) and not visited(item):
                    observe(item, "Check if it is a knife")
                    if is_knife(item):
                        grab_and_cut_steak(item, steak) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_knife():
    # Function to check if there is a knife available
    symbol has_knife=exists knife: item : (is_knife(knife))
    return has_knife

behavior grab_and_cut_steak(knife:item, steak:item):
    body:
        if not inhand(knife):
            grab(knife)
        if not close_char(char, steak):
            walk_to(steak)
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2042

        if has_knife():
            bind knife: item where:
                is_knife(knife)
            grab_and_cut_steak(knife, steak)
        else:
            foreach item: item:
                if is_knife(item) and not visited(item):
                    observe(item, "Check if it is a knife")
                    if is_knife(item):
                        grab_and_cut_steak(item, steak) 

##############################
From agent.py-> find a plan in act()
walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_138)exp(knife_2036, chair_138)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(chair_138)
Robot find: Robot is close to the chair_138. 
##############################
From agent.py
exp(knife_2036, chair_138)
Fail to find knife_2036 around chair_138. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(knife_2036, desk_261)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(desk_261)
Robot find: chair_263, mat_237, drawing_238, Robot is close to the desk_261. 
##############################
From agent.py
exp(knife_2036, desk_261)
Fail to find knife_2036 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(knife_2036, wallshelf_191)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(knife_2036, wallshelf_191)
Fail to find knife_2036 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(knife_2036, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Locate knife_2036 inside dining_room_1. It is inside dishwasher_143, which is nearby. Look inside the dishwasher to find knife_2036.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate knife_2036 inside dining_room_1. It is inside dishwasher_143, which is nearby. Look inside the dishwasher to find knife_2036.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Switch on stove_2090.
Action 3: Walk to kitchen_counter_128.
Action 4: look for fryingpan_2107 around kitchen_counter_128.
Action 5: Walk to fryingpan_2107.
Action 6: Grab fryingpan_2107.
Action 7: Walk to stove_2090.
Action 8: Put fryingpan_2107 on stove_2090.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_steak_2042 around fridge_140.
Action 13: Grab food_steak_2042.
Action 14: Walk to fryingpan_2107.
Action 15: Put food_steak_2042 on fryingpan_2107.
Action 16: Observe around fryingpan_2107 with the question of Observe to ensure the steak is frying.
Action 17: Walk to knifeblock_52.
Action 18: look for knife_2036 around knifeblock_52.
Action 19: Walk to chair_138.
Action 20: look for knife_2036 around chair_138.
Action 21: Walk to desk_261.
Action 22: look for knife_2036 around desk_261.
Action 23: Walk to wallshelf_191.
Action 24: look for knife_2036 around wallshelf_191.
Action 25: Walk to cupboard_131.
Action 26: Open cupboard_131.
Action 27: look for knife_2036 around cupboard_131.
Action 28: Walk to cutting_board_2080.

##############################
From agent.py
exp(knife_2036, cutting_board_2080)
Fail to find knife_2036 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the fryingpan_2107. Grabbing food_steak_2042 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_steak_2042, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_steak_2042. food_steak_2042 is close cutting_board_2080. food_steak_2042 is on cutting_board_2080. food_steak_2042 released by left hand. 
##############################
From agent.py
walk_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cut_steak_on_plate(cut_steak:item, plate:item):
    body:
        if not on(cut_steak, plate):
            put_on(cut_steak, plate)

behavior __goal__():
    body:
        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        bind plate: item where:
            is_plate(plate)
        put_cut_steak_on_plate(cut_steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_cut_steak_on_plate(cut_steak:item, plate:item):
    body:
        if not on(cut_steak, plate):
            put_on(cut_steak, plate)

behavior __goal__():
    body:
        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        bind plate: item where:
            is_plate(plate)
        put_cut_steak_on_plate(cut_steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(plate_2105, kitchen_counter_132)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(plate_2105)put_executor(food_steak_2042, plate_2105)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_132)
Fail to find plate_2105 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(plate_2105)put_executor(food_steak_2042, plate_2105)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the knife_2036. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(plate_2105, cupboard_130)
Fail to find plate_2105 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(plate_2105)put_executor(food_steak_2042, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the knife_2036. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(plate_2105)put_executor(food_steak_2042, plate_2105)
##############################
From agent.py
walk_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_steak_2042. 
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_steak_2042. Grabbing food_steak_2042 by left hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_steak_2042, plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the plate_2105. Robot is close to the table_127. food_steak_2042 is close plate_2105. plate_2105 is close food_steak_2042. food_steak_2042 is on plate_2105. food_steak_2042 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(kitchen_counter_128)', 'walk_executor(fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_steak_2042)', 'walk_executor(fryingpan_2107)', 'put_executor(food_steak_2042, fryingpan_2107)', 'walk_executor(knifeblock_52)', 'walk_executor(chair_138)', 'walk_executor(desk_261)', 'walk_executor(wallshelf_191)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cutting_board_2080)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_steak_2042)', 'grab_executor(food_steak_2042)', 'walk_executor(cutting_board_2080)', 'put_executor(food_steak_2042, cutting_board_2080)', 'walk_executor(food_steak_2042)', 'cut_executor(food_steak_2042)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_130)', 'walk_executor(table_127)', 'walk_executor(food_steak_2042)', 'grab_executor(food_steak_2042)', 'walk_executor(plate_2105)', 'put_executor(food_steak_2042, plate_2105)']
Time info:
Time consume: 190 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 98
goal generate times: 4
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
