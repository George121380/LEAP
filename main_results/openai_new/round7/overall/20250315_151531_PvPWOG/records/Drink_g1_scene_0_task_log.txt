From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_sink_231(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior get_a_cup(cup:item):
    body:
        if not inhand(cup):
            grab(cup)

behavior fill_cup_with_water(cup:item):
    body:
        if not has_water(cup):
            get_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        get_a_cup(cup)
        fill_cup_with_water(cup)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior get_a_cup(cup:item):
    body:
        if not inhand(cup):
            grab(cup)

behavior fill_cup_with_water(cup:item):
    body:
        if not has_water(cup):
            get_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        get_a_cup(cup)
        fill_cup_with_water(cup)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(cup_2063, sink_231)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(sink_231)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(cup_2063, sink_231)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the cup_2063 is filled with water. Although the faucet was turned on and off, there is no action where you put cup_2063 under the faucet to fill it with water.
##############################
From agent.py
Human Instruction: You need to ensure that the cup_2063 is filled with water. Although the faucet was turned on and off, there is no action where you put cup_2063 under the faucet to fill it with water.

The actions you have taken:
Action 1: Walk to sink_231.
Action 2: look for cup_2063 around sink_231.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior get_a_cup_and_fill(cup:item, faucet:item):
    body:
        if not inhand(cup):
            grab(cup)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(cup):
            get_water(cup)
        if is_on(faucet):
            switch_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        get_a_cup_and_fill(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior get_a_cup_and_fill(cup:item, faucet:item):
    body:
        if not inhand(cup):
            grab(cup)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(cup):
            get_water(cup)
        if is_on(faucet):
            switch_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        get_a_cup_and_fill(cup, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place cup_2063 under faucet_43 while it is turned on to allow the cup to fill with water.
##############################
From agent.py
Human Instruction: You need to place cup_2063 under faucet_43 while it is turned on to allow the cup to fill with water.

The actions you have taken:
Action 1: Walk to sink_231.
Action 2: look for cup_2063 around sink_231.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_a_cup(cup:item):
    body:
        if not inhand(cup):
            grab(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        if not has_water(cup):
            if is_off(faucet):
                switch_on(faucet)
            get_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        get_a_cup(cup)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2016_around_fridge_289(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup: item):
    body:
        if not inhand(cup):
            grab(cup)

behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        if not has_water(cup):
            if not close_char(char, faucet):
                walk_to(faucet)
            if is_off(faucet):
                switch_on(faucet)
            get_water(cup)
            if is_on(faucet):
                switch_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        grab_cup(cup)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior grab_cup_and_fill_with_water(cup:item, faucet:item):
    body:
        if not inhand(cup):
            grab(cup)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(cup):
            get_water(cup)
        if is_on(faucet):
            switch_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        grab_cup_and_fill_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_cup_and_fill_with_water(cup:item, faucet:item):
    body:
        if not inhand(cup):
            grab(cup)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(cup):
            get_water(cup)
        if is_on(faucet):
            switch_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        grab_cup_and_fill_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place cup_2063 under faucet_43 while it is turned on to allow the cup to fill with water. Ensure that the cup has been filled with water before switching off the faucet.
##############################
Task Summary:
Task Goal:
Get a cup of water.
Action History:
['walk_executor(sink_231)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)']
Time info:
Time consume: 56 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 74
goal generate times: 5
goal correct times: 0
action_num: 10

Task complete rate:
1
Scene_id: 0
##############################
