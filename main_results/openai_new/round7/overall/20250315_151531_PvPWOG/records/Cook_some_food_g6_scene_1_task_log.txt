From agent.py
Reset goals: The sub-goals are: 
['1. Find the apple, kiwi, and banana.', '2. Slice the apple, kiwi, and banana.', '3. Put the sliced apple, kiwi, and banana on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_fridge_126(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_food_apple_2081_around_kitchen_counter_123(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
def find_target_fruit(item: item, fruit_check: item  bool, desc: str):
    # Function to find the target fruit, described by the fruit_check function
    if not visited(item) and fruit_check(item):
        observe(item, "desc")

def is_apple(apple:item):
    # Function to check if the item is an apple
    symbol is_apple=exists o: item : (is_food_apple(o))
    return is_apple

def is_kiwi(kiwi:item):
    # Function to check if the item is a kiwi
    symbol is_kiwi=exists o: item : (is_food_kiwi(o))
    return is_kiwi

def is_banana(banana:item):
    # Function to check if the item is a banana
    symbol is_banana=exists o: item : (is_food_banana(o))
    return is_banana

behavior __goal__():
    body:
        foreach item: item:
            find_target_fruit(item, is_apple, Find the apple)
            find_target_fruit(item, is_kiwi, Find the kiwi)
            find_target_fruit(item, is_banana, Find the banana)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_fridge_126(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_food_apple_2081_around_kitchen_counter_123(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
def find_fruit(fruit:item):
    # Function to observe and find the given fruit
    if not visited(fruit):
        observe(fruit, "Find and locate the fruit in the environment")

behavior find_apple():
    body:
        bind apple: item where:
            is_food_apple(apple)
        # Find the apple in the environment
        find_fruit(apple)

behavior find_kiwi():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Find the kiwi in the environment
        find_fruit(kiwi)

behavior find_banana():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Find the banana in the environment
        find_fruit(banana)

behavior __goal__():
    body:
        find_apple()
        find_kiwi()
        find_banana()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_fridge_126(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_food_banana_2083_around_kitchen_counter_123(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_food_apple_2081_around_kitchen_counter_123(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_items(apple:item, kiwi:item, banana:item): 
    body: 
        if not visited(apple): 
            walk_to(apple) 
            observe(apple, "Locate the apple") 
        if not visited(kiwi): 
            walk_to(kiwi) 
            observe(kiwi, "Locate the kiwi") 
        if not visited(banana): 
            walk_to(banana) 
            observe(banana, "Locate the banana") 

behavior __goal__(): 
    body: 
        bind apple: item where: 
            is_food_apple(apple) 

        bind kiwi: item where: 
            is_food_kiwi(kiwi) 

        bind banana: item where: 
            is_food_banana(banana) 

        find_items(apple, kiwi, banana) 

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_items(apple:item, kiwi:item, banana:item): 
    body: 
        if not visited(apple): 
            walk_to(apple) 
            observe(apple, "Locate the apple") 
        if not visited(kiwi): 
            walk_to(kiwi) 
            observe(kiwi, "Locate the kiwi") 
        if not visited(banana): 
            walk_to(banana) 
            observe(banana, "Locate the banana") 

behavior __goal__(): 
    body: 
        bind apple: item where: 
            is_food_apple(apple) 

        bind kiwi: item where: 
            is_food_kiwi(kiwi) 

        bind banana: item where: 
            is_food_banana(banana) 

        find_items(apple, kiwi, banana) 

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_apple_2081, kitchen_counter_123)walk_executor(food_apple_2081)obs(food_apple_2081, Locate the apple)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_kiwi_2054, fridge_126)walk_executor(food_kiwi_2054)obs(food_kiwi_2054, Locate the kiwi)walk_executor(kitchen_counter_123)exp(food_banana_2083, kitchen_counter_123)walk_executor(food_banana_2083)obs(food_banana_2083, Locate the banana)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_apple_2081, kitchen_counter_123)
Fail to find food_apple_2081 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_apple_2081, kitchen_counter_122)walk_executor(food_apple_2081)obs(food_apple_2081, Locate the apple)walk_executor(food_kiwi_2054)obs(food_kiwi_2054, Locate the kiwi)walk_executor(kitchen_counter_122)exp(food_banana_2083, kitchen_counter_122)walk_executor(food_banana_2083)obs(food_banana_2083, Locate the banana)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_apple_2081, kitchen_counter_122)
Fail to find food_apple_2081 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_apple_2081, fridge_126)walk_executor(food_apple_2081)obs(food_apple_2081, Locate the apple)walk_executor(food_kiwi_2054)obs(food_kiwi_2054, Locate the kiwi)walk_executor(kitchen_counter_119)exp(food_banana_2083, kitchen_counter_119)walk_executor(food_banana_2083)obs(food_banana_2083, Locate the banana)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_apple_2081, fridge_126)
Find food_apple_2081. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_apple_2081)obs(food_apple_2081, Locate the apple)walk_executor(food_kiwi_2054)obs(food_kiwi_2054, Locate the kiwi)walk_executor(food_banana_2083)obs(food_banana_2083, Locate the banana)
##############################
From agent.py
walk_executor(food_apple_2081)
Robot find: Robot is close to the food_apple_2081. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_apple_2081, Locate the apple)
Get this information:  food_apple_2081 is inside dining_room_41. food_apple_2081 is inside fridge_126. food_apple_2081 is close to fridge_126. food_apple_2081 is close to character_240. food_apple_2081 is DIRTY.
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
obs(food_kiwi_2054, Locate the kiwi)
Get this information:  food_kiwi_2054 is inside dining_room_41. food_kiwi_2054 is close to kitchen_counter_123. food_kiwi_2054 is close to character_240. food_kiwi_2054 is on kitchen_counter_123. food_kiwi_2054 is CLEAN.
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the food_banana_2083. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_banana_2083, Locate the banana)
Get this information:  food_banana_2083 is inside dining_room_41. food_banana_2083 is inside fridge_126. food_banana_2083 is close to fridge_126. food_banana_2083 is close to character_240. food_banana_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_items(apple:item, kiwi:item, banana:item):
    body:
        if not cut(apple):
            cuts(apple)
        if not cut(kiwi):
            cuts(kiwi)
        if not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and id[apple] == 2081

        bind kiwi: item where:
            is_food_kiwi(kiwi) and id[kiwi] == 2054

        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2083

        slice_items(apple, kiwi, banana)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_items(apple:item, kiwi:item, banana:item):
    body:
        if not cut(apple):
            cuts(apple)
        if not cut(kiwi):
            cuts(kiwi)
        if not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and id[apple] == 2081

        bind kiwi: item where:
            is_food_kiwi(kiwi) and id[kiwi] == 2054

        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2083

        slice_items(apple, kiwi, banana)

##############################
From agent.py-> find a plan in act()
walk_executor(food_apple_2081)grab_executor(food_apple_2081)walk_executor(cutting_board_2123)put_executor(food_apple_2081, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_apple_2081)cut_executor(food_apple_2081)walk_executor(food_kiwi_2054)grab_executor(food_kiwi_2054)walk_executor(cutting_board_2123)put_executor(food_kiwi_2054, cutting_board_2123)walk_executor(food_kiwi_2054)cut_executor(food_kiwi_2054)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(food_apple_2081)
Robot find: Robot is close to the fridge_126. Robot is close to the food_apple_2081. 
##############################
From agent.py
grab_executor(food_apple_2081)
Robot find: Robot is close to the fridge_126. Robot is close to the food_apple_2081. Grabbing food_apple_2081 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_apple_2081. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_apple_2081, cutting_board_2123)
Robot find: Robot is close to the food_apple_2081. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_apple_2081. food_apple_2081 is close cutting_board_2123. food_apple_2081 is on cutting_board_2123. food_apple_2081 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_apple_2081)
Robot find: Robot is close to the knife_2035. Robot is close to the food_apple_2081. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_apple_2081)
Robot find: Robot is close to the knife_2035. Robot is close to the food_apple_2081. Robot is close to the cutting_board_2123. 
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
grab_executor(food_kiwi_2054)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the food_kiwi_2054. Grabbing food_kiwi_2054 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_kiwi_2054, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_kiwi_2054. food_kiwi_2054 is close cutting_board_2123. food_kiwi_2054 is on cutting_board_2123. food_kiwi_2054 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the knife_2035. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_kiwi_2054)
Robot find: Robot is close to the knife_2035. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fridge_126. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruits_on_plate(apple: item, kiwi: item, banana: item, plate: item):
    body:
        if cut(apple) and not on(apple, plate):
            put_on(apple, plate)
        
        if cut(kiwi) and not on(kiwi, plate):
            put_on(kiwi, plate)

        if cut(banana) and not on(banana, plate):
            put_on(banana, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        
        bind plate: item where:
            is_plate(plate)

        place_sliced_fruits_on_plate(apple, kiwi, banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)

        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)

        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)

        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        put_sliced_fruit_on_plate(sliced_apple, plate)
        put_sliced_fruit_on_plate(sliced_kiwi, plate)
        put_sliced_fruit_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind plate: item where:
            is_plate(plate)

        place_fruit_on_plate(apple, plate)
        place_fruit_on_plate(kiwi, plate)
        place_fruit_on_plate(banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_table_114(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def is_sliced_and_on_table(fruit:item, table:item):
    # Function to check if a sliced fruit is on the table
    symbol is_sliced_on_table=exists o: item : (cut(fruit) and on(fruit, table))
    return is_sliced_on_table

behavior put_on_table(inhand_fruit:item, table:item):
    body:
        if not on(inhand_fruit, table):
            put_on(inhand_fruit, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)

        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)

        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)

        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        put_on_table(sliced_apple, plate)
        put_on_table(sliced_kiwi, plate)
        put_on_table(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)

        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)
        
        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)
        
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        
        place_sliced_fruit_on_plate(sliced_apple, plate)
        place_sliced_fruit_on_plate(sliced_kiwi, plate)
        place_sliced_fruit_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)

        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)

        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)

        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        put_sliced_fruit_on_plate(sliced_apple, plate)
        put_sliced_fruit_on_plate(sliced_kiwi, plate)
        put_sliced_fruit_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bowl_2141(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(measuring_cup,bowl_instance)
        else:
            exp(measuring_cup,bowl_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bowl_instance]=True
        close[bowl_instance,measuring_cup]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fruit_on_plate(apple:item, kiwi:item, banana:item, plate:item):
    body:
        if not on(apple, plate):
            grab(apple)
            walk_to(plate)
            put_on(apple, plate)
        
        if not on(kiwi, plate):
            grab(kiwi)
            walk_to(plate)
            put_on(kiwi, plate)

        if not on(banana, plate):
            grab(banana)
            walk_to(plate)
            put_on(banana, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        
        bind plate: item where:
            is_plate(plate)
        
        place_fruit_on_plate(apple, kiwi, banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_microwave_135(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(measuring_cup,microwave_instance)
        else:
            exp(measuring_cup,microwave_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,microwave_instance]=True
        close[microwave_instance,measuring_cup]=True
    

behavior find_cup_2133_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fruits_on_plate(apple: item, kiwi: item, banana: item, plate: item):
    body:
        if not on(apple, plate):
            put_on(apple, plate)
        if not on(kiwi, plate):
            put_on(kiwi, plate)
        if not on(banana, plate):
            put_on(banana, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind plate: item where:
            is_plate(plate)
        place_fruits_on_plate(apple, kiwi, banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruits_on_plate(apple:item, kiwi:item, banana:item, plate:item):
    body:
        if not on(apple, plate):
            put_on(apple, plate)
        if not on(kiwi, plate):
            put_on(kiwi, plate)
        if not on(banana, plate):
            put_on(banana, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind plate: item where:
            is_plate(plate)
        place_sliced_fruits_on_plate(apple, kiwi, banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cut_apple_kiwi_banana(apple:item, kiwi:item, banana:item):
    # Function to check if the apple, kiwi, and banana are sliced
    return cut(apple) and cut(kiwi) and cut(banana)

behavior place_fruits_on_plate(apple:item, kiwi:item, banana:item, plate:item):
    body:
        if not on(apple, plate):
            put_on(apple, plate)
        if not on(kiwi, plate):
            put_on(kiwi, plate)
        if not on(banana, plate):
            put_on(banana, plate)

behavior __goal__():
    body:
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind plate: item where:
            is_plate(plate)
        
        if is_cut_apple_kiwi_banana(apple, kiwi, banana):
            place_fruits_on_plate(apple, kiwi, banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(item: item, plate: item):
    body:
        if not on(item, plate):
            put_on(item, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)
        
        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)
        
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        put_on_plate(sliced_apple, plate)
        put_on_plate(sliced_kiwi, plate)
        put_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruit_on_plate(plate:item, apple:item, kiwi:item, banana:item):
    body:
        if not on(apple, plate):
            walk_to(apple)
            grab(apple)
            walk_to(plate)
            put_on(apple, plate)
            empty_a_hand()
        
        if not on(kiwi, plate):
            walk_to(kiwi)
            grab(kiwi)
            walk_to(plate)
            put_on(kiwi, plate)
            empty_a_hand()
        
        if not on(banana, plate):
            walk_to(banana)
            grab(banana)
            walk_to(plate)
            put_on(banana, plate)
            empty_a_hand()

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        place_sliced_fruit_on_plate(plate, apple, kiwi, banana)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_sliced_and_on_cutting_board(item:item):
    # Function to check if an item is sliced and on the cutting board
    symbol sliced_and_on_board = exists o: item : (cut(o) and on(o, item))
    return sliced_and_on_board

behavior put_slices_on_plate(item:item, plate:item):
    body:
        if not on(item, plate):
            put_on(item, plate)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind plate: item where:
            is_plate(plate)

        foreach item: item:
            if is_sliced_and_on_cutting_board(cutting_board):
                put_slices_on_plate(item, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate) and cut(fruit):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind apple: item where:
            is_food_apple(apple) and cut(apple)
        # Select the sliced apple 

        bind kiwi: item where:
            is_food_kiwi(kiwi) and cut(kiwi)
        # Select the sliced kiwi

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        put_sliced_fruit_on_plate(apple, plate)
        put_sliced_fruit_on_plate(kiwi, plate)
        put_sliced_fruit_on_plate(banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bowl_2141(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(measuring_cup,bowl_instance)
        else:
            exp(measuring_cup,bowl_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bowl_instance]=True
        close[bowl_instance,measuring_cup]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_plate_and_put_fruit(fruit:item, plate:item):
    body:
        if not close_char(char, fruit):
            walk_to(fruit)
        if not inhand(fruit):
            grab(fruit)
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)

        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)

        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        approach_plate_and_put_fruit(sliced_apple, plate)
        approach_plate_and_put_fruit(sliced_kiwi, plate)
        approach_plate_and_put_fruit(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)
        # Select sliced apple

        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)
        # Select sliced kiwi

        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        # Select sliced banana

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_sliced_fruit_on_plate(sliced_apple, plate)
        place_sliced_fruit_on_plate(sliced_kiwi, plate)
        place_sliced_fruit_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_put_on_plate(food:item, plate:item):
    body:
        if not on(food, plate):
            grab(food)
            put_on(food, plate)

behavior __goal__():
    body:
        bind food_apple: item where:
            is_food_apple(food_apple) and cut(food_apple)
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        bind food_banana: item where:
            is_food_banana(food_banana) and cut(food_banana)
        bind plate: item where:
            is_plate(plate) 

        grab_and_put_on_plate(food_apple, plate)
        grab_and_put_on_plate(food_kiwi, plate)
        grab_and_put_on_plate(food_banana, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_sliced_fruit_on_plate(fruit:item, plate:item):
    body:
        if not on(fruit, plate):
            put_on(fruit, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind sliced_apple: item where:
            is_food_apple(sliced_apple) and cut(sliced_apple)
        bind sliced_kiwi: item where:
            is_food_kiwi(sliced_kiwi) and cut(sliced_kiwi)
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)

        place_sliced_fruit_on_plate(sliced_apple, plate)
        place_sliced_fruit_on_plate(sliced_kiwi, plate)
        place_sliced_fruit_on_plate(sliced_banana, plate)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Slice apple, kiwi, and banana. Then put them on a plate.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(food_apple_2081)', 'walk_executor(food_kiwi_2054)', 'walk_executor(food_banana_2083)', 'walk_executor(food_apple_2081)', 'grab_executor(food_apple_2081)', 'walk_executor(cutting_board_2123)', 'put_executor(food_apple_2081, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_apple_2081)', 'cut_executor(food_apple_2081)', 'walk_executor(food_kiwi_2054)', 'grab_executor(food_kiwi_2054)', 'walk_executor(cutting_board_2123)', 'put_executor(food_kiwi_2054, cutting_board_2123)', 'walk_executor(food_kiwi_2054)', 'cut_executor(food_kiwi_2054)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)']
Time info:
Time consume: 271 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 125
goal generate times: 22
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 26 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
