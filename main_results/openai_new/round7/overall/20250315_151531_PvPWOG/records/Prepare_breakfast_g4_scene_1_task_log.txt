From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken. ', '2. Mix the chicken and pasta.', '3. Put the chicken pasta in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        if not inside(pasta, pot):
            put_inside(pasta, pot)
        if not has_water(pot):
            get_water(pot) 
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        if not on(chicken, fryingpan):
            put_on(chicken, fryingpan)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)
        observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        if not inside(pasta, pot):
            put_inside(pasta, pot)
        if not has_water(pot):
            get_water(pot) 
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        if not on(chicken, fryingpan):
            put_on(chicken, fryingpan)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)
        observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(fryingpan_2154, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(dry_pasta_2114, cupboard_118)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(fryingpan_2154, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(dry_pasta_2114, cupboard_118)
Fail to find dry_pasta_2114 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(dry_pasta_2114, fridge_126)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(fryingpan_2154, kitchen_counter_119)walk_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(dry_pasta_2114, fridge_126)
Fail to find dry_pasta_2114 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(dry_pasta_2114, kitchen_counter_119)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(fryingpan_2154, kitchen_counter_119)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(dry_pasta_2114, kitchen_counter_119)
Fail to find dry_pasta_2114 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(dry_pasta_2114, kitchen_counter_122)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)switchoff_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(dry_pasta_2114, kitchen_counter_122)
Fail to find dry_pasta_2114 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_salt_2041)exp(dry_pasta_2114, food_salt_2041)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(food_salt_2041)
Robot find: Robot is close to the food_salt_2041. Robot is close to the kitchen_counter_119. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2114 ?
Answer: Go to dining_room_41. Locate table_114, and you will find dry_pasta_2114 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41. Locate table_114, and you will find dry_pasta_2114 on top of it.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for dry_pasta_2114 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for dry_pasta_2114 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: look for dry_pasta_2114 around kitchen_counter_119.
Action 12: Walk to kitchen_counter_122.
Action 13: look for dry_pasta_2114 around kitchen_counter_122.
Action 14: Walk to food_salt_2041.

##############################
From agent.py
exp(dry_pasta_2114, food_salt_2041)
Fail to find dry_pasta_2114 around food_salt_2041. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(dry_pasta_2114, table_114)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(dry_pasta_2114, table_114)
Find dry_pasta_2114. 
##############################
From agent.py-> find a plan in act()
walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(dry_pasta_2114)
Robot find: Robot is close to the table_114. Robot is close to the dry_pasta_2114. 
##############################
From agent.py
grab_executor(dry_pasta_2114)
Robot find: Robot is close to the table_114. Robot is close to the dry_pasta_2114. Grabbing dry_pasta_2114 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(dry_pasta_2114, pot_78)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the oven_127. dry_pasta_2114 is inside pot_78. pot_78 is close dry_pasta_2114. dry_pasta_2114 is close pot_78. dry_pasta_2114 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_chicken_2089, fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close food_chicken_2089. food_chicken_2089 is close fryingpan_2154. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. 
##############################
From agent.py
obs(food_chicken_2089, Check if the chicken is cooked)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is close to fryingpan_2154. food_chicken_2089 is close to character_240. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the chicken is cooked. Although the robot placed the chicken in the frying pan on the stove, it only observed whether the chicken was clean, not whether it was cooked.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the chicken is cooked. Although the robot placed the chicken in the frying pan on the stove, it only observed whether the chicken was clean, not whether it was cooked.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for dry_pasta_2114 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for dry_pasta_2114 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: look for dry_pasta_2114 around kitchen_counter_119.
Action 12: Walk to kitchen_counter_122.
Action 13: look for dry_pasta_2114 around kitchen_counter_122.
Action 14: Walk to food_salt_2041.
Action 15: look for dry_pasta_2114 around food_salt_2041.
Action 16: Walk to table_114.
Action 17: look for dry_pasta_2114 around table_114.
Action 18: Walk to dry_pasta_2114.
Action 19: Grab dry_pasta_2114.
Action 20: Walk to pot_78.
Action 21: Put dry_pasta_2114 into pot_78.
Action 22: Grab pot_78.
Action 23: Walk to faucet_20.
Action 24: Switch on faucet_20.
Action 25: Switch off faucet_20.
Action 26: Walk to stove_2135.
Action 27: Put pot_78 on stove_2135.
Action 28: Switch on stove_2135.
Action 29: Walk to food_chicken_2089.
Action 30: Grab food_chicken_2089.
Action 31: Walk to fryingpan_2154.
Action 32: Put food_chicken_2089 on fryingpan_2154.
Action 33: Grab fryingpan_2154.
Action 34: Walk to stove_2135.
Action 35: Put fryingpan_2154 on stove_2135.
Action 36: Walk to food_chicken_2089.
Action 37: Observe around food_chicken_2089 with the question of Check if the chicken is cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_knifeblock_76(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(oil,knifeblock_instance)
        else:
            exp(oil,knifeblock_instance)
    eff:
        unknown[oil]=False
        close[oil,knifeblock_instance]=True
        close[knifeblock_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)
        observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        cook_pasta(pot, stove)

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        cook_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_pasta(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)
        observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        cook_pasta(pot, stove)

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        cook_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
obs(food_chicken_2089, Check if the chicken is cooked)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is close to fryingpan_2154. food_chicken_2089 is close to character_240. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the chicken is cooked by observing, as the current observations only confirm the chicken is clean but not whether it is cooked.
##############################
From agent.py
Human Instruction: You need to ensure the chicken is cooked by observing, as the current observations only confirm the chicken is clean but not whether it is cooked.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for dry_pasta_2114 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for dry_pasta_2114 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: look for dry_pasta_2114 around kitchen_counter_119.
Action 12: Walk to kitchen_counter_122.
Action 13: look for dry_pasta_2114 around kitchen_counter_122.
Action 14: Walk to food_salt_2041.
Action 15: look for dry_pasta_2114 around food_salt_2041.
Action 16: Walk to table_114.
Action 17: look for dry_pasta_2114 around table_114.
Action 18: Walk to dry_pasta_2114.
Action 19: Grab dry_pasta_2114.
Action 20: Walk to pot_78.
Action 21: Put dry_pasta_2114 into pot_78.
Action 22: Grab pot_78.
Action 23: Walk to faucet_20.
Action 24: Switch on faucet_20.
Action 25: Switch off faucet_20.
Action 26: Walk to stove_2135.
Action 27: Put pot_78 on stove_2135.
Action 28: Switch on stove_2135.
Action 29: Walk to food_chicken_2089.
Action 30: Grab food_chicken_2089.
Action 31: Walk to fryingpan_2154.
Action 32: Put food_chicken_2089 on fryingpan_2154.
Action 33: Grab fryingpan_2154.
Action 34: Walk to stove_2135.
Action 35: Put fryingpan_2154 on stove_2135.
Action 36: Walk to food_chicken_2089.
Action 37: Observe around food_chicken_2089 with the question of Check if the chicken is cooked.
Action 38: Observe around food_chicken_2089 with the question of Check if the chicken is cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_sink_19(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_pasta_boiled(pot:item):
    # Function to check if the pasta is boiled
    symbol has_boiled_pasta = exists o: item : (is_dry_pasta(o) and inside(o, pot))
    return has_boiled_pasta

def is_chicken_cooked(chicken:item):
    # Function to check if the chicken is cooked
    symbol cooked = is_food_chicken(chicken) and visited(chicken) and not clean(chicken) # Assuming not clean indicates cooked
    return cooked

behavior observe_chicken(chicken:item):
    body:
        if not is_chicken_cooked(chicken):
            observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        if not is_pasta_boiled(pot):
            walk_to(pasta)
            grab(pasta)
            walk_to(pot)
            put_inside(pasta, pot)
            get_water(pot)
            put_on(pot, stove)
            if is_off(stove):
                switch_on(stove)
        
        if not is_chicken_cooked(chicken):
            walk_to(chicken)
            grab(chicken)
            walk_to(fryingpan)
            put_on(chicken, fryingpan)
            put_on(fryingpan, stove)
        
        observe_chicken(chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pasta_boiled(pot:item):
    # Function to check if the pasta is boiled
    symbol has_boiled_pasta = exists o: item : (is_dry_pasta(o) and inside(o, pot))
    return has_boiled_pasta

def is_chicken_cooked(chicken:item):
    # Function to check if the chicken is cooked
    symbol cooked = is_food_chicken(chicken) and visited(chicken) and not clean(chicken) # Assuming not clean indicates cooked
    return cooked

behavior observe_chicken(chicken:item):
    body:
        if not is_chicken_cooked(chicken):
            observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        if not is_pasta_boiled(pot):
            walk_to(pasta)
            grab(pasta)
            walk_to(pot)
            put_inside(pasta, pot)
            get_water(pot)
            put_on(pot, stove)
            if is_off(stove):
                switch_on(stove)
        
        if not is_chicken_cooked(chicken):
            walk_to(chicken)
            grab(chicken)
            walk_to(fryingpan)
            put_on(chicken, fryingpan)
            put_on(fryingpan, stove)
        
        observe_chicken(chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)put_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check if the chicken is cooked)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(food_chicken_2089, fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. Robot is close to the stove_2135. fryingpan_2154 is close food_chicken_2089. food_chicken_2089 is close fryingpan_2154. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. Robot is close to the stove_2135. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the stove_2135. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the stove_2135. Robot is close to the kitchen_counter_119. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. 
##############################
From agent.py
obs(food_chicken_2089, Check if the chicken is cooked)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is close to fryingpan_2154. food_chicken_2089 is close to character_240. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the chicken is cooked. Although the chicken has been placed on the frying pan on the stove, current observations only confirm that the chicken is clean, not that it is cooked. Make sure to take additional steps to verify the chicken's cooked status.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_cooked(chicken:item):
    symbol chicken_cooked=exists observation: item : (observe(observation, "Check if the chicken is cooked") and visited(chicken))
    return chicken_cooked

behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        if not inside(chicken, pot):
            walk_to(chicken)
            grab(chicken)
            walk_to(pot)
            put_inside(chicken, pot)
        if not inside(pasta, pot):
            walk_to(pasta)
            grab(pasta)
            walk_to(pot)
            put_inside(pasta, pot)

behavior observe_chicken_state(chicken:item):
    body:
        if not is_chicken_cooked(chicken):
            observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        observe_chicken_state(chicken)
        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2072_around_dishwasher_129(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_cheese,dishwasher_instance)
        else:
            exp(food_cheese,dishwasher_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,dishwasher_instance]=True
        close[dishwasher_instance,food_cheese]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_chicken_cooked(chicken:item):
    # Check if the chicken is cooked by observing
    if not visited(chicken):
        observe(chicken, "Check if the chicken is cooked")

behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(pasta, pot):
            put_inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)

        ensure_chicken_cooked(chicken)
        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_lighter_2004(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind lighter_instance:item where:
            is_lighter(lighter_instance) and id[lighter_instance]==2004
        achieve close_char(char,lighter_instance)
        if can_open(lighter_instance):
            achieve_once open(lighter_instance)
            exp(pot,lighter_instance)
        else:
            exp(pot,lighter_instance)
    eff:
        unknown[pot]=False
        close[pot,lighter_instance]=True
        close[lighter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        if not inside(chicken, pot) or not inside(pasta, pot):
            put_inside(chicken, pot)
            put_inside(pasta, pot)

behavior ensure_chicken_is_cooked(chicken:item):
    body:
        if not visited(chicken):
            observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot) # Make sure were using the pot where pasta is already

        ensure_chicken_is_cooked(chicken)
        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        if not inside(chicken, pot) or not inside(pasta, pot):
            put_inside(chicken, pot)
            put_inside(pasta, pot)

behavior ensure_chicken_is_cooked(chicken:item):
    body:
        if not visited(chicken):
            observe(chicken, "Check if the chicken is cooked")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot) # Make sure were using the pot where pasta is already

        ensure_chicken_is_cooked(chicken)
        mix_chicken_and_pasta(chicken, pasta, pot)

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Check if the chicken is cooked)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
obs(food_chicken_2089, Check if the chicken is cooked)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is close to fryingpan_2154. food_chicken_2089 is close to character_240. food_chicken_2089 is on fryingpan_2154. food_chicken_2089 is CLEAN.
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_chicken_2089. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2114)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(dry_pasta_2114)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Grabbing dry_pasta_2114 by right hand. 
##############################
From agent.py
putin_executor(dry_pasta_2114, pot_78)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. dry_pasta_2114 is inside pot_78. pot_78 is close dry_pasta_2114. dry_pasta_2114 is close pot_78. dry_pasta_2114 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation

behavior plate_chicken_pasta(chicken_pasta:item, plate:item):
    body:
        if not on(chicken_pasta, plate):
            put_on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) and id[chicken_pasta]==2089
        plate_chicken_pasta(chicken_pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior plate_chicken_pasta(chicken_pasta:item, plate:item):
    body:
        if not on(chicken_pasta, plate):
            put_on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) and id[chicken_pasta]==2089
        plate_chicken_pasta(chicken_pasta, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(plate_2152)put_executor(food_chicken_2089, plate_2152)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the pot_78. Robot is close to the food_chicken_2089. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the pot_78. Robot is close to the food_chicken_2089. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, plate_2152)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_chicken_2089 is close plate_2152. plate_2152 is close food_chicken_2089. food_chicken_2089 is on plate_2152. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_122)', 'walk_executor(food_salt_2041)', 'walk_executor(table_114)', 'walk_executor(dry_pasta_2114)', 'grab_executor(dry_pasta_2114)', 'walk_executor(pot_78)', 'putin_executor(dry_pasta_2114, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(fryingpan_2154)', 'put_executor(food_chicken_2089, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(fryingpan_2154)', 'put_executor(food_chicken_2089, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(dry_pasta_2114)', 'grab_executor(dry_pasta_2114)', 'putin_executor(dry_pasta_2114, pot_78)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(plate_2152)', 'put_executor(food_chicken_2089, plate_2152)']
Time info:
Time consume: 319 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 46
goal generate times: 7
goal correct times: 0
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 8 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
