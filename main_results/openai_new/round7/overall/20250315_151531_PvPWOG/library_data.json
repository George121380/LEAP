[
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \ndef is_light_in_office(light:item):\n    # Function to check if a light is in the home office\n    symbol in_office=exists room: item : (is_home_office(room) and inside(light, room))\n    return in_office\n\nbehavior __goal__():\n    body:\n        bind light: item where:\n            is_light(light) and is_light_in_office(light)\n        # Select the light inside the home office\n\n        walk_to(light)\n        # Move close to the light\n\n        if is_off(light):\n            switch_on(light)\n            # Turn on the light if its off\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find your cat and touch it.",
        "cdl": " \nbehavior approach_cat_and_touch(cat:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        touch(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat]==2055\n        approach_cat_and_touch(cat)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket containing clothes.",
        "cdl": " \nbehavior locate_basket(basket:item):\n    body:\n        if not close_char(char, basket):\n            walk_to(basket)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        locate_basket(basket)\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put the clothes from the basket into the washing machine and start the wash cycle.",
        "cdl": " \nbehavior load_washing_machine(clothes:item, washing_machine:item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n            # Place the clothing item inside the washing machine\n\nbehavior start_wash_cycle(washing_machine:item):\n    body:\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2041\n        # Select the washing machine with ID 2041\n\n        foreach clothes: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(clothes) and inside(clothes, washing_machine):\n                load_washing_machine(clothes, washing_machine)\n\n        start_wash_cycle(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": " \nbehavior fill_pot_with_water(pot:item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        bind stove: item where:\n            is_stove(stove)\n        fill_pot_with_water(pot)\n        place_pot_on_stove(pot, stove)\n        turn_on_stove(stove)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket with clothes.",
        "cdl": " \nbehavior locate_basket(basket:item):\n    body:\n        if not close_char(char, basket):\n            walk_to(basket)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        locate_basket(basket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes and soap to the washing machine.",
        "cdl": " \nbehavior load_washing_machine(clothes: item, washing_machine: item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2041\n        \n        foreach clothes: item:\n            if is_clothes(clothes) and (id[clothes] == 2113 or id[clothes] == 2114 or id[clothes] == 2115 or id[clothes] == 2116):\n                load_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior start_wash_cycle(washing_machine:item):\n    body:\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2041\n        start_wash_cycle(washing_machine) # Initiate the washing machine\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the environment.",
        "cdl": " \ndef is_room(r:item):\n    # Function to identify if an item is a room\n    symbol is_room=exists o: item : (inside(r, o))\n    return is_room\n\nbehavior identify_rooms():\n    body:\n        foreach r: item:\n            if not visited(r) and is_room(r):\n                observe(r, \"Check if it is a room\")\n                # Observe each item to determine if it is a room\n\nbehavior __goal__():\n    body:\n        identify_rooms()\n        # Execute the behavior to identify all rooms in the environment\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Ensure there is at least one light on in each identified room.",
        "cdl": " \ndef has_light_on_in_room(room:item):\n    # Check if there is at least one light on in a room\n    symbol has_light_on=exists o: item : (is_light(o) and is_on(o) and inside(o, room))\n    return has_light_on\n\nbehavior ensure_light_on_in_room(room:item):\n    body:\n        if not has_light_on_in_room(room):\n            # If no light is on in this room, find an unlit light and turn it on\n            foreach light: item:\n                if is_light(light) and is_off(light) and inside(light, room):\n                    walk_to(light)\n                    switch_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom_1: item where:\n            is_bathroom(bathroom_1)\n\n        bind dining_room_41: item where:\n            is_dining_room(dining_room_41)\n\n        bind bedroom_162: item where:\n            is_bedroom(bedroom_162)\n\n        bind home_office_241: item where:\n            is_home_office(home_office_241)\n\n        ensure_light_on_in_room(bathroom_1)\n        ensure_light_on_in_room(dining_room_41)\n        ensure_light_on_in_room(bedroom_162)\n        ensure_light_on_in_room(home_office_241)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Place the bowls and plates in the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash forks by hand.",
        "cdl": " \nbehavior wash_forks_by_hand(fork:item):\n    body:\n        if not clean(fork):\n            wash(fork)\n\nbehavior __goal__():\n    body:\n        bind fork: item where:\n            is_fork(fork)\n        wash_forks_by_hand(fork)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior locate_jacket(home_office:item, couch:item, jacket:item):\n    body:\n        if not visited(jacket):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside home_office\")\n            if not visited(couch):\n                if not close_char(char, couch):\n                    walk_to(couch)\n                observe(couch, \"Check is clothes_jacket_2047 on top\")\n            if not close_char(char, jacket):\n                observe(jacket, \"Check if I can grab it\")\n            grab(jacket)\n\nbehavior wash_jacket(jacket:item):\n    body:\n        if dirty(jacket):\n            wash(jacket)\n# Ensure the jacket is cleaned by hand\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 319\n\n        bind couch: item where:\n            is_couch(couch) and id[couch] == 352\n\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket] == 2047\n        \n        locate_jacket(home_office, couch, clothes_jacket)\n        wash_jacket(clothes_jacket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Use the washing machine to wash the jacket.",
        "cdl": " \nbehavior load_washing_machine(clothes:item, washing_machine:item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the washing machine\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket] == 2047\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        walk_to(washing_machine)\n        load_washing_machine(clothes_jacket, washing_machine)\n        start_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \nbehavior find_cup(cup:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n\nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        if not has_water(cup) and is_on(faucet):\n            get_water(cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet] == 134\n        \n        find_cup(cup)\n        \n        if not close_char(char, faucet):\n            walk_to(faucet)\n        \n        if is_off(faucet):\n            switch_on(faucet)\n        \n        fill_cup_with_water(cup, faucet)\n        \n        if is_on(faucet):\n            switch_off(faucet)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the kiwi and add it to the cup of water.",
        "cdl": " \nbehavior slice_kiwi(kiwi:item):\n    body:\n        if not cut(kiwi) and is_food_kiwi(kiwi):\n            cuts(kiwi)\n\nbehavior add_kiwi_to_cup(kiwi:item, cup:item):\n    body:\n        if cut(kiwi) and not inside(kiwi, cup):\n            put_inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        bind cup: item where:\n            is_cup(cup) and has_water(cup) and id[cup] == 2087\n        slice_kiwi(kiwi)\n        add_kiwi_to_cup(kiwi, cup)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior approach_bathroom(bathroom:item):\n    body:\n        if not close_char(char, bathroom):\n            walk_to(bathroom)\n\nbehavior open_windows(window:item):\n    body:\n        if closed(window) and can_open(window):\n            opens(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        approach_bathroom(bathroom)\n        open_windows(window)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "\nbehavior slice_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n            \nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        slice_chicken(chicken)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Get a cup and fill it with water.",
        "cdl": " \nbehavior get_a_cup(cup:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n\nbehavior fill_cup_with_water(cup:item):\n    body:\n        if not has_water(cup):\n            get_water(cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        get_a_cup(cup)\n        fill_cup_with_water(cup)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add the slices to the cup.",
        "cdl": " \nbehavior slice_kiwi(food_kiwi:item):\n    body:\n        if not cut(food_kiwi):\n            cuts(food_kiwi)\n            \nbehavior add_sliced_kiwi_to_cup(food_kiwi:item, cup:item):\n    body:\n        if cut(food_kiwi) and not inside(food_kiwi, cup):\n            put_inside(food_kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind food_kiwi: item where:\n            is_food_kiwi(food_kiwi) and id[food_kiwi] == 2054\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        slice_kiwi(food_kiwi)\n        add_sliced_kiwi_to_cup(food_kiwi, cup)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the environment.",
        "cdl": " \ndef is_book_in_home_office(book:item):\n    # Function to check if a book is in the home office\n    symbol in_home_office=exists room: item : (is_home_office(room) and inside(book, room))\n    return in_home_office\n\nbehavior __goal__():\n    body:\n        if exists book: item : is_book(book) and is_book_in_home_office(book):\n            # Check if there is a book in the home office based on the available information\n            bind book: item where:\n                is_book(book) and is_book_in_home_office(book) # The condition is_book_in_home_office can only be used when you are certain that there is a book in the home office In this case, you can be confident because you have already verified it with an if condition\n            # Select a book that is in the home office\n            walk_to(book) \n            # Move the character closer to the book\n\n        else: \n           # If no book in the home office is found, initiate exploration to locate one\n            foreach book: item:\n                if is_book(book) and not visited(book):\n                    observe(book,\"Check if the book is in the home office\")\n                    # Observe whether each book is in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior find_coffee_table_in_home_office(coffee_table:item, home_office:item):\n    body:\n        if not visited(coffee_table):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside home_office\")\n            if not close_char(char, coffee_table):\n                walk_to(coffee_table)\n\nbehavior place_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book) and id[book] == 2091\n\n        find_coffee_table_in_home_office(coffee_table, home_office)\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior approach_bathroom(bathroom:item):\n    body:\n        if not close_char(char, bathroom):\n            walk_to(bathroom)\n\nbehavior open_windows(window:item):\n    body:\n        if closed(window) and can_open(window):\n            opens(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        approach_bathroom(bathroom)\n        open_windows(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the house.",
        "cdl": " \ndef is_room(r:item):\n    # Function to identify if an item is a room\n    symbol is_room=exists o: item : (inside(r, o))\n    return is_room\n\nbehavior identify_rooms():\n    body:\n        foreach r: item:\n            if not visited(r) and is_room(r):\n                observe(r, \"Check if it is a room\")\n                # Observe each item to determine if it is a room\n\nbehavior __goal__():\n    body:\n        identify_rooms()\n        # Execute the behavior to identify all rooms in the environment\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check each room to ensure there is at least one light on, and turn on a light if necessary.",
        "cdl": " \ndef has_light_on_in_room(room:item):\n    # Check if there is at least one light on in a room\n    symbol has_light_on=exists o: item : (is_light(o) and is_on(o) and inside(o, room))\n    return has_light_on\n\nbehavior ensure_light_on_in_room(room:item):\n    body:\n        if not has_light_on_in_room(room):\n            # If no light is on in this room, find an unlit light and turn it on\n            foreach light: item:\n                if is_light(light) and is_off(light) and inside(light, room):\n                    walk_to(light)\n                    switch_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom_1: item where:\n            is_bathroom(bathroom_1)\n        bind bedroom_67: item where:\n            is_bedroom(bedroom_67)\n        bind dining_room_201: item where:\n            is_dining_room(dining_room_201)\n        bind home_office_319: item where:\n            is_home_office(home_office_319)\n\n        ensure_light_on_in_room(bathroom_1)\n        ensure_light_on_in_room(bedroom_67)\n        ensure_light_on_in_room(dining_room_201)\n        ensure_light_on_in_room(home_office_319)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find all the bowls and plates that need washing.",
        "cdl": " \ndef has_bowls_and_plates(dish:item):\n    # Function to check if an item is classified as either a bowl or a plate\n    symbol has_bowls_and_plates=exists o: item : ((is_bowl(o) or is_plate(o)) and inside(o, dish))\n    return has_bowls_and_plates\n\nbehavior __goal__():\n    body:\n        foreach dish: item:\n            # Check all dishes that have not been visited\n            if (is_bowl(dish) or is_plate(dish)) and not visited(dish):\n                observe(dish,\"Check is there any bowl or plate that need washing\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Locate all the bowls and plates.",
        "cdl": " \nbehavior locate_bowls_and_plates(bowls_and_plates:item):\n    body:\n        if not visited(bowls_and_plates):\n            observe(bowls_and_plates, \"Check if it is a bowl or plate\")\n\nbehavior __goal__():\n    body:\n        foreach bowls_and_plates: item:\n            if (is_bowl(bowls_and_plates) or is_plate(bowls_and_plates)) and not visited(bowls_and_plates):\n                locate_bowls_and_plates(bowls_and_plates)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates using the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify a table in the dining room.",
        "cdl": " \ndef is_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior __goal__():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                observe(table, \"Check if it is in the dining room\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Put the milk and egg on the table in the dining room.",
        "cdl": " \nbehavior move_milk_and_egg_to_table(milk: item, egg: item, table: item):\n    body:\n        if not on(milk, table):\n            grab(milk)\n            walk_to(table)\n            put_on(milk, table)\n        if not on(egg, table):\n            grab(egg)\n            walk_to(table)\n            put_on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table] == 226\n        # Select the table identified as being inside the dining room\n\n        bind milk: item where:\n            is_milk(milk) and id[milk] == 2043\n        # Select milk with ID 2043\n\n        bind egg: item where:\n            is_food_egg(egg) and id[egg] == 2020\n        # Select egg with ID 2020\n\n        move_milk_and_egg_to_table(milk, egg, table)\n        # Move the milk and egg from their current locations to table_226 in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_item(item: item, trashcan: item):\n    body:\n        if not inside(item, trashcan):\n            put_inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n\n        foreach item: item:\n            if inside(item, fridge):\n                throw_item(item, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "4. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior pick_up_items(item1: item, item2: item):\n    body:\n        if not inhand(item1) and not inhand(item2):\n            grab(item1)\n            grab(item2)\n\nbehavior place_items_back_in_fridge(fridge: item, item1: item, item2: item):\n    body:\n        if open(fridge):\n            put_inside(item1, fridge)\n            put_inside(item2, fridge)\n            closes(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk) and id[milk] == 2043\n        bind egg: item where:\n            is_food_egg(egg) and id[egg] == 2020\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        \n        if not close_char(char, table_226):\n            walk_to(table_226)\n        \n        pick_up_items(milk, egg)\n        \n        if not close_char(char, fridge):\n            walk_to(fridge)\n\n        place_items_back_in_fridge(fridge, milk, egg)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": "behavior prepare_pot_to_boil_egg(pot:item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior add_egg_to_pot(egg:item, pot:item):\n    body:\n        if not inside(egg, pot):\n            put_inside(egg, pot)\n\nbehavior wait_until_egg_boiled(egg:item, pot:item):\n    body:\n        if inside(egg, pot):\n            observe(pot, \"Observe to ensure the egg is boiled\")\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        \n        bind stove: item where:\n            is_stove(stove)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        prepare_pot_to_boil_egg(pot)\n        place_pot_on_stove(pot, stove)\n        \n        turn_on_stove(stove)\n        \n        add_egg_to_pot(egg, pot)\n        \n        wait_until_egg_boiled(egg, pot)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": " \nbehavior get_a_cup(cup:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n\nbehavior fill_cup_with_water(cup:item):\n    body:\n        if not has_water(cup):\n            get_water(cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        get_a_cup(cup)\n        fill_cup_with_water(cup)\n"
    },
    {
        "task_name": "Vacuum the floor",
        "source_sub_task": "Vacuum the floor by pushing and pulling the vacuum cleaner.",
        "cdl": " \nbehavior approach_home_office_and_retrieve_vacuum(home_office: item, couch:item, vacuum_cleaner:item):\n    body:\n        if not close_char(char, home_office):\n            walk_to(home_office)\n        if not visited(couch):\n            if not close_char(char, couch):\n                walk_to(couch)\n            observe(couch, \"Check if vacuum_cleaner_2070 is close to couch_352\")\n        if not visited(vacuum_cleaner):\n            observe(vacuum_cleaner, \"Check if I can grab it\")\n        grab(vacuum_cleaner)\n\nbehavior vacuum_floor(vacuum_cleaner:item):\n    body:\n        if not is_on(vacuum_cleaner):\n            switch_on(vacuum_cleaner)\n        push(vacuum_cleaner)\n        pull(vacuum_cleaner)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 319\n\n        bind couch: item where:\n            is_couch(couch) and id[couch] == 352\n\n        bind vacuum_cleaner: item where:\n            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070\n        \n        approach_home_office_and_retrieve_vacuum(home_office, couch, vacuum_cleaner)\n        vacuum_floor(vacuum_cleaner)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \nbehavior grab_cup_and_fill_with_water(cup:item, faucet:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n        if not close_char(char, faucet):\n            walk_to(faucet)\n        if is_off(faucet):\n            switch_on(faucet)\n        if not has_water(cup):\n            get_water(cup)\n        if is_on(faucet):\n            switch_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        bind faucet: item where:\n            is_faucet(faucet)\n        grab_cup_and_fill_with_water(cup, faucet)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Place the cup of water in the freezer.",
        "cdl": " \nbehavior place_cup_in_freezer(cup:item, freezer:item):\n    body:\n        if not inside(cup, freezer):\n            put_inside(cup, freezer)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        bind freezer: item where:\n            is_fridge(freezer) and id[freezer] == 126\n        place_cup_in_freezer(cup, freezer)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior approach_dvd_player_and_turn_on(dvd_player:item):\n    body:\n        if not close_char(char, dvd_player):\n            walk_to(dvd_player)\n        if is_off(dvd_player):\n            switch_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        approach_dvd_player_and_turn_on(dvd_player)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior find_spectacles(spectacles:item, home_office:item, coffee_table:item):\n    body:\n        if not visited(spectacles):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside home_office\")\n            if not visited(coffee_table):\n                if not close_char(char, coffee_table):\n                    walk_to(coffee_table)\n            observe(spectacles, \"Check if the spectacles are here\")\n        grab(spectacles)\n\nbehavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        if not on(spectacles, coffee_table):\n            put_on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n            \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n\n        find_spectacles(spectacles, home_office, coffee_table)\n        place_spectacles_on_coffee_table(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_table(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_table(book, coffee_table, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book(book:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                walk_to(book)\n            observe(book, \"Check if the book is in sight\")\n        grab(book)\n\nbehavior put_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and id[coffee_table] == 270 and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book) and id[book] == 2136\n\n        find_book(book, home_office)\n        put_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "behavior open_window(window:item, home_office:item):\n    body:\n        if not visited(window):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n                # Ensure you are in the vicinity of the home office\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n                # Verify that you are inside the home office\n            if not close_char(char, window):\n                observe(window, \"Check if the window is in sight\")\n                # Locate the window in the home office\n        if closed(window):\n            opens(window)\n            # Open the window if it is closed\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        open_window(window, home_office)\n        # Perform the action to open the window in the home office"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n            \nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        slice_chicken(chicken)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the table in the dining room.",
        "cdl": " \ndef is_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior locate_table(table:item):\n    body:\n        if not visited(table):\n            observe(table, \"Check if it is a table in the dining room\")\n\nbehavior __goal__():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                locate_table(table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the table.",
        "cdl": " \ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(table: item, item1: item, item2: item):\n    body:\n        if not on(item1, table):\n            grab(item1)\n            walk_to(table)\n            put_on(item1, table)\n        \n        if not on(item2, table):\n            grab(item2)\n            walk_to(table)\n            put_on(item2, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table located in the dining room\n        \n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n        \n        place_items_on_table(table, milk, turkey)\n        place_items_on_table(table, egg, fish)\n        place_items_on_table(table, chicken, turkey)\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": " \nbehavior approach_remote_control_and_turn_on_tv(remote_control:item, television:item):\n    body:\n        if not close_char(char, remote_control):\n            walk_to(remote_control)\n        if not visited(remote_control):\n            observe(remote_control, \"Check if remote control can be used to turn on the TV\")\n        touch(remote_control)\n        # Touch the remote control to attempt to turn on the TV\n        if is_off(television):\n            switch_on(television)\n            # Turn on the TV if its off\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        bind television: item where:\n            is_television(television)\n        approach_remote_control_and_turn_on_tv(remote_control, television)\n"
    },
    {
        "task_name": "Vacuum the floor",
        "source_sub_task": "Vacuum the floor by pushing and pulling the vacuum cleaner.",
        "cdl": "behavior locate_vacuum_and_vacuum_floor(vacuum_cleaner:item):\n    body:\n        if not visited(vacuum_cleaner):\n            observe(vacuum_cleaner, \"Check if vacuum_cleaner can be used\")\n        if not close_char(char, vacuum_cleaner):\n            walk_to(vacuum_cleaner)\n        if not inhand(vacuum_cleaner):\n            grab(vacuum_cleaner)\n        if is_off(vacuum_cleaner) and has_switch(vacuum_cleaner):\n            switch_on(vacuum_cleaner)\n        push(vacuum_cleaner)\n        pull(vacuum_cleaner)\n\nbehavior __goal__():\n    body:\n        bind vacuum_cleaner: item where:\n            is_vacuum_cleaner(vacuum_cleaner)\n        locate_vacuum_and_vacuum_floor(vacuum_cleaner)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find and pour milk into a cup.",
        "cdl": " \ndef has_milk_in_cup(cup: item):\n    # Function to check if there is milk in the cup\n    symbol has_milk=exists o: item : (is_milk(o) and inside(o, cup))\n    return has_milk\n\nbehavior grab_milk_and_pour_into_cup(milk: item, cup: item):\n    body:\n        if not inhand(milk):\n            grab(milk)\n            # Grab the milk\n        if not close_char(char, cup):\n            walk_to(cup)\n        if not has_milk_in_cup(cup):\n            put_inside(milk, cup)\n            # Pour the milk into the cup\n        if inhand(milk):\n            empty_a_hand()\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        grab_milk_and_pour_into_cup(milk, cup)\n        # Execute the behavior to grab milk and pour it into the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        if not inside(cup, microwave):\n            put_inside(cup, microwave)\n            # Place the cup inside the microwave\n\nbehavior heat_milk_in_microwave(microwave:item):\n    body:\n        if open(microwave):\n            closes(microwave) # Close the microwave door to start heating\n        if is_off(microwave):\n            switch_on(microwave) # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the cup with milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        heat_milk_in_microwave(microwave)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        if not inside(chicken, fridge):\n            put_inside(chicken, fridge)\n            closes(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        bind fridge: item where:\n            is_fridge(fridge)\n        cut_chicken(chicken)\n        store_chicken_in_fridge(chicken, fridge)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket with clothes in it.",
        "cdl": "\nbehavior locate_basket(basket: item):\n    body:\n        if not visited(basket):\n            walk_to(basket)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        locate_basket(basket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes into the washing machine.",
        "cdl": " \nbehavior load_washing_machine(clothes:item, washing_machine:item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine and start it.",
        "cdl": " \nbehavior add_soap_and_start_washing(washing_machine:item, soap:item):\n    body:\n        if not inside(soap, washing_machine):\n            put_inside(soap, washing_machine)\n            # Add soap to the washing machine\n\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        bind soap: item where:\n            is_soap(soap)\n        add_soap_and_start_washing(washing_machine, soap)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the dining room table.",
        "cdl": " \ndef is_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior locate_table(table:item):\n    body:\n        if not visited(table):\n            observe(table, \"Check if it is a table in the dining room\")\n\nbehavior __goal__():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                locate_table(table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the table.",
        "cdl": " \ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(table: item, item1: item, item2: item):\n    body:\n        if not on(item1, table):\n            grab(item1)\n            walk_to(table)\n            put_on(item1, table)\n        \n        if not on(item2, table):\n            grab(item2)\n            walk_to(table)\n            put_on(item2, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table located in the dining room\n        \n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n        \n        place_items_on_table(table, milk, turkey)\n        place_items_on_table(table, egg, fish)\n        place_items_on_table(table, chicken, turkey)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Turn on the lights in the bedroom.",
        "cdl": " \nbehavior locate_and_turn_on_light(light:item, room:item):\n    body:\n        if not visited(light):\n            if not close_char(char, room):\n                walk_to(room)\n            if not inside_char(char, room):\n                observe(room, \"Check if I am inside the room\")\n            if not close_char(char, light):\n                observe(light, \"Check if it is the room light\")\n        if is_off(light):\n            switch_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n\n        bind light: item where:\n            is_light(light) and inside(light, bedroom)\n\n        locate_and_turn_on_light(light, bedroom)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Wipe the toilet with toilet paper.",
        "cdl": " \nbehavior approach_toilet_paper_and_toilet(toilet_paper:item, toilet:item):\n    body:\n        if not close_char(char, toilet_paper):\n            walk_to(toilet_paper)\n            # Move to the location of the toilet paper\n            \n        if not inhand(toilet_paper):\n            grab(toilet_paper)\n            # Grab the toilet paper\n\n        if not close_char(char, toilet):\n            walk_to(toilet)\n            # Move to the location of the toilet\n\nbehavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):\n    body:\n        wipe(toilet)\n        # Perform the wipe action on the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        bind toilet: item where:\n            is_toilet(toilet)\n        approach_toilet_paper_and_toilet(toilet_paper, toilet)\n        wipe_toilet_with_paper(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Throw the used toilet paper into the toilet.",
        "cdl": "\nbehavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):\n    body:\n        if not inside(toilet_paper, toilet):\n            put_inside(toilet_paper, toilet)\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 15\n        # Select the toilet with ID 15\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076\n        # Select the toilet paper with ID 2076\n\n        throw_toilet_paper_into_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": "behavior locate_jacket_and_prepare_for_washing(jacket:item):\n    body:\n        if not inhand(jacket):\n            if not visited(jacket):\n                observe(jacket, \"Check if I can grab it\")\n            grab(jacket)\n\nbehavior wash_jacket_by_hand(jacket:item):\n    body:\n        if dirty(jacket):\n            wash(jacket)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        locate_jacket_and_prepare_for_washing(jacket)\n        wash_jacket_by_hand(jacket)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine_and_start(washing_machine:item, clothes_jacket:item):\n    body:\n        if inhand(clothes_jacket):\n            if not inside(clothes_jacket, washing_machine):\n                put_inside(clothes_jacket, washing_machine)\n            # Ensure the jacket is placed inside the washing machine\n\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket] == 2119\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n\n        load_washing_machine_and_start(washing_machine, clothes_jacket)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert a CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        if not inhand(cd):\n            grab(cd)\n        if not close_char(char, cd_player):\n            walk_to(cd_player)\n        if open(cd_player):\n            closes(cd_player)\n        put_inside(cd, cd_player)\n        if is_off(cd_player):\n            switch_on(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        insert_cd_and_play(cd, cd_player)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room and put the milk and egg on it.",
        "cdl": " \ndef is_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):\n    body:\n        if not on(milk, table):\n            grab(milk)\n            walk_to(table)\n            put_on(milk, table)\n        \n        if not on(egg, table):\n            grab(egg)\n            walk_to(table)\n            put_on(egg, table)\n\nbehavior __goal__():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                observe(table, \"Check if it is in the dining room\")\n        \n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        \n        bind milk: item where:\n            is_milk(milk)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        place_milk_and_egg_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(fridge: item, trashcan: item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                if not inside(item, trashcan):\n                    put_inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n\n        throw_items_in_trash(fridge, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": "behavior put_milk_and_eggs_back_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        if open(fridge):\n            if not inside(milk, fridge):\n                grab(milk)\n                walk_to(fridge)\n                put_inside(milk, fridge)\n\n            if not inside(egg, fridge):\n                grab(egg)\n                walk_to(fridge)\n                put_inside(egg, fridge)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        bind milk: item where:\n            is_milk(milk)\n        bind egg: item where:\n            is_food_egg(egg)\n        walk_to(milk)\n        walk_to(egg)\n        walk_to(fridge)\n        put_milk_and_eggs_back_in_fridge(milk, egg, fridge)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "\ndef is_light_in_bathroom(light:item):\n    # Function to check if a light is in the bathroom\n    symbol in_bathroom=exists room: item : (is_bathroom(room) and inside(light, room))\n    return in_bathroom\n\nbehavior __goal__():\n    body:\n        bind light: item where:\n            is_light(light) and is_light_in_bathroom(light)\n        # Select the light inside the bathroom\n\n        walk_to(light)\n        # Move close to the light\n\n        if is_off(light):\n            switch_on(light)\n            # Turn on the light if off\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes.",
        "cdl": "behavior locate_basket(basket:item):\n    body:\n        if not visited(basket):\n            walk_to(basket)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        locate_basket(basket)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes from the basket into the washing machine and start the washing cycle.",
        "cdl": "behavior load_washing_machine(clothes:item, washing_machine:item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n\nbehavior start_wash_cycle(washing_machine:item):\n    body:\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_washing_machine(clothes, washing_machine)\n\n        start_wash_cycle(washing_machine) # Start the washing machine"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "1. Slice the bread.",
        "cdl": " \nbehavior find_bread_and_slice(bread:item):\n    body:\n        if not inhand(bread):\n            grab(bread)\n        if not cut(bread):\n            cuts(bread)\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) and cuttable(bread)\n        find_bread_and_slice(bread)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "2. Toast the sliced bread.",
        "cdl": " \nbehavior turn_on_toaster_with_bread_inside(toaster:item, bread:item):\n    body:\n        if inside(bread, toaster) and is_off(toaster):\n            switch_on(toaster)\n\nbehavior __goal__():\n    body:\n        bind toaster: item where:\n            is_toaster(toaster) and id[toaster]==132\n        bind bread: item where:\n            is_food_bread(bread) and inside(bread, toaster)\n        turn_on_toaster_with_bread_inside(toaster, bread)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        if not inside(chicken, fridge):\n            put_inside(chicken, fridge)\n            if open(fridge):\n                closes(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        bind fridge: item where:\n            is_fridge(fridge)\n        cut_chicken(chicken)\n        store_chicken_in_fridge(chicken, fridge)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior locate_spectacles_and_home_office(spectacles:item, home_office:item, coffee_table:item):\n    body:\n        if not visited(spectacles):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not visited(coffee_table):\n                if not close_char(char, coffee_table):\n                    walk_to(coffee_table)\n            observe(spectacles, \"Check if the spectacles are here\")\n        grab(spectacles)\n\nbehavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        if not on(spectacles, coffee_table):\n            put_on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n\n        locate_spectacles_and_home_office(spectacles, home_office, coffee_table)\n        place_spectacles_on_coffee_table(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_table(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_table(book, coffee_table, home_office)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Turn on the lights in the bedroom.",
        "cdl": " \nbehavior locate_and_turn_on_light(light:item, room:item):\n    body:\n        if not visited(light):\n            if not close_char(char, room):\n                walk_to(room)\n            if not inside_char(char, room):\n                observe(room, \"Check if I am inside the room\")\n            if not close_char(char, light):\n                observe(light, \"Check if it is the room light\")\n        if is_off(light):\n            switch_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n\n        bind light: item where:\n            is_light(light) and inside(light, bedroom)\n\n        locate_and_turn_on_light(light, bedroom)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket containing clothes.",
        "cdl": " \nbehavior locate_basket(basket:item):\n    body:\n        if not visited(basket):\n            walk_to(basket)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        locate_basket(basket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Place the clothes in the washing machine.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):\n    body:\n        if not inside(clothes, washing_machine):\n            put_inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": "behavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        if not inside(soap, washing_machine):\n            put_inside(soap, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        bind soap: item where:\n            is_soap(soap)\n        add_soap_to_washing_machine(soap, washing_machine)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Wipe the toilet with toilet paper.",
        "cdl": " \nbehavior approach_toilet_paper_and_toilet(toilet_paper:item, toilet:item):\n    body:\n        if not close_char(char, toilet_paper):\n            walk_to(toilet_paper)\n            # Move to the location of the toilet paper\n            \n        if not inhand(toilet_paper):\n            grab(toilet_paper)\n            # Grab the toilet paper\n\n        if not close_char(char, toilet):\n            walk_to(toilet)\n            # Move to the location of the toilet\n\nbehavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):\n    body:\n        wipe(toilet)\n        # Perform the wipe action on the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        bind toilet: item where:\n            is_toilet(toilet)\n        approach_toilet_paper_and_toilet(toilet_paper, toilet)\n        wipe_toilet_with_paper(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Throw the used toilet paper into the toilet.",
        "cdl": " \nbehavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):\n    body:\n        if not inside(toilet_paper, toilet):\n            put_inside(toilet_paper, toilet)\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 37\n        # Select the toilet with ID 37\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090\n        # Select the toilet paper with ID 2090\n\n        throw_toilet_paper_into_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior approach_dvd_player_and_turn_on(dvd_player:item):\n    body:\n        if not close_char(char, dvd_player):\n            walk_to(dvd_player)\n        if is_off(dvd_player):\n            switch_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        approach_dvd_player_and_turn_on(dvd_player)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_table(book:item, home_office:item, table:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home office\")\n            observe(book, \"Check if the book can be grabbed\")\n            grab(book)\n        if not close_char(char, table):\n            walk_to(table)\n        if not on(book, table):\n            put_on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and surfaces(table) and inside(table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_table(book, home_office, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \ndef is_light_in_office(light:item):\n    # Function to check if a light is in the home office\n    symbol in_office=exists room: item : (is_home_office(room) and inside(light, room))\n    return in_office\n\nbehavior __goal__():\n    body:\n        bind light: item where:\n            is_light(light) and is_light_in_office(light)\n        # Select the light inside the home office\n\n        walk_to(light)\n        # Move close to the light\n\n        if is_off(light):\n            switch_on(light)\n            # Turn on the light if its off\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water.",
        "cdl": "behavior grab_bowl_and_fill_with_water(bowl:item, water_source:item):\n    body:\n        if not inhand(bowl):\n            grab(bowl)\n        if not close_char(char, water_source):\n            walk_to(water_source)\n        if not has_water(bowl):\n            if is_off(water_source):\n                switch_on(water_source)\n            get_water(bowl)\n            if is_on(water_source):\n                switch_off(water_source)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and recipient(bowl)\n        bind water_source: item where:\n            is_faucet(water_source)\n        grab_bowl_and_fill_with_water(bowl, water_source)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl on the table in the home office.",
        "cdl": " \nbehavior put_bowl_on_table(bowl:item, table:item):\n    body:\n        if inhand(bowl):\n            put_on(bowl, table)\n\nbehavior locate_home_office_table(home_office:item, table:item):\n    body:\n        if not visited(table):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, table):\n                walk_to(table)\n\nbehavior approach_bowl(bowl:item):\n    body:\n        if not close_char(char, bowl):\n            walk_to(bowl)\n        if not inhand(bowl):\n            grab(bowl)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and surfaces(table) and inside(table, home_office)\n\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2140 and has_water(bowl)\n\n        approach_bowl(bowl)\n        locate_home_office_table(home_office, table)\n        put_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and put it on the table in the home office.",
        "cdl": " \ndef is_cat_on_table(cat:item, table:item):\n    # Function to check if the cat is on the table\n    symbol is_cat_on_table=exists o: item : (is_cat(o) and on(o, table))\n    return is_cat_on_table\n\nbehavior approach_cat_and_put_on_table(cat:item, table:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        if not inhand(cat):\n            grab(cat)\n        if not on(cat, table):\n            put_on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 241\n        \n        bind table: item where:\n            is_table(table) and surfaces(table) and id[table] == 270 and inside(table, home_office)\n        \n        bind cat: item where:\n            is_cat(cat)\n\n        if not is_cat_on_table(cat, table):\n            approach_cat_and_put_on_table(cat, table)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": "behavior prepare_pot_to_boil_egg(pot:item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior add_egg_to_pot(egg:item, pot:item):\n    body:\n        if not inside(egg, pot):\n            put_inside(egg, pot)\n\nbehavior wait_until_egg_boiled(egg:item, pot:item):\n    body:\n        if inside(egg, pot):\n            observe(pot, \"Observe to ensure the egg is boiled\")\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        \n        bind stove: item where:\n            is_stove(stove)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        prepare_pot_to_boil_egg(pot)\n        place_pot_on_stove(pot, stove)\n        \n        turn_on_stove(stove)\n        \n        add_egg_to_pot(egg, pot)\n        \n        wait_until_egg_boiled(egg, pot)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the milk, turkey, egg, fish, and chicken.",
        "cdl": "\nbehavior locate_items():\n    body:\n        foreach item: item:\n            if not visited(item) and (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)):\n                observe(item, \"Check where the item is located\")\n\nbehavior __goal__():\n    body:\n        locate_items()\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Put them on one of the tables in the dining room.",
        "cdl": " \ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(table: item, item1: item, item2: item):\n    body:\n        if not on(item1, table):\n            grab(item1)\n            walk_to(table)\n            put_on(item1, table)\n        \n        if not on(item2, table):\n            grab(item2)\n            walk_to(table)\n            put_on(item2, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table located in the dining room\n        \n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n        \n        place_items_on_table(table, milk, turkey)\n        place_items_on_table(table, egg, fish)\n        place_items_on_table(table, chicken, turkey)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find chicken suitable for slicing.",
        "cdl": " \ndef is_suitable_chicken(chicken:item):\n    # Function to check if a chicken is suitable for slicing\n    symbol suitable_chicken=exists o: item : (is_food_chicken(o) and cuttable(o))\n    return suitable_chicken\n\nbehavior find_suitable_chicken():\n    body:\n        foreach chicken: item:\n            if is_food_chicken(chicken) and not visited(chicken):\n                observe(chicken,\"Check if the chicken is suitable for slicing\")\n\nbehavior __goal__():\n    body:\n        find_suitable_chicken()\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Slice the chicken into pieces.",
        "cdl": " \nbehavior slice_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        slice_chicken(chicken)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Give the sliced chicken to your cat.",
        "cdl": " \nbehavior give_sliced_chicken_to_cat(cat:item, chicken:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        if not inhand(chicken):\n            grab(chicken)\n        if not close(cat, chicken):\n            put_close(chicken, cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        bind chicken: item where:\n            is_food_chicken(chicken) and cut(chicken)\n        give_sliced_chicken_to_cat(cat, chicken)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior approach_dvd_player_and_turn_on(dvd_player:item):\n    body:\n        if not close_char(char, dvd_player):\n            walk_to(dvd_player)\n        if is_off(dvd_player):\n            switch_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        approach_dvd_player_and_turn_on(dvd_player)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_coffee_table(book, coffee_table, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the table.",
        "cdl": " \nbehavior prepare_cup_of_hot_milk(cup:item, milk:item, microwave:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n        if not close_char(char, milk):\n            walk_to(milk)\n        if not inside(milk, cup):\n            put_inside(milk, cup)\n        if inhand(milk):\n            empty_a_hand()\n        if not close_char(char, microwave):\n            walk_to(microwave)\n        if not inside(cup, microwave):\n            put_inside(cup, microwave)\n        if open(microwave):\n            closes(microwave)\n        if is_off(microwave):\n            switch_on(microwave)\n\nbehavior place_cup_on_table(cup:item, table:item):\n    body:\n        if not close_char(char, table):\n            walk_to(table)\n        if not on(cup, table):\n            put_on(cup, table)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        bind milk: item where:\n            is_milk(milk)\n        bind microwave: item where:\n            is_microwave(microwave)\n        bind table: item where:\n            is_table(table) and id[table] == 270\n        prepare_cup_of_hot_milk(cup, milk, microwave)\n        place_cup_on_table(cup, table)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Find the CD player and locate the CD slot.",
        "cdl": " \ndef has_cd_slot(cd_player:item):\n    # Function to check if a CD player has a CD slot\n    # Assuming that if the CD player can be opened, it has a CD slot\n    return can_open(cd_player)\n\nbehavior find_cd_player_and_cd_slot(cd_player:item):\n    body:\n        if not visited(cd_player):\n            observe(cd_player, \"Check if it has a CD slot\")\n        if has_cd_slot(cd_player):\n            walk_to(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        find_cd_player_and_cd_slot(cd_player)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Insert the CD into the CD player and start playing music.",
        "cdl": " \nbehavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        if not inhand(cd):\n            grab(cd)\n        if not close_char(char, cd_player):\n            walk_to(cd_player)\n        if open(cd_player):\n            closes(cd_player)\n        put_inside(cd, cd_player)\n        if is_off(cd_player):\n            switch_on(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        insert_cd_and_play(cd, cd_player)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the kiwi and add it to the cup.",
        "cdl": " \nbehavior slice_kiwi(kiwi:item):\n    body:\n        if not cut(kiwi) and is_food_kiwi(kiwi):\n            cuts(kiwi)\n\nbehavior add_kiwi_to_cup(kiwi:item, cup:item):\n    body:\n        if cut(kiwi) and not inside(kiwi, cup):\n            put_inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        bind cup: item where:\n            is_cup(cup) and has_water(cup) and id[cup] == 2063\n        slice_kiwi(kiwi)\n        add_kiwi_to_cup(kiwi, cup)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Open the fridge and identify all items inside.",
        "cdl": " \ndef items_in_fridge(fridge:item):\n    # Function to check if there are items inside the fridge\n    symbol inside_fridge=exists o: item : inside(o, fridge)\n    return inside_fridge\n\nbehavior open_and_identify_items(fridge:item):\n    body:\n        if closed(fridge):\n            opens(fridge)\n        if not items_in_fridge(fridge):\n            observe(fridge, \"Identify items inside\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        open_and_identify_items(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw the identified items into the trashcan.",
        "cdl": " \nbehavior throw_items_into_trashcan(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                put_inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        throw_items_into_trashcan(fridge, trashcan)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and pour milk into it.",
        "cdl": " \ndef has_milk_in_cup(cup: item):\n    # Check if the cup contains milk\n    symbol has_milk = exists o: item : (is_milk(o) and inside(o, cup))\n    return has_milk\n\nbehavior grab_milk_and_pour_into_cup(milk: item, cup: item):\n    body:\n        if not inhand(milk):\n            grab(milk)\n        if not close_char(char, cup):\n            walk_to(cup)\n        if not has_milk_in_cup(cup):\n            put_inside(milk, cup)\n        if inhand(milk):\n            empty_a_hand()\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        bind cup: item where:\n            is_cup(cup)\n        grab_milk_and_pour_into_cup(milk, cup)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        if not inside(cup, microwave):\n            put_inside(cup, microwave)\n            # Place the cup inside the microwave\n\nbehavior heat_milk_in_microwave(microwave:item):\n    body:\n        if open(microwave):\n            closes(microwave) # Close the microwave door to start heating\n        if is_off(microwave):\n            switch_on(microwave) # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup with milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        heat_milk_in_microwave(microwave)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the cat. ",
        "cdl": " \nbehavior find_cat(cat:item):\n    body:\n        if not visited(cat):\n            observe(cat, \"Locate the cat\")\n        if not close_char(char, cat):\n            walk_to(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        find_cat(cat)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Touch the cat.",
        "cdl": " \nbehavior touch_the_cat(cat:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        touch(cat)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 161\n\n        bind couch: item where:\n            is_couch(couch) and id[couch] == 192 and inside(couch, home_office)\n\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2082 and on(cat, couch)\n\n        touch_the_cat(cat)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": "\nbehavior locate_jacket_and_prepare_for_washing(jacket:item):\n    body:\n        if not inhand(jacket):\n            if not visited(jacket):\n                observe(jacket, \"Check if I can grab it\")\n            grab(jacket)\n\nbehavior wash_jacket_by_hand(jacket:item):\n    body:\n        if dirty(jacket):\n            wash(jacket)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        locate_jacket_and_prepare_for_washing(jacket)\n        wash_jacket_by_hand(jacket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine_and_start(washing_machine: item, clothes_jacket: item):\n    body:\n        if inhand(clothes_jacket):\n            if not inside(clothes_jacket, washing_machine):\n                put_inside(clothes_jacket, washing_machine)\n            # Ensure the jacket is placed inside the washing machine\n\n        if open(washing_machine):\n            closes(washing_machine) # Close the washing machine door\n        if is_off(washing_machine):\n            switch_on(washing_machine) # Start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket] == 2078\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2041\n\n        load_washing_machine_and_start(washing_machine, clothes_jacket)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find all the bowls and plates that need to be washed.  ",
        "cdl": " \nbehavior locate_bowls_and_plates(bowls_and_plates:item):\n    body:\n        if not visited(bowls_and_plates):\n            observe(bowls_and_plates, \"Check if it is a bowl or plate\")\n\nbehavior __goal__():\n    body:\n        foreach bowls_and_plates: item:\n            if (is_bowl(bowls_and_plates) or is_plate(bowls_and_plates)) and not visited(bowls_and_plates):\n                locate_bowls_and_plates(bowls_and_plates)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the identified bowls and plates using the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \nbehavior approach_sink_for_cleaning(sink:item):\n    body:\n        if not close_char(char, sink):\n            walk_to(sink)\n            \nbehavior scrub_sink(sink:item):\n    body:\n        scrub(sink)\n        \nbehavior rinse_sink(sink:item):\n    body:\n        rinse(sink)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        approach_sink_for_cleaning(sink)\n        scrub_sink(sink)\n        rinse_sink(sink)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \ndef is_light_in_bathroom(light:item):\n    # Function to check if a light is in the bathroom\n    symbol in_bathroom=exists room: item : (is_bathroom(room) and inside(light, room))\n    return in_bathroom\n\nbehavior __goal__():\n    body:\n        bind light: item where:\n            is_light(light) and is_light_in_bathroom(light)\n        # Select the light inside the bathroom\n\n        walk_to(light)\n        # Move close to the light\n\n        if is_off(light):\n            switch_on(light)\n            # Turn on the light if off\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "Boil some rice in a pot.",
        "cdl": " \nbehavior fill_pot_with_water(pot: item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove: item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot: item, stove: item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior add_rice_to_pot(rice: item, pot: item):\n    body:\n        if not inside(rice, pot):\n            put_inside(rice, pot)\n\nbehavior wait_until_rice_cooked(pot: item):\n    body:\n        if has_water(pot):\n            observe(pot, \"Observe to ensure the rice is cooked\")\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        \n        bind stove: item where:\n            is_stove(stove)\n        \n        bind rice: item where:\n            is_food_rice(rice)\n        \n        fill_pot_with_water(pot)\n        add_rice_to_pot(rice, pot)\n        place_pot_on_stove(pot, stove)\n        \n        turn_on_stove(stove)\n        \n        wait_until_rice_cooked(pot)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior approach_bathroom(bathroom:item):\n    body:\n        if not close_char(char, bathroom):\n            walk_to(bathroom)\n\nbehavior open_windows(window:item):\n    body:\n        if closed(window):\n            opens(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        approach_bathroom(bathroom)\n        open_windows(window)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the cat.",
        "cdl": "behavior find_cat(cat:item):\n    body:\n        if not visited(cat):\n            observe(cat, \"Locate the cat\")\n        if not close_char(char, cat):\n            walk_to(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        find_cat(cat)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Touch the cat.",
        "cdl": " \nbehavior touch_cat(cat:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        touch(cat)\n        \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 241\n            \n        bind dresser: item where:\n            is_dresser(dresser) and id[dresser] == 274 and inside(dresser, home_office)\n            \n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2069 and inside(cat, dresser)\n            \n        touch_cat(cat)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge with items inside.",
        "cdl": " \ndef is_fridge_with_items(fridge: item):\n    # Function to check if a fridge has items inside\n    symbol has_items = exists o: item : inside(o, fridge)\n    return has_items\n\nbehavior __goal__():\n    body:\n        foreach fridge: item:\n            if is_fridge(fridge) and not visited(fridge):\n                observe(fridge, \"Check if the fridge contains items\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Transfer all the items from the fridge to the trashcan.",
        "cdl": " \nbehavior transfer_items_to_trashcan(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                put_inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        transfer_items_to_trashcan(fridge, trashcan)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Find your cat and put it on the table in the home office.",
        "cdl": " \nbehavior find_cat_and_place_on_table(cat:item, table:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        if not inhand(cat):\n            grab(cat)\n        if not on(cat, table):\n            put_on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 161\n\n        bind table: item where:\n            is_table(table) and surfaces(table) and inside(table, home_office)\n\n        bind cat: item where:\n            is_cat(cat)\n\n        find_cat_and_place_on_table(cat, table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find the cleaning solution and put it in the dishwasher.",
        "cdl": " \nbehavior find_and_place_cleaning_solution(cleaning_solution:item, dishwasher:item):\n    body:\n        if not inhand(cleaning_solution):\n            grab(cleaning_solution)\n        if not close_char(char, dishwasher):\n            walk_to(dishwasher)\n        if not inside(cleaning_solution, dishwasher):\n            put_inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        \n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        \n        find_and_place_cleaning_solution(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find the dishwasher and put the cleaning solution in it.",
        "cdl": "behavior find_and_place_cleaning_solution(cleaning_solution:item, dishwasher:item):\n    body:\n        if not inhand(cleaning_solution):\n            grab(cleaning_solution)\n        if not close_char(char, dishwasher):\n            walk_to(dishwasher)\n        if not inside(cleaning_solution, dishwasher):\n            put_inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        \n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        \n        find_and_place_cleaning_solution(cleaning_solution, dishwasher)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Place the bowls and plates in the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior find_spectacles_and_place_on_coffee_table(spectacles:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(spectacles):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, spectacles):\n                observe(spectacles, \"Check if the spectacles are in sight\")\n            grab(spectacles)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(spectacles, coffee_table):\n            put_on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n        \n        bind spectacles: item where:\n            is_spectacles(spectacles)\n\n        find_spectacles_and_place_on_coffee_table(spectacles, coffee_table, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_table(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_table(book, coffee_table, home_office)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior find_and_place_cleaning_solution(cleaning_solution: item, dishwasher: item):\n    body:\n        if not inhand(cleaning_solution):\n            grab(cleaning_solution)\n        if not close_char(char, dishwasher):\n            walk_to(dishwasher)\n        if not inside(cleaning_solution, dishwasher):\n            put_inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        \n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n\n        find_and_place_cleaning_solution(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates using the dishwasher.",
        "cdl": "behavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        if not inside(dish, dishwasher):\n            put_inside(dish, dishwasher)\n            # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        if open(dishwasher):\n            closes(dishwasher) # Close the dishwasher door\n        if is_off(dishwasher):\n            switch_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n                \n        start_dishwasher(dishwasher) # Start the washing cycle of the dishwasher"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use the pot to boil some water.",
        "cdl": " \nbehavior fill_pot_with_water(pot:item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        bind stove: item where:\n            is_stove(stove)\n        fill_pot_with_water(pot)\n        place_pot_on_stove(pot, stove)\n        turn_on_stove(stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Find the ice cream and the jam.",
        "cdl": " \ndef has_ice_cream_and_jam_around(fridge:item):\n    # Function to check if there is ice cream and jam around the fridge\n    symbol has_ice_cream=exists o: item : ((is_food_ice_cream(o) or is_food_jam(o)) and close(o, fridge))\n    return has_ice_cream\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Select fridge with ID 126\n\n        if exists o: item : close(o, fridge) and has_ice_cream_and_jam_around(fridge):\n            # Check if the ice cream and jam are around the fridge based on the available information\n            observe(fridge, \"Check where the ice cream and jam are located\")\n            # Observe whether the items are close to the fridge\n        else:\n            # If the ice cream and jam are not found, initiate exploration to locate them\n            foreach o: item:\n                if (is_food_ice_cream(o) or is_food_jam(o)) and not visited(o):\n                    observe(o, \"Check if the item is ice cream or jam\")\n                    # Observe each unvisited food item to determine its type\n "
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Scoop the ice cream into a bowl and add some jam on top.",
        "cdl": " \nbehavior scoop_ice_cream_and_add_jam(ice_cream:item, jam:item, bowl:item):\n    body:\n        if not inhand(ice_cream):\n            grab(ice_cream)\n        if not close_char(char, bowl):\n            walk_to(bowl)\n        if not inside(ice_cream, bowl):\n            put_inside(ice_cream, bowl)\n        if inhand(ice_cream):\n            empty_a_hand()\n        \n        if not inhand(jam):\n            grab(jam)\n        if not on(jam, ice_cream):\n            put_on(jam, ice_cream)\n\nbehavior __goal__():\n    body:\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream) and id[ice_cream] == 2097\n        \n        bind jam: item where:\n            is_food_jam(jam) and id[jam] == 2098\n        \n        bind bowl: item where:\n            is_bowl(bowl)\n        \n        scoop_ice_cream_and_add_jam(ice_cream, jam, bowl)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge with items in it.",
        "cdl": " \ndef fridge_with_items(fridge:item):\n    # Function to check if a fridge contains any items\n    symbol has_items=exists o: item : inside(o, fridge)\n    return has_items\n\nbehavior __goal__():\n    body:\n        foreach fridge: item:\n            if is_fridge(fridge) and not visited(fridge):\n                observe(fridge, \"Check if the fridge contains any items\")\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Dispose of all the items from the fridge into the trashcan.",
        "cdl": " \nbehavior transfer_items_to_trashcan(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                put_inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        transfer_items_to_trashcan(fridge, trashcan)\n "
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item):\n    body:\n        if not cut(chicken):\n            cuts(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        slice_chicken(chicken)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Give the sliced chicken to the cat.",
        "cdl": " \nbehavior give_sliced_chicken_to_cat(cat:item, chicken:item):\n    body:\n        if not close_char(char, cat):\n            walk_to(cat)\n        if not inhand(chicken):\n            grab(chicken)\n        if not close(cat, chicken):\n            put_close(chicken, cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        bind chicken: item where:\n            is_food_chicken(chicken) and cut(chicken)\n        give_sliced_chicken_to_cat(cat, chicken)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw it into the toilet.",
        "cdl": " \nbehavior approach_toilet_paper_and_toilet(toilet_paper:item, toilet:item):\n    body:\n        if not close_char(char, toilet_paper):\n            walk_to(toilet_paper)\n        if not inhand(toilet_paper):\n            grab(toilet_paper)\n        if not close_char(char, toilet):\n            walk_to(toilet)\n\nbehavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):\n    body:\n        wipe(toilet)\n\nbehavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):\n    body:\n        put_inside(toilet_paper, toilet)\n\nbehavior __goal__():\n    body:\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 302\n        approach_toilet_paper_and_toilet(toilet_paper, toilet)\n        wipe_toilet_with_paper(toilet, toilet_paper)\n        throw_toilet_paper_into_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": " \nbehavior find_book(book:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                walk_to(book)\n            observe(book, \"Check if the book is in sight\")\n        grab(book)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book(book, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put it on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, table):\n            walk_to(table)\n        if not on(book, table):\n            put_on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind table: item where:\n            is_table(table) and surfaces(table) and inside(table, home_office)\n\n        bind book: item where:\n            is_book(book) and inhand(book)\n\n        place_book_on_table(book, table, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Turn on the light in the home office.",
        "cdl": "behavior turn_on_light_in_home_office(light:item, home_office:item):\n    body:\n        if not visited(light):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home office\")\n            if not close_char(char, light):\n                observe(light, \"Check if this is the light in the home office\")\n        if is_off(light):\n            switch_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind light: item where:\n            is_light(light) and has_switch(light) and inside(light, home_office)\n\n        turn_on_light_in_home_office(light, home_office)"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and then toast it.",
        "cdl": " \nbehavior slice_bread(bread:item):\n    body:\n        if not cut(bread):\n            cuts(bread)\n\nbehavior toast_bread(toaster:item, bread:item):\n    body:\n        if inside(bread, toaster) and is_off(toaster):\n            switch_on(toaster)\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) and cuttable(bread)\n        bind toaster: item where:\n            is_toaster(toaster)\n        \n        slice_bread(bread)\n        \n        if not inside(bread, toaster):\n            put_inside(bread, toaster)\n        \n        toast_bread(toaster, bread)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": "behavior slice_bread(bread:item):\n    body:\n        if not cut(bread):\n            cuts(bread)\n\nbehavior toast_bread(toaster:item, bread:item):\n    body:\n        if inside(bread, toaster) and is_off(toaster):\n            switch_on(toaster)\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) and cuttable(bread)\n        bind toaster: item where:\n            is_toaster(toaster)\n        \n        slice_bread(bread)\n        \n        if not inside(bread, toaster):\n            put_inside(bread, toaster)\n        \n        toast_bread(toaster, bread)"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": "behavior approach_remote_control_and_turn_on_tv(remote_control:item, television:item):\n    body:\n        if not close_char(char, remote_control):\n            walk_to(remote_control)\n        if not visited(remote_control):\n            observe(remote_control, \"Check if remote control can be used to turn on the TV\")\n        touch(remote_control)\n        # Touch the remote control to attempt to turn on the TV\n        if is_off(television):\n            switch_on(television)\n            # Turn on the TV if its off\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        bind television: item where:\n            is_television(television)\n        approach_remote_control_and_turn_on_tv(remote_control, television)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Locate the CD player.",
        "cdl": " \nbehavior locate_cd_player(cd_player:item):\n    body:\n        if not visited(cd_player):\n            walk_to(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        locate_cd_player(cd_player)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Insert the CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_and_play_music(cd:item, cd_player:item):\n    body:\n        if not inhand(cd):\n            grab(cd)\n        if not close_char(char, cd_player):\n            walk_to(cd_player)\n        if closed(cd_player):\n            opens(cd_player)\n        put_inside(cd, cd_player)\n        if is_off(cd_player):\n            switch_on(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        insert_cd_and_play_music(cd, cd_player)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": " \nbehavior prepare_pot_to_boil_egg(pot:item):\n    body:\n        if not has_water(pot):\n            get_water(pot)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        if is_off(stove) and has_switch(stove):\n            switch_on(stove)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        if not on(pot, stove):\n            put_on(pot, stove)\n\nbehavior add_egg_to_pot(egg:item, pot:item):\n    body:\n        if not inside(egg, pot):\n            put_inside(egg, pot)\n\nbehavior wait_until_egg_boiled(egg:item, pot:item):\n    body:\n        if inside(egg, pot):\n            observe(pot, \"Observe to ensure the egg is boiled\")\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        \n        bind stove: item where:\n            is_stove(stove)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        prepare_pot_to_boil_egg(pot)\n        place_pot_on_stove(pot, stove)\n        \n        turn_on_stove(stove)\n        \n        add_egg_to_pot(egg, pot)\n        \n        wait_until_egg_boiled(egg, pot)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home office\")\n            if not close_char(char, book):\n                observe(book, \"Check if the book is in sight\")\n            grab(book)\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book)\n\n        find_book_and_put_on_coffee_table(book, coffee_table, home_office)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "\nbehavior open_window(window:item, home_office:item):\n    body:\n        if not visited(window):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, window):\n                observe(window, \"Check if the window is in sight\")\n        if closed(window):\n            opens(window)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        open_window(window, home_office)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Fill a cup with water.",
        "cdl": " \nbehavior grab_a_cup(cup:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n\nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        if not has_water(cup):\n            if is_off(faucet):\n                switch_on(faucet)\n            get_water(cup)\n            if is_on(faucet):\n                switch_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        bind faucet: item where:\n            is_faucet(faucet)\n        grab_a_cup(cup)\n        fill_cup_with_water(cup, faucet)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water.",
        "cdl": " \nbehavior prepare_bowl_of_water(bowl: item, faucet: item):\n    body:\n        if not inhand(bowl):\n            grab(bowl)\n        if not close_char(char, faucet):\n            walk_to(faucet)\n        if is_off(faucet):\n            switch_on(faucet)\n        if not has_water(bowl):\n            get_water(bowl)\n        if is_on(faucet):\n            switch_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and recipient(bowl)\n        bind faucet: item where:\n            is_faucet(faucet)\n        prepare_bowl_of_water(bowl, faucet)\n\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl of water on the table in the home office.",
        "cdl": " \nbehavior put_bowl_on_table(bowl:item, table:item):\n    body:\n        if inhand(bowl):\n            put_on(bowl, table)\n\nbehavior locate_home_office_table(home_office:item, table:item):\n    body:\n        if not visited(table):\n            if not close_char(char, home_office):\n                walk_to(home_office)\n            if not inside_char(char, home_office):\n                observe(home_office, \"Check if I am inside the home_office\")\n            if not close_char(char, table):\n                walk_to(table)\n\nbehavior approach_bowl(bowl:item):\n    body:\n        if not close_char(char, bowl):\n            walk_to(bowl)\n        if not inhand(bowl):\n            grab(bowl)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and surfaces(table) and inside(table, home_office)\n\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2071 and has_water(bowl)\n\n        approach_bowl(bowl)\n        locate_home_office_table(home_office, table)\n        put_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find your cat and put it on the table in the home office.",
        "cdl": " \nbehavior find_cat_and_place_on_table(cat:item, table:item):\n    body:\n        if not visited(cat):\n            walk_to(cat)\n        if not inhand(cat):\n            grab(cat)\n        if not close_char(char, table):\n            walk_to(table)\n        if not on(cat, table):\n            put_on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office] == 319\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        bind cat: item where:\n            is_cat(cat)\n        find_cat_and_place_on_table(cat, table)\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": " \nbehavior approach_remote_control_and_turn_on_tv(remote_control:item, television:item):\n    body:\n        if not close_char(char, remote_control):\n            walk_to(remote_control)\n        if not visited(remote_control):\n            observe(remote_control, \"Check if remote control can be used to turn on the TV\")\n        touch(remote_control)\n        # Touch the remote control to attempt to turn on the TV\n        if is_off(television):\n            switch_on(television)\n            # Turn on the TV if its off\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        bind television: item where:\n            is_television(television)\n        approach_remote_control_and_turn_on_tv(remote_control, television)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": "behavior approach_sink_for_cleaning(sink:item):\n    body:\n        if not close_char(char, sink):\n            walk_to(sink)\n            \nbehavior scrub_sink(sink:item):\n    body:\n        scrub(sink)\n        \nbehavior rinse_sink(sink:item):\n    body:\n        rinse(sink)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        approach_sink_for_cleaning(sink)\n        scrub_sink(sink)\n        rinse_sink(sink)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \ndef is_light_in_bathroom(light:item):\n    # Function to check if a light is in the bathroom\n    symbol in_bathroom=exists room: item : (is_bathroom(room) and inside(light, room))\n    return in_bathroom\n\nbehavior __goal__():\n    body:\n        bind light: item where:\n            is_light(light) and is_light_in_bathroom(light)\n        # Select the light inside the bathroom\n\n        walk_to(light)\n        # Move close to the light\n\n        if is_off(light):\n            switch_on(light)\n            # Turn on the light if off\n "
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": " \nbehavior find_cup(cup:item):\n    body:\n        if not inhand(cup):\n            grab(cup)\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        if not inside(milk, cup):\n            put_inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        bind milk: item where:\n            is_milk(milk)\n        find_cup(cup)\n        fill_cup_with_milk(cup, milk)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        if not inside(cup, microwave):\n            put_inside(cup, microwave)\n            # Place the cup inside the microwave\n\nbehavior heat_milk_in_microwave(microwave:item):\n    body:\n        if open(microwave):\n            closes(microwave) # Close the microwave door\n        if is_off(microwave):\n            switch_on(microwave) # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select the cup with milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        heat_milk_in_microwave(microwave)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the household.",
        "cdl": " \nbehavior find_book(book:item):\n    body:\n        if not visited(book):\n            observe(book, \"Locate the book in the household\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        find_book(book)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior approach_coffee_table_and_place_book(book:item, coffee_table:item, home_office:item):\n    body:\n        if not visited(book):\n            walk_to(book)\n            grab(book)\n        if not close_char(char, home_office):\n            walk_to(home_office)\n        if not inside_char(char, home_office):\n            observe(home_office, \"Check if I am inside the home_office\")\n        if not close_char(char, coffee_table):\n            walk_to(coffee_table)\n        if not on(book, coffee_table):\n            put_on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n\n        bind book: item where:\n            is_book(book) and id[book] == 2136\n\n        approach_coffee_table_and_place_book(book, coffee_table, home_office)\n"
    }
]