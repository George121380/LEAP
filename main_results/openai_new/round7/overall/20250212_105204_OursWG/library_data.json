[
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.  ",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": "\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        achieve is_on(light)\n        # Turn on the light in the home office\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a lemon and wash it.",
        "cdl": " \nbehavior find_and_clean_lemon(lemon:item, sink:item):\n    body:\n        achieve_once inhand(lemon) # Temporarily hold the lemon for washing\n        achieve_once inside(lemon, sink) # Put the lemon in the sink for washing\n        wash(lemon) # Wash the lemon\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select a lemon\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        find_and_clean_lemon(lemon, sink)\n        # Find the lemon and wash it in the sink\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Cut the lemon and squeeze the juice into a cup.",
        "cdl": " \nbehavior cut_lemon(lemon:item, knife:item):\n    body:\n        achieve_once cut(lemon)\n\nbehavior squeeze_juice(lemon:item, cup:item):\n    body:\n        achieve_once inside(lemon, cup)\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select the lemon\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        cut_lemon(lemon, knife)\n        squeeze_juice(lemon, cup)\n\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the cat.  ",
        "cdl": " \ndef find_cat(cat:item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance= is_cat(cat)\n    return is_cat_instance\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (find_cat(cat) and not visited(cat)):\n            # If we have already found an unvisited cat, move close to it\n            bind cat: item where:\n                find_cat(cat) and not visited(cat)\n            achieve close_char(char, cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Gently wash the cat with appropriate pet-safe soap or shampoo.",
        "cdl": " \nbehavior wash_cat(cat:item, soap:item, water_source:item):\n    body:\n        achieve_once has_water(cat) # Wet the cat for washing\n        achieve_once inhand(soap) # Temporarily hold the soap to wash the cat\n        wash(cat) # Wash the cat with the soap\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2055\n        # Select the specific cat by its ID\n\n        bind soap: item where:\n            is_soap(soap) # Select an appropriate soap\n        \n        bind water_source: item where:\n            is_sink(water_source) or is_shower(water_source) or is_bathtub(water_source) # Select a water source for washing\n\n        wash_cat(cat, soap, water_source)\n        # Wash the cat with the selected soap and water source\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find your cat and touch it.",
        "cdl": "\nbehavior find_cat_and_touch(cat:item):\n    body:\n        achieve close_char(char, cat) # Approach the cat\n        touch(cat) # Touch the cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and not visited(cat)):\n            # If we found an unvisited cat, move close and touch it\n            bind cat: item where:\n                is_cat(cat) and not visited(cat)\n            find_cat_and_touch(cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the clothes in the washing machine.",
        "cdl": " \nbehavior start_washing(clothes:item, washing_machine:item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket for clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Load all dirty clothes from the basket into the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                start_washing(clothes, washing_machine)\n\n        operate_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": "\nbehavior boil_water_in_pot(pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n        \n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_water_in_pot(pot, stove)\n        # Use the pot to boil water on the stove\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find the bathroom sink.",
        "cdl": " \ndef find_bathroom_sink(bathroom:item):\n    # Function to determine if a given bathroom contains a sink\n    symbol has_sink=exists sink: item : (is_sink(sink) and inside(sink, bathroom))\n    return has_sink\n\nbehavior __goal__():\n    body:\n        if exists bathroom: item : (is_bathroom(bathroom) and find_bathroom_sink(bathroom)):\n            # If a bathroom with a sink is found, move closer to it\n            bind bathroom: item where:\n                is_bathroom(bathroom) and find_bathroom_sink(bathroom)\n            bind sink: item where:\n                is_sink(sink) and inside(sink, bathroom)\n            achieve close_char(char, sink)\n        else:\n            # Check all bathrooms to find one with a sink if not found\n            foreach bathroom: item:\n                if is_bathroom(bathroom) and not visited(bathroom):\n                    observe(bathroom, \"Check if there is a sink in the bathroom\")\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water.",
        "cdl": " \nbehavior fill_sink_with_water(sink:item):\n    body:\n        achieve has_water(sink)\n        # Fill the sink with water\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink]==19\n        # Select the sink with ID 19\n\n        fill_sink_with_water(sink)\n        # Fill the selected sink with water\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "3. Add soap to create soapy water.",
        "cdl": " \nbehavior add_soap_to_sink(soap:item, sink:item):\n    body:\n        achieve_once inhand(soap) # Temporarily hold the soap\n        achieve_once has_water(sink) # Ensure the sink is filled with water\n        achieve inside(soap, sink) # Add soap into the sink\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap) and inhand(soap)\n        # Select soap that is currently in hand\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        add_soap_to_sink(soap, sink)\n        # Add the soap to the sink\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Bring the milk and egg to the dining room and place them on a table.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior move_milk_and_egg_to_table(milk:item, egg:item, table:item):\n    body:\n        # Place milk and egg on a table in the dining room\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Find the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Find the egg\n\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        # Temporarily hold the milk\n\n        achieve_once inhand(egg)\n        # Temporarily hold the egg\n\n        move_milk_and_egg_to_table(milk, egg, table)\n        # Move milk and egg to a table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": "\nbehavior place_items_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        place_items_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Put the pizza and hamburger on a plate.",
        "cdl": "\nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate) # Place the food on the plate\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza\n        \n        place_food_on_plate(hamburger, plate)\n        place_food_on_plate(pizza, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Heat the plate with the pizza and hamburger in the microwave.",
        "cdl": "\ndef in_kitchen(table: item):\n    symbol in_kitchen = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_kitchen\n\nbehavior heat_plate_with_food(plate: item, microwave: item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with food inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2152\n        # Select the plate with ID 2152\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_plate_with_food(plate, microwave)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Put the heated plate on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior relocate_plate_to_dining_room_table(plate: item, table: item):\n    body:\n        achieve_once on(plate, table) # Place the heated plate on the dining room table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2152\n        # Select the heated plate\n\n        achieve_once inhand(plate) # Temporarily hold the plate\n        relocate_plate_to_dining_room_table(plate, table)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Place the clothes from the basket into the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2040\n        # Select the basket for clothes with a specified ID\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": "\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        achieve_once inhand(soap)\n        # Temporarily hold the soap\n\n        achieve_once open(washing_machine)\n        # Ensure the washing machine is open\n\n        achieve_once inside(soap, washing_machine)\n        # Add the soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine to wash the clothes.",
        "cdl": "\nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2041\n        # Select the washing machine with ID 2041\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the clothes\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the house.",
        "cdl": "\ndef find_all_rooms(room:item):\n    # Function to determine if a specific item is a room\n    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_room_instance\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if find_all_rooms(room) and not visited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. For each room, ensure that at least one light is turned on.",
        "cdl": " \ndef has_light_in_room(room:item):\n    # Function to check if there is a light in a specified room\n    symbol has_light=exists light: item : (is_light(light) and inside(light, room))\n    return has_light\n\nbehavior ensure_light_on_in_room(room:item):\n    body:\n        if has_light_in_room(room):\n            bind light: item where:\n                is_light(light) and inside(light, room)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Ensure there is at least one light turned on in each room\n                ensure_light_on_in_room(room)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior wash_jacket(jacket:item, sink:item):\n    body:\n        achieve_once has_water(jacket) # Ensure the jacket is wet for washing\n        wash(jacket) # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        wash_jacket(jacket, sink)\n        # Hand wash the jacket in the sink\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \ndef is_target_item_jacket(jacket:item):\n    # Function to check if a given item is the target jacket\n    symbol is_clothes_jacket_instance= is_clothes_jacket(jacket)\n    return is_clothes_jacket_instance\n\nbehavior place_jacket_in_washing_machine(jacket: item, washing_machine: item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n\nbehavior operate_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_target_item_jacket(jacket) and id[jacket] == 2047\n        # Select the jacket with ID 2047\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        place_jacket_in_washing_machine(jacket, washing_machine)\n        # Place the jacket in the washing machine\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \nbehavior find_a_cup(cup:item):\n    body:\n        achieve close_char(char, cup)\n\nbehavior __goal__():\n    body:\n        if exists cup: item : (is_cup(cup) and not visited(cup)):\n            # If a cup is found, move closer to it\n            bind cup: item where:\n                is_cup(cup) and not visited(cup)\n            find_a_cup(cup)\n        else:\n            # Check all items to find a cup if not found initially\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Find the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Slice the kiwi and add it to the cup.",
        "cdl": " \nbehavior cut_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item):\n    body:\n        achieve cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        cut_kiwi_and_add_to_cup(kiwi, cup, knife)\n        # Cut the kiwi and add it to the cup\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \ndef is_bathroom_window(window: item):\n    # Function to check if a window is in the bathroom\n    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))\n    return is_in_bathroom\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):\n            # If a bathroom window is found but not visited, move to open it\n            bind window: item where:\n                is_window(window) and is_bathroom_window(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a bathroom window if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the bathroom\")\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        slice_chicken(chicken, cutting_board, knife)\n        # Slice the chicken\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the fish and other necessary ingredients for the soup.",
        "cdl": " \ndef is_fish_or_ingredient(item: item):\n    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce, etc)\n    symbol is_necessary= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)\n    return is_necessary\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_fish_or_ingredient(item) and not visited(item):\n                # Check all unvisited items to find fish and other necessary ingredients\n                observe(item, \"Check if this is a fish or necessary ingredient for the soup\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Prepare the fish and ingredients (clean and cut them as needed).",
        "cdl": " \ndef is_ingredient(item:item):\n    # Check if the item is a necessary ingredient for the soup\n    symbol is_ingredient= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)\n    return is_ingredient\n\nbehavior prepare_ingredient(item:item, cutting_board:item, knife:item):\n    body:\n        achieve_once clean(item) # Clean the ingredient\n        achieve_once on(item, cutting_board) # Place the ingredient on a cutting board\n        if cuttable(item):\n            # If the item is cuttable, proceed with cutting\n            achieve cut(item)\n\nbehavior __goal__():\n    body:\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for cutting\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board to use for preparation\n\n        foreach item: item:\n            if is_ingredient(item):\n                # Prepare each item that is a necessary ingredient\n                prepare_ingredient(item, cutting_board, knife)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a suitable cup and fill it with water.",
        "cdl": " \ndef has_water_filled(cup:item):\n    # Function to check if the cup contains water\n    symbol has_water= has_water(cup)\n    return has_water\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\nbehavior __goal__():\n    body:\n        # Bind to a suitable cup\n        bind cup: item where:\n            is_cup(cup)\n\n        # Bind to a sink\n        bind sink: item where:\n            is_sink(sink)\n\n        # Fill the cup with water\n        if not has_water_filled(cup):\n            fill_cup_with_water(cup, sink)\n\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add the slices into the cup of water.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item):\n    body:\n        achieve cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        slice_kiwi_and_add_to_cup(kiwi, cup)\n        # Slice the kiwi and add it to the cup\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the specific book you need.",
        "cdl": " \ndef is_target_book(book: item):\n    # Check if the item is the specific book needed\n    symbol is_book_instance = is_book(book)\n    return is_book_instance\n\nbehavior locate_book(book: item):\n    body:\n        achieve close_char(char, book)\n        # Move close to the book\n\nbehavior __goal__():\n    body:\n        if exists book: item : (is_target_book(book) and not visited(book)):\n            # If the specific book is found and not yet visited\n            bind book: item where:\n                is_target_book(book) and not visited(book)\n            locate_book(book)\n        else:\n            # If the book isnt found yet, explore the location\n            foreach book: item:\n                if is_target_book(book) and not visited(book):\n                    observe(book, \"Locate the specific book needed\")\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book] == 2091\n        # Select the specific book with ID 2091\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \ndef is_bathroom_window(window: item):\n    # Function to check if a window is in the bathroom\n    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))\n    return is_in_bathroom\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):\n            # If a bathroom window is found but not visited, move to open it\n            bind window: item where:\n                is_window(window) and is_bathroom_window(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a bathroom window if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the bathroom\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger.",
        "cdl": " \ndef find_food(food:item):\n    # Function to check if the item is a pizza or hamburger\n    symbol is_target_food= is_food_pizza(food) or is_food_hamburger(food)\n    return is_target_food\n\nbehavior __goal__():\n    body:\n        foreach food: item:\n            if find_food(food) and not visited(food):\n                # Check all unvisited items to find pizza and hamburger\n                observe(food, \"Check if this item is pizza or hamburger\")\n "
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.",
        "cdl": "\nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate) # Place the food on the plate\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza\n        \n        place_food_on_plate(hamburger, plate)\n        place_food_on_plate(pizza, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat them in the microwave.",
        "cdl": "\ndef in_microwave(item: item):\n    # Function to check if the item is inside the microwave\n    symbol inside_microwave = exists microwave: item : (is_microwave(microwave) and inside(item, microwave))\n    return inside_microwave\n\ndef has_plate_inside_microwave():\n    # Check if the plate with pizza and hamburger is inside the microwave\n    symbol has_plate = exists plate: item : (is_plate(plate) and in_microwave(plate))\n    return has_plate\n\nbehavior heat_plate_with_food(microwave: item, plate: item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with food inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        if not has_plate_inside_microwave():\n            bind microwave: item where:\n                is_microwave(microwave)\n            # Select the microwave\n\n            bind plate: item where:\n                is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)\n            # Select the specific plate with pizza and hamburger\n\n            heat_plate_with_food(microwave, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Put the plate on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior put_plate_on_table(plate:item, table:item):\n    body:\n        achieve_once on(plate, table) # Place the plate on the dining room table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        bind plate: item where:\n            is_plate(plate) and movable(plate)\n        # Select the movable plate\n\n        achieve_once inhand(plate) # Temporarily hold the plate\n        put_plate_on_table(plate, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the household.",
        "cdl": " \ndef find_all_rooms(room:item):\n    # Function to determine if a specific item is a room\n    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_room_instance\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if find_all_rooms(room) and not visited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check each room to determine if a light is on.",
        "cdl": "def is_light_turned_on_in_room(room:item):\n    # Check if there is a light turned on in the specified room\n    symbol light_on=exists light: item : (is_light(light) and inside(light, room) and is_on(light))\n    return light_on\n\nbehavior ensure_light_checked_in_room(room:item):\n    body:\n        if not is_light_turned_on_in_room(room):\n            # If no light is found to be turned on in the room, check each unvisited light\n            foreach light: item:\n                if is_light(light) and inside(light, room) and not visited(light):\n                    observe(light, \"Check the light status in the room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms identified in the household\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                ensure_light_checked_in_room(room)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "3. Turn on a light in any room where all lights are off.",
        "cdl": "\ndef has_all_lights_off(room:item):\n    # Function to check if all lights in a specified room are off\n    symbol all_off=exists light: item : (is_light(light) and inside(light, room) and is_off(light))\n    return all_off\n\nbehavior turn_on_light_in_room(room:item):\n    body:\n        if has_all_lights_off(room):\n            # Turn on any light if all lights in the room are off\n            bind light: item where:\n                is_light(light) and inside(light, room) and is_off(light)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms to ensure at least one light is on\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Ensure each room has at least one light turned on\n                turn_on_light_in_room(room)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify all the bowls and plates that need washing.",
        "cdl": " \ndef is_bowl_or_plate(item: item):\n    # Function to check if an item is a bowl or plate\n    symbol is_target_item = is_bowl(item) or is_plate(item)\n    return is_target_item\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_bowl_or_plate(item) and not visited(item):\n                # Check all unvisited items to identify bowls and plates that need washing\n                observe(item, \"Check if this is a bowl or plate that needs washing\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the identified bowls and plates into the dishwasher. ",
        "cdl": " \nbehavior load_dishwasher(obj:item, dishwasher:item):\n    body:\n        achieve_once inside(obj, dishwasher)\n        # Place the bowl or plate into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n        \n        bind bowl_1: item where:\n            is_bowl(bowl_1) and id[bowl_1] == 2095\n        # Select bowl_2095\n\n        bind bowl_2: item where:\n            is_bowl(bowl_2) and id[bowl_2] == 2096\n        # Select bowl_2096\n\n        bind bowl_3: item where:\n            is_bowl(bowl_3) and id[bowl_3] == 2097\n        # Select bowl_2097\n\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2105\n        # Select plate_2105\n\n        load_dishwasher(bowl_1, dishwasher)\n        load_dishwasher(bowl_2, dishwasher)\n        load_dishwasher(bowl_3, dishwasher)\n        load_dishwasher(plate, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Run the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior run_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve_once is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 143\n        # Select the dishwasher with ID 143\n\n        run_dishwasher(dishwasher)\n        # Run the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room and place the milk and egg on it.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(egg)\n        # Temporarily hold the milk and egg\n\n        place_milk_and_egg_on_table(milk, egg, table)\n        # Place the milk and egg on the table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": "behavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior place_items_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        place_items_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": " \nbehavior boil_egg(egg:item, pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once inside(egg, pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_egg(egg, pot, stove)\n        # Boil the egg in the pot on the stove\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": " \ndef find_cup_with_water(cup:item):\n    # Function to check if the cup contains water\n    symbol has_water= has_water(cup)\n    return has_water\n\nbehavior get_a_cup_of_water(cup: item, sink: item):\n    body:\n        achieve_once inhand(cup)\n        # Hold the cup temporarily\n        achieve has_water(cup)\n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        if not find_cup_with_water(cup):\n            get_a_cup_of_water(cup, sink)\n\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player\n\n        achieve is_on(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": " \ndef is_window_in_home_office(window:item):\n    # Function to check if a window is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))\n    return in_home_office\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_window_in_home_office(window) and not visited(window)):\n            # If a window in the home office is found and not yet visited, open it\n            bind window: item where:\n                is_window(window) and is_window_in_home_office(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a window in the home office if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the home office\")\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        slice_chicken(chicken, cutting_board, knife)\n        # Slice the chicken\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find milk, turkey, egg, fish, and chicken.",
        "cdl": " \ndef is_target_item(item:item):\n    # Function to check if the item is milk, turkey, egg, fish, or chicken\n    symbol is_target= is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)\n    return is_target\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_target_item(item) and not visited(item):\n                # Check all unvisited items to find milk, turkey, egg, fish, and chicken\n                observe(item, \"Identify if this item is milk, turkey, egg, fish, or chicken\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n        \n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(turkey)\n        # Temporarily hold the milk and turkey\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room\n "
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Touch the remote control to turn on the TV.",
        "cdl": "behavior touch_remote_control(remote:item):\n    body:\n        achieve_once close_char(char, remote) # Approach the remote control\n        touch(remote) # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote: item where:\n            is_remote_control(remote)\n        # Select the remote control\n\n        touch_remote_control(remote)\n        # Touch the remote control to turn on the TV"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \nbehavior find_a_cup(cup:item):\n    body:\n        achieve close_char(char, cup)\n\nbehavior __goal__():\n    body:\n        if exists cup: item : (is_cup(cup) and not visited(cup)):\n            # If a cup is found, move closer to it\n            bind cup: item where:\n                is_cup(cup) and not visited(cup)\n            find_a_cup(cup)\n        else:\n            # Check all items to find a cup if not found initially\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Find the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Pour milk into the cup.",
        "cdl": " \nbehavior pour_milk_into_cup(milk: item, cup: item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        pour_milk_into_cup(milk, cup)\n        # Pour milk into the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Heat the milk in the microwave.",
        "cdl": " \nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the specific cup with ID 2087\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the house.",
        "cdl": "def is_target_room(room:item):\n    # Function to determine if a specific item is a target room we want to identify\n    symbol is_target= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_target\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_target_room(room) and not visited(room):\n                observe(room, \"Identify the room\")"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check the lights in each room to ensure at least one is on. Turn on a light if none are on.",
        "cdl": " \ndef is_light_turned_on_in_room(room:item):\n    # Checks if there is any light turned on in the specified room\n    symbol light_on = exists light: item : (is_light(light) and inside(light, room) and is_on(light))\n    return light_on\n\nbehavior ensure_light_in_room(room:item):\n    body:\n        if exists light: item : (is_light(light) and inside(light, room)):\n            bind light: item where:\n                is_light(light) and inside(light, room) and not is_on(light)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms identified in the household\n            if not is_light_turned_on_in_room(room) and (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)):\n                ensure_light_in_room(room)\n"
    }
]