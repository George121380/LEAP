############################################################
When the sub-task is: 1. Find the book and put it on the table in the home office.  
A successful representation:
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table in the home office

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light inside the home office

        achieve is_on(light)
        # Turn on the light in the home office

############################################################
When the sub-task is: 1. Find a lemon and wash it.
A successful representation:
 
behavior find_and_clean_lemon(lemon:item, sink:item):
    body:
        achieve_once inhand(lemon) # Temporarily hold the lemon for washing
        achieve_once inside(lemon, sink) # Put the lemon in the sink for washing
        wash(lemon) # Wash the lemon

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_clean_lemon(lemon, sink)
        # Find the lemon and wash it in the sink

############################################################
When the sub-task is: 2. Cut the lemon and squeeze the juice into a cup.
A successful representation:
 
behavior cut_lemon(lemon:item, knife:item):
    body:
        achieve_once cut(lemon)

behavior squeeze_juice(lemon:item, cup:item):
    body:
        achieve_once inside(lemon, cup)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        cut_lemon(lemon, knife)
        squeeze_juice(lemon, cup)


############################################################
When the sub-task is: 1. Find the cat.  
A successful representation:
 
def find_cat(cat:item):
    # Function to determine if a given item is the cat
    symbol is_cat_instance= is_cat(cat)
    return is_cat_instance

behavior __goal__():
    body:
        if exists cat: item : (find_cat(cat) and not visited(cat)):
            # If we have already found an unvisited cat, move close to it
            bind cat: item where:
                find_cat(cat) and not visited(cat)
            achieve close_char(char, cat)
        else:
            # Check all items to find the cat if not found initially
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the cat")

############################################################
When the sub-task is: 2. Gently wash the cat with appropriate pet-safe soap or shampoo.
A successful representation:
 
behavior wash_cat(cat:item, soap:item, water_source:item):
    body:
        achieve_once has_water(cat) # Wet the cat for washing
        achieve_once inhand(soap) # Temporarily hold the soap to wash the cat
        wash(cat) # Wash the cat with the soap

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the specific cat by its ID

        bind soap: item where:
            is_soap(soap) # Select an appropriate soap
        
        bind water_source: item where:
            is_sink(water_source) or is_shower(water_source) or is_bathtub(water_source) # Select a water source for washing

        wash_cat(cat, soap, water_source)
        # Wash the cat with the selected soap and water source

############################################################
When the sub-task is: Find your cat and touch it.
A successful representation:

behavior find_cat_and_touch(cat:item):
    body:
        achieve close_char(char, cat) # Approach the cat
        touch(cat) # Touch the cat

behavior __goal__():
    body:
        if exists cat: item : (is_cat(cat) and not visited(cat)):
            # If we found an unvisited cat, move close and touch it
            bind cat: item where:
                is_cat(cat) and not visited(cat)
            find_cat_and_touch(cat)
        else:
            # Check all items to find the cat if not found initially
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the cat")

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
def find_basket_with_clothes(basket:item):
    # Function to determine if a given basket contains clothes
    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):
            # If a basket with clothes is found, move closer to it
            bind basket: item where:
                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)
            achieve close_char(char, basket)
        else:
            # Check all baskets to find one with clothes if not found initially
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are clothes in the basket")

############################################################
When the sub-task is: 2. Wash the clothes in the washing machine.
A successful representation:
 
behavior start_washing(clothes:item, washing_machine:item):
    body:
        achieve_once inside(clothes, washing_machine)

behavior operate_washing_machine(washing_machine:item):
    body:
        achieve_once closed(washing_machine)
        achieve_once is_on(washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket for clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        foreach clothes: item:
        # Load all dirty clothes from the basket into the washing machine
            if is_clothes(clothes) and inside(clothes, basket):
                start_washing(clothes, washing_machine)

        operate_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: Use a pot to boil some water.
A successful representation:

behavior boil_water_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_water_in_pot(pot, stove)
        # Use the pot to boil water on the stove

############################################################
When the sub-task is: 1. Find the bathroom sink.
A successful representation:
 
def find_bathroom_sink(bathroom:item):
    # Function to determine if a given bathroom contains a sink
    symbol has_sink=exists sink: item : (is_sink(sink) and inside(sink, bathroom))
    return has_sink

behavior __goal__():
    body:
        if exists bathroom: item : (is_bathroom(bathroom) and find_bathroom_sink(bathroom)):
            # If a bathroom with a sink is found, move closer to it
            bind bathroom: item where:
                is_bathroom(bathroom) and find_bathroom_sink(bathroom)
            bind sink: item where:
                is_sink(sink) and inside(sink, bathroom)
            achieve close_char(char, sink)
        else:
            # Check all bathrooms to find one with a sink if not found
            foreach bathroom: item:
                if is_bathroom(bathroom) and not visited(bathroom):
                    observe(bathroom, "Check if there is a sink in the bathroom")

############################################################
When the sub-task is: 2. Fill the sink with water.
A successful representation:
 
behavior fill_sink_with_water(sink:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink with ID 19

        fill_sink_with_water(sink)
        # Fill the selected sink with water

############################################################
When the sub-task is: 3. Add soap to create soapy water.
A successful representation:
 
behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inhand(soap) # Temporarily hold the soap
        achieve_once has_water(sink) # Ensure the sink is filled with water
        achieve inside(soap, sink) # Add soap into the sink

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap) and inhand(soap)
        # Select soap that is currently in hand

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        add_soap_to_sink(soap, sink)
        # Add the soap to the sink

############################################################
When the sub-task is: 1. Bring the milk and egg to the dining room and place them on a table.
A successful representation:
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior move_milk_and_egg_to_table(milk:item, egg:item, table:item):
    body:
        # Place milk and egg on a table in the dining room
        achieve_once on(milk, table)
        achieve_once on(egg, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Find the milk

        bind egg: item where:
            is_food_egg(egg)
        # Find the egg

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        # Temporarily hold the milk

        achieve_once inhand(egg)
        # Temporarily hold the egg

        move_milk_and_egg_to_table(milk, egg, table)
        # Move milk and egg to a table in the dining room

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)
        # Throw the item into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        foreach item: item:
            if inside(item, fridge):
                # Throw all items from the fridge into the trashcan
                throw_items_in_trash(item, trashcan)

############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:

behavior place_items_in_fridge(milk:item, egg:item, fridge:item):
    body:
        achieve_once inside(milk, fridge)
        achieve_once inside(egg, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        place_items_in_fridge(milk, egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 1. Put the pizza and hamburger on a plate.
A successful representation:

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

############################################################
When the sub-task is: 2. Heat the plate with the pizza and hamburger in the microwave.
A successful representation:

def in_kitchen(table: item):
    symbol in_kitchen = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_kitchen

behavior heat_plate_with_food(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the plate with ID 2152

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_plate_with_food(plate, microwave)

############################################################
When the sub-task is: 3. Put the heated plate on a table in the dining room.
A successful representation:
 
def find_dining_room_table(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior relocate_plate_to_dining_room_table(plate: item, table: item):
    body:
        achieve_once on(plate, table) # Place the heated plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the heated plate

        achieve_once inhand(plate) # Temporarily hold the plate
        relocate_plate_to_dining_room_table(plate, table)

############################################################
When the sub-task is: 1. Identify the basket that contains clothes.
A successful representation:
 
def find_basket_with_clothes(basket:item):
    # Function to determine if a given basket contains clothes
    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):
            # If a basket with clothes is found, move closer to it
            bind basket: item where:
                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)
            achieve close_char(char, basket)
        else:
            # Check all baskets to find one with clothes if not found initially
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are clothes in the basket")

############################################################
When the sub-task is: 2. Place the clothes from the basket into the washing machine.
A successful representation:
 
def has_clothes_in_basket(basket: item):
    # Function to check if there are clothes in a specified basket
    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

behavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):
    body:
        achieve_once inside(clothes, washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2040
        # Select the basket for clothes with a specified ID

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        foreach clothes: item:
        # Move all clothes from the basket to the washing machine
            if is_clothes(clothes) and inside(clothes, basket):
                place_clothes_in_washing_machine(clothes, washing_machine)

############################################################
When the sub-task is: 3. Add soap to the washing machine.
A successful representation:

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        bind soap: item where:
            is_soap(soap)
        # Select soap

        achieve_once inhand(soap)
        # Temporarily hold the soap

        achieve_once open(washing_machine)
        # Ensure the washing machine is open

        achieve_once inside(soap, washing_machine)
        # Add the soap to the washing machine

############################################################
When the sub-task is: 4. Run the washing machine to wash the clothes.
A successful representation:

behavior operate_washing_machine(washing_machine:item):
    body:
        achieve_once closed(washing_machine)
        achieve_once is_on(washing_machine)

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2041
        # Select the washing machine with ID 2041

        operate_washing_machine(washing_machine)
        # Operate the washing machine to wash the clothes

############################################################
When the sub-task is: 1. Identify all rooms in the house.
A successful representation:

def find_all_rooms(room:item):
    # Function to determine if a specific item is a room
    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)
    return is_room_instance

behavior __goal__():
    body:
        foreach room: item:
            if find_all_rooms(room) and not visited(room):
                observe(room, "Identify the room")

############################################################
When the sub-task is: 2. For each room, ensure that at least one light is turned on.
A successful representation:
 
def has_light_in_room(room:item):
    # Function to check if there is a light in a specified room
    symbol has_light=exists light: item : (is_light(light) and inside(light, room))
    return has_light

behavior ensure_light_on_in_room(room:item):
    body:
        if has_light_in_room(room):
            bind light: item where:
                is_light(light) and inside(light, room)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Ensure there is at least one light turned on in each room
                ensure_light_on_in_room(room)

############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior wash_jacket(jacket:item, sink:item):
    body:
        achieve_once has_water(jacket) # Ensure the jacket is wet for washing
        wash(jacket) # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        wash_jacket(jacket, sink)
        # Hand wash the jacket in the sink

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
 
def is_target_item_jacket(jacket:item):
    # Function to check if a given item is the target jacket
    symbol is_clothes_jacket_instance= is_clothes_jacket(jacket)
    return is_clothes_jacket_instance

behavior place_jacket_in_washing_machine(jacket: item, washing_machine: item):
    body:
        achieve_once inside(jacket, washing_machine)

behavior operate_washing_machine(washing_machine: item):
    body:
        achieve_once closed(washing_machine)
        achieve_once is_on(washing_machine)

behavior __goal__():
    body:
        bind jacket: item where:
            is_target_item_jacket(jacket) and id[jacket] == 2047
        # Select the jacket with ID 2047

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        place_jacket_in_washing_machine(jacket, washing_machine)
        # Place the jacket in the washing machine

        operate_washing_machine(washing_machine)
        # Operate the washing machine to wash the jacket

############################################################
When the sub-task is: 1. Find a cup.
A successful representation:
 
behavior find_a_cup(cup:item):
    body:
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and not visited(cup)):
            # If a cup is found, move closer to it
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            find_a_cup(cup)
        else:
            # Check all items to find a cup if not found initially
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find the cup")

############################################################
When the sub-task is: 3. Slice the kiwi and add it to the cup.
A successful representation:
 
behavior cut_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item):
    body:
        achieve cut(kiwi)
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_kiwi_and_add_to_cup(kiwi, cup, knife)
        # Cut the kiwi and add it to the cup

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
def is_bathroom_window(window: item):
    # Function to check if a window is in the bathroom
    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))
    return is_in_bathroom

behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):
            # If a bathroom window is found but not visited, move to open it
            bind window: item where:
                is_window(window) and is_bathroom_window(window) and not visited(window)
            open_window(window)
        else:
            # Check all items to find a bathroom window if not found initially
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window, "Check if this is a window in the bathroom")

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve cut(chicken) # Cut the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_chicken(chicken, cutting_board, knife)
        # Slice the chicken

############################################################
When the sub-task is: 1. Find the fish and other necessary ingredients for the soup.
A successful representation:
 
def is_fish_or_ingredient(item: item):
    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce, etc)
    symbol is_necessary= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_necessary

behavior __goal__():
    body:
        foreach item: item:
            if is_fish_or_ingredient(item) and not visited(item):
                # Check all unvisited items to find fish and other necessary ingredients
                observe(item, "Check if this is a fish or necessary ingredient for the soup")

############################################################
When the sub-task is: 2. Prepare the fish and ingredients (clean and cut them as needed).
A successful representation:
 
def is_ingredient(item:item):
    # Check if the item is a necessary ingredient for the soup
    symbol is_ingredient= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_ingredient

behavior prepare_ingredient(item:item, cutting_board:item, knife:item):
    body:
        achieve_once clean(item) # Clean the ingredient
        achieve_once on(item, cutting_board) # Place the ingredient on a cutting board
        if cuttable(item):
            # If the item is cuttable, proceed with cutting
            achieve cut(item)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board to use for preparation

        foreach item: item:
            if is_ingredient(item):
                # Prepare each item that is a necessary ingredient
                prepare_ingredient(item, cutting_board, knife)

############################################################
When the sub-task is: 1. Find a suitable cup and fill it with water.
A successful representation:
 
def has_water_filled(cup:item):
    # Function to check if the cup contains water
    symbol has_water= has_water(cup)
    return has_water

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        # Bind to a suitable cup
        bind cup: item where:
            is_cup(cup)

        # Bind to a sink
        bind sink: item where:
            is_sink(sink)

        # Fill the cup with water
        if not has_water_filled(cup):
            fill_cup_with_water(cup, sink)


############################################################
When the sub-task is: 2. Slice a kiwi and add the slices into the cup of water.
A successful representation:
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item):
    body:
        achieve cut(kiwi)
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        slice_kiwi_and_add_to_cup(kiwi, cup)
        # Slice the kiwi and add it to the cup

############################################################
When the sub-task is: 1. Locate the specific book you need.
A successful representation:
 
def is_target_book(book: item):
    # Check if the item is the specific book needed
    symbol is_book_instance = is_book(book)
    return is_book_instance

behavior locate_book(book: item):
    body:
        achieve close_char(char, book)
        # Move close to the book

behavior __goal__():
    body:
        if exists book: item : (is_target_book(book) and not visited(book)):
            # If the specific book is found and not yet visited
            bind book: item where:
                is_target_book(book) and not visited(book)
            locate_book(book)
        else:
            # If the book isnt found yet, explore the location
            foreach book: item:
                if is_target_book(book) and not visited(book):
                    observe(book, "Locate the specific book needed")

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the specific book with ID 2091

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the coffee table in the home office

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
def is_bathroom_window(window: item):
    # Function to check if a window is in the bathroom
    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))
    return is_in_bathroom

behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):
            # If a bathroom window is found but not visited, move to open it
            bind window: item where:
                is_window(window) and is_bathroom_window(window) and not visited(window)
            open_window(window)
        else:
            # Check all items to find a bathroom window if not found initially
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window, "Check if this is a window in the bathroom")

############################################################
When the sub-task is: 1. Find the pizza and hamburger.
A successful representation:
 
def find_food(food:item):
    # Function to check if the item is a pizza or hamburger
    symbol is_target_food= is_food_pizza(food) or is_food_hamburger(food)
    return is_target_food

behavior __goal__():
    body:
        foreach food: item:
            if find_food(food) and not visited(food):
                # Check all unvisited items to find pizza and hamburger
                observe(food, "Check if this item is pizza or hamburger")
 
############################################################
When the sub-task is: 2. Put the pizza and hamburger on a plate.
A successful representation:

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

############################################################
When the sub-task is: 3. Heat them in the microwave.
A successful representation:

def in_microwave(item: item):
    # Function to check if the item is inside the microwave
    symbol inside_microwave = exists microwave: item : (is_microwave(microwave) and inside(item, microwave))
    return inside_microwave

def has_plate_inside_microwave():
    # Check if the plate with pizza and hamburger is inside the microwave
    symbol has_plate = exists plate: item : (is_plate(plate) and in_microwave(plate))
    return has_plate

behavior heat_plate_with_food(microwave: item, plate: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        if not has_plate_inside_microwave():
            bind microwave: item where:
                is_microwave(microwave)
            # Select the microwave

            bind plate: item where:
                is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
            # Select the specific plate with pizza and hamburger

            heat_plate_with_food(microwave, plate)

############################################################
When the sub-task is: 4. Put the plate on a table in the dining room.
A successful representation:
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and movable(plate)
        # Select the movable plate

        achieve_once inhand(plate) # Temporarily hold the plate
        put_plate_on_table(plate, table)

############################################################
When the sub-task is: 1. Identify all the rooms in the household.
A successful representation:
 
def find_all_rooms(room:item):
    # Function to determine if a specific item is a room
    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)
    return is_room_instance

behavior __goal__():
    body:
        foreach room: item:
            if find_all_rooms(room) and not visited(room):
                observe(room, "Identify the room")

############################################################
When the sub-task is: 2. Check each room to determine if a light is on.
A successful representation:
def is_light_turned_on_in_room(room:item):
    # Check if there is a light turned on in the specified room
    symbol light_on=exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return light_on

behavior ensure_light_checked_in_room(room:item):
    body:
        if not is_light_turned_on_in_room(room):
            # If no light is found to be turned on in the room, check each unvisited light
            foreach light: item:
                if is_light(light) and inside(light, room) and not visited(light):
                    observe(light, "Check the light status in the room")

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms identified in the household
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                ensure_light_checked_in_room(room)
############################################################
When the sub-task is: 3. Turn on a light in any room where all lights are off.
A successful representation:

def has_all_lights_off(room:item):
    # Function to check if all lights in a specified room are off
    symbol all_off=exists light: item : (is_light(light) and inside(light, room) and is_off(light))
    return all_off

behavior turn_on_light_in_room(room:item):
    body:
        if has_all_lights_off(room):
            # Turn on any light if all lights in the room are off
            bind light: item where:
                is_light(light) and inside(light, room) and is_off(light)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to ensure at least one light is on
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Ensure each room has at least one light turned on
                turn_on_light_in_room(room)

############################################################
When the sub-task is: 1. Identify all the bowls and plates that need washing.
A successful representation:
 
def is_bowl_or_plate(item: item):
    # Function to check if an item is a bowl or plate
    symbol is_target_item = is_bowl(item) or is_plate(item)
    return is_target_item

behavior __goal__():
    body:
        foreach item: item:
            if is_bowl_or_plate(item) and not visited(item):
                # Check all unvisited items to identify bowls and plates that need washing
                observe(item, "Check if this is a bowl or plate that needs washing")

############################################################
When the sub-task is: 2. Load the identified bowls and plates into the dishwasher. 
A successful representation:
 
behavior load_dishwasher(obj:item, dishwasher:item):
    body:
        achieve_once inside(obj, dishwasher)
        # Place the bowl or plate into the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher
        
        bind bowl_1: item where:
            is_bowl(bowl_1) and id[bowl_1] == 2095
        # Select bowl_2095

        bind bowl_2: item where:
            is_bowl(bowl_2) and id[bowl_2] == 2096
        # Select bowl_2096

        bind bowl_3: item where:
            is_bowl(bowl_3) and id[bowl_3] == 2097
        # Select bowl_2097

        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        # Select plate_2105

        load_dishwasher(bowl_1, dishwasher)
        load_dishwasher(bowl_2, dishwasher)
        load_dishwasher(bowl_3, dishwasher)
        load_dishwasher(plate, dishwasher)

############################################################
When the sub-task is: 3. Run the dishwasher to wash the bowls and plates.
A successful representation:
 
behavior run_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 143
        # Select the dishwasher with ID 143

        run_dishwasher(dishwasher)
        # Run the dishwasher to wash the bowls and plates

############################################################
When the sub-task is: 1. Find a table in the dining room and place the milk and egg on it.
A successful representation:
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(egg, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(egg)
        # Temporarily hold the milk and egg

        place_milk_and_egg_on_table(milk, egg, table)
        # Place the milk and egg on the table in the dining room

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
behavior throw_items_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)
        # Throw the item into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        foreach item: item:
            if inside(item, fridge):
                # Throw all items from the fridge into the trashcan
                throw_items_in_trash(item, trashcan)
############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:
 
behavior place_items_in_fridge(milk:item, egg:item, fridge:item):
    body:
        achieve_once inside(milk, fridge)
        achieve_once inside(egg, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        place_items_in_fridge(milk, egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: Boil the egg.
A successful representation:
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
def find_cup_with_water(cup:item):
    # Function to check if the cup contains water
    symbol has_water= has_water(cup)
    return has_water

behavior get_a_cup_of_water(cup: item, sink: item):
    body:
        achieve_once inhand(cup)
        # Hold the cup temporarily
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if not find_cup_with_water(cup):
            get_a_cup_of_water(cup, sink)


############################################################
When the sub-task is: Turn on the DVD player.
A successful representation:
 
behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select the DVD player

        achieve is_on(dvd_player)
        # Turn on the DVD player

############################################################
When the sub-task is: 1. Find the book and place it on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the coffee table in the home office

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
def is_window_in_home_office(window:item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))
    return in_home_office

behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        if exists window: item : (is_window(window) and is_window_in_home_office(window) and not visited(window)):
            # If a window in the home office is found and not yet visited, open it
            bind window: item where:
                is_window(window) and is_window_in_home_office(window) and not visited(window)
            open_window(window)
        else:
            # Check all items to find a window in the home office if not found initially
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window, "Check if this is a window in the home office")

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve cut(chicken) # Cut the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_chicken(chicken, cutting_board, knife)
        # Slice the chicken

############################################################
When the sub-task is: 1. Find milk, turkey, egg, fish, and chicken.
A successful representation:
 
def is_target_item(item:item):
    # Function to check if the item is milk, turkey, egg, fish, or chicken
    symbol is_target= is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)
    return is_target

behavior __goal__():
    body:
        foreach item: item:
            if is_target_item(item) and not visited(item):
                # Check all unvisited items to find milk, turkey, egg, fish, and chicken
                observe(item, "Identify if this item is milk, turkey, egg, fish, or chicken")

############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on a table in the dining room.
A successful representation:
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
 
############################################################
When the sub-task is: Touch the remote control to turn on the TV.
A successful representation:
behavior touch_remote_control(remote:item):
    body:
        achieve_once close_char(char, remote) # Approach the remote control
        touch(remote) # Touch the remote control

behavior __goal__():
    body:
        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        touch_remote_control(remote)
        # Touch the remote control to turn on the TV
############################################################
When the sub-task is: 1. Find a cup.
A successful representation:
 
behavior find_a_cup(cup:item):
    body:
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and not visited(cup)):
            # If a cup is found, move closer to it
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            find_a_cup(cup)
        else:
            # Check all items to find a cup if not found initially
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find the cup")

############################################################
When the sub-task is: 2. Pour milk into the cup.
A successful representation:
 
behavior pour_milk_into_cup(milk: item, cup: item):
    body:
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        pour_milk_into_cup(milk, cup)
        # Pour milk into the cup

############################################################
When the sub-task is: 3. Heat the milk in the microwave.
A successful representation:
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the specific cup with ID 2087

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

############################################################
When the sub-task is: 1. Identify all rooms in the house.
A successful representation:
def is_target_room(room:item):
    # Function to determine if a specific item is a target room we want to identify
    symbol is_target= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)
    return is_target

behavior __goal__():
    body:
        foreach room: item:
            if is_target_room(room) and not visited(room):
                observe(room, "Identify the room")
############################################################
When the sub-task is: 2. Check the lights in each room to ensure at least one is on. Turn on a light if none are on.
A successful representation:
 
def is_light_turned_on_in_room(room:item):
    # Checks if there is any light turned on in the specified room
    symbol light_on = exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return light_on

behavior ensure_light_in_room(room:item):
    body:
        if exists light: item : (is_light(light) and inside(light, room)):
            bind light: item where:
                is_light(light) and inside(light, room) and not is_on(light)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms identified in the household
            if not is_light_turned_on_in_room(room) and (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)):
                ensure_light_in_room(room)

