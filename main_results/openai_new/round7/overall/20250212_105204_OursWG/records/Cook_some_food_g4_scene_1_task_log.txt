From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in the pot.  ', '2. Store the pot with the boiled vegetables in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_kitchen_counter_119(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_78_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot) 
        achieve_once inside(vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables_in_pot(vegetable, pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot) 
        achieve_once inside(vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables_in_pot(vegetable, pot, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_78, kitchen_counter_119)walk_executor(pot_78)open_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(pot_78, kitchen_counter_119)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_119)
Fail to find food_vegetable_2113 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2141)exp(food_vegetable_2113, bowl_2141)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the bowl_2141. 
##############################
From agent.py
exp(food_vegetable_2113, bowl_2141)
Fail to find food_vegetable_2113 around bowl_2141. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_vegetable_2113, kitchen_counter_122)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the pot_78. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_122)
Fail to find food_vegetable_2113 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_vegetable_2113, cupboard_117)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the pot_78. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_vegetable_2113, cupboard_117)
Fail to find food_vegetable_2113 around cupboard_117. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the vegetables needed for boiling.', '2. Boil the vegetables with the pot.', '3. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def find_vegetables(vegetable:item):
    # Determine if item is a vegetable that needs cleaning
    symbol is_target_vegetable = is_food_vegetable(vegetable)
    return is_target_vegetable

behavior clean_vegetables(vegetable:item, sink:item):
    body:
        achieve_once inhand(vegetable) # Temporarily hold the vegetable for washing
        achieve_once inside(vegetable, sink) # Place the vegetable in the sink for washing
        wash(vegetable) # Clean the vegetable

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        foreach vegetable: item:
            if find_vegetables(vegetable) and not visited(vegetable):
                clean_vegetables(vegetable, sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def is_goal_vegetables_found_and_cleaned(item: item):
    # Check if the item is a vegetable and it has been cleaned
    symbol is_found_and_cleaned = is_food_vegetable(item) and clean(item)
    return is_found_and_cleaned

behavior find_and_clean_vegetables(vegetable:item, sink:item):
    body:
        achieve_once inhand(vegetable)
        # Temporarily hold the vegetable
        achieve_once inside(vegetable, sink)
        # Place the vegetable in the sink
        wash(vegetable)
        # Wash the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not clean(vegetable):
                # Find vegetables that are not clean
                bind sink: item where:
                    is_sink(sink)
                # Select a sink
                find_and_clean_vegetables(vegetable, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_goal_vegetables_found_and_cleaned(item: item):
    # Check if the item is a vegetable and it has been cleaned
    symbol is_found_and_cleaned = is_food_vegetable(item) and clean(item)
    return is_found_and_cleaned

behavior find_and_clean_vegetables(vegetable:item, sink:item):
    body:
        achieve_once inhand(vegetable)
        # Temporarily hold the vegetable
        achieve_once inside(vegetable, sink)
        # Place the vegetable in the sink
        wash(vegetable)
        # Wash the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not clean(vegetable):
                # Find vegetables that are not clean
                bind sink: item where:
                    is_sink(sink)
                # Select a sink
                find_and_clean_vegetables(vegetable, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_vegetable_2113, kitchen_counter_123)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(sink_19)putin_executor(food_vegetable_2113, sink_19)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the pot_78. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_123)
Fail to find food_vegetable_2113 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(sink_19)putin_executor(food_vegetable_2113, sink_19)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(sink_19)putin_executor(food_vegetable_2113, sink_19)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, cleaning_solution_2143, Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
putin_executor(food_vegetable_2113, sink_19)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. food_vegetable_2113 is inside sink_19. food_vegetable_2113 is close sink_19. sink_19 is close food_vegetable_2113. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the sink_19. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the sink_19. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_cpuscreen_210(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==210
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_carrot,cpuscreen_instance)
        else:
            exp(food_carrot,cpuscreen_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cpuscreen_instance]=True
        close[cpuscreen_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure that the pot has water for boiling
        achieve_once inside(vegetables, pot) # Place vegetables into the pot
        achieve_once on(pot, stove) # Put the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the cleaned vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables_with_pot(vegetables, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure that the pot has water for boiling
        achieve_once inside(vegetables, pot) # Place vegetables into the pot
        achieve_once on(pot, stove) # Put the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the cleaned vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables_with_pot(vegetables, pot, stove)

##############################
From agent.py-> find a plan in act()
putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select fridge with ID 126

        store_pot_in_fridge(pot, fridge)
        close_fridge(fridge)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select fridge with ID 126

        store_pot_in_fridge(pot, fridge)
        close_fridge(fridge)
##############################
From agent.py-> find a plan in act()
grab_executor(pot_78)walk_executor(fridge_126)putin_executor(pot_78, fridge_126)close_executor(fridge_126)
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
putin_executor(pot_78, fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close fridge_126. fridge_126 is close pot_78. pot_78 is inside fridge_126. pot_78 released by right hand. 
##############################
From agent.py
close_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2141)', 'walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'walk_executor(sink_19)', 'putin_executor(food_vegetable_2113, sink_19)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'putin_executor(food_vegetable_2113, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'grab_executor(pot_78)', 'walk_executor(fridge_126)', 'putin_executor(pot_78, fridge_126)', 'close_executor(fridge_126)']
Time info:
Time consume: 229 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 53
goal generate times: 5
goal correct times: 0
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
