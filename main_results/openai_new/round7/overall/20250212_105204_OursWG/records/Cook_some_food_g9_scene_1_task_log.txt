From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the potatoes.', '2. Cut the potatoes into fries.', '3. Fry the potatoes until golden and crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_119(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once inhand(potato) # Temporarily hold the potato for washing
        achieve_once inside(potato, sink) # Put the potato in the sink for washing
        wash(potato) # Wash the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_wash_potatoes(potato, sink)
        # Find the potato and wash it in the sink

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once inhand(potato) # Temporarily hold the potato for washing
        achieve_once inside(potato, sink) # Put the potato in the sink for washing
        wash(potato) # Wash the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_wash_potatoes(potato, sink)
        # Find the potato and wash it in the sink

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_potato_2107, kitchen_counter_119)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(sink_19)putin_executor(food_potato_2107, sink_19)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_119)
Fail to find food_potato_2107 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_potato_2107, cupboard_117)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(sink_19)putin_executor(food_potato_2107, sink_19)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_potato_2107, cupboard_117)
Fail to find food_potato_2107 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_potato_2107, cupboard_118)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(sink_19)putin_executor(food_potato_2107, sink_19)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_potato_2107, cupboard_118)
Fail to find food_potato_2107 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(sink_19)putin_executor(food_potato_2107, sink_19)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(sink_19)putin_executor(food_potato_2107, sink_19)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
putin_executor(food_potato_2107, sink_19)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. food_potato_2107 is close sink_19. sink_19 is close food_potato_2107. food_potato_2107 is inside sink_19. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the sink_19. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the sink_19. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior cut_potatoes_into_fries(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board) # Place potato on the cutting board
        achieve_once cut(potato) # Cut the potato into fries

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and clean(potato)
        # Select a clean potato

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_potatoes_into_fries(potato, knife, cutting_board)
        # Cut the potato into fries on the cutting board using a knife
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_potatoes_into_fries(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board) # Place potato on the cutting board
        achieve_once cut(potato) # Cut the potato into fries

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and clean(potato)
        # Select a clean potato

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_potatoes_into_fries(potato, knife, cutting_board)
        # Cut the potato into fries on the cutting board using a knife
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potatoes:item, fryingpan:item):
    body:
        achieve_once inside(potatoes, fryingpan)
        # Place the potatoes inside the frying pan

        bind stove: item where:
            is_stove(stove) and close(fryingpan, stove)
        # Select a stove that is close to the frying pan

        achieve is_on(stove)
        # Turn on the stove to start frying the potatoes

        observe(fryingpan, "Check if the potatoes are golden and crispy")
        # Observe the frying pan to determine if the frying process is completed and the potatoes are golden and crispy

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        fry_potatoes(potatoes, fryingpan)
        # Fry the potatoes until they are golden and crispy

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def fry_potatoes_in_pan(pan:item):
    body:
        achieve_once inside(food_potato_2107, pan)
        # Place the potato slices inside the pan
        achieve_once is_on(pan)
        # Turn on the pan for frying

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        fry_potatoes_in_pan(pan)
        # Fry the potatoes in the pan until they are golden and crispy

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5392, column 9.
Expected one of: 
	* PLUS
	* IF
	* AMPERSAND
	* SEMICOLON
	* NOT_EQ
	* MINUS
	* __ANON_1
	* AT
	* _NEWLINE
	* __ANON_3
	* __ANON_6
	* SLASH
	* __ANON_5
	* LSHIFT
	* GREATER_EQ
	* EQUAL
	* STAR
	* __ANON_4
	* RSHIFT
	* VBAR
	* PERCENT
	* FLOORDIV
	* AND
	* LESSTHAN
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* COMMA
	* __ANON_7
	* __ANON_2
	* __ANON_8
	* OR
	* __ANON_0
	* LESS_EQ
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#goal_representation
 
def fry_potatoes_in_pan(pan:item):
    body:
        achieve_once inside(food_potato_2107, pan)
        # Place the potato slices inside the pan
        achieve_once is_on(pan)
        # Turn on the pan for frying

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        fry_potatoes_in_pan(pan)
        # Fry the potatoes in the pan until they are golden and crispy

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5392, column 9.
Expected one of: 
	* PLUS
	* IF
	* AMPERSAND
	* SEMICOLON
	* NOT_EQ
	* MINUS
	* __ANON_1
	* AT
	* _NEWLINE
	* __ANON_3
	* __ANON_6
	* SLASH
	* __ANON_5
	* LSHIFT
	* GREATER_EQ
	* EQUAL
	* STAR
	* __ANON_4
	* RSHIFT
	* VBAR
	* PERCENT
	* FLOORDIV
	* AND
	* LESSTHAN
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* COMMA
	* __ANON_7
	* __ANON_2
	* __ANON_8
	* OR
	* __ANON_0
	* LESS_EQ
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def fry_potatoes_in_pan(pan:item):
    body:
        achieve_once inside(food_potato_2107, pan)
        # Place the potato slices inside the pan
        achieve is_on(pan)
        # Turn on the pan for frying

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        fry_potatoes_in_pan(pan)
        # Fry the potatoes in the pan until they are golden and crispy

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation

behavior fry_potatoes(o:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(o, fryingpan) # Place the potato pieces inside the frying pan
        achieve_once is_on(stove) # Ensure the stove is turned on
        achieve inside(oil, fryingpan) # Ensure there is oil inside the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        fry_potatoes(potatoes, fryingpan, stove)
        # Fry the potatoes until golden and crispy

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil; available variables: [Variable<o: item>, Variable<fryingpan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#goal_representation
 
behavior fry_potatoes(o:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve_once inside(o, fryingpan) # Place the potato pieces inside the frying pan
        achieve_once is_on(stove) # Ensure the stove is turned on
        achieve inside(oil, fryingpan) # Ensure there is oil inside the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        fry_potatoes(potatoes, fryingpan, stove, oil)
        # Fry the potatoes until golden and crispy

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the potatoes until golden and crispy." ?
Answer: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan and put it on the stove.', '2. Turn on the stove and add some oil.', '3. Put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_dishwasher_129(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fryingpan,dishwasher_instance)
        else:
            exp(fryingpan,dishwasher_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,dishwasher_instance]=True
        close[dishwasher_instance,fryingpan]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_fryingpan_on_stove(fryingpan, stove)
        # Place the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_fryingpan_on_stove(fryingpan, stove)
        # Place the frying pan on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(fryingpan_2154, dishwasher_129)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the knife_2037. Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the knife_2037. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(fryingpan_2154, dishwasher_129)
Fail to find fryingpan_2154 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2103_around_sink_120(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_orange,sink_instance)
        else:
            exp(food_orange,sink_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,sink_instance]=True
        close[sink_instance,food_orange]=True
    

behavior find_instrument_guitar_2028_around_home_office_241(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(instrument_guitar,home_office_instance)
        else:
            exp(instrument_guitar,home_office_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,home_office_instance]=True
        close[home_office_instance,instrument_guitar]=True
    

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil to the pan

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select a frying pan that is on the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove_and_add_oil(stove:item, oil:item, pan:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve inside(oil, pan)
        # Add oil into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        turn_on_stove_and_add_oil(stove, oil, fryingpan)
        # Turn on the stove and add some oil to the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_stove_and_add_oil(stove:item, oil:item, pan:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve inside(oil, pan)
        # Add oil into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        turn_on_stove_and_add_oil(stove, oil, fryingpan)
        # Turn on the stove and add some oil to the frying pan

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)walk_executor(pot_2138)open_executor(pot_2138)exp(oil_2149, pot_2138)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. pot_2138 is opened. 
##############################
From agent.py
exp(oil_2149, pot_2138)
Fail to find oil_2149 around pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_1000)exp(oil_2149, food_food_1000)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the knife_2037. Robot is close to the food_food_1000. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2149 ?
Answer: Robot, you can find oil_2149 in the dining_room_41. It is located on the kitchen_counter_123. Look for oil_2149 directly on the surface of the kitchen counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, you can find oil_2149 in the dining_room_41. It is located on the kitchen_counter_123. Look for oil_2149 directly on the surface of the kitchen counter.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_117.
Action 4: look for food_potato_2107 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for food_potato_2107 around cupboard_118.
Action 8: Walk to fridge_126.
Action 9: Switch off fridge_126.
Action 10: Open fridge_126.
Action 11: look for food_potato_2107 around fridge_126.
Action 12: Grab food_potato_2107.
Action 13: Walk to sink_19.
Action 14: Put food_potato_2107 into sink_19.
Action 15: Walk to food_potato_2107.
Action 16: Grab food_potato_2107.
Action 17: Walk to faucet_20.
Action 18: Switch on faucet_20.
Action 19: Wash food_potato_2107.
Action 20: Switch off faucet_20.
Action 21: Walk to cutting_board_2123.
Action 22: Put food_potato_2107 on cutting_board_2123.
Action 23: Walk to knife_2037.
Action 24: Grab knife_2037.
Action 25: Walk to food_potato_2107.
Action 26: Cut food_potato_2107.
Action 27: Walk to dishwasher_129.
Action 28: Open dishwasher_129.
Action 29: look for fryingpan_2154 around dishwasher_129.
Action 30: Walk to kitchen_counter_122.
Action 31: look for fryingpan_2154 around kitchen_counter_122.
Action 32: Walk to fryingpan_2154.
Action 33: Grab fryingpan_2154.
Action 34: Walk to stove_2135.
Action 35: Put fryingpan_2154 on stove_2135.
Action 36: Switch on stove_2135.
Action 37: Walk to pot_2138.
Action 38: Open pot_2138.
Action 39: look for oil_2149 around pot_2138.
Action 40: Walk to food_food_1000.

##############################
From agent.py
exp(oil_2149, food_food_1000)
Fail to find oil_2149 around food_food_1000. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2103_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_milk_2115_around_curtain_290(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==290
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(milk,curtain_instance)
        else:
            exp(milk,curtain_instance)
    eff:
        unknown[milk]=False
        close[milk,curtain_instance]=True
        close[curtain_instance,milk]=True
    

behavior find_instrument_guitar_2028_around_home_office_241(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(instrument_guitar,home_office_instance)
        else:
            exp(instrument_guitar,home_office_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,home_office_instance]=True
        close[home_office_instance,instrument_guitar]=True
    

#exp_behavior_end

#goal_representation

behavior find_oil_and_pour_into_pan(oil:item, stove:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour the oil into the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

        find_oil_and_pour_into_pan(oil, stove, pan)
        # Pour oil into the pan on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_milk_2115_around_curtain_290(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==290
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(milk,curtain_instance)
        else:
            exp(milk,curtain_instance)
    eff:
        unknown[milk]=False
        close[milk,curtain_instance]=True
        close[curtain_instance,milk]=True
    

behavior find_instrument_guitar_2028_around_home_office_241(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(instrument_guitar,home_office_instance)
        else:
            exp(instrument_guitar,home_office_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,home_office_instance]=True
        close[home_office_instance,instrument_guitar]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_stove_and_add_oil(stove:item, oil:item, pan:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(oil, pan)
        # Add oil to the pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
        # Select the oil with ID 2149

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove

        turn_on_stove_and_add_oil(stove, oil, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2138_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil into the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and inside(oil, kitchen_counter)
        # Select oil from the kitchen counter

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135)
        # Select the frying pan on the stove

        achieve is_on(stove_2135)
        # Turn on the stove

        add_oil_to_pan(oil, pan)
        # Add oil to the pan on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<oil: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2115_around_curtain_290(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==290
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(milk,curtain_instance)
        else:
            exp(milk,curtain_instance)
    eff:
        unknown[milk]=False
        close[milk,curtain_instance]=True
        close[curtain_instance,milk]=True
    

behavior find_instrument_guitar_2028_around_home_office_241(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(instrument_guitar,home_office_instance)
        else:
            exp(instrument_guitar,home_office_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,home_office_instance]=True
        close[home_office_instance,instrument_guitar]=True
    

#goal_representation
 
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil into the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and inside(oil, kitchen_counter_123)
        # Select oil from the kitchen counter 123

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135)
        # Select the frying pan on the stove

        achieve is_on(stove_2135)
        # Turn on the stove

        add_oil_to_pan(oil, pan)
        # Add oil to the pan on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_123; available variables: [Variable<oil: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_milk_2115_around_curtain_290(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==290
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(milk,curtain_instance)
        else:
            exp(milk,curtain_instance)
    eff:
        unknown[milk]=False
        close[milk,curtain_instance]=True
        close[curtain_instance,milk]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#goal_representation
 
behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil into the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and inside(oil, kitchen_counter_123)
        # Select oil from the kitchen counter 123

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135)
        # Select the frying pan on the stove

        achieve is_on(stove_2135)
        # Turn on the stove

        add_oil_to_pan(oil, pan)
        # Add oil to the pan on the stove


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. turn on the stove and add some oil." ?
Answer: Turn on the stove and add some oil.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove_and_add_oil(stove:item, oil:item, frying_pan:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve_once inside(oil, frying_pan) # Add the oil to the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with the ID 2135
        
        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
        # Select the oil with the ID 2149
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        turn_on_stove_and_add_oil(stove, oil, frying_pan)
        # Execute the behavior to turn on the stove and add the oil to the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_stove_and_add_oil(stove:item, oil:item, frying_pan:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve_once inside(oil, frying_pan) # Add the oil to the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with the ID 2135
        
        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
        # Select the oil with the ID 2149
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        turn_on_stove_and_add_oil(stove, oil, frying_pan)
        # Execute the behavior to turn on the stove and add the oil to the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potatoes_in_fryingpan(potatoes:item, fryingpan:item):
    body:
        achieve_once inside(potatoes, fryingpan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan on the stove with ID 2135

        put_potatoes_in_fryingpan(potatoes, fryingpan)
        # Put the cut potatoes into the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

#goal_representation
 
behavior put_potatoes_in_fryingpan(potatoes:item, fryingpan:item):
    body:
        achieve_once inside(potatoes, fryingpan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        put_potatoes_in_fryingpan(potatoes, fryingpan)
        # Put the cut potatoes into the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_food_salt_2041(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(oil,food_salt_instance)
        else:
            exp(oil,food_salt_instance)
    eff:
        unknown[oil]=False
        close[oil,food_salt_instance]=True
        close[food_salt_instance,oil]=True
    

behavior find_food_orange_2027_around_food_orange_2027(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_orange,food_orange_instance)
        else:
            exp(food_orange,food_orange_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,food_orange_instance]=True
        close[food_orange_instance,food_orange]=True
    

#goal_representation
 
behavior put_potatoes_in_fryingpan(potatoes:item, fryingpan:item):
    body:
        achieve_once inside(potatoes, fryingpan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan on the stove with ID 2135

        put_potatoes_in_fryingpan(potatoes, fryingpan)
        # Put the cut potatoes into the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_television_281(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_potato_pieces_in_fryingpan(potato_pieces:item, fryingpan:item):
    body:
        achieve_once inside(potato_pieces, fryingpan)

behavior __goal__():
    body:
        bind potato_pieces: item where:
            is_food_potato(potato_pieces) and cut(potato_pieces)
        # Select the cut potato pieces

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_potato_pieces_in_fryingpan(potato_pieces, fryingpan)
        # Place the potato pieces in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potatoes_in_pan(potatoes:item, pan:item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato pieces inside the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the potato pieces that are already cut

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135)
        # Select the frying pan on the stove with ID 2135

        put_potatoes_in_pan(potatoes, pan)
        # Carry out the action to put the potatoes in the pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

#goal_representation
 
behavior put_potatoes_in_pan(potatoes:item, pan:item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato pieces inside the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the potato pieces that are already cut

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select a frying pan that is on any stove

        put_potatoes_in_pan(potatoes, pan)
        # Carry out the action to put the potatoes in the pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_walllamp_305(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==305
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
behavior put_potatoes_in_pan(potatoes:item, pan:item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato pieces inside the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the potato pieces that are already cut

        bind stove: item where:
            is_stove(stove)
        # Select any stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select a frying pan that is on the stove

        put_potatoes_in_pan(potatoes, pan)
        # Carry out the action to put the potatoes in the pan
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the potato pieces in the frying pan." ?
Answer: Find a potato and cut it into pieces before proceeding with putting them in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fry the cut potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_cut_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(potatoes, fryingpan) # Put the cut potatoes into the frying pan
        achieve is_on(stove) # Ensure the stove remains on while frying

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        fry_cut_potatoes(potatoes, fryingpan, stove)
        # Fry the cut potatoes in the frying pan on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior fry_cut_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(potatoes, fryingpan) # Put the cut potatoes into the frying pan
        achieve is_on(stove) # Ensure the stove remains on while frying

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        fry_cut_potatoes(potatoes, fryingpan, stove)
        # Fry the cut potatoes in the frying pan on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#goal_representation
 
behavior fry_cut_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(potatoes, fryingpan) # Put the cut potatoes into the frying pan
        achieve is_on(stove) # Ensure the stove remains on while frying

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        fry_cut_potatoes(potatoes, fryingpan, stove)
        # Fry the cut potatoes in the frying pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_oil_on_fryingpan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)

behavior cut_food(food:item):
    body:
        achieve_once cut(food)

behavior fry_potatoes_in_pan(food:item, fryingpan:item):
    body:
        achieve_once inside(food, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove) # Select the frying pan on the stove

        bind oil: item where:
            is_oil(oil) and visited(oil) # Select the oil that has been visited

        bind food_potato: item where:
            is_food_potato(food_potato) and cut(food_potato) # Select the potato that has been cut

        pour_oil_on_fryingpan(oil, fryingpan) # Add oil to the frying pan
        fry_potatoes_in_pan(food_potato, fryingpan) # Fry the cut potato pieces in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior pour_oil_on_fryingpan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)

behavior cut_food(food:item):
    body:
        achieve_once cut(food)

behavior fry_potatoes_in_pan(food:item, fryingpan:item):
    body:
        achieve_once inside(food, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) # Define stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove) # Select the frying pan on the stove

        bind oil: item where:
            is_oil(oil) and visited(oil) # Select the oil that has been visited

        bind food_potato: item where:
            is_food_potato(food_potato) and cut(food_potato) # Select the potato that has been cut

        pour_oil_on_fryingpan(oil, fryingpan) # Add oil to the frying pan
        fry_potatoes_in_pan(food_potato, fryingpan) # Fry the cut potato pieces in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_walllamp_36(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes_and_put_in_pan(potatoes:item, pan:item):
    body:
        achieve_once cut(potatoes)
        achieve_once inside(potatoes, pan)

behavior fry_potatoes(stove:item, pan:item):
    body:
        achieve_once is_on(stove)
        achieve inside(pan, stove)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select potatoes that are cut

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cut_potatoes_and_put_in_pan(potatoes, pan)
        fry_potatoes(stove, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the cut potatoes into the frying pan and fry them until crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_potato_to_fryingpan(cut_potato:item, fryingpan:item):
    body:
        achieve_once inside(cut_potato, fryingpan)
        # Place the cut potato into the frying pan

behavior fry_potatoes(fryingpan:item):
    body:
        achieve_once is_on(stove_2135) # Ensure the stove is on to fry the potatoes

behavior __goal__():
    body:
        bind cut_potato: item where:
            is_food_potato(cut_potato) and cut(cut_potato)
        # Select a cut potato

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan on the stove

        add_potato_to_fryingpan(cut_potato, fryingpan)
        fry_potatoes(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_walllamp_305(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==305
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

#goal_representation

behavior add_potato_to_fryingpan(cut_potato:item, fryingpan:item):
    body:
        achieve_once inside(cut_potato, fryingpan)
        # Place the cut potato into the frying pan

behavior fry_potatoes(fryingpan:item, stove:item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on to fry the potatoes

behavior __goal__():
    body:
        bind cut_potato: item where:
            is_food_potato(cut_potato) and cut(cut_potato)
        # Select a cut potato

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with specific ID 

        add_potato_to_fryingpan(cut_potato, fryingpan)
        fry_potatoes(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior add_potato_to_fryingpan(cut_potato:item, fryingpan:item):
    body:
        achieve_once inside(cut_potato, fryingpan)
        # Place the cut potato into the frying pan

behavior fry_potatoes(fryingpan:item, stove:item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on to fry the potatoes

behavior __goal__():
    body:
        bind cut_potato: item where:
            is_food_potato(cut_potato) and cut(cut_potato)
        # Select a cut potato

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with specific ID 

        add_potato_to_fryingpan(cut_potato, fryingpan)
        fry_potatoes(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_bathroom_cabinet_17(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(oil,bathroom_cabinet_instance)
        else:
            exp(oil,bathroom_cabinet_instance)
    eff:
        unknown[oil]=False
        close[oil,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(fryingpan:item, cut_potatoes:item):
    body:
        achieve_once inside(cut_potatoes, fryingpan) # Put the cut potatoes into the frying pan
        # Assume that the frying process will begin

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind cut_potatoes: item where:
            is_food_potato(cut_potatoes) and cut(cut_potatoes)
        # Select the cut potatoes

        fry_potatoes(fryingpan, cut_potatoes)
        # Fry the cut potatoes until crispy

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potatoes_in_pan_and_fry(potatoes:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(potatoes, frying_pan) # Put the cut potatoes into the frying pan
        achieve is_on(stove) # Ensure the stove stays on while frying
        
behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        put_potatoes_in_pan_and_fry(potatoes, frying_pan, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the cut potatoes into the frying pan to cook.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potatoes_in_frying_pan(potatoes:item, frying_pan:item):
    body:
        achieve_once inside(potatoes, frying_pan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        put_potatoes_in_frying_pan(potatoes, frying_pan)
        # Put the cut potatoes into the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_shower_16(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(oil,shower_instance)
        else:
            exp(oil,shower_instance)
    eff:
        unknown[oil]=False
        close[oil,shower_instance]=True
        close[shower_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cut_potatoes_in_fryingpan(cut_potatoes:item, fryingpan:item):
    body:
        achieve_once inside(cut_potatoes, fryingpan)

behavior __goal__():
    body:
        bind cut_potatoes: item where:
            cut(cut_potatoes) and is_food_potato(cut_potatoes)
        # Select cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_cut_potatoes_in_fryingpan(cut_potatoes, fryingpan)
        # Place the cut potatoes in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_walllamp_305(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==305
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(oil,walllamp_instance)
        else:
            exp(oil,walllamp_instance)
    eff:
        unknown[oil]=False
        close[oil,walllamp_instance]=True
        close[walllamp_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan
        
        foreach potato_piece: item:
            if is_food_potato(potato_piece) and cut(potato_piece):
                achieve_once inside(potato_piece, fryingpan)
                # Put the cut potato pieces into the fryingpan to cook

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(sink_19)', 'putin_executor(food_potato_2107, sink_19)', 'walk_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_potato_2107)', 'switchoff_executor(faucet_20)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'walk_executor(food_food_1000)', 'walk_executor(kitchen_counter_123)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)']
Time info:
Time consume: 659 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 7
goal generate times: 24
goal correct times: 5
action_num: 38

Task complete rate:
Keystate: k1 - Requires: 5 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
