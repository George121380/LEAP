From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat them in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def find_food(food:item):
    # Function to check if the item is a pizza or hamburger
    symbol is_target_food= is_food_pizza(food) or is_food_hamburger(food)
    return is_target_food

behavior __goal__():
    body:
        foreach food: item:
            if find_food(food) and not visited(food):
                # Check all unvisited items to find pizza and hamburger
                observe(food, "Check if this item is pizza or hamburger")
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_food(food:item):
    # Function to check if the item is a pizza or hamburger
    symbol is_target_food= is_food_pizza(food) or is_food_hamburger(food)
    return is_target_food

behavior __goal__():
    body:
        foreach food: item:
            if find_food(food) and not visited(food):
                # Check all unvisited items to find pizza and hamburger
                observe(food, "Check if this item is pizza or hamburger")
 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, Check if this item is pizza or hamburger)walk_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)obs(food_pizza_2034, Check if this item is pizza or hamburger)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, fridge_289)
Find food_hamburger_2024. 
##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2024, Check if this item is pizza or hamburger)obs(food_pizza_2034, Check if this item is pizza or hamburger)
##############################
From agent.py
obs(food_hamburger_2024, Check if this item is pizza or hamburger)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py
obs(food_pizza_2034, Check if this item is pizza or hamburger)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)exp(plate_1000, cutting_board_2051)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, cutting_board_2051)
Fail to find plate_1000 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(television_248)exp(plate_1000, television_248)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(television_248)
Robot find: wall_clock_249, cd_player_2060, mat_236, phone_247, cd_2075, Robot is close to the television_248. Robot is close to the tvstand_225. 
##############################
From agent.py
exp(plate_1000, television_248)
Fail to find plate_1000 around television_248. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_411)exp(plate_1000, light_411)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(light_411)
Robot find: drawing_404, drawing_402, Robot is close to the light_411. 
##############################
From agent.py
exp(plate_1000, light_411)
Fail to find plate_1000 around light_411. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_353)exp(plate_1000, tvstand_353)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(tvstand_353)
Robot find: dvd_player_2061, mat_401, drawing_400, Robot is close to the tvstand_353. 
##############################
From agent.py
exp(plate_1000, tvstand_353)
Fail to find plate_1000 around tvstand_353. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: To find plate_1000, go to the dining_room_201. Look for sink_231, and you will find plate_1000 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find plate_1000, go to the dining_room_201. Look for sink_231, and you will find plate_1000 on top of it.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_hamburger_2024 around fridge_289.
Action 5: Observe around food_hamburger_2024 with the question of Check if this item is pizza or hamburger.
Action 6: Observe around food_pizza_2034 with the question of Check if this item is pizza or hamburger.
Action 7: Walk to cutting_board_2051.
Action 8: look for plate_1000 around cutting_board_2051.
Action 9: Walk to cupboard_229.
Action 10: Open cupboard_229.
Action 11: look for plate_1000 around cupboard_229.
Action 12: Walk to television_248.
Action 13: look for plate_1000 around television_248.
Action 14: Walk to light_411.
Action 15: look for plate_1000 around light_411.
Action 16: Walk to tvstand_353.
Action 17: look for plate_1000 around tvstand_353.
Action 18: Walk to table_226.

##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def in_microwave(item: item):
    # Function to check if the item is inside the microwave
    symbol inside_microwave = exists microwave: item : (is_microwave(microwave) and inside(item, microwave))
    return inside_microwave

def has_plate_inside_microwave():
    # Check if the plate with pizza and hamburger is inside the microwave
    symbol has_plate = exists plate: item : (is_plate(plate) and in_microwave(plate))
    return has_plate

behavior heat_plate_with_food(microwave: item, plate: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        if not has_plate_inside_microwave():
            bind microwave: item where:
                is_microwave(microwave)
            # Select the microwave

            bind plate: item where:
                is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
            # Select the specific plate with pizza and hamburger

            heat_plate_with_food(microwave, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def in_microwave(item: item):
    # Function to check if the item is inside the microwave
    symbol inside_microwave = exists microwave: item : (is_microwave(microwave) and inside(item, microwave))
    return inside_microwave

def has_plate_inside_microwave():
    # Check if the plate with pizza and hamburger is inside the microwave
    symbol has_plate = exists plate: item : (is_plate(plate) and in_microwave(plate))
    return has_plate

behavior heat_plate_with_food(microwave: item, plate: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        if not has_plate_inside_microwave():
            bind microwave: item where:
                is_microwave(microwave)
            # Select the microwave

            bind plate: item where:
                is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
            # Select the specific plate with pizza and hamburger

            heat_plate_with_food(microwave, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and movable(plate)
        # Select the movable plate

        achieve_once inhand(plate) # Temporarily hold the plate
        put_plate_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and movable(plate)
        # Select the movable plate

        achieve_once inhand(plate) # Temporarily hold the plate
        put_plate_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_297)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(cutting_board_2051)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(television_248)', 'walk_executor(light_411)', 'walk_executor(tvstand_353)', 'walk_executor(table_226)', 'walk_executor(sink_231)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 240 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 42
goal generate times: 4
goal correct times: 0
action_num: 32

Task complete rate:
1
Scene_id: 0
##############################
