From agent.py
Reset goals: The sub-goals are: 
['1. Find a cereal box and a milk container.', '2. Pour milk and cereal into a cup.', '3. Heat the cup in the microwave until the milk is hot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_cereal_or_milk(item: item):
    # Function to check if the specified item is either a cereal box or milk container
    symbol is_target = is_food_cereal(item) or is_milk(item)
    return is_target

behavior find_cereal_box_and_milk():
    body:
        if exists item: item : (has_cereal_or_milk(item) and not visited(item)):
            # If we already have an unvisited cereal box or milk in known information, approach it
            bind item: item where:
                has_cereal_or_milk(item) and not visited(item)
            achieve close_char(char, item)
        else:
            # Check all items to find a cereal box or milk if not found initially
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if this is a cereal box or a milk container")

behavior __goal__():
    body:
        find_cereal_box_and_milk()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_cereal_or_milk(item: item):
    # Function to check if the specified item is either a cereal box or milk container
    symbol is_target = is_food_cereal(item) or is_milk(item)
    return is_target

behavior find_cereal_box_and_milk():
    body:
        if exists item: item : (has_cereal_or_milk(item) and not visited(item)):
            # If we already have an unvisited cereal box or milk in known information, approach it
            bind item: item where:
                has_cereal_or_milk(item) and not visited(item)
            achieve close_char(char, item)
        else:
            # Check all items to find a cereal box or milk if not found initially
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if this is a cereal box or a milk container")

behavior __goal__():
    body:
        find_cereal_box_and_milk()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_cereal_2015, kitchen_counter_230)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_cereal_2015, kitchen_counter_230)
Fail to find food_cereal_2015 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_cereal_2015, cupboard_229)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_cereal_2015, cupboard_229)
Fail to find food_cereal_2015 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(food_cereal_2015, wallshelf_234)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(food_cereal_2015, wallshelf_234)
Fail to find food_cereal_2015 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(food_cereal_2015, wallshelf_235)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(food_cereal_2015, wallshelf_235)
Fail to find food_cereal_2015 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_35)exp(food_cereal_2015, wallshelf_35)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(wallshelf_35)
Robot find: towel_rack_33, towel_rack_34, Robot is close to the wallshelf_35. 
##############################
From agent.py
exp(food_cereal_2015, wallshelf_35)
Fail to find food_cereal_2015 around wallshelf_35. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_cereal_2015, fridge_289)walk_executor(food_cereal_2015)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_cereal_2015, fridge_289)
Find food_cereal_2015. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal.', '2. Pour the milk into a cup and heat it.', '3. Add the cereal to the hot milk in the cup.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk_available(fridge:item):
    # Check if there is milk inside the fridge
    symbol milk_present = exists milk: item : (is_milk(milk) and inside(milk, fridge))
    return milk_present

def is_cereal_available(location:item):
    # Check if cereal is available at the given location
    symbol cereal_present = exists cereal: item : (is_food_cereal(cereal) and close(cereal, location))
    return cereal_present

behavior find_milk(fridge:item):
    body:
        if not is_milk_available(fridge):
            observe(fridge, "Check if milk is inside the fridge") # Search for milk inside the fridge
        achieve close_char(char, fridge)

behavior find_cereal(location:item):
    body:
        if not is_cereal_available(location):
            observe(location, "Check if food_cereal_2015 is around") # Search for cereal around the location
        achieve close_char(char, location)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) # Select the fridge that is turned off

        bind location: item where:
            is_kitchen_counter(location) and id[location] == 230 or
            is_cupboard(location) and id[location] == 229 or
            is_wallshelf(location) and (id[location] == 234 or id[location] == 235 or id[location] == 35)

        find_milk(fridge)
        find_cereal(location)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 5858, column 68.
Expected one of: 
	* LSQB
	* PLUS
	* HEX_NUMBER
	* DEC_NUMBER
	* BIN_NUMBER
	* MINUS
	* OCT_NUMBER
	* DO
	* FALSE
	* FLOAT_NUMBER
	* LONG_STRING
	* TRUE
	* VARNAME
	* ELLIPSIS
	* NOT
	* COLON
	* LPAR
	* IMAG_NUMBER
	* TILDE
	* NONE
	* STRING

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_milk_available(fridge:item):
    # Check if there is milk inside the fridge
    symbol milk_present = exists milk: item : (is_milk(milk) and inside(milk, fridge))
    return milk_present

def is_cereal_available(location:item):
    # Check if cereal is available at the given location
    symbol cereal_present = exists cereal: item : (is_food_cereal(cereal) and close(cereal, location))
    return cereal_present

behavior find_milk(fridge:item):
    body:
        if not is_milk_available(fridge):
            observe(fridge, "Check if milk is inside the fridge") # Search for milk inside the fridge
        achieve close_char(char, fridge)

behavior find_cereal(location:item):
    body:
        if not is_cereal_available(location):
            observe(location, "Check if food_cereal_2015 is around") # Search for cereal around the location
        achieve close_char(char, location)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) # Select the fridge that is turned off

        bind location: item where:
            (is_kitchen_counter(location) and id[location] == 230) or
            (is_cupboard(location) and id[location] == 229) or
            (is_wallshelf(location) and (id[location] == 234 or id[location] == 235 or id[location] == 35))

        find_milk(fridge)
        find_cereal(location)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 5858, column 70.
Expected one of: 
	* LSQB
	* PLUS
	* HEX_NUMBER
	* DEC_NUMBER
	* BIN_NUMBER
	* MINUS
	* OCT_NUMBER
	* DO
	* FALSE
	* FLOAT_NUMBER
	* LONG_STRING
	* TRUE
	* VARNAME
	* ELLIPSIS
	* NOT
	* COLON
	* LPAR
	* IMAG_NUMBER
	* TILDE
	* NONE
	* STRING

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_milk_available(fridge:item):
    # Check if there is milk inside the fridge
    symbol milk_present = exists milk: item : (is_milk(milk) and inside(milk, fridge))
    return milk_present

def is_cereal_available(location:item):
    # Check if cereal is available at the given location
    symbol cereal_present = exists cereal: item : (is_food_cereal(cereal) and close(cereal, location))
    return cereal_present

behavior find_milk(fridge:item):
    body:
        if not is_milk_available(fridge):
            observe(fridge, "Check if milk is inside the fridge") # Search for milk inside the fridge
        achieve close_char(char, fridge)

behavior find_cereal(location:item):
    body:
        if not is_cereal_available(location):
            observe(location, "Check if food_cereal_2015 is around") # Search for cereal around the location
        achieve close_char(char, location)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) # Select the fridge that is turned off

        foreach location: item:
            if (is_kitchen_counter(location) and id[location] == 230) or
                (is_cupboard(location) and id[location] == 229) or
                (is_wallshelf(location) and (id[location] == 234 or id[location] == 235 or id[location] == 35)):
                find_cereal(location)

        find_milk(fridge)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_milk_and_cereal(item:item):
    # Function to check if the specified item is milk or cereal
    symbol is_milk_or_cereal = is_milk(item) or is_food_cereal(item)
    return is_milk_or_cereal

behavior __goal__():
    body:
        if exists item: item : (find_milk_and_cereal(item)):
            # If there is milk or cereal already known
            foreach item: item:
                if find_milk_and_cereal(item):
                    achieve close_char(char, item)
        else:
            # If not found, check various places to find milk and cereal
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location) or is_wallshelf(location) or is_fridge(location)) and not visited(location):
                    observe(location, "Find milk and cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk_and_cereal(x:item):
    # Check if the item is milk or cereal
    symbol is_item_milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return is_item_milk_or_cereal

behavior __goal__():
    body:
        foreach location: item:
            if is_kitchen_counter(location) or is_cupboard(location) or is_wallshelf(location) or is_fridge(location):
                # Check all possible storage locations
                if not visited(location):
                    observe(location, "Look for milk and cereal") # Observe if milk and cereal are available
                else:
                    # Check if the location has milk or cereal based on available knowledge
                    bind item: item where:
                        is_milk_and_cereal(item) and close_char(char, location)
                    achieve close_char(char, item)
                    # Approach the milk or cereal that is found

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_and_cereal(x:item):
    # Check if the item is milk or cereal
    symbol is_item_milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return is_item_milk_or_cereal

behavior __goal__():
    body:
        foreach location: item:
            if is_kitchen_counter(location) or is_cupboard(location) or is_wallshelf(location) or is_fridge(location):
                # Check all possible storage locations
                if not visited(location):
                    observe(location, "Look for milk and cereal") # Observe if milk and cereal are available
                else:
                    # Check if the location has milk or cereal based on available knowledge
                    bind item: item where:
                        is_milk_and_cereal(item) and close_char(char, location)
                    achieve close_char(char, item)
                    # Approach the milk or cereal that is found

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_35)obs(wallshelf_35, Look for milk and cereal)walk_executor(cupboard_229)obs(cupboard_229, Look for milk and cereal)walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Look for milk and cereal)walk_executor(wallshelf_234)obs(wallshelf_234, Look for milk and cereal)walk_executor(wallshelf_235)obs(wallshelf_235, Look for milk and cereal)walk_executor(fridge_289)obs(fridge_289, Look for milk and cereal)
##############################
From agent.py
walk_executor(wallshelf_35)
Robot find: Robot is close to the wallshelf_35. 
##############################
From agent.py
obs(wallshelf_35, Look for milk and cereal)
Get this information:  wallshelf_35 is close to towel_rack_33. wallshelf_35 is close to towel_rack_34. wallshelf_35 is close to wall_9. wallshelf_35 is close to wall_13. wallshelf_35 is close to ceiling_20. wallshelf_35 is close to ceiling_21. wallshelf_35 is close to curtain_23. wallshelf_35 is close to curtain_24. wallshelf_35 is close to walllamp_27. wallshelf_35 is close to bathtub_30. wallshelf_35 is close to character_65. wallshelf_35 is inside bathroom_1. wallshelf_35 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
obs(cupboard_229, Look for milk and cereal)
Get this information:  cupboard_229 is on wall_211. cupboard_229 is inside dining_room_201. cupboard_229 is close to stovefan_288. cupboard_229 is close to fridge_289. cupboard_229 is close to coffe_maker_290. cupboard_229 is close to toaster_292. cupboard_229 is close to shower_36. cupboard_229 is close to kitchen_counter_230. cupboard_229 is close to sink_231. cupboard_229 is close to faucet_232. cupboard_229 is close to microwave_297. cupboard_229 is close to tray_296. cupboard_229 is close to wall_11. cupboard_229 is close to oven_295. cupboard_229 is close to wall_15. cupboard_229 is close to ceiling_18. cupboard_229 is close to wall_211. cupboard_229 is close to wall_212. cupboard_229 is close to ceiling_216. cupboard_229 is close to ceiling_221. cupboard_229 is close to character_65. cupboard_229 is CLEAN. cupboard_229 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(kitchen_counter_230, Look for milk and cereal)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
obs(wallshelf_234, Look for milk and cereal)
Get this information:  wallshelf_234 is facing drawing_240. wallshelf_234 is facing drawing_238. wallshelf_234 is facing drawing_239. wallshelf_234 is inside dining_room_201. wallshelf_234 is close to stovefan_288. wallshelf_234 is close to bookshelf_354. wallshelf_234 is close to oven_295. wallshelf_234 is close to wall_332. wallshelf_234 is close to photoframe_430. wallshelf_234 is close to drawing_241. wallshelf_234 is close to drawing_242. wallshelf_234 is close to drawing_243. wallshelf_234 is close to wall_212. wallshelf_234 is close to drawing_403. wallshelf_234 is close to wall_214. wallshelf_234 is close to wall_215. wallshelf_234 is close to ceiling_337. wallshelf_234 is close to ceiling_220. wallshelf_234 is close to ceiling_221. wallshelf_234 is close to character_65. wallshelf_234 is on wall_212. wallshelf_234 is CLEAN.
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the wallshelf_235. 
##############################
From agent.py
obs(wallshelf_235, Look for milk and cereal)
Get this information:  wallshelf_235 is inside dining_room_201. wallshelf_235 is close to table_226. wallshelf_235 is close to wall_331. wallshelf_235 is close to wall_332. wallshelf_235 is close to filing_cabinet_399. wallshelf_235 is close to drawing_241. wallshelf_235 is close to drawing_242. wallshelf_235 is close to drawing_402. wallshelf_235 is close to drawing_404. wallshelf_235 is close to drawing_403. wallshelf_235 is close to wall_214. wallshelf_235 is close to drawing_243. wallshelf_235 is close to wall_213. wallshelf_235 is close to ceiling_337. wallshelf_235 is close to doorjamb_346. wallshelf_235 is close to ceiling_219. wallshelf_235 is close to ceiling_220. wallshelf_235 is close to light_411. wallshelf_235 is close to ceiling_342. wallshelf_235 is close to character_65. wallshelf_235 is facing television_248. wallshelf_235 is CLEAN.
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
obs(fridge_289, Look for milk and cereal)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OFF. fridge_289 is CLEAN. fridge_289 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_toaster_292(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(bowl,toaster_instance)
        else:
            exp(bowl,toaster_instance)
    eff:
        unknown[bowl]=False
        close[bowl,toaster_instance]=True
        close[toaster_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_heat(milk:item, cup:item, microwave:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cup, microwave)
        achieve_once closed(microwave)
        achieve is_on(microwave)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        pour_milk_and_heat(milk, cup, microwave)
        # Pour the milk into the cup and heat it using the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_and_heat(milk:item, cup:item, microwave:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cup, microwave)
        achieve_once closed(microwave)
        achieve is_on(microwave)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        pour_milk_and_heat(milk, cup, microwave)
        # Pour the milk into the cup and heat it using the microwave

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is opened. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(cup_2063, microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. microwave_297 is close cup_2063. cup_2063 is close microwave_297. cup_2063 is inside microwave_297. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal to the hot milk inside the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select milk that is already inside the cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        add_cereal_to_hot_milk(cereal, milk, cup)
        # Add the cereal to the hot milk in the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal to the hot milk inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select milk that is already inside the cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        add_cereal_to_hot_milk(cereal, milk, cup)
        # Add the cereal to the hot milk in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal to the hot milk inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select milk that is already inside the cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        add_cereal_to_hot_milk(cereal, milk, cup)
        # Add the cereal to the hot milk in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(wallshelf_35)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(wallshelf_35)', 'walk_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(microwave_297)', 'putin_executor(cup_2063, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 218 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 23
goal generate times: 6
goal correct times: 1
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
