From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt that needs to be hand washed.', '2. Hand wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt(item:item):
    # Function to determine if a given item is a shirt
    symbol is_shirt_instance = is_clothes_shirt(item)
    return is_shirt_instance

behavior __goal__():
    body:
        if exists shirt: item : (is_shirt(shirt) and dirty(shirt) and not visited(shirt)):
            # If we have already found a dirty and unvisited shirt, move close to it
            bind shirt: item where:
                is_shirt(shirt) and dirty(shirt) and not visited(shirt)
            achieve close_char(char, shirt)
        else:
            # Check all items to find the shirt if not found initially
            foreach shirt: item:
                if is_shirt(shirt) and dirty(shirt) and not visited(shirt):
                    observe(shirt, "Find the shirt that needs to be hand washed")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_shirt(shirt:item):
    # Determines if the shirt is the specific target for hand washing
    symbol valid_shirt = is_clothes_shirt(shirt) and dirty(shirt)
    return valid_shirt

behavior __goal__():
    body:
        if exists shirt: item : (is_target_shirt(shirt) and not visited(shirt)):
            # If a shirt meeting the criteria is found and has been marked as not visited
            bind shirt: item where:
                is_target_shirt(shirt) and not visited(shirt)
            observe(shirt, "Verify this is the shirt that needs to be washed")
            achieve close_char(char, shirt)

        else:
            # Check all unvisited clothes items to find the target shirt
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if this is the shirt that needs to be hand washed")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_target_shirt(shirt:item):
    # Determines if the shirt is the specific target for hand washing
    symbol valid_shirt = is_clothes_shirt(shirt) and dirty(shirt)
    return valid_shirt

behavior __goal__():
    body:
        if exists shirt: item : (is_target_shirt(shirt) and not visited(shirt)):
            # If a shirt meeting the criteria is found and has been marked as not visited
            bind shirt: item where:
                is_target_shirt(shirt) and not visited(shirt)
            observe(shirt, "Verify this is the shirt that needs to be washed")
            achieve close_char(char, shirt)

        else:
            # Check all unvisited clothes items to find the target shirt
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if this is the shirt that needs to be hand washed")

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if this is the shirt that needs to be hand washed)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Verify this is the shirt that needs to be washed)
##############################
From agent.py
obs(clothes_shirt_2086, Verify this is the shirt that needs to be washed)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_food_dessert_2018_around_fridge_289(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item, soap:item, water_source:item):
    body:
        achieve_once has_water(shirt) # Wet the shirt for washing
        achieve_once inhand(soap) # Temporarily hold the soap to wash the shirt
        wash(shirt) # Wash the shirt with the soap

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind soap: item where:
            is_soap(soap) # Select soap for washing
        
        bind water_source: item where:
            is_sink(water_source) or is_bathtub(water_source)
        # Select a water source for washing

        wash_shirt(shirt, soap, water_source)
        # Wash the shirt using the selected soap and water source

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_shirt(shirt:item, soap:item, water_source:item):
    body:
        achieve_once has_water(shirt) # Wet the shirt for washing
        achieve_once inhand(soap) # Temporarily hold the soap to wash the shirt
        wash(shirt) # Wash the shirt with the soap

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind soap: item where:
            is_soap(soap) # Select soap for washing
        
        bind water_source: item where:
            is_sink(water_source) or is_bathtub(water_source)
        # Select a water source for washing

        wash_shirt(shirt, soap, water_source)
        # Wash the shirt using the selected soap and water source

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(bathroom_counter_41)exp(soap_2053, bathroom_counter_41)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(kitchen_counter_230)put_executor(soap_2053, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_232)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(soap_2053, bathroom_counter_41)
Fail to find soap_2053 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(soap_2053, sink_42)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(soap_2053, sink_42)
Find soap_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(soap_2053)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the sink_42. Robot is close to the soap_2053. 
##############################
From agent.py
grab_executor(soap_2053)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the sink_42. Robot is close to the soap_2053. Grabbing soap_2053 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once plugged(iron) # Plug in the iron
        achieve_once is_on(iron) # Turn on the iron
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board

behavior unplug_iron(iron:item):
    body:
        achieve_once is_off(iron) # Turn off the iron
        achieve_once unplugged(iron) # Unplug the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        iron_shirt(iron, shirt, ironing_board)
        unplug_iron(iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once plugged(iron) # Plug in the iron
        achieve_once is_on(iron) # Turn on the iron
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board

behavior unplug_iron(iron:item):
    body:
        achieve_once is_off(iron) # Turn off the iron
        achieve_once unplugged(iron) # Unplug the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        iron_shirt(iron, shirt, ironing_board)
        unplug_iron(iron)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(kitchen_counter_230)put_executor(soap_2053, kitchen_counter_230)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(iron_2089)switchoff_executor(iron_2089)plugout_executor(iron_2089)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(soap_2053, kitchen_counter_230)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)switchoff_executor(iron_2089)plugout_executor(iron_2089)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(soap_2053, kitchen_counter_230)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the soap_2053. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close soap_2053. soap_2053 is close kitchen_counter_230. soap_2053 is on kitchen_counter_230. soap_2053 released by left hand. 
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the iron_2089. Robot is close to the ironing_board_2074. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the iron_2089. Robot is close to the ironing_board_2074. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the iron_2089. Robot is close to the ironing_board_2074. iron_2089 is turned on. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
switchoff_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is turned off. 
##############################
From agent.py
plugout_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is unplugged. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(bathroom_counter_41)', 'walk_executor(sink_42)', 'walk_executor(soap_2053)', 'grab_executor(soap_2053)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(ironing_board_2074)', 'walk_executor(kitchen_counter_230)', 'put_executor(soap_2053, kitchen_counter_230)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'switchoff_executor(iron_2089)', 'plugout_executor(iron_2089)']
Time info:
Time consume: 157 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 6
goal generate times: 4
goal correct times: 0
action_num: 23

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
