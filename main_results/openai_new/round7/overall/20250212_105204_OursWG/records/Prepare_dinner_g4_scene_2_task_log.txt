From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs in the kitchen.', '2. Cook the rice and scramble the eggs separately.', '3. Mix the cooked rice and scrambled eggs together in a pan and fry.', '4. Serve the fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_food_rice_and_eggs(item: item):
    # Function to check if the item is rice or eggs
    symbol is_target_item = is_food_rice(item) or is_food_egg(item)
    return is_target_item

behavior __goal__():
    body:
        foreach item: item:
            if find_food_rice_and_eggs(item) and not visited(item):
                # Check all unvisited items to find rice and eggs in the kitchen
                observe(item, "Check if this item is rice or eggs")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_food_rice_and_eggs(item: item):
    # Function to check if the item is rice or eggs
    symbol is_target_item = is_food_rice(item) or is_food_egg(item)
    return is_target_item

behavior __goal__():
    body:
        foreach item: item:
            if find_food_rice_and_eggs(item) and not visited(item):
                # Check all unvisited items to find rice and eggs in the kitchen
                observe(item, "Check if this item is rice or eggs")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)obs(food_egg_2053, Check if this item is rice or eggs)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)obs(food_rice_2067, Check if this item is rice or eggs)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2053, Check if this item is rice or eggs)obs(food_rice_2067, Check if this item is rice or eggs)
##############################
From agent.py
obs(food_egg_2053, Check if this item is rice or eggs)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_rice_2067, Check if this item is rice or eggs)
Get this information:  food_rice_2067 is inside dining_room_1. food_rice_2067 is inside fridge_140. food_rice_2067 is close to fridge_140. food_rice_2067 is close to character_219. food_rice_2067 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_after_shave_2029_around_bathroom_cabinet_305(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(after_shave,bathroom_cabinet_instance)
        else:
            exp(after_shave,bathroom_cabinet_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,after_shave]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_kitchen(item: item):
    # Function to check if an item is in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen_counter(room) or is_kitchen_counter(room) and inside(item, room))
    return in_kitchen

behavior cook_rice_and_scramble_eggs(rice:item, egg:item, stove:item, fryingpan:item, pot:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Cook the rice in a pot on the stove

        achieve_once inside_char(char, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve_once on(egg, fryingpan)
        achieve is_on(stove)
        # Scramble the eggs in a fryingpan on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select eggs

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if is_in_kitchen(rice) and is_in_kitchen(egg):
            cook_rice_and_scramble_eggs(rice, egg, stove, fryingpan, pot)
        else:
            # Ensure rice and eggs are in the kitchen before attempting to cook
            foreach item: item:
                if (is_food_rice(item) or is_food_egg(item)) and not visited(item):
                    observe(item, "Check if rice and eggs are in the kitchen or need to be moved there")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(dish:item, stove:item):
    body:
        achieve_once inside(dish, stove)
        # Place the dish containing rice on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to cook the rice

behavior scramble_eggs(frying_pan:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, frying_pan)
        # Place the eggs inside the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve cut(egg)
        # Scramble the eggs by cutting them while cooking

behavior __goal__():
    body:
        bind dish: item where:
            is_food_rice(dish)
        # Select the dish containing rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        cook_rice(dish, stove)
        scramble_eggs(frying_pan, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice(dish:item, stove:item):
    body:
        achieve_once inside(dish, stove)
        # Place the dish containing rice on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to cook the rice

behavior scramble_eggs(frying_pan:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, frying_pan)
        # Place the eggs inside the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve cut(egg)
        # Scramble the eggs by cutting them while cooking

behavior __goal__():
    body:
        bind dish: item where:
            is_food_rice(dish)
        # Select the dish containing rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        cook_rice(dish, stove)
        scramble_eggs(frying_pan, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(stove_2090)putin_executor(food_rice_2067, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the food_rice_2067. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the food_rice_2067. Robot is close to the fridge_140. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
putin_executor(food_rice_2067, stove_2090)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. food_rice_2067 is inside stove_2090. food_rice_2067 is close stove_2090. stove_2090 is close food_rice_2067. food_rice_2067 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_132)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. Robot is close to the food_rice_2067. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. Robot is close to the food_rice_2067. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_egg_2053. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(doorjamb_37)exp(knife_2036, doorjamb_37)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(doorjamb_37)
Robot find: phone_47, Robot is close to the doorjamb_37. 
##############################
From agent.py
exp(knife_2036, doorjamb_37)
Fail to find knife_2036 around doorjamb_37. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(photoframe_102)exp(knife_2036, photoframe_102)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(photoframe_102)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
exp(knife_2036, photoframe_102)
Fail to find knife_2036 around photoframe_102. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(photoframe_102)exp(knife_2036, photoframe_102)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(photoframe_102)
Robot find: Robot is close to the bookshelf_137. 
##############################
From agent.py
exp(knife_2036, photoframe_102)
Fail to find knife_2036 around photoframe_102. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(cupboard_130)exp(knife_2036, cupboard_130)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Robot, please locate knife_2036 inside dining_room_1. You will find knife_2036 inside dishwasher_143. Dishwasher_143 is in the same room and close to the knife, which is also within it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please locate knife_2036 inside dining_room_1. You will find knife_2036 inside dishwasher_143. Dishwasher_143 is in the same room and close to the knife, which is also within it.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_egg_2053 around fridge_140.
Action 5: Observe around food_egg_2053 with the question of Check if this item is rice or eggs.
Action 6: Observe around food_rice_2067 with the question of Check if this item is rice or eggs.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: Walk to food_rice_2067.
Action 10: Grab food_rice_2067.
Action 11: Walk to stove_2090.
Action 12: Put food_rice_2067 into stove_2090.
Action 13: Switch on stove_2090.
Action 14: Walk to kitchen_counter_132.
Action 15: look for fryingpan_2107 around kitchen_counter_132.
Action 16: Walk to food_egg_2053.
Action 17: Grab food_egg_2053.
Action 18: Walk to fryingpan_2107.
Action 19: Put food_egg_2053 into fryingpan_2107.
Action 20: Grab fryingpan_2107.
Action 21: Walk to stove_2090.
Action 22: Put fryingpan_2107 on stove_2090.
Action 23: Walk to food_egg_2053.
Action 24: Grab food_egg_2053.
Action 25: Walk to cutting_board_2080.
Action 26: Put food_egg_2053 on cutting_board_2080.
Action 27: Walk to knifeblock_52.
Action 28: look for knife_2036 around knifeblock_52.
Action 29: Walk to food_egg_2053.
Action 30: Grab food_egg_2053.
Action 31: Walk to fryingpan_2107.
Action 32: Put food_egg_2053 into fryingpan_2107.
Action 33: Walk to food_egg_2053.
Action 34: Grab food_egg_2053.
Action 35: Walk to cutting_board_2080.
Action 36: Put food_egg_2053 on cutting_board_2080.
Action 37: Walk to doorjamb_37.
Action 38: look for knife_2036 around doorjamb_37.
Action 39: Walk to food_egg_2053.
Action 40: Grab food_egg_2053.
Action 41: Walk to fryingpan_2107.
Action 42: Put food_egg_2053 into fryingpan_2107.
Action 43: Walk to food_egg_2053.
Action 44: Grab food_egg_2053.
Action 45: Walk to cutting_board_2080.
Action 46: Put food_egg_2053 on cutting_board_2080.
Action 47: Walk to photoframe_102.
Action 48: look for knife_2036 around photoframe_102.
Action 49: Walk to food_egg_2053.
Action 50: Grab food_egg_2053.
Action 51: Walk to fryingpan_2107.
Action 52: Put food_egg_2053 into fryingpan_2107.
Action 53: Walk to food_egg_2053.
Action 54: Grab food_egg_2053.
Action 55: Walk to cutting_board_2080.
Action 56: Put food_egg_2053 on cutting_board_2080.
Action 57: Walk to photoframe_102.
Action 58: look for knife_2036 around photoframe_102.
Action 59: Walk to food_egg_2053.
Action 60: Grab food_egg_2053.
Action 61: Walk to fryingpan_2107.
Action 62: Put food_egg_2053 into fryingpan_2107.
Action 63: Walk to food_egg_2053.
Action 64: Grab food_egg_2053.
Action 65: Walk to cutting_board_2080.
Action 66: Put food_egg_2053 on cutting_board_2080.
Action 67: Walk to cupboard_131.
Action 68: Open cupboard_131.
Action 69: look for knife_2036 around cupboard_131.
Action 70: Walk to food_egg_2053.
Action 71: Grab food_egg_2053.
Action 72: Walk to fryingpan_2107.
Action 73: Put food_egg_2053 into fryingpan_2107.
Action 74: Walk to food_egg_2053.
Action 75: Grab food_egg_2053.
Action 76: Walk to cutting_board_2080.
Action 77: Put food_egg_2053 on cutting_board_2080.
Action 78: Walk to cupboard_130.

##############################
From agent.py
exp(knife_2036, cupboard_130)
Fail to find knife_2036 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
cut_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
def has_fried_rice_and_egg_pan(pan: item):
    # Check if pan contains cooked rice and scrambled eggs
    symbol has_rice_and_egg = exists rice: item : (is_food_rice(rice) and inside(rice, pan)) and exists egg: item : (is_food_egg(egg) and inside(egg, pan))
    return has_rice_and_egg

behavior mix_rice_and_eggs(pan: item):
    body:
        achieve has_fried_rice_and_egg_pan(pan)

behavior fry_in_pan(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(pan)
        # Mix the cooked rice and scrambled eggs in the pan

        fry_in_pan(pan, stove)
        # Fry the mixture in the pan on a stove
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5890, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_stovefan_139(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(food_onion,stovefan_instance)
        else:
            exp(food_onion,stovefan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stovefan_instance]=True
        close[stovefan_instance,food_onion]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#goal_representation
 
def has_fried_rice_and_egg_pan(pan: item):
    # Check if pan contains cooked rice and scrambled eggs
    symbol has_rice_and_egg = exists rice: item : (is_food_rice(rice) and inside(rice, pan)) and exists egg: item : (is_food_egg(egg) and inside(egg, pan))
    return has_rice_and_egg

behavior mix_rice_and_eggs(pan: item):
    body:
        achieve has_fried_rice_and_egg_pan(pan)

behavior fry_in_pan(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(pan)
        # Mix the cooked rice and scrambled eggs in the pan

        fry_in_pan(pan, stove)
        # Fry the mixture in the pan on a stove

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5927, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_dough_2021_around_oven_141(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dough,oven_instance)
        else:
            exp(dough,oven_instance)
    eff:
        unknown[dough]=False
        close[dough,oven_instance]=True
        close[oven_instance,dough]=True
    

#goal_representation
 
def has_fried_rice_and_egg_pan(pan: item):
    # Check if pan contains cooked rice and scrambled eggs
    symbol has_rice_and_egg = exists rice: item : (is_food_rice(rice) and inside(rice, pan)) and exists e: item : (is_food_egg(e) and inside(e, pan))
    return has_rice_and_egg

behavior mix_rice_and_eggs(pan: item):
    body:
        achieve has_fried_rice_and_egg_pan(pan)

behavior fry_in_pan(pan: item, stove: item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(pan)
        # Mix the cooked rice and scrambled eggs in the pan

        fry_in_pan(pan, stove)
        # Fry the mixture in the pan on a stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_rice_and_eggs(cooked_rice:item, scrambled_eggs:item, fryingpan:item):
    body:
        achieve_once inside(cooked_rice, fryingpan)
        achieve_once inside(scrambled_eggs, fryingpan)
        achieve is_on(stove)
        # Ensure that the stove is on to fry the mixture

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice)
        # Select the cooked rice

        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(cooked_rice, scrambled_eggs, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<cooked_rice: item>, Variable<scrambled_eggs: item>, Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2005_around_oven_141(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#goal_representation
 
behavior mix_rice_and_eggs(cooked_rice:item, scrambled_eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(cooked_rice, fryingpan)
        achieve_once inside(scrambled_eggs, fryingpan)
        achieve is_on(stove)
        # Ensure that the stove is on to fry the mixture

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice)
        # Select the cooked rice

        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(cooked_rice, scrambled_eggs, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_rice_and_eggs(cooked_rice:item, scrambled_eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(cooked_rice, fryingpan)
        achieve_once inside(scrambled_eggs, fryingpan)
        achieve is_on(stove)
        # Ensure that the stove is on to fry the mixture

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice)
        # Select the cooked rice

        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        mix_rice_and_eggs(cooked_rice, scrambled_eggs, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(fryingpan_2107)putin_executor(food_rice_2067, fryingpan_2107)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_rice_2067, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the fryingpan_2107. food_rice_2067 is inside fryingpan_2107. food_rice_2067 is close fryingpan_2107. fryingpan_2107 is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. food_egg_2053 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_chair_374_around_table_127(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior serve_fried_rice_with_egg(plate: item, table: item, fried_rice: item):
    body:
        achieve_once on(fried_rice, plate)
        # Place the fried rice on the plate
        achieve_once on(plate, table)
        # Place the plate with fried rice on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind table: item where:
            is_table(table)
        # Select a table where the fried rice will be served

        bind fried_rice: item where:
            is_food_food(fried_rice)
        # Select the fried rice with egg

        serve_fried_rice_with_egg(plate, table, fried_rice)
        # Serve the fried rice with egg on a plate and place it on the table
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior serve_fried_rice_with_egg(plate: item, table: item, fried_rice: item):
    body:
        achieve_once on(fried_rice, plate)
        # Place the fried rice on the plate
        achieve_once on(plate, table)
        # Place the plate with fried rice on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind table: item where:
            is_table(table)
        # Select a table where the fried rice will be served

        bind fried_rice: item where:
            is_food_food(fried_rice)
        # Select the fried rice with egg

        serve_fried_rice_with_egg(plate, table, fried_rice)
        # Serve the fried rice with egg on a plate and place it on the table
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_food_2055)grab_executor(food_food_2055)walk_executor(plate_2105)put_executor(food_food_2055, plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the knife_2036. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_2055)grab_executor(food_food_2055)walk_executor(plate_2105)put_executor(food_food_2055, plate_2105)
##############################
From agent.py
walk_executor(food_food_2055)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_food_2055. 
##############################
From agent.py
grab_executor(food_food_2055)
Robot find: Robot is close to the knife_2036. Robot is close to the fridge_140. Robot is close to the food_food_2055. Grabbing food_food_2055 by left hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_food_2055. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_food_2055, plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_food_2055. Robot is close to the plate_2105. Robot is close to the table_127. food_food_2055 is close plate_2105. plate_2105 is close food_food_2055. food_food_2055 is on plate_2105. food_food_2055 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(stove_2090)', 'putin_executor(food_rice_2067, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(kitchen_counter_132)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(doorjamb_37)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(photoframe_102)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(photoframe_102)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(cupboard_130)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(knife_2036)', 'grab_executor(knife_2036)', 'walk_executor(food_egg_2053)', 'cut_executor(food_egg_2053)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_rice_2067, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(table_127)', 'walk_executor(food_food_2055)', 'grab_executor(food_food_2055)', 'walk_executor(plate_2105)', 'put_executor(food_food_2055, plate_2105)']
Time info:
Time consume: 509 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 59
goal generate times: 6
goal correct times: 1
action_num: 104

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
