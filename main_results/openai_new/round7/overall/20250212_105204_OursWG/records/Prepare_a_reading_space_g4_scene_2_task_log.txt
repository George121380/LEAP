From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and place it on the coffee table in the home office.', '2. Prepare a cup of hot milk and place it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_towel_rack_300_around_bathtub_297(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel_rack,bathtub_instance)
        else:
            exp(towel_rack,bathtub_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathtub_instance]=True
        close[bathtub_instance,towel_rack]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk(milk:item, stove:item):
    body:
        achieve once inhand(milk) # Temporarily hold the milk
        achieve has_water(milk) # Assume the milk is in a container with water
        achieve_once on(milk, stove) # Place the milk container on the stove
        achieve is_on(stove) # Turn on the stove to heat the milk

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table) # Place the heated milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove for heating the milk

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove)  # Heat the milk on the stove
        place_milk_on_table(milk, table)  # Place the heated milk on the coffee table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inhand') at line 5804, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once has_water(milk) # Assume the milk is in a container with water
        achieve_once on(milk, stove) # Place the milk container on the stove
        achieve is_on(stove) # Turn on the stove to heat the milk

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table) # Place the heated milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove for heating the milk

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove)  # Heat the milk on the stove
        place_milk_on_table(milk, table)  # Place the heated milk on the coffee table in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once has_water(milk) # Assume the milk is in a container with water
        achieve_once on(milk, stove) # Place the milk container on the stove
        achieve is_on(stove) # Turn on the stove to heat the milk

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table) # Place the heated milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove for heating the milk

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove)  # Heat the milk on the stove
        place_milk_on_table(milk, table)  # Place the heated milk on the coffee table in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)switchon_executor(stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)switchon_executor(stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(milk_2074, stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. milk_2074 is close stove_2090. stove_2090 is close milk_2074. milk_2074 is on stove_2090. milk_2074 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. table_193 is close milk_2074. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the milk is in a proper container and heated on the stove. Then, place the heated milk on the coffee table in the home office. So far, the milk was only placed on a table without the heating step completed.
##############################
From agent.py
Human Instruction: You need to ensure that the milk is in a proper container and heated on the stove. Then, place the heated milk on the coffee table in the home office. So far, the milk was only placed on a table without the heating step completed.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Grab book_2091.
Action 5: Walk to table_193.
Action 6: Put book_2091 on table_193.
Action 7: Walk to fridge_140.
Action 8: Switch off fridge_140.
Action 9: Open fridge_140.
Action 10: look for milk_2074 around fridge_140.
Action 11: Walk to milk_2074.
Action 12: Grab milk_2074.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Walk to stove_2090.
Action 16: Put milk_2074 on stove_2090.
Action 17: Switch on stove_2090.
Action 18: Walk to milk_2074.
Action 19: Grab milk_2074.
Action 20: Walk to table_193.
Action 21: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_heated(milk:item):
    # Function to check if the milk is heated and was placed on stove
    symbol is_heated = exists stove: item : (is_stove(stove) and on(milk, stove) and is_on(stove))
    return is_heated

behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove) # Place the milk on the stove
        achieve is_on(stove) # Ensure the stove is on to heat the milk

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the table with ID 193

        bind milk: item where:
            is_milk(milk) and not is_heated(milk)
        # Select milk that has not been heated

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_milk_heated(milk):
            heat_milk_on_stove(milk, stove)
        # Heat the milk on the stove

        place_on_table(milk, table)
        # Place the milk on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_heated not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove) # Place the milk on the stove
        achieve is_on(stove) # Ensure the stove is on to heat the milk

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the table with ID 193

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_milk_heated(milk):
            heat_milk_on_stove(milk, stove)
        # Heat the milk on the stove

        place_on_table(milk, table)
        # Place the milk on the table

def is_milk_heated(milk:item):
    # Function to check if the milk is heated and was placed on stove
    symbol is_heated = exists stove: item : (is_stove(stove) and on(milk, stove) and is_on(stove))
    return is_heated
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_milk_heated not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dough_2021_around_oven_141(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dough,oven_instance)
        else:
            exp(dough,oven_instance)
    eff:
        unknown[dough]=False
        close[dough,oven_instance]=True
        close[oven_instance,dough]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove) # Place the milk on the stove
        achieve is_on(stove) # Ensure the stove is on to heat the milk

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the table with ID 193

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk_on_stove(milk, stove)
        # Heat the milk on the stove

        place_on_table(milk, table)
        # Place the milk on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove) # Place the milk on the stove
        achieve is_on(stove) # Ensure the stove is on to heat the milk

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select the table with ID 193

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk_on_stove(milk, stove)
        # Heat the milk on the stove

        place_on_table(milk, table)
        # Place the milk on the table

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(milk_2074, stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. milk_2074 is close stove_2090. milk_2074 is on stove_2090. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The milk needs to be in a proper container and heated on the stove. Ensure the milk is heated before placing it on the coffee table in the home office.
##############################
From agent.py
Human Instruction: The milk needs to be in a proper container and heated on the stove. Ensure the milk is heated before placing it on the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Grab book_2091.
Action 5: Walk to table_193.
Action 6: Put book_2091 on table_193.
Action 7: Walk to fridge_140.
Action 8: Switch off fridge_140.
Action 9: Open fridge_140.
Action 10: look for milk_2074 around fridge_140.
Action 11: Walk to milk_2074.
Action 12: Grab milk_2074.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Walk to stove_2090.
Action 16: Put milk_2074 on stove_2090.
Action 17: Switch on stove_2090.
Action 18: Walk to milk_2074.
Action 19: Grab milk_2074.
Action 20: Walk to table_193.
Action 21: Put milk_2074 on table_193.
Action 22: Grab milk_2074.
Action 23: Walk to stove_2090.
Action 24: Put milk_2074 on stove_2090.
Action 25: Walk to milk_2074.
Action 26: Grab milk_2074.
Action 27: Walk to table_193.
Action 28: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove)
        achieve is_on(stove)

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        heat_milk_on_stove(milk, stove)
        place_milk_on_table(milk, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once on(milk, stove)
        achieve is_on(stove)

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        heat_milk_on_stove(milk, stove)
        place_milk_on_table(milk, table)
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(milk_2074, stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. milk_2074 is close stove_2090. milk_2074 is on stove_2090. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the milk is heated on the stove before placing it on the coffee table in the home office. It seems from the actions taken that the milk was frequently moved between the stove and the table but with no clear confirmation of the milk being heated appropriately. Adjust accordingly to complete the task.
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(milk_2074, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)', 'grab_executor(milk_2074)', 'walk_executor(stove_2090)', 'put_executor(milk_2074, stove_2090)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)', 'grab_executor(milk_2074)', 'walk_executor(stove_2090)', 'put_executor(milk_2074, stove_2090)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)']
Time info:
Time consume: 200 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 53
goal generate times: 4
goal correct times: 3
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
