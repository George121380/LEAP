############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
 
def locate_cup():
    # Function to locate a cup
    symbol has_cup=exists c: item : is_cup(c)
    return has_cup

def locate_milk_container():
    # Function to locate milk container
    symbol has_milk=exists m: item : is_milk(m)
    return has_milk

behavior fill_milk_into_cup(cup:item, milk_container:item):
    body:
        achieve clean(cup) # Ensure the cup is clean before using
        achieve inside(milk_container, cup) # Fill the cup with milk

behavior __goal__():
    body:
        # Check if theres already a known cup and milk container
        if locate_cup() and locate_milk_container():
            bind cup: item where:
                is_cup(cup)
            bind milk_container: item where:
                is_milk(milk_container)
            # Ensure milk is poured into the cup
            fill_milk_into_cup(cup, milk_container)
        else:
            # If not, explore to find them
            foreach o: item:
                if is_cup(o) and not visited(o):
                    observe(o, "Locate a cup to use")
                if is_milk(o) and not visited(o):
                    observe(o, "Locate a milk container")

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def has_milk_in_cup(cup:item):
    # Function to check if the cup has milk inside
    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)
    return has_milk

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Ensure the cup is placed inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave to start heating

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk_in_cup(cup)
        # Select cup which contains milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select microwave
        
        place_cup_in_microwave(cup, microwave)
        start_microwave(microwave)

############################################################
When the sub-task is: 1. Locate all the bowls and the plates.
A successful representation:
 
def has_bowls_or_plates():
    # Function to check if there are bowls or plates known
    symbol has_items=exists o: item : (is_bowl(o) or is_plate(o))
    return has_items

behavior locate_unvisited_bowls_and_plates():
    body:
        foreach o: item:
            if (is_bowl(o) or is_plate(o)) and not visited(o):
                observe(o, "Locate bowls and plates")

behavior __goal__():
    body:
        if has_bowls_or_plates():
            # If there are known bowls or plates, ensure to locate them
            foreach o: item:
                if is_bowl(o) or is_plate(o):
                    achieve visited(o)
        else:
            # If no bowls or plates are known, locate them
            locate_unvisited_bowls_and_plates()

############################################################
When the sub-task is: 2. Place the bowls and plates in the dishwasher and start it.
A successful representation:
 
behavior place_bowls_and_plates_in_dishwasher(bowl1:item, bowl2:item, plate:item, dishwasher:item):
    body:
        achieve inside(bowl1, dishwasher) # Place bowl_2071 in dishwasher
        achieve inside(bowl2, dishwasher) # Place bowl_2072 in dishwasher
        achieve inside(plate, dishwasher) # Place plate_1000 in dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind bowl1: item where:
            is_bowl(bowl1) and id[bowl1]==2071
        # Select bowl with ID 2071

        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2]==2072
        # Select bowl with ID 2072

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select plate with ID 1000

        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select dishwasher with ID 1001

        place_bowls_and_plates_in_dishwasher(bowl1, bowl2, plate, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Select the light inside the bathroom

        achieve is_on(light)
        # Turn on the light in the bathroom

############################################################
When the sub-task is: Cut the chicken into pieces, then put it back in the fridge.
A successful representation:

behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_chicken(chicken)
        store_in_fridge(chicken, fridge)

############################################################
When the sub-task is: Clean the bathroom sink.
A successful representation:
 
behavior clean_bathroom_sink(bathroom: item):
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom

        if dirty(sink):
            # If the sink is dirty, clean it
            scrub(sink)
            rinse(sink)
        achieve clean(sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        clean_bathroom_sink(bathroom)

############################################################
When the sub-task is: 1. Find the chicken and onion.
A successful representation:
 
def has_chicken_and_onion():
    # Function to check if there is a chicken and an onion known
    symbol has_items=exists o: item : (is_food_chicken(o) or is_food_onion(o))
    return has_items

behavior locate_unvisited_chicken_and_onion():
    body:
        foreach o: item:
            if (is_food_chicken(o) or is_food_onion(o)) and not visited(o):
                observe(o, "Locate chicken and onion")

behavior __goal__():
    body:
        if has_chicken_and_onion():
            # If there is a known chicken or onion, ensure to locate them
            foreach o: item:
                if is_food_chicken(o) or is_food_onion(o):
                    achieve visited(o)
        else:
            # If no chicken or onion are known, locate them
            locate_unvisited_chicken_and_onion()

############################################################
When the sub-task is: 2. Prepare the onion as needed.
A successful representation:
behavior clean_and_cut_onion(onion:item, faucet:item, sink:item):
    body:
        achieve_once inside(onion, sink)
        if not clean(onion):
            if is_faucet(faucet) and close(faucet, sink):
                achieve_once is_on(faucet)
                wash(onion)
                achieve_once is_off(faucet)
            else:
                wash(onion)
        achieve cut(onion)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        clean_and_cut_onion(onion, faucet, sink)
############################################################
When the sub-task is: 3. Put the chicken and onion together into the oven to roast.
A successful representation:
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior start_roasting(oven:item):
    body:
        achieve closed(oven) # Ensure the oven door is closed
        achieve is_on(oven) # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be roasted

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be roasted

        bind oven: item where:
            is_oven(oven)
        # Select the oven for roasting

        roast_chicken_with_onion(chicken, onion, oven)
        start_roasting(oven)

############################################################
When the sub-task is: Prepare a sink of soapy water in the bathroom.
A successful representation:
behavior turn_on_faucet(faucet:item):
    body:
        achieve_once is_on(faucet)
        # Ensure the faucet is turned on to fill the sink with water

behavior add_soap_to_water(soap:item, sink:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        turn_on_faucet(faucet)
        # Fill the sink with water using the faucet

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select a soap

        fill_sink_with_water(sink, faucet)
        add_soap_to_water(soap, sink)
############################################################
When the sub-task is: 1. Locate the book and place it on the table in the home office.
A successful representation:
 
def has_book_on_table(table:item):
    # Function to check if there is a book on a specified table
    symbol has_book=exists o: item : is_book(o) and on(o, table) 
    return has_book

behavior place_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        if exists book: item : is_book(book):
            bind book: item where:
                is_book(book)
            place_book_on_table(book, table)

        else:
            # If no book is known, locate it and then place on the table
            foreach obj: item:
                if is_book(obj) and not visited(obj):
                    observe(obj, "Locate the book to place on the table")
                    if on(obj, table):
                        achieve visited(obj)

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light inside the home office

        achieve is_on(light)
        # Turn on the light in the home office

############################################################
When the sub-task is: 1. Locate all the windows in the house.
A successful representation:
 
def is_window_in_house(window:item):
    # Function to check if a window is in the house
    symbol is_in_house=exists room: item : inside(window, room)
    return is_in_house

behavior locate_unvisited_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Locate all windows in the house")

behavior __goal__():
    body:
        if exists window: item : is_window(window) and is_window_in_house(window):
            # If there are known windows in the house, ensure to locate them
            foreach window: item:
                if is_window(window) and is_window_in_house(window):
                    achieve visited(window)
        else:
            # If no windows are known, locate them
            locate_unvisited_windows()

############################################################
When the sub-task is: 2. Use a towel to wipe each window thoroughly.
A successful representation:
 
behavior clean_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        wipe(window)
        achieve clean(window)

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel

        foreach window: item:
            if is_window(window) and open(window):
                # Clean each open window
                clean_window(window, towel)

############################################################
When the sub-task is: 1. Find the basket containing clothes.
A successful representation:
 
def is_clothes_in_basket(basket:item):
    # Function to check if there are clothes in a specified basket
    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and is_clothes_in_basket(basket):
            # If we have already found the basket with clothes, we can directly approach it
            bind basket: item where:
                is_basket_for_clothes(basket) and is_clothes_in_basket(basket)
            achieve close_char(char, basket)

        else:
            # Check all baskets in the scene that have not been visited
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check is there any clothes in the basket")

############################################################
When the sub-task is: 2. Add soap to the washing machine.
A successful representation:
 
behavior add_soap_to_washing_machine():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Bind the washing machine to manipulate it

        bind soap: item where:
            is_soap(soap)
        # Bind the soap to use in washing machine

        achieve inside(soap, washing_machine)
        # Ensure the soap is added to the washing machine

behavior __goal__():
    body:
        add_soap_to_washing_machine()

############################################################
When the sub-task is: 3. Wash the clothes using the washing machine.
A successful representation:
behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine is closed before starting
        achieve is_on(washing_machine)
        # Start the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket for clothes with a specific ID
        
        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket_for_clothes):
                achieve inside(clothes, washing_machine)
                # Transfer each piece of clothing from the basket to the washing machine
        
        start_washing_machine(washing_machine)
        # Initiate washing of clothes in the washing machine
############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:

behavior turn_on_light_in_room(light: item, room: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, bedroom)
        # Select the light inside the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select the light inside the bathroom

        turn_on_light_in_room(bedroom_light, bedroom)
        turn_on_light_in_room(bathroom_light, bathroom)

############################################################
When the sub-task is: 1. Find a table in the dining room to place the milk and egg on it.
A successful representation:
 
behavior place_on_table(milk:item, egg:item, table:item):
    body:
        achieve on(milk, table)
        # Place milk on the table
        achieve on(egg, table)
        # Place egg on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        place_on_table(milk, egg, table)

############################################################
When the sub-task is: 2. Remove all items from the fridge and throw them in the trashcan.
A successful representation:
 
behavior remove_all_from_fridge_and_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        bind trashcan: item where:
            is_trashcan(trashcan)

        remove_all_from_fridge_and_trash(fridge, trashcan)

############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:
 
behavior put_items_back_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve inside(milk, fridge) # Place the milk back inside the fridge
        achieve inside(egg, fridge) # Place the egg back inside the fridge

behavior close_fridge(fridge: item):
    body:
        achieve closed(fridge) # Ensure the fridge is closed after placing the items back inside

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select the fridge with ID 289

        put_items_back_in_fridge(milk, egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        foreach window: item:
            if is_window(window) and inside(window, bathroom):
                open_bathroom_window(window)

############################################################
When the sub-task is: 1. Identify each room in the house.
A successful representation:
 
behavior identify_each_room(room:item):
    body:
        achieve visited(room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_kitchen(room) or is_dining_room(room):
                identify_each_room(room)

############################################################
When the sub-task is: 2. Check each room to ensure there is at least one light on.
A successful representation:
 
def has_light_on_in_room(room:item):
    # Function to check if there is a light on in a specified room
    symbol light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)
    return light_on

behavior check_lights_in_room(room:item):
    body:
        foreach light: item:
            if is_light(light) and inside(light, room) and not visited(light):
                observe(light, "Verify if the light is on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if not has_light_on_in_room(room):
                    check_lights_in_room(room)

############################################################
When the sub-task is: 3. Turn on the light if a room has no lights on.
A successful representation:
 
def is_light_on_in_room(room:item):
    # Function to check if there is at least one light on in a specified room
    symbol light_on=exists light: item : is_light(light) and inside(light, room) and is_on(light)
    return light_on

behavior turn_on_light_if_off(light:item):
    body:
        achieve is_on(light)
        # Ensure the light is turned on

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through each room
            if not is_light_on_in_room(room):
                # Check if there is no light on in the room
                foreach light: item:
                    if is_light(light) and inside(light, room) and not is_on(light):
                        turn_on_light_if_off(light)

############################################################
When the sub-task is: 1. Find the pizza and hamburger.
A successful representation:
 
def has_pizza_and_hamburger():
    # Function to check if there is a pizza and a hamburger known
    symbol has_items=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))
    return has_items

behavior locate_unvisited_pizza_and_hamburger():
    body:
        foreach o: item:
            if (is_food_pizza(o) or is_food_hamburger(o)) and not visited(o):
                observe(o, "Locate pizza and hamburger")

behavior __goal__():
    body:
        if has_pizza_and_hamburger():
            # If there is a known pizza or hamburger, ensure to locate them
            foreach o: item:
                if is_food_pizza(o) or is_food_hamburger(o):
                    achieve visited(o)
        else:
            # If no pizza or hamburger are known, locate them
            locate_unvisited_pizza_and_hamburger()

############################################################
When the sub-task is: 2. Put the pizza and hamburger on a plate.
A successful representation:
 
behavior put_pizza_and_hamburger_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve on(pizza, plate)
        # Place the pizza on the plate
        achieve on(hamburger, plate)
        # Place the hamburger on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza) and id[pizza]==2034
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger) and id[hamburger]==2024
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_pizza_and_hamburger_on_plate(pizza, hamburger, plate)
        # Execute the task of placing both food items on the plate

############################################################
When the sub-task is: 3. Heat them in the microwave.
A successful representation:
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave)
        # Place the plate inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve closed(microwave) # Ensure the microwave door is closed
        achieve is_on(microwave) # Turn on the microwave to start heating

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select plate with ID 1000

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        heat_in_microwave(plate, microwave)
        start_microwave(microwave) # Start the microwave to heat the food

############################################################
When the sub-task is: 4. Place the plate on a table in the dining room.
A successful representation:
 
behavior place_plate_in_dining_room(plate:item, table:item):
    body:
        achieve on(plate, table)
        # Place the plate on the table in the dining room

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select the plate with ID 1000

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        place_plate_in_dining_room(plate, table)

############################################################
When the sub-task is: 1. Find a lemon and some sugar.
A successful representation:
 
def has_food_on_kitchen_counter(kitchen_counter: item):
    # Function to check if there is food on the kitchen counter
    symbol has_food=exists o: item : (is_food_lemon(o) or is_food_sugar(o)) and on(o, kitchen_counter)
    return has_food

def is_lemon_and_sugar_in_kitchen_counter():
    # Check if lemon and sugar are on the kitchen counter
    symbol is_available=exists kc: item : is_kitchen_counter(kc) and has_food_on_kitchen_counter(kc)
    return is_available

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        if is_lemon_and_sugar_in_kitchen_counter():
            # If lemon and sugar are on the counter, approach it
            achieve close_char(char, kitchen_counter)
        else:
            # Observe to locate lemon and sugar if not found on the counter
            foreach o: item:
                if (is_food_lemon(o) or is_food_sugar(o)) and not visited(o):
                    observe(o, "Locate both lemon and sugar")

############################################################
When the sub-task is: 2. Squeeze the lemon into a cup and add water.
A successful representation:
 
def has_lemon_inhand():
    # Function to check if a lemon is in hand
    symbol inhand_lemon=exists lemon: item : is_food_lemon(lemon) and inhand(lemon)
    return inhand_lemon

def has_cut_lemon():
    # Function to check if the lemon is cut
    symbol is_cut_lemon=exists lemon: item : is_food_lemon(lemon) and cut(lemon)
    return is_cut_lemon

behavior cut_lemon(lemon:item):
    body:
        achieve cut(lemon)
        # Cut the lemon

behavior squeeze_lemon(lemon:item, cup:item):
    body:
        achieve inside(lemon, cup)
        # Squeeze the lemon into the cup

behavior add_water_to_cup(cup:item):
    body:
        achieve has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        if has_lemon_inhand() and has_cut_lemon():
            # If theres a cut lemon in hand, proceed to squeeze it
            bind lemon: item where:
                is_food_lemon(lemon) and inhand(lemon)
            # Select the cut lemon
            bind cup: item where:
                is_cup(cup)
            # Select a cup
            squeeze_lemon(lemon, cup)
            add_water_to_cup(cup)

        else:
            # If not, find a lemon and cut it
            bind lemon: item where:
                is_food_lemon(lemon)
            # Select the lemon
            if not has_cut_lemon():
                cut_lemon(lemon)
            bind cup: item where:
                is_cup(cup)
            # Select a cup
            squeeze_lemon(lemon, cup)
            add_water_to_cup(cup)

############################################################
When the sub-task is: Wipe the toilet with toilet paper and then throw the used toilet paper into the toilet.
A successful representation:

behavior wipe_toilet_with_paper(toilet: item, paper: item):
    body:
        achieve_once inhand(paper) # Temporarily hold the toilet paper
        wipe(toilet) # Wipe the toilet with the paper

behavior dispose_toilet_paper(paper: item, toilet: item):
    body:
        achieve inside(paper, toilet) # Put the used toilet paper inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind paper: item where:
            is_toilet_paper(paper)
        # Select the toilet paper

        wipe_toilet_with_paper(toilet, paper)
        dispose_toilet_paper(paper, toilet)

############################################################
When the sub-task is: Insert a CD into the CD player and play music.
A successful representation:
 
behavior insert_cd_and_play(cd: item, cd_player: item):
    body:
        achieve inside(cd, cd_player)
        # Insert the CD into the CD player
        achieve closed(cd_player)
        # Ensure the CD player is closed after inserting the CD
        achieve is_on(cd_player)
        # Turn on the CD player to play the music

behavior __goal__():
    body:
        bind cd: item where:
            is_cd(cd)
        # Select the CD

        bind cd_player: item where:
            is_cd_player(cd_player)
        # Select the CD player

        insert_cd_and_play(cd, cd_player)
        # Insert the CD into the CD player and play music

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
def has_named_cup(cup:item):
    # Function to check if the cup has an id of 2063 or 2064
    symbol is_named_cup=(id[cup] == 2063 or id[cup] == 2064)
    return is_named_cup

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve inside(cup, sink)
        # Ensure the cup is positioned to be filled under the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on faucet to fill the cup

        observe(cup, "Ensure the cup is filled with water")
        # Ensure the cup is being filled with water

        achieve_once is_off(faucet)
        # Turn off faucet after filling

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select the sink with ID 231

        bind cup: item where:
            is_cup(cup) and has_named_cup(cup)
        # Select a cup from those identified

        fill_cup_with_water(cup, sink)

############################################################
When the sub-task is: 1. Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, knife:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        slice_chicken(chicken, knife, cutting_board)

############################################################
When the sub-task is: 2. Give the sliced chicken to the cat.
A successful representation:
 
behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        # Ensure the sliced chicken is close to the cat
        achieve on(chicken, cat)
        # Place the sliced chicken for the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the sliced chicken

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        give_chicken_to_cat(chicken, cat)

############################################################
When the sub-task is: 1. Identify the table in the dining room.
A successful representation:
 
def has_table_in_dining_room(dining_room: item):
    # Function to check if there is a table in the dining room
    symbol table_present=exists table: item : is_table(table) and inside(table, dining_room)
    return table_present

behavior observe_tables_in_dining_room():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Determine if this table is in the dining room")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        if has_table_in_dining_room(dining_room):
            # If there is a known table in the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            achieve visited(table)
        else:
            # If no table is known, explore the scene to find one
            observe_tables_in_dining_room()

############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on the identified table.
A successful representation:
 
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve on(milk, table)
        # Place milk on the table
        achieve on(turkey, table)
        # Place turkey on the table
        achieve on(egg, table)
        # Place egg on the table
        achieve on(fish, table)
        # Place fish on the table
        achieve on(chicken, table)
        # Place chicken on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 226
        # Select the identified table with ID 226

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

############################################################
When the sub-task is: 1. Identify the fridge with items in it.
A successful representation:
 
def identify_fridge_with_items(fridge: item):
    # Function to check if there is any item inside the fridge
    symbol has_items=exists o: item : inside(o, fridge)
    return has_items

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and not visited(fridge) and identify_fridge_with_items(fridge):
            # Check if there is a fridge with items that hasnt been visited and has items
            bind fridge: item where:
                is_fridge(fridge) and identify_fridge_with_items(fridge)
            # Approach the fridge with items
            achieve visited(fridge)
        else:
            # If no fridge with items is found, observe all unvisited fridges
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if there are any items inside the fridge")

############################################################
When the sub-task is: 2. Throw all the items from the fridge into the trashcan.
A successful representation:
 
behavior throw_items_from_fridge_to_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select the fridge with ID 289
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan
        
        throw_items_from_fridge_to_trash(fridge, trashcan)
        # Remove all items from the fridge and throw them into the trashcan

