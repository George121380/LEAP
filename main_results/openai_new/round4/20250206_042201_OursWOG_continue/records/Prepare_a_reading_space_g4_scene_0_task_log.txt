From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(hoffice:item):
    # Function to check if the given item is a home office
    symbol is_home_office=exists room: item : is_home_office(room) and inside(hoffice, room)
    return is_home_office

behavior find_and_place_book(book:item, coffee_table:item):
    body:
        achieve_once inhand(book) # Temporarily hold the book
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) # Select a book

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_home_office(coffee_table)
        # Select a coffee table in the home office

        find_and_place_book(book, coffee_table) # Place the book on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_office(table:item):
    # Function to check if the table is a coffee table inside the home office
    symbol is_office_table=exists room: item : is_home_office(room) and is_coffee_table(table) and inside(table, room)
    return is_office_table

def is_book_on_table(book:item, table:item):
    # Function to check if the book is on the table
    symbol is_present=exists o: item : is_book(o) and on(o, table)
    return is_present

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        if exists table: item : is_coffee_table_in_office(table) and not is_book_on_table(book, table):
            # If there is a coffee table in the office and the book is not on it
            bind table: item where:
                is_coffee_table_in_office(table) and not is_book_on_table(book, table)
            # Select the coffee table in the home office without the book

            place_book_on_coffee_table(book, table)
            # Ensure to place the book on the coffee table

        else:
            # If no coffee table with the book information is found, initiate exploration
            foreach table: item:
                if is_coffee_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in the home office")
                    # Observe each coffee table to find the correct on in the home office
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_table_in_office(table:item):
    # Function to check if the table is a coffee table inside the home office
    symbol is_office_table=exists room: item : is_home_office(room) and is_coffee_table(table) and inside(table, room)
    return is_office_table

def is_book_on_table(book:item, table:item):
    # Function to check if the book is on the table
    symbol is_present=exists o: item : is_book(o) and on(o, table)
    return is_present

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        if exists table: item : is_coffee_table_in_office(table) and not is_book_on_table(book, table):
            # If there is a coffee table in the office and the book is not on it
            bind table: item where:
                is_coffee_table_in_office(table) and not is_book_on_table(book, table)
            # Select the coffee table in the home office without the book

            place_book_on_coffee_table(book, table)
            # Ensure to place the book on the coffee table

        else:
            # If no coffee table with the book information is found, initiate exploration
            foreach table: item:
                if is_coffee_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in the home office")
                    # Observe each coffee table to find the correct on in the home office
 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(cup:item, table:item):
    body:
        achieve inside(cup, table)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_coffee_table(table) and id[table]==2068
        # Select the coffee table with ID 2068
        
        bind cup: item where:
            is_cup(cup) and has_water(cup) and inside(cup, is_milk(cup)) and is_clean(cup)
        # Select a cup that is clean, contains milk, and has water
        
        achieve is_on(cup)
        # Ensure the cup is turned on, indicating it is hot
        
        prepare_hot_milk_and_place_on_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::cup, is_milk(V::cup)
Argument #1 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_milk(cup:item):
    # Check if the cup has milk inside
    symbol milk_present=exists m: item : is_milk(m) and inside(m, cup)
    return milk_present

behavior prepare_hot_milk(cup:item):
    body:
        achieve is_on(cup)
        # Ensure the cup of milk is hot

behavior prepare_hot_milk_and_place_on_table(cup:item, table:item):
    body:
        prepare_hot_milk(cup)
        achieve on(cup, table)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_coffee_table(table) and id[table]==2068
        # Select the coffee table with ID 2068
        
        bind cup: item where:
            is_cup(cup) and has_milk(cup) and clean(cup)
        # Select a cup that is clean and contains milk
        
        prepare_hot_milk_and_place_on_table(cup, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_milk_hot(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)  # Place the milk inside the microwave
        achieve closed(microwave)  # Ensure the microwave is closed
        achieve is_on(microwave)  # Turn the microwave on to heat the milk

behavior put_on_coffee_table(item:item, table:item):
    body:
        achieve on(item, table)  # Place the item on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup) and inside(milk, cup)
        # Select cup which contains milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        
        make_milk_hot(cup, microwave)  # Heat the milk in the microwave
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table
        
        put_on_coffee_table(cup, coffee_table)  # Put the heated milk on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_in_cup(cup:item):
    # Function to check if the cup has milk inside
    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)
    return has_milk

behavior heat_milk(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Ensure the cup is placed inside the microwave
        achieve closed(microwave)
        # Ensure the microwave door is closed
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk_in_cup(cup)
        # Select a cup that contains milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_milk(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 4
goal generate times: 5
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 15 steps
Keystate: k3 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
