From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Mix the chicken and pasta together.', '3. Put the chicken pasta onto a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior cook_chicken_on_stove(chicken:item, stove:item, pot:item):
    body:
        assert is_stove(stove)
        assert is_food_chicken(chicken)
        # Ensure the chicken is placed in a pot before cooking
        achieve inside(chicken, pot)
        # Cook chicken
        achieve is_on(stove)

behavior cook_pasta_in_pot(pasta:item, stove:item, pot:item):
    body:
        assert is_stove(stove)
        assert is_dry_pasta(pasta)
        assert is_pot(pot)
        if not has_water_in_pot(pot):
            # Ensure there is water in the pot
            # Need a faucet to fill water
            if exists faucet:item : is_faucet(faucet) and close(faucet, pot):
                achieve_once is_on(faucet)
                # Fill water into pot
                achieve has_water(pot)
                achieve_once is_off(faucet)
        achieve inside(pasta, pot)
        # Cook pasta
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        # Cook the chicken and pasta separately on the stove
        cook_chicken_on_stove(chicken, stove, pot)
        cook_pasta_in_pot(pasta, stove, pot)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [Variable<pasta: item>, Variable<stove: item>, Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior cook_chicken_on_stove(chicken:item, stove:item, pot:item):
    body:
        assert is_stove(stove)
        assert is_food_chicken(chicken)
        # Ensure the chicken is placed in a pot before cooking
        achieve inside(chicken, pot)
        # Cook chicken
        achieve is_on(stove)

behavior cook_pasta_in_pot(pasta:item, stove:item, pot:item, faucet: item):
    body:
        assert is_stove(stove)
        assert is_dry_pasta(pasta)
        assert is_pot(pot)
        assert is_faucet(faucet)
        if not has_water_in_pot(pot):
            # Ensure there is water in the pot
            if close(faucet, pot):
                achieve_once is_on(faucet)
                # Fill water into pot
                achieve has_water(pot)
                achieve_once is_off(faucet)
        achieve inside(pasta, pot)
        # Cook pasta
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        # Cook the chicken and pasta separately on the stove
        cook_chicken_on_stove(chicken, stove, pot)
        cook_pasta_in_pot(pasta, stove, pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior cook_chicken_on_stove(chicken:item, stove:item, pot:item):
    body:
        assert is_stove(stove)
        assert is_food_chicken(chicken)
        # Ensure the chicken is placed in a pot before cooking
        achieve inside(chicken, pot)
        # Cook chicken
        achieve is_on(stove)

behavior cook_pasta_in_pot(pasta:item, stove:item, pot:item, faucet: item):
    body:
        assert is_stove(stove)
        assert is_dry_pasta(pasta)
        assert is_pot(pot)
        assert is_faucet(faucet)
        if not has_water_in_pot(pot):
            # Ensure there is water in the pot
            if close(faucet, pot):
                achieve_once is_on(faucet)
                # Fill water into pot
                achieve has_water(pot)
                achieve_once is_off(faucet)
        achieve inside(pasta, pot)
        # Cook pasta
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        # Cook the chicken and pasta separately on the stove
        cook_chicken_on_stove(chicken, stove, pot)
        cook_pasta_in_pot(pasta, stove, pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(closetdrawer_394)exp(dry_pasta_2042, closetdrawer_394)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(closetdrawer_394)exp(dry_pasta_2042, closetdrawer_394)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to add water to the pot before cooking the pasta. Make sure the faucet is turned on, water is added, and then the faucet is turned off. Ensure the stove is on to cook the pasta after adding water. Currently, both the chicken and the pasta are in the same pot, which is also against the task of cooking them separately. Consider using separate pots or cooking separately.
##############################
From agent.py
Human Instruction: The robot needs to add water to the pot before cooking the pasta. Make sure the faucet is turned on, water is added, and then the faucet is turned off. Ensure the stove is on to cook the pasta after adding water. Currently, both the chicken and the pasta are in the same pot, which is also against the task of cooking them separately. Consider using separate pots or cooking separately.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to fridge_289.
Action 8: Switch off fridge_289.
Action 9: Open fridge_289.
Action 10: look for food_chicken_2017 around fridge_289.
Action 11: Walk to pot_2069.
Action 12: Open pot_2069.
Action 13: Walk to food_chicken_2017.
Action 14: Grab food_chicken_2017.
Action 15: Walk to pot_2069.
Action 16: Put food_chicken_2017 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Switch on stove_2065.
Action 19: Walk to dry_pasta_2042.
Action 20: Grab dry_pasta_2042.
Action 21: Walk to pot_2069.
Action 22: Put dry_pasta_2042 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_closetdrawer_394(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

behavior find_bowl_2072_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def separate_chicken_and_pasta(pot: item):
    # Function to ensure chicken and pasta are not in the same pot
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_chicken_or_pasta

behavior move_chicken_or_pasta_to_separate_container(o: item, new_pot: item):
    body:
        if is_food_chicken(o) or is_dry_pasta(o):
            achieve inside(o, new_pot) # Move the chicken or pasta to a new pot

behavior add_water_to_pot(pot: item, faucet: item):
    body:
        assert_hold open(pot) # Pot must be open
        achieve_once has_water(pot) # Ensure water is added to the pot
        achieve_once is_on(faucet) # Ensure the faucet is turned on
        achieve_once is_off(faucet) # Ensure the faucet is turned off after use

behavior boil_pasta(pot: item, stove: item):
    body:
        achieve inside(pot, stove) # Pot must be on the stove
        achieve is_on(stove) # Stove must be on to boil pasta

behavior cook_chicken_and_pasta_separately(pot1: item, pot2: item, faucet: item, stove: item):
    body:
        foreach o: item:
            if is_food_chicken(o) or is_dry_pasta(o):
                if inside(o, pot1):
                    move_chicken_or_pasta_to_separate_container(o, pot2)
        add_water_to_pot(pot2, faucet)
        boil_pasta(pot2, stove)

behavior __goal__():
    body:
        bind pot1: item where:
            is_pot(pot1)
        # Select the initial pot
        
        bind pot2: item where:
            is_pot(pot2) and pot1=pot2
        # Select an additional pot to separate chicken and pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet 

        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        cook_chicken_and_pasta_separately(pot1, pot2, faucet, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5839, column 34.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation
 
def has_chicken_or_pasta(pot: item):
    # Function to ensure chicken and pasta are not in the same pot
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_chicken_or_pasta

behavior move_chicken_or_pasta_to_separate_container(o: item, new_pot: item):
    body:
        if is_food_chicken(o) or is_dry_pasta(o):
            achieve inside(o, new_pot) # Move the chicken or pasta to a new pot

behavior add_water_to_pot(pot: item, faucet: item):
    body:
        assert_hold open(pot) # Pot must be open
        achieve_once has_water(pot) # Ensure water is added to the pot
        achieve_once is_on(faucet) # Ensure the faucet is turned on
        achieve_once is_off(faucet) # Ensure the faucet is turned off after use

behavior boil_pasta(pot: item, stove: item):
    body:
        achieve on(pot, stove) # Pot must be on the stove
        achieve is_on(stove) # Stove must be on to boil pasta

behavior cook_chicken_and_pasta_separately(pot1: item, pot2: item, faucet: item, stove: item):
    body:
        foreach o: item:
            if is_food_chicken(o) or is_dry_pasta(o):
                if inside(o, pot1):
                    move_chicken_or_pasta_to_separate_container(o, pot2)
        add_water_to_pot(pot2, faucet)
        boil_pasta(pot2, stove)

behavior __goal__():
    body:
        bind pot1: item where:
            is_pot(pot1)
        # Select the initial pot
        
        bind pot2: item where:
            is_pot(pot2) and pot1 = pot2
        # Select an additional pot to separate chicken and pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet 

        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        cook_chicken_and_pasta_separately(pot1, pot2, faucet, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5839, column 35.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

#goal_representation
 
def has_chicken_or_pasta(pot: item):
    # Function to ensure chicken and pasta are not in the same pot
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_chicken_or_pasta

behavior move_chicken_or_pasta_to_separate_container(o: item, new_pot: item):
    body:
        if is_food_chicken(o) or is_dry_pasta(o):
            achieve inside(o, new_pot) # Move the chicken or pasta to a new pot

behavior add_water_to_pot(pot: item, faucet: item):
    body:
        assert_hold open(pot) # Pot must be open
        achieve_once has_water(pot) # Ensure water is added to the pot
        achieve_once is_on(faucet) # Ensure the faucet is turned on
        achieve_once is_off(faucet) # Ensure the faucet is turned off after use

behavior boil_pasta(pot: item, stove: item):
    body:
        achieve on(pot, stove) # Pot must be on the stove
        achieve is_on(stove) # Stove must be on to boil pasta

behavior cook_chicken_and_pasta_separately(pot1: item, pot2: item, faucet: item, stove: item):
    body:
        foreach o: item:
            if is_food_chicken(o) or is_dry_pasta(o):
                if inside(o, pot1):
                    move_chicken_or_pasta_to_separate_container(o, pot2)
        add_water_to_pot(pot2, faucet)
        boil_pasta(pot2, stove)

behavior __goal__():
    body:
        bind pot1: item where:
            is_pot(pot1)
        # Select the initial pot
        
        bind pot2: item where:
            is_pot(pot2) and pot1 = pot2
        # Select an additional pot to separate chicken and pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet 

        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        cook_chicken_and_pasta_separately(pot1, pot2, faucet, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve_once is_on(faucet)
        # Turn the faucet on to add water
        achieve has_water(pot)
        # Ensure the pot now contains water
        achieve_once is_off(faucet)
        # Turn the faucet off after adding water to the pot

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta in the pot with water
        achieve is_on(stove)
        # Ensure the stove is on to cook the pasta
        
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve inside(chicken, pot)
        # Place the chicken in a separate pot
        achieve is_on(stove)
        # Ensure the stove is on to cook the chicken

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind pot1: item where:
            is_pot(pot1) and not has_water(pot1)
        # Select the first pot for cooking pasta that does not have water

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot1)
        # Select the dry pasta currently in a pot

        bind pot2: item where:
            is_pot(pot2) and not inside(pasta, pot2)
        # Select the second pot for cooking chicken, not holding the pasta

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot2)
        # Select the chicken currently in a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_water_to_pot(faucet, pot1)
        cook_pasta_separately(pasta, pot1, stove)
        cook_chicken_separately(chicken, pot2, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

behavior separate_food_items(pot:item, chicken:item, pasta:item):
    body:
        achieve inside(chicken, pot) # Ensure chicken is inside the cooking pot
        achieve inside(pasta, pot)  # Ensure pasta is inside a different pot

behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken) and id[pot_for_chicken] == 2069
        # Select pot with ID 2069 for the chicken

        bind another_pot: item where:
            is_pot(another_pot) and another_pot = pot_for_chicken
        # Select another pot for the pasta

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, another_pot)
        # Select a faucet close to the pot being used for pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        separate_food_items(pot_for_chicken, chicken, pasta)
        add_water_to_pot(faucet, another_pot)
        turn_on_stove(stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5828, column 49.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2062_around_closetdrawer_380(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

behavior separate_food_items(pot1:item, pot2:item, chicken:item, pasta:item):
    body:
        achieve inside(chicken, pot1) # Ensure chicken is inside the first cooking pot
        achieve inside(pasta, pot2)  # Ensure pasta is inside the second cooking pot

behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken) and id[pot_for_chicken] == 2069
        # Select pot with ID 2069 for the chicken

        bind another_pot: item where:
            is_pot(another_pot) and another_pot = pot_for_chicken
        # Select another pot for the pasta

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, another_pot)
        # Select a faucet close to the pot being used for pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        separate_food_items(pot_for_chicken, another_pot, chicken, pasta)
        add_water_to_pot(faucet, another_pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5810, column 49.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2062_around_closetdrawer_377(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#goal_representation

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

behavior separate_food_items(pot1:item, pot2:item, chicken:item, pasta:item):
    body:
        achieve inside(chicken, pot1) # Ensure chicken is inside the first cooking pot
        achieve inside(pasta, pot2)  # Ensure pasta is inside the second cooking pot

behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken) and id[pot_for_chicken] == 2069
        # Select pot with ID 2069 for the chicken

        bind another_pot: item where:
            is_pot(another_pot) and another_pot = pot_for_chicken
        # Select another pot for the pasta

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, another_pot)
        # Select a faucet close to the pot being used for pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        separate_food_items(pot_for_chicken, another_pot, chicken, pasta)
        add_water_to_pot(faucet, another_pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)']
Time info:
Time consume: 280 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 13
goal generate times: 4
goal correct times: 3

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 7 steps
Keystate: k4 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
