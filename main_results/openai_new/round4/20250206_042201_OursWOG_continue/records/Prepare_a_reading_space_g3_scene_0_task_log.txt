From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_in_office(book:item):
    # Function to check if a book is in the home office
    symbol is_in_office=exists room: item : is_home_office(room) and inside(book, room)
    return is_in_office

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        
        if exists book: item : is_book(book) and is_book_in_office(book):
            bind book: item where:
                is_book(book) and is_book_in_office(book)
            place_book_on_coffee_table(book, coffee_table)

        else:
            # If no book is known to be in the office, locate it and then place on the coffee table
            foreach obj: item:
                if is_book(obj) and not visited(obj):
                    observe(obj, "Locate the book to place on the coffee table")
                    if inside(obj, home_office):
                        achieve visited(obj)
                        place_book_on_coffee_table(obj, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book_in_office(book:item):
    # Function to check if a book is in the home office
    symbol is_in_office=exists room: item : is_home_office(room) and inside(book, room)
    return is_in_office

behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        
        if exists book: item : is_book(book) and is_book_in_office(book):
            bind book: item where:
                is_book(book) and is_book_in_office(book)
            place_book_on_coffee_table(book, coffee_table)

        else:
            # If no book is known to be in the office, locate it and then place on the coffee table
            foreach obj: item:
                if is_book(obj) and not visited(obj):
                    observe(obj, "Locate the book to place on the coffee table")
                    if inside(obj, home_office):
                        achieve visited(obj)
                        place_book_on_coffee_table(obj, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book to place on the coffee table)walk_executor(bookshelf_101)exp(book_2067, bookshelf_101)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Locate the book to place on the coffee table)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book to place on the coffee table)walk_executor(bookshelf_354)exp(book_2067, bookshelf_354)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Locate the book to place on the coffee table)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book to place on the coffee table)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Locate the book to place on the coffee table)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Locate the book to place on the coffee table)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Locate the book to place on the coffee table)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_coffee_table_2068(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(wall_clock,coffee_table_instance)
        else:
            exp(wall_clock,coffee_table_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,coffee_table_instance]=True
        close[coffee_table_instance,wall_clock]=True
    

behavior find_sauce_2078_around_stove_2065(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(sauce,stove_instance)
        else:
            exp(sauce,stove_instance)
    eff:
        unknown[sauce]=False
        close[sauce,stove_instance]=True
        close[stove_instance,sauce]=True
    

behavior find_phone_247_around_bathroom_cabinet_40(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(phone,bathroom_cabinet_instance)
        else:
            exp(phone,bathroom_cabinet_instance)
    eff:
        unknown[phone]=False
        close[phone,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind book: item where:
            is_book(book)
        # Select the book

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind book: item where:
            is_book(book)
        # Select the book

        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2067)walk_executor(coffee_table_2068)put_executor(book_2067, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. Grabbing book_2067 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2067, coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2067. book_2067 is close coffee_table_2068. book_2067 is on coffee_table_2068. book_2067 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach window: item:
            if is_window(window) and inside(window, home_office):
                open_window_in_home_office(window)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach window: item:
            if is_window(window) and inside(window, home_office):
                open_window_in_home_office(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_348)open_executor(window_348)
##############################
From agent.py
walk_executor(window_348)
Robot find: drawing_400, mat_401, pillow_405, Robot is close to the window_348. 
##############################
From agent.py
open_executor(window_348)
Robot find: Robot is close to the window_348. window_348 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'grab_executor(book_2067)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2067, coffee_table_2068)', 'walk_executor(window_348)', 'open_executor(window_348)']
Time info:
Time consume: 117 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 26
goal generate times: 3
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
