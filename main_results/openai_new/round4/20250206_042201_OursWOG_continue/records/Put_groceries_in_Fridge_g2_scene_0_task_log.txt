From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Identify the right table in the dining room and put the milk, turkey, eggs, fish, and chicken on it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item, faucet:item):
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is placed inside the sink

        if is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # Turn on faucet to wash the fish
            wash(fish)
            # Wash the fish
            achieve_once is_off(faucet)
            # Turn off faucet after washing
        
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        wash_fish(fish, sink, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item, sink:item, faucet:item):
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is placed inside the sink

        if is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # Turn on faucet to wash the fish
            wash(fish)
            # Wash the fish
            achieve_once is_off(faucet)
            # Turn off faucet after washing
        
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        wash_fish(fish, sink, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(sink_42)putin_executor(food_fish_2021, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(sink_42)putin_executor(food_fish_2021, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_fish_2021, sink_42)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_fish_2021 is inside sink_42. food_fish_2021 is close sink_42. sink_42 is close food_fish_2021. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        wash(fish)
        # Wash the fish inside the sink

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        wash_fish(fish, sink)
        # Execute washing the fish in the selected sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        wash(fish)
        # Wash the fish inside the sink

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        wash_fish(fish, sink)
        # Execute washing the fish in the selected sink

##############################
From agent.py-> find a plan in act()
wash_executor(food_fish_2021)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def can_wash_fish(fish:item):
    # Check if a fish is cleanable
    symbol is_cleanable=not dirty(fish)
    return is_cleanable

behavior clean_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        if not clean(fish):
            foreach faucet: item:
                if is_faucet(faucet) and close(faucet, sink):
                    achieve_once is_on(faucet)
                    observe(fish, "Ensure fish is being cleaned")
                    achieve_once is_off(faucet)
            wash(fish)
        achieve clean(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        
        if can_wash_fish(fish):
            clean_fish(fish, sink)
        else:
            observe(fish, "Try another method to clean fish")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_wash_fish(fish:item):
    # Check if a fish is cleanable
    symbol is_cleanable=not dirty(fish)
    return is_cleanable

behavior clean_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        if not clean(fish):
            foreach faucet: item:
                if is_faucet(faucet) and close(faucet, sink):
                    achieve_once is_on(faucet)
                    observe(fish, "Ensure fish is being cleaned")
                    achieve_once is_off(faucet)
            wash(fish)
        achieve clean(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        
        if can_wash_fish(fish):
            clean_fish(fish, sink)
        else:
            observe(fish, "Try another method to clean fish")

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2021)obs(food_fish_2021, Try another method to clean fish)
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the sink_42. Robot is close to the food_fish_2021. 
##############################
From agent.py
obs(food_fish_2021, Try another method to clean fish)
Get this information:  food_fish_2021 is inside bathroom_1. food_fish_2021 is inside sink_42. food_fish_2021 is close to sink_42. food_fish_2021 is close to character_65. food_fish_2021 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The fish remains dirty despite the robot's attempt to wash it. You need to find another method to clean the fish effectively.
##############################
From agent.py
Human Instruction: The fish remains dirty despite the robot's attempt to wash it. You need to find another method to clean the fish effectively.

Trial and Error: You can not wash food_fish_2021You can not wash food_fish_2021
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to sink_42.
Action 7: Put food_fish_2021 into sink_42.
Action 8: Walk to faucet_43.
Action 9: Switch on faucet_43.
Action 10: Walk to food_fish_2021.
Action 11: Observe around food_fish_2021 with the question of Try another method to clean fish.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fish(fish:item, faucet:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        if is_faucet(faucet) and close(faucet,sink):
            achieve_once is_on(faucet)
            scrub(fish)
            rinse(fish)
            achieve_once is_off(faucet)
        else:
            scrub(fish)
            rinse(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        clean_fish(fish, faucet, sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_fish(fish:item, faucet:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        if is_faucet(faucet) and close(faucet,sink):
            achieve_once is_on(faucet)
            scrub(fish)
            rinse(fish)
            achieve_once is_off(faucet)
        else:
            scrub(fish)
            rinse(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        clean_fish(fish, faucet, sink)

##############################
From agent.py-> find a plan in act()
scrub_executor(food_fish_2021)rinse_executor(food_fish_2021)walk_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
scrub_executor(food_fish_2021)
Robot find: Robot is close to the sink_42. Robot is close to the food_fish_2021. food_fish_2021 is cleaned. 
##############################
From agent.py
rinse_executor(food_fish_2021)
Robot find: Robot is close to the sink_42. Robot is close to the food_fish_2021. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior identify_right_table_for_items(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(turkey, table)
        achieve on(eggs, table)
        achieve on(fish, table)
        achieve on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                # Satisfy the condition when milk, turkey, eggs, fish, and chicken are on a table
                bind milk: item where:
                    is_milk(milk)
                bind turkey: item where:
                    is_food_turkey(turkey)
                bind eggs: item where:
                    is_food_egg(eggs)
                bind fish: item where:
                    is_food_fish(fish) and clean(fish)
                bind chicken: item where:
                    is_food_chicken(chicken)
                identify_right_table_for_items(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior identify_right_table_for_items(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(turkey, table)
        achieve on(eggs, table)
        achieve on(fish, table)
        achieve on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                # Satisfy the condition when milk, turkey, eggs, fish, and chicken are on a table
                bind milk: item where:
                    is_milk(milk)
                bind turkey: item where:
                    is_food_turkey(turkey)
                bind eggs: item where:
                    is_food_egg(eggs)
                bind fish: item where:
                    is_food_fish(fish) and clean(fish)
                bind chicken: item where:
                    is_food_chicken(chicken)
                identify_right_table_for_items(milk, turkey, eggs, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_238, drawing_242, fork_2081, mat_237, Robot is close to the milk_2043. Robot is close to the table_226. 
##############################
From agent.py
put_executor(milk_2043, table_226)
Robot find: Robot is close to the milk_2043. Robot is close to the table_226. milk_2043 is close table_226. table_226 is close milk_2043. milk_2043 is on table_226. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the fridge_289. Grabbing food_turkey_2040 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_turkey_2040, table_226)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the table_226. food_turkey_2040 is close table_226. table_226 is close food_turkey_2040. food_turkey_2040 is on table_226. food_turkey_2040 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_egg_2020, table_226)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. food_egg_2020 is close table_226. table_226 is close food_egg_2020. food_egg_2020 is on table_226. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the sink_42. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sink_42. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_fish_2021, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. food_fish_2021 is close table_226. table_226 is close food_fish_2021. food_fish_2021 is on table_226. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_chicken_2017, table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. food_chicken_2017 is close table_226. table_226 is close food_chicken_2017. food_chicken_2017 is on table_226. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The fish (food_fish_2021) needs to be cleaned further as it was initially dirty and only scrubbed and rinsed. Confirm its cleanliness before placing it on the table with the other items: milk, turkey, eggs, and chicken.
##############################
From agent.py
Human Instruction: The fish (food_fish_2021) needs to be cleaned further as it was initially dirty and only scrubbed and rinsed. Confirm its cleanliness before placing it on the table with the other items: milk, turkey, eggs, and chicken.

Trial and Error: You can not wash food_fish_2021You can not wash food_fish_2021
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to sink_42.
Action 7: Put food_fish_2021 into sink_42.
Action 8: Walk to faucet_43.
Action 9: Switch on faucet_43.
Action 10: Walk to food_fish_2021.
Action 11: Observe around food_fish_2021 with the question of Try another method to clean fish.
Action 12: Scrub food_fish_2021.
Action 13: Rinse food_fish_2021.
Action 14: Walk to faucet_43.
Action 15: Switch off faucet_43.
Action 16: Walk to milk_2043.
Action 17: Grab milk_2043.
Action 18: Walk to table_226.
Action 19: Put milk_2043 on table_226.
Action 20: Walk to food_turkey_2040.
Action 21: Grab food_turkey_2040.
Action 22: Walk to table_226.
Action 23: Put food_turkey_2040 on table_226.
Action 24: Walk to food_egg_2020.
Action 25: Grab food_egg_2020.
Action 26: Walk to table_226.
Action 27: Put food_egg_2020 on table_226.
Action 28: Walk to food_fish_2021.
Action 29: Grab food_fish_2021.
Action 30: Walk to table_226.
Action 31: Put food_fish_2021 on table_226.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to table_226.
Action 35: Put food_chicken_2017 on table_226.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior put_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(turkey, table)
        achieve on(egg, table)
        achieve on(fish, table)
        achieve on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select the washed fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        put_on_table(milk, turkey, egg, fish, chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior put_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        # Place the milk on the table
        achieve on(turkey, table)
        # Place the turkey on the table
        achieve on(eggs, table)
        # Place the eggs on the table
        achieve on(fish, table)
        # Place the fish on the table
        achieve on(chicken, table)
        # Place the chicken on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select the fish that is clean

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        put_items_on_table(milk, turkey, eggs, fish, chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        achieve on(milk, table)
        # Place milk on the table

        achieve on(turkey, table)
        # Place turkey on the table

        achieve on(egg, table)
        # Place egg on the table

        achieve on(fish, table)
        # Place fish on the table

        achieve on(chicken, table)
        # Place chicken on the table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(turkey, table)
        achieve on(eggs, table)
        achieve on(fish, table)
        achieve on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        # Place milk on the table
        achieve on(turkey, table)
        # Place turkey on the table
        achieve on(eggs, table)
        # Place eggs on the table
        achieve on(fish, table)
        # Place fish on the table
        achieve on(chicken, table)
        # Place chicken on the table

behavior confirm_cleanliness_and_place_fish(fish:item, table:item):
    body:
        if not clean(fish):
            observe(fish, "Confirm further cleanliness of fish")
        # Ensure the fish is sufficiently clean
        achieve on(fish, table)
        # Finally place the fish on the table after confirming cleanliness

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
        confirm_cleanliness_and_place_fish(fish, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        # Place milk on the table
        achieve on(turkey, table)
        # Place turkey on the table
        achieve on(eggs, table)
        # Place eggs on the table
        achieve on(fish, table)
        # Place fish on the table
        achieve on(chicken, table)
        # Place chicken on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve on(milk, table)
        # Place milk on the table
        achieve on(turkey, table)
        # Place turkey on the table
        achieve on(eggs, table)
        # Place eggs on the table
        achieve on(fish, table)
        # Place fish on the table
        achieve on(chicken, table)
        # Place chicken on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        achieve on(milk, table)
        # Place milk on the table
        achieve on(turkey, table)
        # Place turkey on the table
        achieve on(eggs, table)
        # Place eggs on the table
        achieve on(fish, table)
        # Place fish on the table
        achieve on(chicken, table)
        # Place chicken on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior identify_table_in_dining_room_and_place_items(milk: item, turkey: item, eggs: item, fish: item, chicken: item, table: item):
    body:
        achieve on(milk, table)
        # Place the milk on the table
        achieve on(turkey, table)
        # Place the turkey on the table
        achieve on(eggs, table)
        # Place the eggs on the table
        achieve on(fish, table)
        # Place the fish on the table
        achieve on(chicken, table)
        # Place the chicken on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select the cleaned fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        identify_table_in_dining_room_and_place_items(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(sink_42)', 'putin_executor(food_fish_2021, sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021) (Failed)', 'wash_executor(food_fish_2021) (Failed)', 'walk_executor(food_fish_2021)', 'scrub_executor(food_fish_2021)', 'rinse_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(table_226)', 'put_executor(milk_2043, table_226)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(table_226)', 'put_executor(food_turkey_2040, table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(table_226)', 'put_executor(food_egg_2020, table_226)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(table_226)', 'put_executor(food_fish_2021, table_226)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(table_226)', 'put_executor(food_chicken_2017, table_226)']
Time info:
Time consume: 333 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 37
goal generate times: 14
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
