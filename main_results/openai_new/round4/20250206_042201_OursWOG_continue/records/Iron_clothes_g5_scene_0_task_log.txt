From agent.py
Reset goals: The sub-goals are: 
['1. Find a suitable place to iron clothes.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_towel_rack_32_around_shower_36(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_ironing_place(place:item):
    # Determine if a place is suitable for ironing clothes
    # A suitable place should have an ironing board and should have a power socket close to it
    symbol has_ironing_board=exists b: item : is_ironing_board(b) and close(b, place)
    symbol has_power_socket=exists s: item : is_powersocket(s) and close(s, place)
    return has_ironing_board and has_power_socket

behavior observe_places_for_ironing():
    body:
        foreach place: item:
            if not visited(place):
                observe(place, "Check if its suitable for ironing with ironing board and power socket")

behavior __goal__():
    body:
        if exists place: item : is_ironing_board(place) and is_suitable_ironing_place(place):
            # If a suitable place for ironing is already known, approach it
            bind place: item where:
                is_ironing_board(place) and is_suitable_ironing_place(place)
            achieve close_char(char, place)
        else:
            # If no suitable place is known, explore the environment to find one
            observe_places_for_ironing()

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_closetdrawer_382(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(tray,closetdrawer_instance)
        else:
            exp(tray,closetdrawer_instance)
    eff:
        unknown[tray]=False
        close[tray,closetdrawer_instance]=True
        close[closetdrawer_instance,tray]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_towel_2057_around_shower_36(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_chair_2004_around_ironing_board_2074(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(chair,ironing_board_instance)
        else:
            exp(chair,ironing_board_instance)
    eff:
        unknown[chair]=False
        close[chair,ironing_board_instance]=True
        close[ironing_board_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_ironing_place(item:item):
    # Function to check if an item is suitable for ironing
    symbol suitable_for_ironing=surfaces(item) and larger_surface(item)
    return suitable_for_ironing

behavior __goal__():
    body:
        if exists place: item : find_ironing_place(place):
            # If a suitable place for ironing is known, move close to it
            bind place: item where:
                find_ironing_place(place)
            achieve close_char(char, place)
        else:
            # If no suitable place is known, inspect unvisited surfaces
            foreach item: item:
                if surfaces(item) and not visited(item):
                    observe(item, "Can this surface be used for ironing")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function larger_surface not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_towel_2056_around_shower_36(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#goal_representation
 
def find_ironing_place(item:item):
    # Function to check if an item is suitable for ironing
    symbol suitable_for_ironing=surfaces(item)
    return suitable_for_ironing

behavior __goal__():
    body:
        if exists place: item : find_ironing_place(place):
            # If a suitable place for ironing is known, move close to it
            bind place: item where:
                find_ironing_place(place)
            achieve close_char(char, place)
        else:
            # If no suitable place is known, inspect unvisited surfaces
            foreach item: item:
                if surfaces(item) and not visited(item):
                    observe(item, "Can this surface be used for ironing")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_ironing_place(item:item):
    # Function to check if an item is suitable for ironing
    symbol suitable_for_ironing=surfaces(item)
    return suitable_for_ironing

behavior __goal__():
    body:
        if exists place: item : find_ironing_place(place):
            # If a suitable place for ironing is known, move close to it
            bind place: item where:
                find_ironing_place(place)
            achieve close_char(char, place)
        else:
            # If no suitable place is known, inspect unvisited surfaces
            foreach item: item:
                if surfaces(item) and not visited(item):
                    observe(item, "Can this surface be used for ironing")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find a suitable place for ironing, which requires visiting and evaluating surfaces that could be used for ironing clothes. Continue searching for an appropriate surface or location that can serve this purpose.
##############################
From agent.py
Human Instruction: You need to find a suitable place for ironing, which requires visiting and evaluating surfaces that could be used for ironing clothes. Continue searching for an appropriate surface or location that can serve this purpose.

The actions you have taken:
Action 1: Walk to stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_towel_2058_around_closetdrawer_394(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def has_suitable_surface(location:item):
    # Function to check if the location is suitable for ironing clothes
    symbol has_surface=surfaces(location)
    return has_surface

behavior find_ironing_place():
    body:
        foreach location: item:
            if not visited(location) and has_suitable_surface(location):
                observe(location, "Evaluate if this surface is suitable for ironing")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Already visited stove_2065, thus continue looking for surfaces there
        find_ironing_place()

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_closetdrawer_394(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

behavior find_towel_rack_33_around_ironing_board_2074(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(towel_rack,ironing_board_instance)
        else:
            exp(towel_rack,ironing_board_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,ironing_board_instance]=True
        close[ironing_board_instance,towel_rack]=True
    

behavior find_chair_106_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_mat_173_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_hanger_109_around_closetdrawer_394(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def has_suitable_surface_for_ironing(surf:item):
    # Determine if the surface is suitable for ironing
    symbol is_ironable_surface=surfaces(surf) and not dirty(surf)
    return is_ironable_surface

behavior __goal__():
    body:
        # Check if there is a suitable surface for ironing
        if exists surf: item : has_suitable_surface_for_ironing(surf):
            # If such a surface is known, move close to it
            bind surf: item where:
                has_suitable_surface_for_ironing(surf)
            achieve close_char(char, surf)
        else:
            # If no surface is known, inspect possible locations
            foreach surf: item:
                if surfaces(surf) and not visited(surf):
                    observe(surf, "Check if it is a suitable surface for ironing")
                    # Examine each surface for potential ironing use

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_closetdrawer_380(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

behavior find_basket_for_clothes_2006_around_closetdrawer_394(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(basket_for_clothes,closetdrawer_instance)
        else:
            exp(basket_for_clothes,closetdrawer_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,closetdrawer_instance]=True
        close[closetdrawer_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def has_suitable_surface_for_ironing(location:item):
    # Function to check if a location has a suitable surface for ironing
    symbol has_suitable_surface=exists surface: item : surfaces(surface) and inside(surface, location)
    return has_suitable_surface

behavior __goal__():
    body:
        if exists location: item : has_suitable_surface_for_ironing(location):
            # If there is a known suitable location for ironing, move close to it
            bind location: item where:
                has_suitable_surface_for_ironing(location)
            achieve close_char(char, location)

        else:
            # If no suitable location is known, explore to find one
            foreach location: item:
                if not visited(location):
                    observe(location, "Check if theres a suitable surface for ironing clothes")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_suitable_surface_for_ironing(location:item):
    # Function to check if a location has a suitable surface for ironing
    symbol has_suitable_surface=exists surface: item : surfaces(surface) and inside(surface, location)
    return has_suitable_surface

behavior __goal__():
    body:
        if exists location: item : has_suitable_surface_for_ironing(location):
            # If there is a known suitable location for ironing, move close to it
            bind location: item where:
                has_suitable_surface_for_ironing(location)
            achieve close_char(char, location)

        else:
            # If no suitable location is known, explore to find one
            foreach location: item:
                if not visited(location):
                    observe(location, "Check if theres a suitable surface for ironing clothes")

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_1)
##############################
From agent.py
walk_executor(bathroom_1)

##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for a suitable surface for ironing clothes. The kitchen and bathroom were visited, but a location with an appropriate ironing surface was not identified. Proceed to explore other areas or revisit locations to evaluate their potential use for ironing.
##############################
From agent.py
Human Instruction: You need to continue searching for a suitable surface for ironing clothes. The kitchen and bathroom were visited, but a location with an appropriate ironing surface was not identified. Proceed to explore other areas or revisit locations to evaluate their potential use for ironing.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Walk to bathroom_1.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_towel_rack_31_around_shower_36(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

behavior find_towel_2056_around_shower_36(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_surface(item: item):
    # Determine if an item is a suitable surface for ironing
    return surfaces(item) and lieable(item)

behavior explore_and_find_suitable_surface():
    body:
        foreach location: item:
            # Iterate through locations to find a suitable surface
            if not visited(location):
                observe(location, "Check if theres a suitable surface for ironing clothes")
                foreach potential_surface: item:
                    # Check each item in the location for suitability
                    if is_suitable_surface(potential_surface):
                        achieve close_char(char, potential_surface)
                        # Approach the suitable surface if found
                        return

behavior __goal__():
    body:
        if exists potential_surface: item : is_suitable_surface(potential_surface):
            # If theres a known suitable surface, approach it
            bind potential_surface: item where:
                is_suitable_surface(potential_surface)
            achieve close_char(char, potential_surface)
        else:
            # If no known suitable surface is identified, explore to find one
            explore_and_find_suitable_surface()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5714, column 31.
Expected one of: 
	* FALSE
	* FINDONE
	* EXISTS
	* IMAG_NUMBER
	* MINUS
	* COLON
	* ELLIPSIS
	* BIN_NUMBER
	* PLUS
	* DEC_NUMBER
	* TRUE
	* VARNAME
	* FINDALL
	* FLOAT_NUMBER
	* OCT_NUMBER
	* TILDE
	* HEX_NUMBER
	* LONG_STRING
	* LPAR
	* STRING
	* NONE
	* NOT
	* LSQB
	* DO
	* FORALL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_173_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_chair_2004_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#goal_representation
 
def is_suitable_surface(item: item):
    # Determine if an item is a suitable surface for ironing
    return surfaces(item) and lieable(item)

behavior explore_and_find_suitable_surface():
    body:
        foreach location: item:
            # Iterate through locations to find a suitable surface
            if not visited(location):
                observe(location, "Check if theres a suitable surface for ironing clothes")
                foreach potential_surface: item:
                    # Check each item in the location for suitability
                    if is_suitable_surface(potential_surface):
                        achieve close_char(char, potential_surface)
                        # Approach the suitable surface if found
                        return

behavior __goal__():
    body:
        if exists potential_surface: item : is_suitable_surface(potential_surface):
            # If theres a known suitable surface, approach it
            bind potential_surface: item where:
                is_suitable_surface(potential_surface)
            achieve close_char(char, potential_surface)
        else:
            # If no known suitable surface is identified, explore to find one
            explore_and_find_suitable_surface()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5696, column 31.
Expected one of: 
	* FALSE
	* FINDONE
	* EXISTS
	* IMAG_NUMBER
	* MINUS
	* COLON
	* ELLIPSIS
	* BIN_NUMBER
	* PLUS
	* DEC_NUMBER
	* TRUE
	* VARNAME
	* FINDALL
	* FLOAT_NUMBER
	* OCT_NUMBER
	* TILDE
	* HEX_NUMBER
	* LONG_STRING
	* LPAR
	* STRING
	* NONE
	* NOT
	* LSQB
	* DO
	* FORALL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_401_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_towel_rack_32_around_shower_36(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

behavior find_chair_103_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def is_suitable_surface(item: item):
    # Determine if an item is a suitable surface for ironing
    return surfaces(item) and lieable(item)

behavior explore_and_find_suitable_surface():
    body:
        foreach location: item:
            # Iterate through locations to find a suitable surface
            if not visited(location):
                observe(location, "Check if theres a suitable surface for ironing clothes")
                foreach potential_surface: item:
                    # Check each item in the location for suitability
                    if is_suitable_surface(potential_surface):
                        achieve close_char(char, potential_surface)
                        # Approach the suitable surface if found
                        return

behavior __goal__():
    body:
        if exists potential_surface: item : is_suitable_surface(potential_surface):
            # If theres a known suitable surface, approach it
            bind potential_surface: item where:
                is_suitable_surface(potential_surface)
            achieve close_char(char, potential_surface)
        else:
            # If no known suitable surface is identified, explore to find one
            explore_and_find_suitable_surface()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_22_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_towel_2057_around_closetdrawer_394(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironing_surface(location:item):
    # Function to check if a location has a suitable ironing surface
    symbol has_surface=exists surface: item : surfaces(surface) and inside(surface, location)
    return has_surface

behavior __goal__():
    body:
        if exists location: item : has_ironing_surface(location):
            # If we already know a location with a suitable ironing surface, approach it
            bind location: item where:
                has_ironing_surface(location)
            achieve close_char(char, location)

        else:
            # Explore different locations to find a suitable ironing surface
            foreach location: item:
                if not visited(location):
                    observe(location, "Find an appropriate ironing surface")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_ironing_surface(location:item):
    # Function to check if a location has a suitable ironing surface
    symbol has_surface=exists surface: item : surfaces(surface) and inside(surface, location)
    return has_surface

behavior __goal__():
    body:
        if exists location: item : has_ironing_surface(location):
            # If we already know a location with a suitable ironing surface, approach it
            bind location: item where:
                has_ironing_surface(location)
            achieve close_char(char, location)

        else:
            # Explore different locations to find a suitable ironing surface
            foreach location: item:
                if not visited(location):
                    observe(location, "Find an appropriate ironing surface")

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_1)
##############################
From agent.py
walk_executor(bathroom_1)

##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for a suitable ironing surface. The initial visits to the kitchen and bathroom did not result in identifying an appropriate location for ironing clothes. Explore additional areas or revisit previous locations to determine their potential use for ironing.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_380(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def locate_suitable_ironing_surface():
    # Function to locate an area suitable for ironing
    symbol has_surface=exists place: item: surfaces(place) and not visited(place)
    return has_surface

def has_shirt_and_skirt():
    # Function to check if both a shirt and a skirt are present in the known items
    symbol has_items=exists item1: item: is_clothes_shirt(item1) and exists item2: item: is_clothes_skirt(item2)
    return has_items

behavior prepare_ironing_area_and_items():
    body:
        foreach place: item:
            if surfaces(place) and not visited(place):
                observe(place, "Evaluate the potential surface for ironing clothes")
                # Observe to determine if the area has suitable surfaces for ironing clothes

        foreach item: item:
            if is_clothes_shirt(item) or is_clothes_skirt(item):
                achieve visited(item)
                # Ensure both shirt and skirt have been located

behavior __goal__():
    body:
        if locate_suitable_ironing_surface():
            if has_shirt_and_skirt():
                bind shirt: item where:
                    is_clothes_shirt(shirt)
                bind skirt: item where:
                    is_clothes_skirt(skirt)
                # Ensure both shirt and skirt are selected and prepare to iron them
            else:
                prepare_ironing_area_and_items()
        else:
            prepare_ironing_area_and_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'item2') at line 5706, column 77.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#goal_representation
 
def locate_suitable_ironing_surface():
    # Function to locate an area suitable for ironing
    symbol has_surface=exists place: item: surfaces(place) and not visited(place)
    return has_surface

def has_shirt_and_skirt():
    # Function to check if both a shirt and a skirt are present in the known items
    symbol has_items=exists item1: item: is_clothes_shirt(item1) and exists item: item: is_clothes_skirt(item)
    return has_items

behavior prepare_ironing_area_and_items():
    body:
        foreach place: item:
            if surfaces(place) and not visited(place):
                observe(place, "Evaluate the potential surface for ironing clothes")
                # Observe to determine if the area has suitable surfaces for ironing clothes

        foreach item: item:
            if is_clothes_shirt(item) or is_clothes_skirt(item):
                achieve visited(item)
                # Ensure both shirt and skirt have been located

behavior __goal__():
    body:
        if locate_suitable_ironing_surface():
            if has_shirt_and_skirt():
                bind shirt: item where:
                    is_clothes_shirt(shirt)
                bind skirt: item where:
                    is_clothes_skirt(skirt)
                # Ensure both shirt and skirt are selected and prepare to iron them
            else:
                prepare_ironing_area_and_items()
        else:
            prepare_ironing_area_and_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'item') at line 5706, column 77.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_380(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_394(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#goal_representation
 
def locate_suitable_ironing_surface():
    # Function to locate an area suitable for ironing
    symbol has_surface=exists place: item: surfaces(place) and not visited(place)
    return has_surface

def has_shirt_and_skirt():
    # Function to check if both a shirt and a skirt are present in the known items
    symbol has_items=exists item1: item: is_clothes_shirt(item1) and exists item: item: is_clothes_skirt(item)
    return has_items

behavior prepare_ironing_area_and_items():
    body:
        foreach place: item:
            if surfaces(place) and not visited(place):
                observe(place, "Evaluate the potential surface for ironing clothes")
                # Observe to determine if the area has suitable surfaces for ironing clothes

        foreach item: item:
            if is_clothes_shirt(item) or is_clothes_skirt(item):
                achieve visited(item)
                # Ensure both shirt and skirt have been located

behavior __goal__():
    body:
        if locate_suitable_ironing_surface():
            if has_shirt_and_skirt():
                bind shirt: item where:
                    is_clothes_shirt(shirt)
                bind skirt: item where:
                    is_clothes_skirt(skirt)
                # Ensure both shirt and skirt are selected and prepare to iron them
            else:
                prepare_ironing_area_and_items()
        else:
            prepare_ironing_area_and_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, ironing_board:item, shirt:item, skirt:item):
    body:
        achieve inside(shirt, ironing_board) # Place the shirt on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron
        achieve_once inhand(iron) # Take the iron in hand to iron the shirt
        achieve clean(shirt) # Ensure the shirt is cleaned by ironing
        achieve inside(skirt, ironing_board) # Place the skirt on the ironing board
        # Note: You release shirt once cleaned before using iron on skirt
        achieve clean(skirt) # Ensure the skirt is cleaned by ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        iron_clothes(iron, ironing_board, shirt, skirt)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_suitable_ironing_surface():
    body:
        foreach surface: item:
            if surfaces(surface) and not visited(surface):
                observe(surface, "Check if this is a suitable ironing surface")

behavior plug_in_iron(iron:item, powersocket:item):
    body:
        achieve plugged(iron)
        # Plug the iron into the power socket

behavior iron_clothing(clothing:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        achieve on(clothing, ironing_board)
        achieve is_on(iron)
        # Iron the clothing on the ironing board

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)
        # Unplug the iron

behavior __goal__():
    body:
        if exists surface: item : surfaces(surface) and not visited(surface):
            find_suitable_ironing_surface()
        
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind powersocket: item where:
            is_powersocket(powersocket)
        
        plug_in_iron(iron, powersocket)
        
        bind shirt: item where:
            is_clothes_shirt(shirt)
        iron_clothing(shirt, iron, ironing_board)
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        iron_clothing(skirt, iron, ironing_board)
        
        unplug_iron(iron)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(stove_2065)', 'walk_executor(bathroom_1)', 'walk_executor(bathroom_1)']
Time info:
Time consume: 254 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 10
goal generate times: 10
goal correct times: 1

Task complete rate:
Keystate: k1 - Requires: 10 steps
Keystate: k2 - Requires: 10 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
