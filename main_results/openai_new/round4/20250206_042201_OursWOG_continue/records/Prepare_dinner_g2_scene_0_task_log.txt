From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Prepare the onion as needed.', '3. Put the chicken and onion together into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion():
    # Function to check if there is a chicken and an onion known
    symbol has_items=exists o: item : (is_food_chicken(o) or is_food_onion(o))
    return has_items

behavior locate_unvisited_chicken_and_onion():
    body:
        foreach o: item:
            if (is_food_chicken(o) or is_food_onion(o)) and not visited(o):
                observe(o, "Locate chicken and onion")

behavior __goal__():
    body:
        if has_chicken_and_onion():
            # If there is a known chicken or onion, ensure to locate them
            foreach o: item:
                if is_food_chicken(o) or is_food_onion(o):
                    achieve visited(o)
        else:
            # If no chicken or onion are known, locate them
            locate_unvisited_chicken_and_onion()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_chicken_and_onion():
    # Function to check if there is a chicken and an onion known
    symbol has_items=exists o: item : (is_food_chicken(o) or is_food_onion(o))
    return has_items

behavior locate_unvisited_chicken_and_onion():
    body:
        foreach o: item:
            if (is_food_chicken(o) or is_food_onion(o)) and not visited(o):
                observe(o, "Locate chicken and onion")

behavior __goal__():
    body:
        if has_chicken_and_onion():
            # If there is a known chicken or onion, ensure to locate them
            foreach o: item:
                if is_food_chicken(o) or is_food_onion(o):
                    achieve visited(o)
        else:
            # If no chicken or onion are known, locate them
            locate_unvisited_chicken_and_onion()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)obs(food_chicken_2017, look around this place)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)obs(food_onion_2032, look around this place)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2017, look around this place)obs(food_onion_2032, look around this place)
##############################
From agent.py
obs(food_chicken_2017, look around this place)
Get this information:  food_chicken_2017 is inside fridge_289. food_chicken_2017 is inside dining_room_201. food_chicken_2017 is close to fridge_289. food_chicken_2017 is close to character_65. food_chicken_2017 is CLEAN.
##############################
From agent.py
obs(food_onion_2032, look around this place)
Get this information:  food_onion_2032 is inside fridge_289. food_onion_2032 is inside dining_room_201. food_onion_2032 is close to fridge_289. food_onion_2032 is close to character_65. food_onion_2032 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def is_onion_prepared(onion:item):
    # Function to check if the onion is prepared (cut)
    symbol is_prepared=exists o: item : is_food_onion(o) and cut(o)
    return is_prepared

behavior cut_onion(onion:item):
    body:
        achieve cut(onion)  # Cut the onion

behavior __goal__():
    body:
        if exists onion: item : is_food_onion(onion) and is_onion_prepared(onion):
            # If the onion is already prepared
            bind onion: item where:
                is_food_onion(onion) and is_onion_prepared(onion)
            achieve cut(onion)
        
        else:
            # If the onion is not prepared yet
            foreach onion: item:
                if is_food_onion(onion) and not cut(onion):
                    bind onion: item where:
                        is_food_onion(onion)
                    cut_onion(onion)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable onion already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
 
def is_onion_prepared(onion:item):
    # Function to check if the onion is prepared (cut)
    symbol is_prepared=exists o: item : is_food_onion(o) and cut(o)
    return is_prepared

behavior cut_onion(onion:item):
    body:
        achieve cut(onion)  # Cut the onion

behavior __goal__():
    body:
        if exists onion: item : is_food_onion(onion) and is_onion_prepared(onion):
            # If the onion is already prepared
            bind prepared_onion: item where:
                is_food_onion(prepared_onion) and is_onion_prepared(prepared_onion)
            # Removed unnecessary achieve statement

        else:
            # If the onion is not prepared yet
            foreach onion: item:
                if is_food_onion(onion) and not cut(onion):
                    bind unprepared_onion: item where:
                        is_food_onion(unprepared_onion) and not cut(unprepared_onion)
                    cut_onion(unprepared_onion)

#goal_representation_end

##############################
Error is:
Failed to rename the derived function application.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_cut_onion(onion:item):
    body:
        bind sink: item where:
            is_sink(sink)
        if not clean(onion):
            achieve_once inside(onion, sink)
            if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
                achieve_once is_on(faucet)
                wash(onion)
                achieve_once is_off(faucet)
            else:
                wash(onion)
        achieve cut(onion)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        clean_and_cut_onion(onion)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [Variable<onion: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
behavior clean_and_cut_onion(onion:item, faucet:item, sink:item):
    body:
        achieve_once inside(onion, sink)
        if not clean(onion):
            if is_faucet(faucet) and close(faucet, sink):
                achieve_once is_on(faucet)
                wash(onion)
                achieve_once is_off(faucet)
            else:
                wash(onion)
        achieve cut(onion)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        clean_and_cut_onion(onion, faucet, sink)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior clean_and_cut_onion(onion:item, faucet:item, sink:item):
    body:
        achieve_once inside(onion, sink)
        if not clean(onion):
            if is_faucet(faucet) and close(faucet, sink):
                achieve_once is_on(faucet)
                wash(onion)
                achieve_once is_off(faucet)
            else:
                wash(onion)
        achieve cut(onion)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        clean_and_cut_onion(onion, faucet, sink)
##############################
From agent.py-> find a plan in act()
grab_executor(food_onion_2032)walk_executor(sink_231)putin_executor(food_onion_2032, sink_231)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_onion_2032)cut_executor(food_onion_2032)
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(sink_231)
Robot find: cutting_board_2051, drawing_238, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
putin_executor(food_onion_2032, sink_231)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. food_onion_2032 is inside sink_231. sink_231 is close food_onion_2032. food_onion_2032 is close sink_231. food_onion_2032 released by right hand. 
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_onion_2032)cut_executor(food_onion_2032)
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_onion_2032, cutting_board_2051)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_onion_2032. food_onion_2032 is close cutting_board_2051. food_onion_2032 is on cutting_board_2051. food_onion_2032 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(oven:item):
    # Function to check if the oven is in the kitchen
    symbol in_kitchen=exists room: item : is_kitchen(room) and inside(oven, room)
    return in_kitchen

behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven)   # Place the onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve closed(oven)         # Ensure the oven is closed
        achieve is_on(oven)          # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven) and in_kitchen(oven)
        # Select an oven in the kitchen
        
        put_in_oven(chicken, onion, oven)
        start_oven(oven) # Start the oven to roast the chicken and onion

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior start_roasting(oven:item):
    body:
        achieve closed(oven) # Ensure the oven door is closed
        achieve is_on(oven) # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be roasted

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be roasted

        bind oven: item where:
            is_oven(oven)
        # Select the oven for roasting

        roast_chicken_with_onion(chicken, onion, oven)
        start_roasting(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior start_roasting(oven:item):
    body:
        achieve closed(oven) # Ensure the oven door is closed
        achieve is_on(oven) # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be roasted

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be roasted

        bind oven: item where:
            is_oven(oven)
        # Select the oven for roasting

        roast_chicken_with_onion(chicken, onion, oven)
        start_roasting(oven)

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. food_onion_2032 is inside oven_295. oven_295 is close food_onion_2032. food_onion_2032 is close oven_295. food_onion_2032 released by left hand. 
##############################
From agent.py
close_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the oven_295. oven_295 is closed. 
##############################
From agent.py
switchon_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the oven_295. oven_295 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_onion_2032)', 'walk_executor(sink_231)', 'putin_executor(food_onion_2032, sink_231)', 'grab_executor(food_onion_2032)', 'walk_executor(cutting_board_2051)', 'put_executor(food_onion_2032, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_onion_2032)', 'cut_executor(food_onion_2032)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(oven_295)', 'putin_executor(food_onion_2032, oven_295)', 'close_executor(oven_295)', 'switchon_executor(oven_295)']
Time info:
Time consume: 153 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 10
goal generate times: 5
goal correct times: 1

Task complete rate:
1
Scene_id: 0
##############################
