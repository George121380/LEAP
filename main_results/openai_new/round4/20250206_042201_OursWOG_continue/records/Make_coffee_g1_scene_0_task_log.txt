From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_filter_and_coffee(cup:item, water:item):
    # Function to check if both a coffee filter and coffee grounds exist
    symbol has_filter_and_coffee=exists o: item : (is_coffee_filter(o))
    return has_filter_and_coffee

def is_close_kitchen_counter(coffee_maker:item, kitchen_counter:item):
    # Function to check if the coffee maker is close to the kitchen counter
    symbol close_to_counter=close(coffee_maker, kitchen_counter)
    return close_to_counter

behavior prepare_coffee(coffee_maker:item, cup:item, water:item):
    body:
        if has_filter_and_coffee(cup, water):
            achieve has_water(coffee_maker)
            # Make sure the coffee maker has water

behavior operate_coffee_maker(coffee_maker:item):
    body:
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)
            # Turn on the coffee maker to brew coffee

behavior serve_coffee(coffee_maker:item, cup:item):
    body:
        achieve clean(cup)
        achieve inside(cup, coffee_maker)
        # Serve the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        if not is_close_kitchen_counter(coffee_maker, kitchen_counter):
            move(coffee_maker)

        prepare_coffee(coffee_maker, cup, kitchen_counter)
        operate_coffee_maker(coffee_maker)
        serve_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_coffee_maker not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_filter_and_coffee(cup:item, water:item):
    # Function to check if both a coffee filter and coffee grounds exist
    symbol has_filter_and_coffee=exists o: item : (is_coffee_filter(o))
    return has_filter_and_coffee

def is_close_kitchen_counter(coffee_maker:item, kitchen_counter:item):
    # Function to check if the coffee maker is close to the kitchen counter
    symbol close_to_counter=close(coffee_maker, kitchen_counter)
    return close_to_counter

behavior prepare_coffee(coffee_maker:item, cup:item, water:item):
    body:
        if has_filter_and_coffee(cup, water):
            achieve has_water(coffee_maker)
            # Make sure the coffee maker has water

behavior operate_coffee_maker(coffee_maker:item):
    body:
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)
            # Turn on the coffee maker to brew coffee

behavior serve_coffee(coffee_maker:item, cup:item):
    body:
        achieve clean(cup)
        achieve inside(cup, coffee_maker)
        # Serve the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        if not is_close_kitchen_counter(coffee_maker, kitchen_counter):
            move(coffee_maker)

        prepare_coffee(coffee_maker, cup, kitchen_counter)
        operate_coffee_maker(coffee_maker)
        serve_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffeemaker: item):
    body:
        achieve plugged(coffeemaker)
        achieve has_water(coffeemaker)
        achieve clean(coffeemaker)
        achieve closed(coffeemaker)

behavior brew_coffee(coffeemaker: item):
    body:
        achieve is_on(coffeemaker)
        achieve_closed(coffeemaker)

behavior fill_cup_with_coffee(cup: item, coffeemaker: item):
    body:
        achieve on(cup, coffeemaker) # Place the cup on the coffee maker
        achieve inside(cup, coffeemaker) # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee_maker(coffeemaker)
        brew_coffee(coffeemaker)
        fill_cup_with_coffee(cup, coffeemaker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_closed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior prepare_coffee_maker(coffeemaker: item):
    body:
        achieve plugged(coffeemaker)
        achieve has_water(coffeemaker)
        achieve clean(coffeemaker)
        achieve closed(coffeemaker)

behavior brew_coffee(coffeemaker: item):
    body:
        achieve is_on(coffeemaker)
        achieve closed(coffeemaker)

behavior fill_cup_with_coffee(cup: item, coffeemaker: item):
    body:
        achieve on(cup, coffeemaker) # Place the cup on the coffee maker
        achieve inside(cup, coffeemaker) # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee_maker(coffeemaker)
        brew_coffee(coffeemaker)
        fill_cup_with_coffee(cup, coffeemaker)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        
behavior prepare_coffee(cup: item, coffee_maker: item):
    body:
        achieve on_char(char, cup) # While making coffee, the cup should be in hand to catch the coffee being made
        
        # Prepare coffee        
        fill_coffee_maker_with_water(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        # This step assumes that the coffee maker will fill the cup with coffee as its turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 104 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 26
goal generate times: 3
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
