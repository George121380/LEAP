From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices in the hot oil until golden brown.', '4. Remove and drain the fried bananas on a paper towel.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_banana_for_frying(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife)
        # Use the knife to slice the bananas
        achieve cut(banana)
        # Ensure the banana is cut

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        prepare_banana_for_frying(banana, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_banana_for_frying(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife)
        # Use the knife to slice the bananas
        achieve cut(banana)
        # Ensure the banana is cut

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        prepare_banana_for_frying(banana, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pencil_2001_around_nightstand_100(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pencil,nightstand_instance)
        else:
            exp(pencil,nightstand_instance)
    eff:
        unknown[pencil]=False
        close[pencil,nightstand_instance]=True
        close[nightstand_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(stove:item, pan:item, oil:item):
    body:
        achieve inside(oil, pan)
        achieve on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        heat_oil_in_pan(stove, pan, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(stove:item, pan:item, oil:item):
    body:
        achieve inside(oil, pan)
        achieve on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        heat_oil_in_pan(stove, pan, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices_in_hot_oil(banana_slices:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on to maintain the oils heat

        achieve_once is_on(fryingpan)
        # Ensure the frying pan is placed on the heated stove, with oil inside it

behavior check_banana_slices_golden_brown(banana_slices:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown in the frying pan")
        # Observe the color of the banana slices to check if theyre golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove, ensuring its already on

        fry_banana_slices_in_hot_oil(banana_slices, fryingpan, stove)
        check_banana_slices_golden_brown(banana_slices, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
behavior fry_banana_slices_in_hot_oil(banana_slices:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on to maintain the oils heat

        achieve_once is_on(fryingpan)
        # Ensure the frying pan is placed on the heated stove, with oil inside it

behavior check_banana_slices_golden_brown(banana_slices:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown in the frying pan")
        # Observe the color of the banana slices to check if theyre golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove, ensuring its already on

        fry_banana_slices_in_hot_oil(banana_slices, fryingpan, stove)
        check_banana_slices_golden_brown(banana_slices, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
behavior fry_banana_slices_in_hot_oil(banana_slices:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on to maintain the oils heat

        achieve_once is_on(fryingpan)
        # Ensure the frying pan is placed on the heated stove, with oil inside it

behavior check_banana_slices_golden_brown(banana_slices:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown in the frying pan")
        # Observe the color of the banana slices to check if theyre golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove, ensuring its already on
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        fry_banana_slices_in_hot_oil(banana_slices, fryingpan, stove)
        check_banana_slices_golden_brown(banana_slices, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana_slices:item, oil:item, fryingpan:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Put the banana slices inside the frying pan
        achieve inside(oil, fryingpan)
        # Ensure the oil is inside the frying pan

behavior achieve_golden_brown_slices(banana_slices:item):
    body:
        achieve cut(banana_slices)
        # Achieve the state where banana slices are cut
        assert eatable(banana_slices)
        # Assert that the banana slices can be eaten once golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove

        bind banana_slices: item where:
            cut(banana_slices) and is_food_banana(banana_slices)
        # Select the sliced banana

        bind oil: item where:
            is_oil(oil) and inside(oil, fryingpan)
        # Select the oil that is inside the frying pan

        fry_banana_slices(banana_slices, oil, fryingpan)
        achieve_golden_brown_slices(banana_slices)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pencil_2001_around_nightstand_100(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pencil,nightstand_instance)
        else:
            exp(pencil,nightstand_instance)
    eff:
        unknown[pencil]=False
        close[pencil,nightstand_instance]=True
        close[nightstand_instance,pencil]=True
    

#goal_representation
behavior fry_banana_slices(banana_slices:item, oil:item, fryingpan:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Put the banana slices inside the frying pan
        achieve inside(oil, fryingpan)
        # Ensure the oil is inside the frying pan

behavior achieve_golden_brown_slices(banana_slices:item):
    body:
        achieve cut(banana_slices)
        # Achieve the state where banana slices are cut
        assert eatable(banana_slices)
        # Assert that the banana slices can be eaten once golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind banana_slices: item where:
            cut(banana_slices) and is_food_banana(banana_slices)
        # Select the sliced banana

        bind oil: item where:
            is_oil(oil) and inside(oil, fryingpan)
        # Select the oil that is inside the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Define stove with ID 2065

        fry_banana_slices(banana_slices, oil, fryingpan)
        achieve_golden_brown_slices(banana_slices)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
behavior fry_banana_slices(banana_slices:item, oil:item, fryingpan:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Put the banana slices inside the frying pan
        achieve inside(oil, fryingpan)
        # Ensure the oil is inside the frying pan

behavior achieve_golden_brown_slices(banana_slices:item):
    body:
        achieve cut(banana_slices)
        # Achieve the state where banana slices are cut
        assert eatable(banana_slices)
        # Assert that the banana slices can be eaten once golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Define stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind banana_slices: item where:
            cut(banana_slices) and is_food_banana(banana_slices)
        # Select the sliced banana

        bind oil: item where:
            is_oil(oil) and inside(oil, fryingpan)
        # Select the oil that is inside the frying pan

        fry_banana_slices(banana_slices, oil, fryingpan)
        achieve_golden_brown_slices(banana_slices)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices(banana_slices:item, oil:item, fryingpan:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Put the banana slices inside the frying pan
        achieve inside(oil, fryingpan)
        # Ensure the oil is inside the frying pan

behavior achieve_golden_brown_slices(banana_slices:item):
    body:
        achieve cut(banana_slices)
        # Achieve the state where banana slices are cut
        assert eatable(banana_slices)
        # Assert that the banana slices can be eaten once golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Define stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind banana_slices: item where:
            cut(banana_slices) and is_food_banana(banana_slices)
        # Select the sliced banana

        bind oil: item where:
            is_oil(oil) and inside(oil, fryingpan)
        # Select the oil that is inside the frying pan

        fry_banana_slices(banana_slices, oil, fryingpan)
        achieve_golden_brown_slices(banana_slices)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The actions recorded do not specify that the banana slices were fried specifically until golden brown. You need to ensure the frying process results in golden brown slices before moving on to the next sub-task.
##############################
From agent.py
Human Instruction: The actions recorded do not specify that the banana slices were fried specifically until golden brown. You need to ensure the frying process results in golden brown slices before moving on to the next sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for knife_2050 around kitchen_counter_230.
Action 3: Walk to knife_2050.
Action 4: Grab knife_2050.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_banana_2011 around fridge_289.
Action 9: Grab food_banana_2011.
Action 10: Walk to cutting_board_2051.
Action 11: Put food_banana_2011 on cutting_board_2051.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 into fryingpan_2083.
Action 18: Grab fryingpan_2083.
Action 19: Walk to stove_2065.
Action 20: Put fryingpan_2083 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to food_banana_2011.
Action 23: Grab food_banana_2011.
Action 24: Walk to fryingpan_2083.
Action 25: Put food_banana_2011 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_golden_brown(banana:item):
    # Function to check if banana slices are golden brown
    symbol golden_brown=exists o: item : is_food_banana(o) and cut(o)
    return golden_brown

behavior ensure_frying_complete(banana:item, fryingpan:item):
    body:
        if not is_banana_golden_brown(banana):
            # If banana slices are not golden brown, observe and ensure they are properly fried
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the banana slices
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        ensure_frying_complete(banana, fryingpan)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fryingpan_with_food(fryingpan:item):
    # Function to check if there are food constituents, such as banana slices, within the frying pan
    symbol has_food=exists o: item : is_food_banana(o) and inside(o, fryingpan)
    return has_food

behavior fry_banana_slices(fryingpan: item):
    body:
        if is_fryingpan_with_food(fryingpan):
            achieve inside(food_banana, fryingpan)
            # Ensure the banana slices are inside the frying pan
            assert_hold is_on(stove_2065) 
            # The stove is on, so the pan is automatically heated
            achieve visited(food_banana)
            # Achieve the slices to be a state where they fry until golden brown 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove
        
        bind food_banana: item where:
            is_food_banana(food_banana) and inside(food_banana, fryingpan)
        # Check for banana slices
        
        fry_banana_slices(fryingpan)
        # Engage the process to fry the banana slices in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_banana; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#goal_representation
 
def is_fryingpan_with_food(fryingpan:item):
    # Function to check if there are food constituents, such as banana slices, within the frying pan
    symbol has_food=exists o: item : is_food_banana(o) and inside(o, fryingpan)
    return has_food

behavior fry_banana_slices(fryingpan: item, food_banana: item):
    body:
        if is_fryingpan_with_food(fryingpan):
            achieve inside(food_banana, fryingpan)
            # Ensure the banana slices are inside the frying pan
            assert_hold is_on(stove_2065) 
            # The stove is on, so the pan is automatically heated
            achieve visited(food_banana)
            # Achieve the slices to be a state where they fry until golden brown 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove
        
        bind food_banana: item where:
            is_food_banana(food_banana) and inside(food_banana, fryingpan)
        # Check for banana slices
        
        fry_banana_slices(fryingpan, food_banana)
        # Engage the process to fry the banana slices in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>, Variable<food_banana: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_fryingpan_with_food(fryingpan:item):
    # Function to check if there are food constituents, such as banana slices, within the frying pan
    symbol has_food=exists o: item : is_food_banana(o) and inside(o, fryingpan)
    return has_food

behavior fry_banana_slices(fryingpan: item, food_banana: item, stove: item):
    body:
        if is_fryingpan_with_food(fryingpan):
            achieve inside(food_banana, fryingpan)
            # Ensure the banana slices are inside the frying pan
            assert_hold is_on(stove) 
            # The stove is on, so the pan is automatically heated
            achieve visited(food_banana)
            # Achieve the slices to be a state where they fry until golden brown 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove
        
        bind food_banana: item where:
            is_food_banana(food_banana) and inside(food_banana, fryingpan)
        # Check for banana slices
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        fry_banana_slices(fryingpan, food_banana, stove)
        # Engage the process to fry the banana slices in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_with_food(fryingpan:item):
    # Function to check if there are food constituents, such as banana slices, within the frying pan
    symbol has_food=exists o: item : is_food_banana(o) and inside(o, fryingpan)
    return has_food

behavior fry_banana_slices(fryingpan: item, food_banana: item, stove: item):
    body:
        if is_fryingpan_with_food(fryingpan):
            achieve inside(food_banana, fryingpan)
            # Ensure the banana slices are inside the frying pan
            assert_hold is_on(stove) 
            # The stove is on, so the pan is automatically heated
            achieve visited(food_banana)
            # Achieve the slices to be a state where they fry until golden brown 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove
        
        bind food_banana: item where:
            is_food_banana(food_banana) and inside(food_banana, fryingpan)
        # Check for banana slices
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        fry_banana_slices(fryingpan, food_banana, stove)
        # Engage the process to fry the banana slices in the frying pan

##############################
From agent.py-> find a plan in act()
obs(food_banana_2011, look around this place)
##############################
From agent.py
obs(food_banana_2011, look around this place)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close to character_65. food_banana_2011 is close to fryingpan_2083. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the banana slices in the frying pan are fried until they are golden brown. Currently, the actions do not specify that the bananas have been fried to this point.
##############################
From agent.py
Human Instruction: You need to ensure the banana slices in the frying pan are fried until they are golden brown. Currently, the actions do not specify that the bananas have been fried to this point.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for knife_2050 around kitchen_counter_230.
Action 3: Walk to knife_2050.
Action 4: Grab knife_2050.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_banana_2011 around fridge_289.
Action 9: Grab food_banana_2011.
Action 10: Walk to cutting_board_2051.
Action 11: Put food_banana_2011 on cutting_board_2051.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 into fryingpan_2083.
Action 18: Grab fryingpan_2083.
Action 19: Walk to stove_2065.
Action 20: Put fryingpan_2083 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to food_banana_2011.
Action 23: Grab food_banana_2011.
Action 24: Walk to fryingpan_2083.
Action 25: Put food_banana_2011 into fryingpan_2083.
Action 26: Observe around food_banana_2011 with the question of look around this place.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_fried_banana_slices_golden_brown(fryingpan:item):
    # Function to check if there are banana slices fried to golden brown in the pan
    symbol fried_golden_brown=exists o: item : is_food_banana(o) and on(o, fryingpan)
    return fried_golden_brown

behavior fry_banana_slices_until_golden_brown(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        achieve close_char(char, fryingpan)
        # Ensure the character is close to the frying pan while frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan on the stove

        bind banana: item where:
            is_food_banana(banana) and inside(banana, fryingpan)
        # Select banana slices in the frying pan

        if not is_fried_banana_slices_golden_brown(fryingpan):
            fry_banana_slices_until_golden_brown(banana, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def is_fried_banana_slices_golden_brown(fryingpan:item):
    # Function to check if there are banana slices fried to golden brown in the pan
    symbol fried_golden_brown=exists o: item : is_food_banana(o) and on(o, fryingpan)
    return fried_golden_brown

behavior fry_banana_slices_until_golden_brown(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        achieve close_char(char, fryingpan)
        # Ensure the character is close to the frying pan while frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Bind the stove with its ID
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind banana: item where:
            is_food_banana(banana) and inside(banana, fryingpan)
        # Select banana slices in the frying pan

        if not is_fried_banana_slices_golden_brown(fryingpan):
            fry_banana_slices_until_golden_brown(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan:item, banana:item):
    body:
        achieve inside(banana, fryingpan)
        achieve is_on(fryingpan)

def is_fryingpan_on_stove(fryingpan:item):
    symbol on_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return on_stove

def is_banana_in_fryingpan(banana:item, fryingpan:item):
    symbol in_fryingpan=inside(banana, fryingpan)
    return in_fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_on_stove(fryingpan)
        # Select the fryingpan that is on the stove

        bind banana: item where:
            is_food_banana(banana) and is_banana_in_fryingpan(banana, fryingpan)
        # Select the banana slices inside the fryingpan
        
        fry_banana_slices(fryingpan, banana)
        # Fry the banana slices until golden brown

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_pencil_2001_around_nightstand_100(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pencil,nightstand_instance)
        else:
            exp(pencil,nightstand_instance)
    eff:
        unknown[pencil]=False
        close[pencil,nightstand_instance]=True
        close[nightstand_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_fried_to_golden_brown(banana_slices: item):
    # Function to check if banana slices are fried to a golden brown
    symbol fried_golden_brown = exists slice: item : is_food_banana(slice) and on(slice, fryingpan) and desired_color(slice, golden_brown)
    return fried_golden_brown

behavior fry_banana_slices(fryingpan: item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and inside(slice, fryingpan):
                # Check each slice inside the fryingpan
                observe(slice, "Check if banana is fried to a golden brown color")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan containing banana slices
        
        if not is_banana_fried_to_golden_brown(fryingpan):
            fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan; available variables: [Variable<banana_slices: item>, Variable<slice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_143(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#goal_representation
 
def is_banana_fried_to_golden_brown(banana_slices: item):
    # Function to check if banana slices are fried to a golden brown
    symbol fried_golden_brown = exists slice: item : is_food_banana(slice) and inside(slice, fryingpan) and desired_color(slice, golden_brown)
    return fried_golden_brown

behavior fry_banana_slices(slice: item, fryingpan: item):
    body:
        if is_food_banana(slice) and inside(slice, fryingpan):
            # Check each slice inside the fryingpan
            observe(slice, "Check if banana is fried to a golden brown color")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        if not is_banana_fried_to_golden_brown(fryingpan):
            foreach slice: item:
                if is_food_banana(slice) and inside(slice, fryingpan):
                    fry_banana_slices(slice, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan; available variables: [Variable<banana_slices: item>, Variable<slice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_415_around_computer_417(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#goal_representation
 
def is_banana_fried_to_golden_brown(fryingpan: item):
    # Function to check if banana slices are fried to a golden brown
    symbol fried_golden_brown = exists slice: item : is_food_banana(slice) and inside(slice, fryingpan) and desired_color(slice, golden_brown)
    return fried_golden_brown

behavior fry_banana_slices(slice: item, fryingpan: item):
    body:
        if is_food_banana(slice) and inside(slice, fryingpan):
            # Check each slice inside the fryingpan
            observe(slice, "Check if banana is fried to a golden brown color")
            
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        if not is_banana_fried_to_golden_brown(fryingpan):
            foreach slice: item:
                if is_food_banana(slice) and inside(slice, fryingpan):
                    fry_banana_slices(slice, fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)']
Time info:
Time consume: 478 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 26
goal generate times: 9
goal correct times: 6

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
