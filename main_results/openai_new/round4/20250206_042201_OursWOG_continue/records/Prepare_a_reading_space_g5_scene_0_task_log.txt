From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_100(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_spectacles(coffee_table: item, home_office: item):
    body:
        if not exists spectacles: item : is_spectacles(spectacles) and inside(spectacles, home_office):
            foreach obj: item:
                if is_spectacles(obj) and not visited(obj):
                    observe(obj, "Locate the spectacles to place on the coffee table")
        
        bind spectacles: item where:
            is_spectacles(spectacles) and inside(spectacles, home_office)
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        find_and_place_spectacles(coffee_table, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'spectacles') at line 5637, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_spectacles_2082_around_walllamp_27(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==27
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(spectacles,walllamp_instance)
        else:
            exp(spectacles,walllamp_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,walllamp_instance]=True
        close[walllamp_instance,spectacles]=True
    

#goal_representation
 
behavior find_and_place_spectacles(coffee_table: item, home_office: item):
    body:
        if not exists spectacles: item : is_spectacles(spectacles) and inside(spectacles, home_office):
            foreach obj: item:
                if is_spectacles(obj) and not visited(obj):
                    observe(obj, "Locate the spectacles to place on the coffee table")
        
        bind spectacles: item where:
            is_spectacles(spectacles) and inside(spectacles, home_office)
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        find_and_place_spectacles(coffee_table, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'spectacles') at line 5637, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_168_around_computer_417(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_spectacles_2082_around_couch_352(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(spectacles,couch_instance)
        else:
            exp(spectacles,couch_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,couch_instance]=True
        close[couch_instance,spectacles]=True
    

behavior find_chair_2004_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior find_and_place_spectacles(coffee_table: item, home_office: item):
    body:
        if not exists spectacles: item : is_spectacles(spectacles) and inside(spectacles, home_office):
            foreach obj: item:
                if is_spectacles(obj) and not visited(obj):
                    observe(obj, "Locate the spectacles to place on the coffee table")
        
        bind spectacles: item where:
            is_spectacles(spectacles) and inside(spectacles, home_office)
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        find_and_place_spectacles(coffee_table, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_couch_352(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(spectacles,couch_instance)
        else:
            exp(spectacles,couch_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,couch_instance]=True
        close[couch_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
def is_spectacles_on_table(table:item):
    # Function to check if spectacles are on the specified table
    symbol has_spectacles=exists o: item : is_spectacles(o) and on(o, table)
    return has_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        
        if exists spectacles: item : is_spectacles(spectacles):
            bind spectacles: item where:
                is_spectacles(spectacles)
            place_spectacles_on_table(spectacles, coffee_table)

        else:
            # If no spectacles are known, locate them and then place on the coffee table
            foreach obj: item:
                if is_spectacles(obj) and not visited(obj):
                    observe(obj, "Locate the spectacles to place on the coffee table")
                    if on(obj, coffee_table):
                        achieve visited(obj)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_spectacles_on_table(table:item):
    # Function to check if spectacles are on the specified table
    symbol has_spectacles=exists o: item : is_spectacles(o) and on(o, table)
    return has_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        
        if exists spectacles: item : is_spectacles(spectacles):
            bind spectacles: item where:
                is_spectacles(spectacles)
            place_spectacles_on_table(spectacles, coffee_table)

        else:
            # If no spectacles are known, locate them and then place on the coffee table
            foreach obj: item:
                if is_spectacles(obj) and not visited(obj):
                    observe(obj, "Locate the spectacles to place on the coffee table")
                    if on(obj, coffee_table):
                        achieve visited(obj)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)exp(spectacles_2082, couch_352)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(couch_352)
Robot find: mat_401, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, pillow_406, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. 
##############################
From agent.py
exp(spectacles_2082, couch_352)
Fail to find spectacles_2082 around couch_352. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_353)exp(spectacles_2082, tvstand_353)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(tvstand_353)
Robot find: dvd_player_2061, Robot is close to the tvstand_353. 
##############################
From agent.py
exp(spectacles_2082, tvstand_353)
Fail to find spectacles_2082 around tvstand_353. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(spectacles_2082, coffee_table_2068)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(spectacles_2082, coffee_table_2068)
Fail to find spectacles_2082 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_225)exp(spectacles_2082, tvstand_225)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(tvstand_225)
Robot find: cd_player_2060, drawing_241, drawing_242, drawing_243, cd_2075, Robot is close to the tvstand_225. 
##############################
From agent.py
exp(spectacles_2082, tvstand_225)
Fail to find spectacles_2082 around tvstand_225. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_100)open_executor(nightstand_100)exp(spectacles_2082, nightstand_100)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(nightstand_100)
Robot find: mat_173, drawing_176, pillow_183, pillow_182, chair_106, Robot is close to the nightstand_100. Robot is close to the mat_173. 
##############################
From agent.py
open_executor(nightstand_100)
Robot find: Robot is close to the nightstand_100. Robot is close to the mat_173. nightstand_100 is opened. 
##############################
From agent.py
exp(spectacles_2082, nightstand_100)
Fail to find spectacles_2082 around nightstand_100. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_102)exp(spectacles_2082, nightstand_102)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(nightstand_102)
Robot find: Robot is close to the mat_173. Robot is close to the nightstand_102. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2082 ?
Answer: Go to the room labeled home_office_319. Inside, locate table_355. You will find the target item, spectacles_2082, on top of table_355.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the room labeled home_office_319. Inside, locate table_355. You will find the target item, spectacles_2082, on top of table_355.

The actions you have taken:
Action 1: Walk to couch_352.
Action 2: look for spectacles_2082 around couch_352.
Action 3: Walk to tvstand_353.
Action 4: look for spectacles_2082 around tvstand_353.
Action 5: Walk to coffee_table_2068.
Action 6: look for spectacles_2082 around coffee_table_2068.
Action 7: Walk to tvstand_225.
Action 8: look for spectacles_2082 around tvstand_225.
Action 9: Walk to nightstand_100.
Action 10: Open nightstand_100.
Action 11: look for spectacles_2082 around nightstand_100.
Action 12: Walk to nightstand_102.

##############################
From agent.py
exp(spectacles_2082, nightstand_102)
Fail to find spectacles_2082 around nightstand_102. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(spectacles_2082, table_355)walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(table_355)
Robot find: headset_2062, spectacles_2082, drawing_404, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(spectacles_2082, table_355)
Find spectacles_2082. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2082)grab_executor(spectacles_2082)walk_executor(coffee_table_2068)put_executor(spectacles_2082, coffee_table_2068)
##############################
From agent.py
walk_executor(spectacles_2082)
Robot find: Robot is close to the table_355. Robot is close to the spectacles_2082. 
##############################
From agent.py
grab_executor(spectacles_2082)
Robot find: Robot is close to the table_355. Robot is close to the spectacles_2082. Grabbing spectacles_2082 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the spectacles_2082. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(spectacles_2082, coffee_table_2068)
Robot find: Robot is close to the spectacles_2082. Robot is close to the coffee_table_2068. coffee_table_2068 is close spectacles_2082. spectacles_2082 is close coffee_table_2068. spectacles_2082 is on coffee_table_2068. spectacles_2082 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        if exists book: item : is_book(book):
            bind book: item where:
                is_book(book)
            place_book_on_table(book, table)

        else:
            # If no book is known, locate it and then place on the table
            foreach obj: item:
                if is_book(obj) and not visited(obj):
                    observe(obj, "Locate the book to place on the table")
                    if on(obj, table):
                        achieve visited(obj)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        if exists book: item : is_book(book):
            bind book: item where:
                is_book(book)
            place_book_on_table(book, table)

        else:
            # If no book is known, locate it and then place on the table
            foreach obj: item:
                if is_book(obj) and not visited(obj):
                    observe(obj, "Locate the book to place on the table")
                    if on(obj, table):
                        achieve visited(obj)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the book on the correct table, which is the coffee table in the home office (coffee_table_2068). Currently, the book was placed on table_355 instead. Move the book from table_355 to coffee_table_2068 to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to place the book on the correct table, which is the coffee table in the home office (coffee_table_2068). Currently, the book was placed on table_355 instead. Move the book from table_355 to coffee_table_2068 to complete the sub-task.

The actions you have taken:
Action 1: Walk to couch_352.
Action 2: look for spectacles_2082 around couch_352.
Action 3: Walk to tvstand_353.
Action 4: look for spectacles_2082 around tvstand_353.
Action 5: Walk to coffee_table_2068.
Action 6: look for spectacles_2082 around coffee_table_2068.
Action 7: Walk to tvstand_225.
Action 8: look for spectacles_2082 around tvstand_225.
Action 9: Walk to nightstand_100.
Action 10: Open nightstand_100.
Action 11: look for spectacles_2082 around nightstand_100.
Action 12: Walk to nightstand_102.
Action 13: look for spectacles_2082 around nightstand_102.
Action 14: Walk to table_355.
Action 15: look for spectacles_2082 around table_355.
Action 16: Walk to spectacles_2082.
Action 17: Grab spectacles_2082.
Action 18: Walk to coffee_table_2068.
Action 19: Put spectacles_2082 on coffee_table_2068.
Action 20: Walk to bookshelf_354.
Action 21: Open bookshelf_354.
Action 22: look for book_2066 around bookshelf_354.
Action 23: Walk to book_2066.
Action 24: Grab book_2066.
Action 25: Walk to table_355.
Action 26: Put book_2066 on table_355.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_curtain_25(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==25
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(bowl,curtain_instance)
        else:
            exp(bowl,curtain_instance)
    eff:
        unknown[bowl]=False
        close[bowl,curtain_instance]=True
        close[curtain_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_book_to_correct_table(book:item, initial_table:item, correct_table:item):
    body:
        achieve on(book, correct_table)
        # Move the book from the incorrect table to the correct table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and on(book, table_355)
        # Bind the book on the incorrect table (table_355)

        bind correct_table: item where:
            is_coffee_table(correct_table) and id[correct_table]==2068
        # Bind the correct coffee table in the home office with ID 2068

        move_book_to_correct_table(book, table_355, correct_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_355; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior move_book_to_correct_table(book:item, initial_table:item, correct_table:item):
    body:
        achieve on(book, correct_table)
        # Move the book from the incorrect table to the correct table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and on(book, initial_table)
        # Bind the book on the incorrect table (table_355)

        bind initial_table: item where:
            is_table(initial_table) and id[initial_table]==355
        # Bind the initial incorrect table with ID 355

        bind correct_table: item where:
            is_coffee_table(correct_table) and id[correct_table]==2068
        # Bind the correct coffee table in the home office with ID 2068

        move_book_to_correct_table(book, initial_table, correct_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: initial_table; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

#goal_representation
 
behavior move_book_to_correct_table(book:item, initial_table:item, correct_table:item):
    body:
        achieve on(book, correct_table)
        # Move the book from the incorrect table to the correct table in the home office

behavior __goal__():
    body:
        bind initial_table: item where:
            is_table(initial_table) and id[initial_table]==355
        # Bind the initial incorrect table with ID 355

        bind book: item where:
            is_book(book) and on(book, initial_table)
        # Bind the book on the incorrect table (table_355)

        bind correct_table: item where:
            is_coffee_table(correct_table) and id[correct_table]==2068
        # Bind the correct coffee table in the home office with ID 2068

        move_book_to_correct_table(book, initial_table, correct_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_book_to_correct_table(book:item, initial_table:item, correct_table:item):
    body:
        achieve on(book, correct_table)
        # Move the book from the incorrect table to the correct table in the home office

behavior __goal__():
    body:
        bind initial_table: item where:
            is_table(initial_table) and id[initial_table]==355
        # Bind the initial incorrect table with ID 355

        bind book: item where:
            is_book(book) and on(book, initial_table)
        # Bind the book on the incorrect table (table_355)

        bind correct_table: item where:
            is_coffee_table(correct_table) and id[correct_table]==2068
        # Bind the correct coffee table in the home office with ID 2068

        move_book_to_correct_table(book, initial_table, correct_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(couch_352)', 'walk_executor(tvstand_353)', 'walk_executor(coffee_table_2068)', 'walk_executor(tvstand_225)', 'walk_executor(nightstand_100)', 'open_executor(nightstand_100)', 'walk_executor(nightstand_102)', 'walk_executor(table_355)', 'walk_executor(spectacles_2082)', 'grab_executor(spectacles_2082)', 'walk_executor(coffee_table_2068)', 'put_executor(spectacles_2082, coffee_table_2068)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)']
Time info:
Time consume: 191 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 26
goal generate times: 4
goal correct times: 2

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
