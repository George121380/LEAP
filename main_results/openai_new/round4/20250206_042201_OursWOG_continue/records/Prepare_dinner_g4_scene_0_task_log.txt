From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice.', '3. Fry the eggs and mix them with the rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_unclean_rice_and_eggs():
    # Function to check if there are unclean rice and eggs known
    symbol has_items=exists o: item : (is_food_rice(o) or is_food_egg(o)) and dirty(o)
    return has_items

behavior locate_unvisited_rice_and_eggs():
    body:
        foreach o: item:
            if (is_food_rice(o) or is_food_egg(o)) and not visited(o):
                observe(o, "Check if the rice and eggs are present and need cleaning")

behavior __goal__():
    body:
        if has_unclean_rice_and_eggs():
            # If there are known unclean rice and eggs, ensure to locate them
            foreach o: item:
                if (is_food_rice(o) or is_food_egg(o)) and dirty(o):
                    achieve visited(o)
        else:
            # If no unclean rice or eggs are known, locate them
            locate_unvisited_rice_and_eggs()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_unclean_rice_and_eggs():
    # Function to check if there are unclean rice and eggs known
    symbol has_items=exists o: item : (is_food_rice(o) or is_food_egg(o)) and dirty(o)
    return has_items

behavior locate_unvisited_rice_and_eggs():
    body:
        foreach o: item:
            if (is_food_rice(o) or is_food_egg(o)) and not visited(o):
                observe(o, "Check if the rice and eggs are present and need cleaning")

behavior __goal__():
    body:
        if has_unclean_rice_and_eggs():
            # If there are known unclean rice and eggs, ensure to locate them
            foreach o: item:
                if (is_food_rice(o) or is_food_egg(o)) and dirty(o):
                    achieve visited(o)
        else:
            # If no unclean rice or eggs are known, locate them
            locate_unvisited_rice_and_eggs()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Check if the rice and eggs are present and need cleaning)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)obs(food_rice_2036, Check if the rice and eggs are present and need cleaning)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2020, Check if the rice and eggs are present and need cleaning)obs(food_rice_2036, Check if the rice and eggs are present and need cleaning)
##############################
From agent.py
obs(food_egg_2020, Check if the rice and eggs are present and need cleaning)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
obs(food_rice_2036, Check if the rice and eggs are present and need cleaning)
Get this information:  food_rice_2036 is inside fridge_289. food_rice_2036 is inside dining_room_201. food_rice_2036 is close to fridge_289. food_rice_2036 is close to character_65. food_rice_2036 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_cat_2055_around_curtain_407(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==407
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(cat,curtain_instance)
        else:
            exp(cat,curtain_instance)
    eff:
        unknown[cat]=False
        close[cat,curtain_instance]=True
        close[curtain_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        # Ensure rice is placed inside the pot

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be cooked

        bind pot: item where:
            is_pot(pot)
        # Select a pot to cook the rice

        bind stove: item where:
            is_stove(stove)
        # Select a stove to use for cooking

        cook_rice(rice, pot, stove) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        # Ensure rice is placed inside the pot

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be cooked

        bind pot: item where:
            is_pot(pot)
        # Select a pot to cook the rice

        bind stove: item where:
            is_stove(stove)
        # Select a stove to use for cooking

        cook_rice(rice, pot, stove) 

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: cutting_board_2051, drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_towel_2059_around_sink_42(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def has_a_free_hand():
    symbol free_hand_state=exists character:character : has_a_free_hand(char)
    return free_hand_state

behavior fry_egg_and_mix_rice(egg:item, rice:item, fryingpan:item, stove:item):
    body:
        # If the pan is not on the stove, place it correctly
        if not on(fryingpan, stove):
            achieve on(fryingpan, stove)
        # Turn the stove on to begin frying the egg
        achieve is_on(stove)
        # Ensure the egg and rice are in the pan for cooking
        achieve inside(egg, fryingpan)
        achieve inside(rice, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Locate the egg

        bind rice: item where:
            is_food_rice(rice)
        # Bind the rice object

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan object

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Bind the stove object with the known ID

        fry_egg_and_mix_rice(egg, rice, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_a_free_hand():
    symbol free_hand_state=exists character:character : has_a_free_hand(char)
    return free_hand_state

behavior fry_egg_and_mix_rice(egg:item, rice:item, fryingpan:item, stove:item):
    body:
        # If the pan is not on the stove, place it correctly
        if not on(fryingpan, stove):
            achieve on(fryingpan, stove)
        # Turn the stove on to begin frying the egg
        achieve is_on(stove)
        # Ensure the egg and rice are in the pan for cooking
        achieve inside(egg, fryingpan)
        achieve inside(rice, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Locate the egg

        bind rice: item where:
            is_food_rice(rice)
        # Bind the rice object

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan object

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Bind the stove object with the known ID

        fry_egg_and_mix_rice(egg, rice, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'putin_executor(food_rice_2036, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)']
Time info:
Time consume: 136 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 23
goal generate times: 3
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
