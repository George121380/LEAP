From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with water.', '2. Slice the kiwi and add the slices into the cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_knife_2050_around_closetdrawer_380(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_and_fill_cup_with_water(cup:item, location:item):
    body:
        achieve close_char(char, location)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind location: item where:
            is_sink(location) or is_faucet(location)
        # Select a location where water is accessible
        
        locate_and_fill_cup_with_water(cup, location)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_filled(cup:item):
    # Function to check if a cup has water inside
    symbol filled=exists w: item : has_water(cup)
    return filled

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_water_filled(cup):
            achieve close_char(char, cup)
            # If a cup with water is found, move close to it
        
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup,"Check if this cup can be filled with water")
                    # Check all unvisited cups

behavior find_and_fill_cup_with_water():
    body:
        foreach cup: item:
            if is_cup(cup) and not has_water_filled(cup):
                fill_cup_with_water(cup)
                # Fill found cup with water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def has_water_filled(cup: item):
    # Function to check if a cup has water inside
    symbol filled = exists w: item : has_water(cup)
    return filled

behavior fill_cup_with_water(cup: item):
    body:
        achieve has_water(cup)

behavior find_and_fill_cup_with_water():
    body:
        foreach cup: item:
            if is_cup(cup) and not has_water_filled(cup):
                fill_cup_with_water(cup)
                # Fill found cup with water

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_water_filled(cup):
            bind cup: item where:
                is_cup(cup) and has_water_filled(cup)
            achieve close_char(char, cup)
            # If a cup with water is found, move close to it

        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this cup can be filled with water")
                    # Check all unvisited cups

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_cup(cup:item):
    # Function to check if the cup has water
    symbol has_water=exists o: item : has_water(cup)
    return has_water

behavior find_and_fill_cup():
    body:
        if exists cup: item : is_cup(cup) and has_water_in_cup(cup):
            # If a cup with water is found, ensure the character reaches it
            bind cup: item where:
                is_cup(cup) and has_water_in_cup(cup)
            achieve close_char(char, cup)
        else:
            # If not found, explore to find a cup and fill it with water
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Locate a cup to fill with water")

behavior __goal__():
    body:
        find_and_fill_cup()

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: tuple.index(x): x not in tuple
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 64 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 6
goal generate times: 3
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 22 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
