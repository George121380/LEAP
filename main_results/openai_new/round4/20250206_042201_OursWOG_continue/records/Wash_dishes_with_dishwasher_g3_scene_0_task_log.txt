From agent.py
Reset goals: The sub-goals are: 
['1. Load the bowls and plates into the dishwasher and start the wash cycle.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_detergent_2084_around_dishwasher_1001(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(bowl:item, plate:item, dishwasher:item):
    body:
        achieve inside(bowl, dishwasher) # Place the bowl inside the dishwasher
        achieve inside(plate, dishwasher) # Place the plate inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        load_dishwasher(bowl, plate, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior load_dishwasher(bowl:item, plate:item, dishwasher:item):
    body:
        achieve inside(bowl, dishwasher) # Place the bowl inside the dishwasher
        achieve inside(plate, dishwasher) # Place the plate inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        load_dishwasher(bowl, plate, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Fail to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_384)exp(bowl_2071, closetdrawer_384)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(television_248)exp(plate_1000, television_248)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_384)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_384)
Fail to find bowl_2071 around closetdrawer_384. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_384)exp(bowl_2071, closetdrawer_384)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(closetdrawer_384)exp(plate_1000, closetdrawer_384)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_384)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_384)
Fail to find bowl_2071 around closetdrawer_384. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_384)exp(bowl_2071, closetdrawer_384)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(closetdrawer_384)exp(plate_1000, closetdrawer_384)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_384)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(bowl_2071, closetdrawer_384)
Fail to find bowl_2071 around closetdrawer_384. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_384)exp(bowl_2071, closetdrawer_384)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(closetdrawer_384)exp(plate_1000, closetdrawer_384)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_384)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: The target item, bowl_2071, is located inside dining_room_201. You can find bowl_2071 on top of table_226. These objects are close to each other, and the table is a prominent piece of furniture in the dining room, making it easier to identify. Look for the bowl situated on this table.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2071, is located inside dining_room_201. You can find bowl_2071 on top of table_226. These objects are close to each other, and the table is a prominent piece of furniture in the dining room, making it easier to identify. Look for the bowl situated on this table.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to closetdrawer_384.
Action 7: look for bowl_2071 around closetdrawer_384.
Action 8: Walk to closetdrawer_384.
Action 9: look for bowl_2071 around closetdrawer_384.
Action 10: Walk to closetdrawer_384.
Action 11: look for bowl_2071 around closetdrawer_384.
Action 12: Walk to closetdrawer_384.

##############################
From agent.py
exp(bowl_2071, closetdrawer_384)
Fail to find bowl_2071 around closetdrawer_384. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. 
##############################
From agent.py
putin_executor(bowl_2071, dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. bowl_2071 is close dishwasher_1001. bowl_2071 is inside dishwasher_1001. dishwasher_1001 is close bowl_2071. bowl_2071 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(plate_1000, fridge_289)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(plate_1000, fridge_289)
Fail to find plate_1000 around fridge_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_430)exp(plate_1000, photoframe_430)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(photoframe_430)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
exp(plate_1000, photoframe_430)
Fail to find plate_1000 around photoframe_430. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_117)exp(plate_1000, closetdrawer_117)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_117)
Robot find: Robot is close to the dresser_108. 
##############################
From agent.py
exp(plate_1000, closetdrawer_117)
Fail to find plate_1000 around closetdrawer_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_117)exp(plate_1000, closetdrawer_117)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(closetdrawer_117)
Robot find: Robot is close to the dresser_108. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Once inside, locate sink_231. plate_1000 is on sink_231. Look for a plate on top of the sink to find plate_1000.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2071, is located inside dining_room_201. You can find bowl_2071 on top of table_226. These objects are close to each other, and the table is a prominent piece of furniture in the dining room, making it easier to identify. Look for the bowl situated on this table.
Go to dining_room_201. Once inside, locate sink_231. plate_1000 is on sink_231. Look for a plate on top of the sink to find plate_1000.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to closetdrawer_384.
Action 7: look for bowl_2071 around closetdrawer_384.
Action 8: Walk to closetdrawer_384.
Action 9: look for bowl_2071 around closetdrawer_384.
Action 10: Walk to closetdrawer_384.
Action 11: look for bowl_2071 around closetdrawer_384.
Action 12: Walk to closetdrawer_384.
Action 13: look for bowl_2071 around closetdrawer_384.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to bowl_2071.
Action 17: Grab bowl_2071.
Action 18: Walk to dishwasher_1001.
Action 19: Put bowl_2071 into dishwasher_1001.
Action 20: Walk to cupboard_229.
Action 21: Open cupboard_229.
Action 22: look for plate_1000 around cupboard_229.
Action 23: Walk to fridge_289.
Action 24: Switch off fridge_289.
Action 25: Open fridge_289.
Action 26: look for plate_1000 around fridge_289.
Action 27: Walk to photoframe_430.
Action 28: look for plate_1000 around photoframe_430.
Action 29: Walk to closetdrawer_117.
Action 30: look for plate_1000 around closetdrawer_117.
Action 31: Walk to closetdrawer_117.

##############################
From agent.py
exp(plate_1000, closetdrawer_117)
Fail to find plate_1000 around closetdrawer_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the sink_231. Robot is close to the plate_1000. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the sink_231. Robot is close to the plate_1000. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the plate_1000. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(plate_1000, dishwasher_1001)
Robot find: Robot is close to the plate_1000. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. plate_1000 is inside dishwasher_1001. plate_1000 is close dishwasher_1001. dishwasher_1001 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_closetdrawer_117(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(detergent,closetdrawer_instance)
        else:
            exp(detergent,closetdrawer_instance)
    eff:
        unknown[detergent]=False
        close[detergent,closetdrawer_instance]=True
        close[closetdrawer_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_fork_in_sink(sink:item):
    # Function to check if there are forks in a specified sink
    symbol has_fork=exists o: item : is_fork(o) and inside(o, sink)
    return has_fork

behavior wash_fork(fork:item, sink:item):
    body:
        achieve close_char(char, sink)
        # Ensure character is close to the sink for washing
        wash(fork)
        # Wash the fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231
        # Select sink with ID 231 where the fork is located

        foreach fork: item:
            if is_fork(fork) and inside(fork, sink):
                wash_fork(fork, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_fork_in_kitchen_sink(fork:item):
    # Function to check if there is a fork in sink_231 located in the kitchen
    bind sink: item where:
        is_sink(sink) and id[sink]==231
    symbol fork_in_sink=exists f: item : is_fork(f) and inside(f, sink)
    return fork_in_sink

behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink) # Place the fork in the sink for washing
        if not clean(fork):
            wash(fork) # Wash the fork by hand
        achieve clean(fork)

behavior __goal__():
    body:
        if exists fork: item : is_fork(fork) and is_fork_in_kitchen_sink(fork):
            # If we already know about the fork in sink, we proceed to wash it
            bind sink: item where:
                is_sink(sink) and id[sink]==231
            # Select the sink with ID 231

            bind fork: item where:
                is_fork(fork) and inside(fork, sink)
            # Select the fork inside the sink

            wash_fork_by_hand(fork, sink)
        else:
            # If the forks location is unknown, observe sinks to find it
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if the sink contains a fork")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statement bind(CSList(sink: item), and(is_sink(V::sink), (id(V::sink) == C::231))) are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#goal_representation
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink) # Place the fork in the sink for washing
        if not clean(fork):
            wash(fork) # Wash the fork by hand
        achieve clean(fork)

behavior __goal__():
    body:
        if exists fork: item : is_fork(fork) and is_fork_in_kitchen_sink(fork):
            # If we already know about the fork in sink, we proceed to wash it
            bind sink: item where:
                is_sink(sink) and id[sink]==231
            # Select the sink with ID 231

            bind fork: item where:
                is_fork(fork) and inside(fork, sink)
            # Select the fork inside the sink

            wash_fork_by_hand(fork, sink)
        else:
            # If the forks location is unknown, observe sinks to find it
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if the sink contains a fork")


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_fork_in_kitchen_sink not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#goal_representation
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink) # Place the fork in the sink for washing
        if not clean(fork):
            wash(fork) # Wash the fork by hand
        achieve clean(fork)

behavior __goal__():
    body:
        if exists fork: item : is_fork(fork) and inside(fork, sink):
            # If we already know about the fork in sink, we proceed to wash it
            bind sink: item where:
                is_sink(sink) and id[sink]==231
            # Select the sink with ID 231

            bind fork: item where:
                is_fork(fork) and inside(fork, sink)
            # Select the fork inside the sink

            wash_fork_by_hand(fork, sink)
        else:
            # If the forks location is unknown, observe sinks to find it
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if the sink contains a fork")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_forks_in_kitchen():
    # Function to check if there are forks in the kitchen
    symbol has_forks = exists o: item : is_fork(o) and inside(o, dining_room_201)
    return has_forks

behavior wash_fork(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        if has_forks_in_kitchen():
            # If forks are known to be in the dining room, proceed to wash them
            foreach fork: item:
                if is_fork(fork) and inside(fork, dining_room_201):
                    wash_fork(fork)

        else:
            # If forks are not known to be in the dining room, locate and observe to determine their presence
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Check if the fork is in the dining room")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: dining_room_201; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_forks_in_kitchen():
    # Function to check if there are forks in the kitchen
    symbol has_forks=exists o: item : is_fork(o) and inside(o, dining_room)
    return has_forks

behavior wash_fork(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        if has_forks_in_kitchen():
            # If forks are known to be in the dining room, proceed to wash them
            foreach fork: item:
                if is_fork(fork) and inside(fork, dining_room):
                    wash_fork(fork)
        else:
            # If forks are not known to be in the dining room, locate and observe to determine their presence
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Check if the fork is in the dining room")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: dining_room; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2058_around_closetdrawer_384(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#goal_representation
 
def has_forks_in_kitchen(dining_room: item):
    # Function to check if there are forks in the dining room
    symbol has_forks=exists o: item : is_fork(o) and inside(o, dining_room)
    return has_forks

behavior wash_fork(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        if has_forks_in_kitchen(dining_room):
            # If forks are known to be in the dining room, proceed to wash them
            foreach fork: item:
                if is_fork(fork) and inside(fork, dining_room):
                    wash_fork(fork)
        else:
            # If forks are not known to be in the dining room, locate and observe to determine their presence
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Check if the fork is in the dining room")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_forks_in_kitchen(dining_room: item):
    # Function to check if there are forks in the dining room
    symbol has_forks=exists o: item : is_fork(o) and inside(o, dining_room)
    return has_forks

behavior wash_fork(fork:item):
    body:
        wash(fork)
        achieve clean(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        if has_forks_in_kitchen(dining_room):
            # If forks are known to be in the dining room, proceed to wash them
            foreach fork: item:
                if is_fork(fork) and inside(fork, dining_room):
                    wash_fork(fork)
        else:
            # If forks are not known to be in the dining room, locate and observe to determine their presence
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Check if the fork is in the dining room")

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2080)obs(fork_2080, Check if the fork is in the dining room)walk_executor(fork_2081)obs(fork_2081, Check if the fork is in the dining room)
##############################
From agent.py
walk_executor(fork_2080)
Robot find: Robot is close to the fork_2080. Robot is close to the table_226. 
##############################
From agent.py
obs(fork_2080, Check if the fork is in the dining room)
Get this information:  fork_2080 is close to table_226. fork_2080 is close to character_65. fork_2080 is on table_226. fork_2080 is inside dining_room_201.
##############################
From agent.py
walk_executor(fork_2081)
Robot find: Robot is close to the table_226. Robot is close to the fork_2081. 
##############################
From agent.py
obs(fork_2081, Check if the fork is in the dining room)
Get this information:  fork_2081 is inside dining_room_201. fork_2081 is close to table_226. fork_2081 is close to character_65. fork_2081 is on table_226.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The forks have been located in the dining room, but they have not been washed by hand yet. Ensure that the forks, fork_2080 and fork_2081, are washed by hand to complete the sub-task.
##############################
From agent.py
Human Instruction: The forks have been located in the dining room, but they have not been washed by hand yet. Ensure that the forks, fork_2080 and fork_2081, are washed by hand to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to closetdrawer_384.
Action 7: look for bowl_2071 around closetdrawer_384.
Action 8: Walk to closetdrawer_384.
Action 9: look for bowl_2071 around closetdrawer_384.
Action 10: Walk to closetdrawer_384.
Action 11: look for bowl_2071 around closetdrawer_384.
Action 12: Walk to closetdrawer_384.
Action 13: look for bowl_2071 around closetdrawer_384.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to bowl_2071.
Action 17: Grab bowl_2071.
Action 18: Walk to dishwasher_1001.
Action 19: Put bowl_2071 into dishwasher_1001.
Action 20: Walk to cupboard_229.
Action 21: Open cupboard_229.
Action 22: look for plate_1000 around cupboard_229.
Action 23: Walk to fridge_289.
Action 24: Switch off fridge_289.
Action 25: Open fridge_289.
Action 26: look for plate_1000 around fridge_289.
Action 27: Walk to photoframe_430.
Action 28: look for plate_1000 around photoframe_430.
Action 29: Walk to closetdrawer_117.
Action 30: look for plate_1000 around closetdrawer_117.
Action 31: Walk to closetdrawer_117.
Action 32: look for plate_1000 around closetdrawer_117.
Action 33: Walk to sink_231.
Action 34: look for plate_1000 around sink_231.
Action 35: Walk to plate_1000.
Action 36: Grab plate_1000.
Action 37: Walk to dishwasher_1001.
Action 38: Put plate_1000 into dishwasher_1001.
Action 39: Close dishwasher_1001.
Action 40: Switch on dishwasher_1001.
Action 41: Walk to fork_2080.
Action 42: Observe around fork_2080 with the question of Check if the fork is in the dining room.
Action 43: Walk to fork_2081.
Action 44: Observe around fork_2081 with the question of Check if the fork is in the dining room.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080 and inside(fork1, dining_room)
        # Select the fork with ID 2080 in the dining room

        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081 and inside(fork2, dining_room)
        # Select the fork with ID 2081 in the dining room

        wash_forks_by_hand(fork1)
        wash_forks_by_hand(fork2)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind fork_2080: item where:
            is_fork(fork_2080) and inside(fork_2080, dining_room)
        # Select fork_2080

        bind fork_2081: item where:
            is_fork(fork_2081) and inside(fork_2081, dining_room)
        # Select fork_2081

        wash_fork_by_hand(fork_2080)
        wash_fork_by_hand(fork_2081)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks(fork:item):
    body:
        achieve clean(fork)
        # Ensure the fork is clean by washing it

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080]==2080
        # Select fork with ID 2080

        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081]==2081
        # Select fork with ID 2081

        if dirty(fork_2080):
            # Wash fork_2080 if it is dirty
            wash_forks(fork_2080)

        if dirty(fork_2081):
            # Wash fork_2081 if it is dirty
            wash_forks(fork_2081)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the specified fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080
        # Bind fork_2080

        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081
        # Bind fork_2081

        wash_fork(fork1)
        # Wash fork_2080 by hand

        wash_fork(fork2)
        # Wash fork_2081 by hand

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the specified fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080
        # Bind fork_2080

        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081
        # Bind fork_2081

        wash_fork(fork1)
        # Wash fork_2080 by hand

        wash_fork(fork2)
        # Wash fork_2081 by hand

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2080)grab_executor(fork_2080)walk_executor(sink_42)putin_executor(fork_2080, sink_42)wash_executor(fork_2080)walk_executor(fork_2081)grab_executor(fork_2081)walk_executor(sink_42)putin_executor(fork_2081, sink_42)wash_executor(fork_2081)
##############################
From agent.py
walk_executor(fork_2080)
Robot find: Robot is close to the table_226. Robot is close to the fork_2080. 
##############################
From agent.py
grab_executor(fork_2080)
Robot find: Robot is close to the table_226. Robot is close to the fork_2080. Grabbing fork_2080 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the fork_2080. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(fork_2080, sink_42)
Robot find: Robot is close to the fork_2080. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. fork_2080 is close sink_42. sink_42 is close fork_2080. fork_2080 is inside sink_42. fork_2080 released by right hand. 
##############################
From agent.py
wash_executor(fork_2080)
Robot find: Robot is close to the fork_2080. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(fork_2081)
Robot find: Robot is close to the fork_2081. Robot is close to the table_226. 
##############################
From agent.py
grab_executor(fork_2081)
Robot find: Robot is close to the fork_2081. Robot is close to the table_226. Grabbing fork_2081 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the fork_2081. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(fork_2081, sink_42)
Robot find: Robot is close to the fork_2081. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. fork_2081 is inside sink_42. sink_42 is close fork_2081. fork_2081 is close sink_42. fork_2081 released by right hand. 
##############################
From agent.py
wash_executor(fork_2081)
Robot find: Robot is close to the fork_2081. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(closetdrawer_384)', 'walk_executor(closetdrawer_384)', 'walk_executor(closetdrawer_384)', 'walk_executor(closetdrawer_384)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2071, dishwasher_1001)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(photoframe_430)', 'walk_executor(closetdrawer_117)', 'walk_executor(closetdrawer_117)', 'walk_executor(sink_231)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(dishwasher_1001)', 'putin_executor(plate_1000, dishwasher_1001)', 'close_executor(dishwasher_1001)', 'switchon_executor(dishwasher_1001)', 'walk_executor(fork_2080)', 'walk_executor(fork_2081)', 'walk_executor(fork_2080)', 'grab_executor(fork_2080)', 'walk_executor(sink_42)', 'putin_executor(fork_2080, sink_42)', 'wash_executor(fork_2080)', 'walk_executor(fork_2081)', 'grab_executor(fork_2081)', 'walk_executor(sink_42)', 'putin_executor(fork_2081, sink_42)', 'wash_executor(fork_2081)']
Time info:
Time consume: 383 seconds
Exp_helper query times: 2
Guidance query times: 0
library scale: 26
goal generate times: 8
goal correct times: 2

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
