[
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": " \ndef locate_cup():\n    # Function to locate a cup\n    symbol has_cup=exists c: item : is_cup(c)\n    return has_cup\n\ndef locate_milk_container():\n    # Function to locate milk container\n    symbol has_milk=exists m: item : is_milk(m)\n    return has_milk\n\nbehavior fill_milk_into_cup(cup:item, milk_container:item):\n    body:\n        achieve clean(cup) # Ensure the cup is clean before using\n        achieve inside(milk_container, cup) # Fill the cup with milk\n\nbehavior __goal__():\n    body:\n        # Check if theres already a known cup and milk container\n        if locate_cup() and locate_milk_container():\n            bind cup: item where:\n                is_cup(cup)\n            bind milk_container: item where:\n                is_milk(milk_container)\n            # Ensure milk is poured into the cup\n            fill_milk_into_cup(cup, milk_container)\n        else:\n            # If not, explore to find them\n            foreach o: item:\n                if is_cup(o) and not visited(o):\n                    observe(o, \"Locate a cup to use\")\n                if is_milk(o) and not visited(o):\n                    observe(o, \"Locate a milk container\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \ndef has_milk_in_cup(cup:item):\n    # Function to check if the cup has milk inside\n    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)\n    return has_milk\n\nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Ensure the cup is placed inside the microwave\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve closed(microwave) # Close the microwave door\n        achieve is_on(microwave) # Turn on the microwave to start heating\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_milk_in_cup(cup)\n        # Select cup which contains milk\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select microwave\n        \n        place_cup_in_microwave(cup, microwave)\n        start_microwave(microwave)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Locate all the bowls and the plates.",
        "cdl": " \ndef has_bowls_or_plates():\n    # Function to check if there are bowls or plates known\n    symbol has_items=exists o: item : (is_bowl(o) or is_plate(o))\n    return has_items\n\nbehavior locate_unvisited_bowls_and_plates():\n    body:\n        foreach o: item:\n            if (is_bowl(o) or is_plate(o)) and not visited(o):\n                observe(o, \"Locate bowls and plates\")\n\nbehavior __goal__():\n    body:\n        if has_bowls_or_plates():\n            # If there are known bowls or plates, ensure to locate them\n            foreach o: item:\n                if is_bowl(o) or is_plate(o):\n                    achieve visited(o)\n        else:\n            # If no bowls or plates are known, locate them\n            locate_unvisited_bowls_and_plates()\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Place the bowls and plates in the dishwasher and start it.",
        "cdl": " \nbehavior place_bowls_and_plates_in_dishwasher(bowl1:item, bowl2:item, plate:item, dishwasher:item):\n    body:\n        achieve inside(bowl1, dishwasher) # Place bowl_2071 in dishwasher\n        achieve inside(bowl2, dishwasher) # Place bowl_2072 in dishwasher\n        achieve inside(plate, dishwasher) # Place plate_1000 in dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind bowl1: item where:\n            is_bowl(bowl1) and id[bowl1]==2071\n        # Select bowl with ID 2071\n\n        bind bowl2: item where:\n            is_bowl(bowl2) and id[bowl2]==2072\n        # Select bowl with ID 2072\n\n        bind plate: item where:\n            is_plate(plate) and id[plate]==1000\n        # Select plate with ID 1000\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        # Select dishwasher with ID 1001\n\n        place_bowls_and_plates_in_dishwasher(bowl1, bowl2, plate, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        # Select the light inside the bathroom\n\n        achieve is_on(light)\n        # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces, then put it back in the fridge.",
        "cdl": "\nbehavior cut_chicken(chicken:item):\n    body:\n        achieve cut(chicken)\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve inside(chicken, fridge)\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        cut_chicken(chicken)\n        store_in_fridge(chicken, fridge)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink.",
        "cdl": " \nbehavior clean_bathroom_sink(bathroom: item):\n    body:\n        bind sink: item where:\n            is_sink(sink) and inside(sink, bathroom)\n        # Select the sink inside the bathroom\n\n        if dirty(sink):\n            # If the sink is dirty, clean it\n            scrub(sink)\n            rinse(sink)\n        achieve clean(sink)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        clean_bathroom_sink(bathroom)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the chicken and onion.",
        "cdl": " \ndef has_chicken_and_onion():\n    # Function to check if there is a chicken and an onion known\n    symbol has_items=exists o: item : (is_food_chicken(o) or is_food_onion(o))\n    return has_items\n\nbehavior locate_unvisited_chicken_and_onion():\n    body:\n        foreach o: item:\n            if (is_food_chicken(o) or is_food_onion(o)) and not visited(o):\n                observe(o, \"Locate chicken and onion\")\n\nbehavior __goal__():\n    body:\n        if has_chicken_and_onion():\n            # If there is a known chicken or onion, ensure to locate them\n            foreach o: item:\n                if is_food_chicken(o) or is_food_onion(o):\n                    achieve visited(o)\n        else:\n            # If no chicken or onion are known, locate them\n            locate_unvisited_chicken_and_onion()\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Prepare the onion as needed.",
        "cdl": "behavior clean_and_cut_onion(onion:item, faucet:item, sink:item):\n    body:\n        achieve_once inside(onion, sink)\n        if not clean(onion):\n            if is_faucet(faucet) and close(faucet, sink):\n                achieve_once is_on(faucet)\n                wash(onion)\n                achieve_once is_off(faucet)\n            else:\n                wash(onion)\n        achieve cut(onion)\n\nbehavior __goal__():\n    body:\n        bind onion: item where:\n            is_food_onion(onion)\n        bind sink: item where:\n            is_sink(sink)\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        clean_and_cut_onion(onion, faucet, sink)"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Put the chicken and onion together into the oven to roast.",
        "cdl": " \nbehavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):\n    body:\n        achieve inside(chicken, oven) # Place the chicken inside the oven\n        achieve inside(onion, oven) # Place the onion inside the oven\n\nbehavior start_roasting(oven:item):\n    body:\n        achieve closed(oven) # Ensure the oven door is closed\n        achieve is_on(oven) # Turn on the oven to start roasting\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be roasted\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion to be roasted\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select the oven for roasting\n\n        roast_chicken_with_onion(chicken, onion, oven)\n        start_roasting(oven)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Prepare a sink of soapy water in the bathroom.",
        "cdl": "behavior turn_on_faucet(faucet:item):\n    body:\n        achieve_once is_on(faucet)\n        # Ensure the faucet is turned on to fill the sink with water\n\nbehavior add_soap_to_water(soap:item, sink:item):\n    body:\n        achieve inside(soap, sink)\n        # Add soap to the water in the sink\n\nbehavior fill_sink_with_water(sink:item, faucet:item):\n    body:\n        achieve has_water(sink)\n        turn_on_faucet(faucet)\n        # Fill the sink with water using the faucet\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind sink: item where:\n            is_sink(sink) and inside(sink, bathroom)\n        # Select the sink inside the bathroom\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        # Select the faucet close to the sink\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select a soap\n\n        fill_sink_with_water(sink, faucet)\n        add_soap_to_water(soap, sink)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book and place it on the table in the home office.",
        "cdl": " \ndef has_book_on_table(table:item):\n    # Function to check if there is a book on a specified table\n    symbol has_book=exists o: item : is_book(o) and on(o, table) \n    return has_book\n\nbehavior place_book_on_table(book: item, table: item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table inside the home office\n\n        if exists book: item : is_book(book):\n            bind book: item where:\n                is_book(book)\n            place_book_on_table(book, table)\n\n        else:\n            # If no book is known, locate it and then place on the table\n            foreach obj: item:\n                if is_book(obj) and not visited(obj):\n                    observe(obj, \"Locate the book to place on the table\")\n                    if on(obj, table):\n                        achieve visited(obj)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        achieve is_on(light)\n        # Turn on the light in the home office\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Locate all the windows in the house.",
        "cdl": " \ndef is_window_in_house(window:item):\n    # Function to check if a window is in the house\n    symbol is_in_house=exists room: item : inside(window, room)\n    return is_in_house\n\nbehavior locate_unvisited_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Locate all windows in the house\")\n\nbehavior __goal__():\n    body:\n        if exists window: item : is_window(window) and is_window_in_house(window):\n            # If there are known windows in the house, ensure to locate them\n            foreach window: item:\n                if is_window(window) and is_window_in_house(window):\n                    achieve visited(window)\n        else:\n            # If no windows are known, locate them\n            locate_unvisited_windows()\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window thoroughly.",
        "cdl": " \nbehavior clean_window(window: item, towel: item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n        achieve clean(window)\n\nbehavior __goal__():\n    body:\n        bind towel: item where:\n            is_towel(towel)\n        # Select a towel\n\n        foreach window: item:\n            if is_window(window) and open(window):\n                # Clean each open window\n                clean_window(window, towel)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket containing clothes.",
        "cdl": " \ndef is_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket) and is_clothes_in_basket(basket):\n            # If we have already found the basket with clothes, we can directly approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and is_clothes_in_basket(basket)\n            achieve close_char(char, basket)\n\n        else:\n            # Check all baskets in the scene that have not been visited\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check is there any clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_washing_machine():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Bind the washing machine to manipulate it\n\n        bind soap: item where:\n            is_soap(soap)\n        # Bind the soap to use in washing machine\n\n        achieve inside(soap, washing_machine)\n        # Ensure the soap is added to the washing machine\n\nbehavior __goal__():\n    body:\n        add_soap_to_washing_machine()\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Wash the clothes using the washing machine.",
        "cdl": "behavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine is closed before starting\n        achieve is_on(washing_machine)\n        # Start the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        \n        bind basket_for_clothes: item where:\n            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006\n        # Select the basket for clothes with a specific ID\n        \n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket_for_clothes):\n                achieve inside(clothes, washing_machine)\n                # Transfer each piece of clothing from the basket to the washing machine\n        \n        start_washing_machine(washing_machine)\n        # Initiate washing of clothes in the washing machine"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": "\nbehavior turn_on_light_in_room(light: item, room: item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom\n\n        bind bedroom_light: item where:\n            is_light(bedroom_light) and inside(bedroom_light, bedroom)\n        # Select the light inside the bedroom\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind bathroom_light: item where:\n            is_light(bathroom_light) and inside(bathroom_light, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_light_in_room(bedroom_light, bedroom)\n        turn_on_light_in_room(bathroom_light, bathroom)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room to place the milk and egg on it.",
        "cdl": " \nbehavior place_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve on(milk, table)\n        # Place milk on the table\n        achieve on(egg, table)\n        # Place egg on the table\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n        # Select a table inside the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        place_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Remove all items from the fridge and throw them in the trashcan.",
        "cdl": " \nbehavior remove_all_from_fridge_and_trash(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge]==289\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n\n        remove_all_from_fridge_and_trash(fridge, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior put_items_back_in_fridge(milk: item, egg: item, fridge: item):\n    body:\n        achieve inside(milk, fridge) # Place the milk back inside the fridge\n        achieve inside(egg, fridge) # Place the egg back inside the fridge\n\nbehavior close_fridge(fridge: item):\n    body:\n        achieve closed(fridge) # Ensure the fridge is closed after placing the items back inside\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge]==289\n        # Select the fridge with ID 289\n\n        put_items_back_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        foreach window: item:\n            if is_window(window) and inside(window, bathroom):\n                open_bathroom_window(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify each room in the house.",
        "cdl": " \nbehavior identify_each_room(room:item):\n    body:\n        achieve visited(room)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_kitchen(room) or is_dining_room(room):\n                identify_each_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check each room to ensure there is at least one light on.",
        "cdl": " \ndef has_light_on_in_room(room:item):\n    # Function to check if there is a light on in a specified room\n    symbol light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)\n    return light_on\n\nbehavior check_lights_in_room(room:item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room) and not visited(light):\n                observe(light, \"Verify if the light is on in the room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):\n                if not has_light_on_in_room(room):\n                    check_lights_in_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "3. Turn on the light if a room has no lights on.",
        "cdl": " \ndef is_light_on_in_room(room:item):\n    # Function to check if there is at least one light on in a specified room\n    symbol light_on=exists light: item : is_light(light) and inside(light, room) and is_on(light)\n    return light_on\n\nbehavior turn_on_light_if_off(light:item):\n    body:\n        achieve is_on(light)\n        # Ensure the light is turned on\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate through each room\n            if not is_light_on_in_room(room):\n                # Check if there is no light on in the room\n                foreach light: item:\n                    if is_light(light) and inside(light, room) and not is_on(light):\n                        turn_on_light_if_off(light)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger.",
        "cdl": " \ndef has_pizza_and_hamburger():\n    # Function to check if there is a pizza and a hamburger known\n    symbol has_items=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))\n    return has_items\n\nbehavior locate_unvisited_pizza_and_hamburger():\n    body:\n        foreach o: item:\n            if (is_food_pizza(o) or is_food_hamburger(o)) and not visited(o):\n                observe(o, \"Locate pizza and hamburger\")\n\nbehavior __goal__():\n    body:\n        if has_pizza_and_hamburger():\n            # If there is a known pizza or hamburger, ensure to locate them\n            foreach o: item:\n                if is_food_pizza(o) or is_food_hamburger(o):\n                    achieve visited(o)\n        else:\n            # If no pizza or hamburger are known, locate them\n            locate_unvisited_pizza_and_hamburger()\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.",
        "cdl": " \nbehavior put_pizza_and_hamburger_on_plate(pizza:item, hamburger:item, plate:item):\n    body:\n        achieve on(pizza, plate)\n        # Place the pizza on the plate\n        achieve on(hamburger, plate)\n        # Place the hamburger on the plate\n\nbehavior __goal__():\n    body:\n        bind pizza: item where:\n            is_food_pizza(pizza) and id[pizza]==2034\n        # Select the pizza\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger) and id[hamburger]==2024\n        # Select the hamburger\n\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n\n        put_pizza_and_hamburger_on_plate(pizza, hamburger, plate)\n        # Execute the task of placing both food items on the plate\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat them in the microwave.",
        "cdl": " \nbehavior heat_in_microwave(plate:item, microwave:item):\n    body:\n        achieve inside(plate, microwave)\n        # Place the plate inside the microwave\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve closed(microwave) # Ensure the microwave door is closed\n        achieve is_on(microwave) # Turn on the microwave to start heating\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate]==1000\n        # Select plate with ID 1000\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n        \n        heat_in_microwave(plate, microwave)\n        start_microwave(microwave) # Start the microwave to heat the food\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Place the plate on a table in the dining room.",
        "cdl": " \nbehavior place_plate_in_dining_room(plate:item, table:item):\n    body:\n        achieve on(plate, table)\n        # Place the plate on the table in the dining room\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate]==1000\n        # Select the plate with ID 1000\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n        # Select a table inside the dining room\n\n        place_plate_in_dining_room(plate, table)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a lemon and some sugar.",
        "cdl": " \ndef has_food_on_kitchen_counter(kitchen_counter: item):\n    # Function to check if there is food on the kitchen counter\n    symbol has_food=exists o: item : (is_food_lemon(o) or is_food_sugar(o)) and on(o, kitchen_counter)\n    return has_food\n\ndef is_lemon_and_sugar_in_kitchen_counter():\n    # Check if lemon and sugar are on the kitchen counter\n    symbol is_available=exists kc: item : is_kitchen_counter(kc) and has_food_on_kitchen_counter(kc)\n    return is_available\n\nbehavior __goal__():\n    body:\n        bind kitchen_counter: item where:\n            is_kitchen_counter(kitchen_counter)\n        \n        if is_lemon_and_sugar_in_kitchen_counter():\n            # If lemon and sugar are on the counter, approach it\n            achieve close_char(char, kitchen_counter)\n        else:\n            # Observe to locate lemon and sugar if not found on the counter\n            foreach o: item:\n                if (is_food_lemon(o) or is_food_sugar(o)) and not visited(o):\n                    observe(o, \"Locate both lemon and sugar\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Squeeze the lemon into a cup and add water.",
        "cdl": " \ndef has_lemon_inhand():\n    # Function to check if a lemon is in hand\n    symbol inhand_lemon=exists lemon: item : is_food_lemon(lemon) and inhand(lemon)\n    return inhand_lemon\n\ndef has_cut_lemon():\n    # Function to check if the lemon is cut\n    symbol is_cut_lemon=exists lemon: item : is_food_lemon(lemon) and cut(lemon)\n    return is_cut_lemon\n\nbehavior cut_lemon(lemon:item):\n    body:\n        achieve cut(lemon)\n        # Cut the lemon\n\nbehavior squeeze_lemon(lemon:item, cup:item):\n    body:\n        achieve inside(lemon, cup)\n        # Squeeze the lemon into the cup\n\nbehavior add_water_to_cup(cup:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup has water\n\nbehavior __goal__():\n    body:\n        if has_lemon_inhand() and has_cut_lemon():\n            # If theres a cut lemon in hand, proceed to squeeze it\n            bind lemon: item where:\n                is_food_lemon(lemon) and inhand(lemon)\n            # Select the cut lemon\n            bind cup: item where:\n                is_cup(cup)\n            # Select a cup\n            squeeze_lemon(lemon, cup)\n            add_water_to_cup(cup)\n\n        else:\n            # If not, find a lemon and cut it\n            bind lemon: item where:\n                is_food_lemon(lemon)\n            # Select the lemon\n            if not has_cut_lemon():\n                cut_lemon(lemon)\n            bind cup: item where:\n                is_cup(cup)\n            # Select a cup\n            squeeze_lemon(lemon, cup)\n            add_water_to_cup(cup)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw the used toilet paper into the toilet.",
        "cdl": "\nbehavior wipe_toilet_with_paper(toilet: item, paper: item):\n    body:\n        achieve_once inhand(paper) # Temporarily hold the toilet paper\n        wipe(toilet) # Wipe the toilet with the paper\n\nbehavior dispose_toilet_paper(paper: item, toilet: item):\n    body:\n        achieve inside(paper, toilet) # Put the used toilet paper inside the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select the toilet\n\n        bind paper: item where:\n            is_toilet_paper(paper)\n        # Select the toilet paper\n\n        wipe_toilet_with_paper(toilet, paper)\n        dispose_toilet_paper(paper, toilet)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert a CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_and_play(cd: item, cd_player: item):\n    body:\n        achieve inside(cd, cd_player)\n        # Insert the CD into the CD player\n        achieve closed(cd_player)\n        # Ensure the CD player is closed after inserting the CD\n        achieve is_on(cd_player)\n        # Turn on the CD player to play the music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select the CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select the CD player\n\n        insert_cd_and_play(cd, cd_player)\n        # Insert the CD into the CD player and play music\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": " \ndef has_named_cup(cup:item):\n    # Function to check if the cup has an id of 2063 or 2064\n    symbol is_named_cup=(id[cup] == 2063 or id[cup] == 2064)\n    return is_named_cup\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve inside(cup, sink)\n        # Ensure the cup is positioned to be filled under the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        # Turn on faucet to fill the cup\n\n        observe(cup, \"Ensure the cup is filled with water\")\n        # Ensure the cup is being filled with water\n\n        achieve_once is_off(faucet)\n        # Turn off faucet after filling\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 231\n        # Select the sink with ID 231\n\n        bind cup: item where:\n            is_cup(cup) and has_named_cup(cup)\n        # Select a cup from those identified\n\n        fill_cup_with_water(cup, sink)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, knife:item, cutting_board:item):\n    body:\n        achieve cut(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select the knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select the cutting board\n\n        slice_chicken(chicken, knife, cutting_board)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Give the sliced chicken to the cat.",
        "cdl": " \nbehavior give_chicken_to_cat(chicken:item, cat:item):\n    body:\n        achieve close(chicken, cat)\n        # Ensure the sliced chicken is close to the cat\n        achieve on(chicken, cat)\n        # Place the sliced chicken for the cat\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) and cut(chicken)\n        # Select the sliced chicken\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        give_chicken_to_cat(chicken, cat)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the table in the dining room.",
        "cdl": " \ndef has_table_in_dining_room(dining_room: item):\n    # Function to check if there is a table in the dining room\n    symbol table_present=exists table: item : is_table(table) and inside(table, dining_room)\n    return table_present\n\nbehavior observe_tables_in_dining_room():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                observe(table, \"Determine if this table is in the dining room\")\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        if has_table_in_dining_room(dining_room):\n            # If there is a known table in the dining room\n            bind table: item where:\n                is_table(table) and inside(table, dining_room)\n            achieve visited(table)\n        else:\n            # If no table is known, explore the scene to find one\n            observe_tables_in_dining_room()\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the identified table.",
        "cdl": " \nbehavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):\n    body:\n        achieve on(milk, table)\n        # Place milk on the table\n        achieve on(turkey, table)\n        # Place turkey on the table\n        achieve on(egg, table)\n        # Place egg on the table\n        achieve on(fish, table)\n        # Place fish on the table\n        achieve on(chicken, table)\n        # Place chicken on the table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table] == 226\n        # Select the identified table with ID 226\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge with items in it.",
        "cdl": " \ndef identify_fridge_with_items(fridge: item):\n    # Function to check if there is any item inside the fridge\n    symbol has_items=exists o: item : inside(o, fridge)\n    return has_items\n\nbehavior __goal__():\n    body:\n        if exists fridge: item : is_fridge(fridge) and not visited(fridge) and identify_fridge_with_items(fridge):\n            # Check if there is a fridge with items that hasnt been visited and has items\n            bind fridge: item where:\n                is_fridge(fridge) and identify_fridge_with_items(fridge)\n            # Approach the fridge with items\n            achieve visited(fridge)\n        else:\n            # If no fridge with items is found, observe all unvisited fridges\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge, \"Check if there are any items inside the fridge\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items from the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_from_fridge_to_trash(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge]==289\n        # Select the fridge with ID 289\n        \n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n        \n        throw_items_from_fridge_to_trash(fridge, trashcan)\n        # Remove all items from the fridge and throw them into the trashcan\n"
    }
]