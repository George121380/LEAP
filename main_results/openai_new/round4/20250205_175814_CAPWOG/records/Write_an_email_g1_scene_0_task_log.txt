From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_keyboard_415_around_desk_357(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(comp: item):
    # Function to check if a computer is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(comp, room)
    return in_home_office

behavior turn_on_computer(comp: item):
    body:
        if has_switch(comp):
            switch_on(comp)
        # Turn on the computer if it has a switch

behavior __goal__():
    body:
        if exists comp: item : is_computer(comp) and is_in_home_office(comp):
            # Check if there is a computer in the home office
            bind comp: item where:
                is_computer(comp) and is_in_home_office(comp)
            # Select the computer in the home office
            turn_on_computer(comp)
            # Turn on the computer if its in the home office

        else:
            # If no such computer is found, manually search every unvisited, categorized computer
            foreach comp: item:
                if is_computer(comp) and not visited(comp):
                    observe(comp,"Check if the computer is in the home office")
                    # Observe whether each unvisited computer is in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_home_office(comp: item):
    # Function to check if a computer is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(comp, room)
    return in_home_office

behavior turn_on_computer(comp: item):
    body:
        if has_switch(comp):
            switch_on(comp)
        # Turn on the computer if it has a switch

behavior __goal__():
    body:
        if exists comp: item : is_computer(comp) and is_in_home_office(comp):
            # Check if there is a computer in the home office
            bind comp: item where:
                is_computer(comp) and is_in_home_office(comp)
            # Select the computer in the home office
            turn_on_computer(comp)
            # Turn on the computer if its in the home office

        else:
            # If no such computer is found, manually search every unvisited, categorized computer
            foreach comp: item:
                if is_computer(comp) and not visited(comp):
                    observe(comp,"Check if the computer is in the home office")
                    # Observe whether each unvisited computer is in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Robot find: chair_356, keyboard_415, mouse_413, Robot is close to the computer_417. 
##############################
From agent.py
switchon_executor(computer_417)
Robot find: Robot is close to the computer_417. computer_417 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(computer_417)', 'switchon_executor(computer_417)']
Time info:
Time consume: 23 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
