From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot appropriate for boiling vegetables.', '2. Fill the pot with vegetables and water.', '3. Place the pot on the stove and boil the vegetables.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
  
def is_appropriate_for_boiling(pot:item):
    # Check if the pot is suitable for boiling vegetables
    symbol suitable=grabbable(pot) and containers(pot)
    return suitable

behavior examine_pot(pot:item):
    body:
        observe(pot, "Is this pot appropriate for boiling vegetables")

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and is_appropriate_for_boiling(pot):
            # If we have already found an appropriate pot, approach it directly
            bind pot: item where:
                is_pot(pot) and is_appropriate_for_boiling(pot)
            walk_to(pot)

        else:
            # Check all pots in the scene that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    examine_pot(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
  
def is_appropriate_for_boiling(pot:item):
    # Check if the pot is suitable for boiling vegetables
    symbol suitable=grabbable(pot) and containers(pot)
    return suitable

behavior examine_pot(pot:item):
    body:
        observe(pot, "Is this pot appropriate for boiling vegetables")

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and is_appropriate_for_boiling(pot):
            # If we have already found an appropriate pot, approach it directly
            bind pot: item where:
                is_pot(pot) and is_appropriate_for_boiling(pot)
            walk_to(pot)

        else:
            # Check all pots in the scene that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    examine_pot(pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(v: item):
    # Check if an item is a vegetable
    symbol is_vegetable = exists o: item : is_food_vegetable(o) and o == v
    return is_vegetable

behavior add_vegetable_to_pot(v: item, pot: item):
    body:
        put_inside(v, pot)
        # Add the vegetable to the pot

behavior fill_pot_with_water(pot: item):
    body:
        get_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has already been found and visited
        foreach v: item:
            if is_vegetable(v):
                add_vegetable_to_pot(v, pot)
        fill_pot_with_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_and_water(pot: item):
    # Function to check if there are vegetables and water inside the pot
    symbol has_vegetables_and_water=exists veg: item : is_food_vegetable(veg) and inside(veg, pot)
    return has_vegetables_and_water

behavior fill_pot_with_vegetables_and_water(pot: item):
    body:
        if has_a_free_hand(char):
            bind veg: item where:
                is_food_vegetable(veg) and not inside(veg, pot)
            grab(veg)
            put_inside(veg, pot)
            empty_a_hand()
        get_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_vegetables_and_water(pot)
        fill_pot_with_vegetables_and_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_vegetable_inhand():
    # Check if there is a food vegetable in hand
    symbol has_vegetable = exists v: item : is_food_vegetable(v) and inhand(v)
    return has_vegetable

def is_pot_close(pot: item):
    # Check if the character is close to the pot
    symbol pot_is_close = close_char(char, pot)
    return pot_is_close

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # If not already close to the pot, walk to pot
        if not is_pot_close(pot):
            walk_to(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and not inhand(vegetable)
        grab(vegetable)
        # Fill the pot with vegetables
        put_inside(vegetable, pot)
        if not is_food_vegetable_inhand():
            bind sink: item where:
                is_sink(sink)
            walk_to(sink)
            get_water(pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_vegetable_inhand():
    # Check if there is a food vegetable in hand
    symbol has_vegetable = exists v: item : is_food_vegetable(v) and inhand(v)
    return has_vegetable

def is_pot_close(pot: item):
    # Check if the character is close to the pot
    symbol pot_is_close = close_char(char, pot)
    return pot_is_close

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # If not already close to the pot, walk to pot
        if not is_pot_close(pot):
            walk_to(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and not inhand(vegetable)
        grab(vegetable)
        # Fill the pot with vegetables
        put_inside(vegetable, pot)
        if not is_food_vegetable_inhand():
            bind sink: item where:
                is_sink(sink)
            walk_to(sink)
            get_water(pot)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(sink_42)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(sink_42)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_146(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling_stove_available(stove:item):
    symbol boiling_stove=exists pot:item : is_pot(pot) and on(pot, stove) and has_water(pot) and inside(food_vegetable_2041, pot)
    return boiling_stove

behavior boil_vegetables(stove:item):
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and inside(food_vegetable_2041, pot)
        put_on(pot, stove)
        switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        if not is_boiling_stove_available(stove):
            bind pot: item where:
                is_pot(pot) and has_water(pot) and inside(food_vegetable_2041, pot)
            grab(pot)
            boil_vegetables(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_146(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water_and_vegetables(pot:item):
    # Function to check if the pot has both water and vegetables
    symbol has_water_and_vegetables=has_water(pot) and exists v: item : is_food_vegetable(v) and inside(v, pot)
    return has_water_and_vegetables

behavior place_pot_on_stove(pot:item, stove:item):
    # Define behavior to place the pot on the stove and boil contents
    body:
        put_on(pot, stove)
        # Place the pot on the stove
        switch_on(stove)
        # Turn on the stove to boil the vegetables
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and pot_has_water_and_vegetables(pot)
        # Bind a pot that is filled with water and vegetables
        bind stove: item where:
            is_stove(stove)
        # Bind the stove
        place_pot_on_stove(pot, stove)
        # Invoke the behavior to place the pot on the stove and boil the vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_146(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation

def is_water_in_pot(pot: item):
    # Check if the pot has water
    return has_water(pot)

behavior place_pot_on_stove_and_boil(pot: item, stove: item):
    body:
        assert is_pot(pot) and grabbable(pot) # Ensure its a grabbable pot
        assert is_stove(stove) # Ensure selected item is a stove
        put_on(pot, stove) # Place the pot on the stove
        switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_water_in_pot(pot)
        # Select a pot with water in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove_and_boil(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_water_in_pot(pot: item):
    # Check if the pot has water
    return has_water(pot)

behavior place_pot_on_stove_and_boil(pot: item, stove: item):
    body:
        assert is_pot(pot) and grabbable(pot) # Ensure its a grabbable pot
        assert is_stove(stove) # Ensure selected item is a stove
        put_on(pot, stove) # Place the pot on the stove
        switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_water_in_pot(pot)
        # Select a pot with water in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove_and_boil(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(sink_42)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 132 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 9 steps
Keystate: k2 - Requires: 5 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
