From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal in the kitchen.', '2. Pour milk and cereal into a cup.', '3. Heat the cup until the milk is hot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
behavior find_milk_and_cereal(milk:item, cereal:item, kitchen:item):
    body:
        observe(kitchen, "Where is the milk")
        # Check for milk location
        observe(kitchen, "Where is the cereal")
        # Check for cereal location

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select a kitchen counter

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        find_milk_and_cereal(milk, cereal, kitchen)
        # Find the milk and cereal in the kitchen
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_milk_and_cereal(milk:item, cereal:item, kitchen:item):
    body:
        observe(kitchen, "Where is the milk")
        # Check for milk location
        observe(kitchen, "Where is the cereal")
        # Check for cereal location

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select a kitchen counter

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        find_milk_and_cereal(milk, cereal, kitchen)
        # Find the milk and cereal in the kitchen
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Where is the milk)obs(kitchen_counter_230, Where is the cereal)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(kitchen_counter_230, Where is the milk)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py
obs(kitchen_counter_230, Where is the cereal)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find both the milk and the cereal in the kitchen. The observations did not provide information about the presence or location of milk or cereal. Consider looking around different areas or containers where milk and cereal might be stored, like the fridge or pantry.
##############################
From agent.py
Human Instruction: You need to find both the milk and the cereal in the kitchen. The observations did not provide information about the presence or location of milk or cereal. Consider looking around different areas or containers where milk and cereal might be stored, like the fridge or pantry.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Where is the milk.
Action 3: Observe around kitchen_counter_230 with the question of Where is the cereal.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def possible_storing_location(item:item):
    # Function to determine potential locations where an item might be stored
    symbol in_pantry=exists container: item : is_cupboard(container) and inside(item, container)
    symbol in_fridge=exists fridge: item : is_fridge(fridge) and inside(item, fridge)
    return in_pantry or in_fridge

def has_milk_or_cereal(item:item):
    # Function to check if an item is milk or cereal
    symbol has_milk=exists milk: item : is_milk(milk) and (inside(milk, item) or on(milk, item))
    symbol has_cereal=exists cereal: item : is_food_cereal(cereal) and (inside(cereal, item) or on(cereal, item))
    return has_milk or has_cereal

behavior __goal__():
    body:
        if exists location: item : (possible_storing_location(location) or surfaces(location)) and has_milk_or_cereal(location):
            # Check known locations for milk or cereal
            foreach location: item:
                if possible_storing_location(location) or surfaces(location):
                    observe(location, "Check for milk or cereal presence")

        else:
            # If no information is known, inspect possible storage areas
            foreach location: item: 
                if not visited(location) and (possible_storing_location(location) or surfaces(location)):
                    observe(location, "Check for milk or cereal presence")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk():
    body:
        if exists milk: item where :
            is_milk(milk) and inside_char(char, milk) or visited(milk):
            bind milk: item where:
                is_milk(milk)
            walk_to(milk)
        else:
            foreach location: item:
                if is_fridge(location) or is_cupboard(location) or is_kitchen_counter(location):
                    if not visited(location):
                        observe(location,"Check for milk")

behavior find_cereal():
    body:
        if exists cereal: item where :
            is_food_cereal(cereal) and inside_char(char, cereal) or visited(cereal):
            bind cereal: item where:
                is_food_cereal(cereal)
            walk_to(cereal)
        else:
            foreach location: item:
                if is_pantry(location) or is_cupboard(location) or is_kitchen_counter(location):
                    if not visited(location):
                        observe(location,"Check for cereal")

behavior __goal__():
    body:
        find_milk()
        find_cereal()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def locate_milk(kitchen_counter: item):
    # Checks if there is milk on or near the kitchen counter
    symbol milk_present = exists milk: item : is_milk(milk) and (on(milk, kitchen_counter) or close(milk, kitchen_counter))
    return milk_present

def locate_cereal(kitchen_counter: item):
    # Checks if there is cereal on or near the kitchen counter
    symbol cereal_present = exists cereal: item : is_food_cereal(cereal) and (on(cereal, kitchen_counter) or close(cereal, kitchen_counter))
    return cereal_present

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        if not (locate_milk(kitchen_counter) and locate_cereal(kitchen_counter)):
            observe(kitchen_counter, "Where is the milk")
            observe(kitchen_counter, "Where is the cereal")


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def locate_milk(kitchen_counter: item):
    # Checks if there is milk on or near the kitchen counter
    symbol milk_present = exists milk: item : is_milk(milk) and (on(milk, kitchen_counter) or close(milk, kitchen_counter))
    return milk_present

def locate_cereal(kitchen_counter: item):
    # Checks if there is cereal on or near the kitchen counter
    symbol cereal_present = exists cereal: item : is_food_cereal(cereal) and (on(cereal, kitchen_counter) or close(cereal, kitchen_counter))
    return cereal_present

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        if not (locate_milk(kitchen_counter) and locate_cereal(kitchen_counter)):
            observe(kitchen_counter, "Where is the milk")
            observe(kitchen_counter, "Where is the cereal")


##############################
From agent.py-> find a plan in act()
obs(kitchen_counter_230, Where is the milk)obs(kitchen_counter_230, Where is the cereal)
##############################
From agent.py
obs(kitchen_counter_230, Where is the milk)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py
obs(kitchen_counter_230, Where is the cereal)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to locate both the milk and the cereal. The current actions taken around the kitchen counter did not reveal the presence of either milk or cereal. Consider exploring other areas or containers in the kitchen, such as the fridge for milk and a pantry or cupboard for cereal.
##############################
From agent.py
Human Instruction: The robot needs to locate both the milk and the cereal. The current actions taken around the kitchen counter did not reveal the presence of either milk or cereal. Consider exploring other areas or containers in the kitchen, such as the fridge for milk and a pantry or cupboard for cereal.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Where is the milk.
Action 3: Observe around kitchen_counter_230 with the question of Where is the cereal.
Action 4: Observe around kitchen_counter_230 with the question of Where is the milk.
Action 5: Observe around kitchen_counter_230 with the question of Where is the cereal.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Identify the fridge in the kitchen to find milk

        bind cupboard: item where:
            is_cupboard(cupboard)
        # Identify a cupboard likely containing cereal

        if not visited(fridge):
            observe(fridge, "Check for milk")
        # Observe the fridge for the presence of milk

        if not visited(cupboard):
            observe(cupboard, "Check for cereal")
        # Observe the cupboard for the presence of cereal

behavior __goal__():
    body:
        if exists milk: item : is_milk(milk) and (inside(milk, fridge) or inside(milk, cupboard)):
            bind milk: item where:
                is_milk(milk)
            # If milk is found in the fridge or cupboard, bind it

        if exists cereal: item : is_food_cereal(cereal) and (inside(cereal, fridge) or inside(cereal, cupboard)):
            bind cereal: item where:
                is_food_cereal(cereal)
            # If cereal is found in the fridge or cupboard, bind it

        if not (exists milk: item : inside(milk, fridge)) or not (exists cereal: item : inside(cereal, cupboard)):
            find_milk_and_cereal()
        # If milk or cereal is not found in fridge or cupboard, perform observations


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal_in(obj:item):
    symbol has_milk_or_cereal=exists o: item : (is_milk(o) or is_food_cereal(o)) and inside(o, obj)
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists obj: item : (is_fridge(obj) or is_cupboard(obj)) and has_milk_or_cereal_in(obj):
            bind obj: item where:
                (is_fridge(obj) or is_cupboard(obj)) and has_milk_or_cereal_in(obj)
            walk_to(obj)

        else:
            foreach obj: item:
                if (is_fridge(obj) or is_cupboard(obj)) and not visited(obj):
                    observe(obj, "Check is there any milk or cereal")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_or_cereal_in(obj:item):
    symbol has_milk_or_cereal=exists o: item : (is_milk(o) or is_food_cereal(o)) and inside(o, obj)
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists obj: item : (is_fridge(obj) or is_cupboard(obj)) and has_milk_or_cereal_in(obj):
            bind obj: item where:
                (is_fridge(obj) or is_cupboard(obj)) and has_milk_or_cereal_in(obj)
            walk_to(obj)

        else:
            foreach obj: item:
                if (is_fridge(obj) or is_cupboard(obj)) and not visited(obj):
                    observe(obj, "Check is there any milk or cereal")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)obs(cupboard_229, Check is there any milk or cereal)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)obs(fridge_289, Check is there any milk or cereal)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
obs(cupboard_229, Check is there any milk or cereal)
Get this information:  cupboard_229 is on wall_211. cupboard_229 is inside dining_room_201. cupboard_229 is close to stovefan_288. cupboard_229 is close to fridge_289. cupboard_229 is close to coffe_maker_290. cupboard_229 is close to toaster_292. cupboard_229 is close to shower_36. cupboard_229 is close to kitchen_counter_230. cupboard_229 is close to sink_231. cupboard_229 is close to faucet_232. cupboard_229 is close to microwave_297. cupboard_229 is close to tray_296. cupboard_229 is close to wall_11. cupboard_229 is close to oven_295. cupboard_229 is close to wall_15. cupboard_229 is close to ceiling_18. cupboard_229 is close to wall_211. cupboard_229 is close to wall_212. cupboard_229 is close to ceiling_216. cupboard_229 is close to ceiling_221. cupboard_229 is close to character_65. cupboard_229 is OPEN. cupboard_229 is CLEAN.
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
obs(fridge_289, Check is there any milk or cereal)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is OPEN. fridge_289 is PLUGGED_IN. fridge_289 is OFF. fridge_289 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior pour_into_cup(milk:item, cereal:item, cup:item):
    body:
        put_inside(milk, cup)
        # Pour milk into the cup
        put_inside(cereal, cup)
        # Pour cereal into the cup

behavior open_and_grab_milk_cereal(milk:item, cereal:item, fridge:item, cupboard:item):
    body:
        if not open(fridge):
            opens(fridge)
            # Open fridge if its not open yet
        grab(milk)
        # Grab the milk
        empty_a_hand()
        # Empty a hand to grab the next item
        if not open(cupboard):
            opens(cupboard)
            # Open cupboard if its not open yet
        grab(cereal)
        # Grab the cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge instance
        
        bind cupboard: item where:
            is_cupboard(cupboard)
        # Bind the cupboard instance
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Bind the milk inside the fridge
        
        bind cereal: item where:
            is_food_cereal(cereal) and inside(cereal, cupboard)
        # Bind the cereal inside the cupboard
        
        bind cup: item where:
            is_cup(cup)
        # Bind a cup
        
        open_and_grab_milk_cereal(milk, cereal, fridge, cupboard)
        # Open necessary containers and grab milk and cereal
        
        pour_into_cup(milk, cereal, cup)
        # Pour milk and cereal into the cup
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_cereal(cup:item, milk:item, cereal:item):
    body:
        put_inside(milk, cup)
        # Pour milk into the cup
        put_inside(cereal, cup)
        # Pour cereal into the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and visited(milk)
        # Bind to the milk that has been found
        
        bind cereal: item where:
            is_food_cereal(cereal) and visited(cereal)
        # Bind to the cereal that has been found

        bind cup: item where:
            is_cup(cup) and currently close_char(char, cup)
        # Bind to a cup that is currently close to the character

        assert_hold has_a_free_hand(char)
        grab(milk)
        # Grab the milk with a free hand

        pour_milk_and_cereal(cup, milk, cereal)
        # Pour milk and cereal into the cup


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_cereal(cup:item, milk:item, cereal:item):
    body:
        put_inside(milk, cup)  # Pour milk into the cup
        put_inside(cereal, cup)  # Pour cereal into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        pour_milk_and_cereal(cup, milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_and_cereal(cup:item, milk:item, cereal:item):
    body:
        put_inside(milk, cup)  # Pour milk into the cup
        put_inside(cereal, cup)  # Pour cereal into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        pour_milk_and_cereal(cup, milk, cereal)

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_datable_heating_appliance(appliance: item):
    # Determines whether a heating appliance can be dated as a microwave or stove
    symbol is_datable_heating_appliance = exists o: item: (is_microwave(appliance) or is_stove(appliance))
    return is_datable_heating_appliance

behavior heat_milk_cup(cup: item, heating_appliance: item):
    body:
        put_close(cup, heating_appliance)
        # Place the cup close to the heating appliance to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(milk_2043, cup) and inside(food_cereal_2015, cup)
        # Select the cup with both milk and cereal

        if exists heating_appliance: item: is_datable_heating_appliance(heating_appliance):
            bind heating_appliance: item where:
                is_datable_heating_appliance(heating_appliance)
            heat_milk_cup(cup, heating_appliance)
        else:
            foreach appliance: item:
                if (is_microwave(appliance) or is_stove(appliance)) and not visited(appliance):
                    observe(appliance, "Check if it is a microwave or stove capable of heating the cup")
                    if is_datable_heating_appliance(appliance):
                        heat_milk_cup(cup, appliance)
                        break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_146(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitable_heating_device(dev:item):
    # Function to check if the item is suitable for heating
    return is_microwave(dev) or is_oven(dev)

def can_heat_cup(dev:item):
    # Function to check if milk in a cup can be heated with the device
    symbol can_heat=exists c: item : is_cup(c) and inside(c, dev)
    return can_heat

behavior heat_milk(c:item, dev:item):
    body:
        put_inside(c, dev)
        # Place the cup containing milk inside the heating device
        
        switch_on(dev)
        # Turn on the heating device to heat the milk
        
        assert can_heat_cup(dev)
        # Ensure the device can heat the cup
        
        switch_off(dev)
        # Turn off the device after heating process

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not is_on(cup)
        # Bind to a cup item that is not currently heated
        
        bind dev: item where:
            is_suitable_heating_device(dev)
        # Bind to a suitable heating device for the task
        
        heat_milk(cup, dev)
        # Execute the behavior to heat milk in the cup using the suitable device

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_suitable_heating_device(dev:item):
    # Function to check if the item is suitable for heating
    return is_microwave(dev) or is_oven(dev)

def can_heat_cup(dev:item):
    # Function to check if milk in a cup can be heated with the device
    symbol can_heat=exists c: item : is_cup(c) and inside(c, dev)
    return can_heat

behavior heat_milk(c:item, dev:item):
    body:
        put_inside(c, dev)
        # Place the cup containing milk inside the heating device
        
        switch_on(dev)
        # Turn on the heating device to heat the milk
        
        assert can_heat_cup(dev)
        # Ensure the device can heat the cup
        
        switch_off(dev)
        # Turn off the device after heating process

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not is_on(cup)
        # Bind to a cup item that is not currently heated
        
        bind dev: item where:
            is_suitable_heating_device(dev)
        # Bind to a suitable heating device for the task
        
        heat_milk(cup, dev)
        # Execute the behavior to heat milk in the cup using the suitable device

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(oven_295)putin_executor(cup_2063, oven_295)close_executor(oven_295)switchon_executor(oven_295)switchoff_executor(oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the cup_2063. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(cup_2063, oven_295)
Robot find: Robot is close to the cup_2063. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close cup_2063. cup_2063 is close oven_295. cup_2063 is inside oven_295. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is closed. 
##############################
From agent.py
switchon_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is turned on. 
##############################
From agent.py
switchoff_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(oven_295)', 'putin_executor(cup_2063, oven_295)', 'close_executor(oven_295)', 'switchon_executor(oven_295)', 'switchoff_executor(oven_295)']
Time info:
Time consume: 338 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
