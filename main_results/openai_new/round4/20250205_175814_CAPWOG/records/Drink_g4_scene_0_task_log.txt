From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with milk.', '2. Heat the cup of milk in the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_milk_container(milk_container:item):
    # Determine whether the item is a cup and close to milk
    symbol correct_container=is_cup(milk_container) and exists milk:item: is_milk(milk) and close(milk, milk_container)
    return correct_container

behavior grab_milk_cup(milk:item, cup:item):
    body:
        grab(cup)
        assert inhand(cup)
        put_inside(milk, cup)
        assert inside(milk, cup)

behavior __goal__():
    body:
        bind milk_cup: item where:
            is_cup(milk_cup) and find_milk_container(milk_cup)
        walk_to(milk_cup)
        bind milk: item where:
            is_milk(milk)
        grab_milk_cup(milk, milk_cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation

def is_container(milk:item):
    # Function to check if an item is a container (in this case, identifying milk)
    symbol is_container=exists container: item : (is_milk(container)) and inside(milk, container)
    return is_container

def has_milk(cup:item):
    # Function to check if the cup has milk in it
    symbol has_milk=exists m: item : is_milk(m) and inside(m, cup)
    return has_milk

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        grab(milk)
        # Assuming you have to grab the milk
        put_inside(milk, cup) 
        # Pour milk into the cup

behavior has_free_hand():
    body:
        assert has_a_free_hand(char)

behavior hold_cup(cup:item):
    body:
        grab(cup) # Make sure the cup is held

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_a_free_hand(char)
        # Select a free cup and make sure you have a free hand
        bind milk: item where:
            is_milk(milk) and is_container(milk)
        # Ensure the item is milk and can be poured from a container
        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk
        hold_cup(cup)
        # Hold the cup after filling it with milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(item:item):
    # Check if the item is in the kitchen
    return exists room: item : is_kitchen(room) and inside(item, room)

behavior find_and_fill_cup():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Bind a grabbable cup for use
        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Bind pourable milk for use
        walk_to(cup)
        grab(cup)
        walk_to(milk)
        empty_a_hand()
        # Ensure one hand is free for grabbing milk
        grab(cup)
        # Regrab the cup
        grab(milk)
        put_inside(cup, milk)
        # Fill the cup with milk

behavior __goal__():
    body:
        find_and_fill_cup()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_empty(cup:item):
    # Determine whether the cup is currently empty
    symbol empty=not exists content: item : inside(content, cup)
    return empty

def is_milk_nearby(sink:item):
    # Check if there is milk close to the sink
    symbol milk_nearby=exists milk: item : is_milk(milk) and close(milk, sink)
    return milk_nearby

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        put_inside(milk, cup)
        # Fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if is_cup_empty(cup):
            # Check if the cup is empty
            if exists milk: item : is_milk(milk) and close(milk, cup):
                # If milk is nearby the selected cup, fill it with milk
                bind milk: item where:
                    is_milk(milk) and close(milk, cup)
                fill_cup_with_milk(cup, milk)

            else:
                foreach sink: item:
                    # Look for a sink nearby to check if theres milk
                    if is_sink(sink) and not visited(sink):
                        observe(sink,"Check if there is milk close to the sink")
                        # Observe whether milk is close to the sink

                        if is_milk_nearby(sink):
                            bind milk: item where:
                                is_milk(milk) and close(milk, sink)
                            put_close(milk, cup)
                            # Move milk close to the cup
                            fill_cup_with_milk(cup, milk)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk(cup:item):
    # Function to check if the cup has milk inside
    symbol has_milk_item=exists milk: item : is_milk(milk) and inside(milk, cup)
    return has_milk_item

behavior grab_cup_and_fill(cup:item, milk:item, container:item):
    body:
        grab(cup)
        # Grab the cup
        walk_to(milk)
        # Walk to the milk
        put_inside(milk, cup)
        # Fill the cup with milk
        walk_to(container)
        # Walk to the container for storage
        put_inside(cup, container)
        # Place the cup filled with milk in the container

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Select a grabbable cup

        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select pourable milk

        bind container: item where:
            containers(container) and surfaces(container)
        # Select a container with surfaces to store the cup

        grab_cup_and_fill(cup, milk, container)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def contains_milk(c: item):
    # Determine whether the current item is milk
    symbol has_milk=exists milk: item : is_milk(milk) and inside(milk, c)
    return has_milk

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        if not inhand(cup):
            grab(cup)
            # Pick up the cup
        put_inside(milk, cup)
        # Fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_a_free_hand(char)
        # Locate a cup and ensure you have a free hand
        
        bind milk: item where:
            is_milk(milk)
        # Locate the milk
        
        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk


#goal_representation_end

##############################
From agent.py->reset_goal
 
def contains_milk(c: item):
    # Determine whether the current item is milk
    symbol has_milk=exists milk: item : is_milk(milk) and inside(milk, c)
    return has_milk

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        if not inhand(cup):
            grab(cup)
            # Pick up the cup
        put_inside(milk, cup)
        # Fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_a_free_hand(char)
        # Locate a cup and ensure you have a free hand
        
        bind milk: item where:
            is_milk(milk)
        # Locate the milk
        
        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)putin_executor(milk_2043, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by left hand. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_microwave_plugged(microwave:item):
    # Checks if the microwave is plugged in
    symbol microwave_plugged=plugged(microwave)
    return microwave_plugged

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        put_inside(cup, microwave)
        # Puts the cup in the microwave

behavior start_microwave(microwave:item):
    body:
        switch_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        if not is_microwave_plugged(microwave):
            plugin(microwave)
            # Plug in the microwave if it isnt plugged

        bind cup: item where:
            is_cup(cup) and inhand(cup)
        # Select a cup that is in hand and put it in the microwave

        place_cup_in_microwave(cup, microwave)
        start_microwave(microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_microwave_plugged(microwave:item):
    # Checks if the microwave is plugged in
    symbol microwave_plugged=plugged(microwave)
    return microwave_plugged

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        put_inside(cup, microwave)
        # Puts the cup in the microwave

behavior start_microwave(microwave:item):
    body:
        switch_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        if not is_microwave_plugged(microwave):
            plugin(microwave)
            # Plug in the microwave if it isnt plugged

        bind cup: item where:
            is_cup(cup) and inhand(cup)
        # Select a cup that is in hand and put it in the microwave

        place_cup_in_microwave(cup, microwave)
        start_microwave(microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the cup_2063. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the cup_2063. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
putin_executor(cup_2063, microwave_297)
Robot find: Robot is close to the cup_2063. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close cup_2063. cup_2063 is close microwave_297. cup_2063 is inside microwave_297. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'putin_executor(cup_2063, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)']
Time info:
Time consume: 130 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
