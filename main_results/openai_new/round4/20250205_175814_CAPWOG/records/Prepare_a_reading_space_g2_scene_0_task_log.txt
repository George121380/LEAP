From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_book(book:item):
    symbol is_required_book = is_book(book) and not visited(book)
    return is_required_book

behavior find_and_place_book_on_table(book:item, table:item):
    body:
        walk_to(book)
        grab(book)
        walk_to(table)
        put_on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(inside_char(char, table))
        
        if exists book: item : is_needed_book(book):
            bind book: item where:
                is_needed_book(book)
            find_and_place_book_on_table(book, table)
        
        else:
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Locate the book")
                    if is_needed_book(book):
                        bind found_book: item where:
                            is_needed_book(found_book)
                        find_and_place_book_on_table(found_book, table)
                        break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table(book:item, table:item):
    # Function to check if there is a book on a specified table
    symbol book_on_table = is_book(book) and on(book, table)
    return book_on_table

behavior place_book_on_table(book:item, table:item):
    body:
        put_on(book, table)

behavior find_and_put_book_on_table():
    body:
        bind book: item where:
            is_book(book)
        # Select a book instance

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table inside the home office

behavior __goal__():
    body:
        find_and_put_book_on_table()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book_on_table(book:item, table:item):
    # Function to check if there is a book on a specified table
    symbol book_on_table = is_book(book) and on(book, table)
    return book_on_table

behavior place_book_on_table(book:item, table:item):
    body:
        put_on(book, table)

behavior find_and_put_book_on_table():
    body:
        bind book: item where:
            is_book(book)
        # Select a book instance

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table inside the home office

behavior __goal__():
    body:
        find_and_put_book_on_table()

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        switch_on(light)
        assert is_on(light)

behavior __goal__():
    body:
        bind home_office_light: item where:
            is_light(home_office_light) and inside(home_office_light, home_office)
        turn_on_light(home_office_light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_mousepad_414(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(keyboard,mousepad_instance)
        else:
            exp(keyboard,mousepad_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,mousepad_instance]=True
        close[mousepad_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_wall_clock_249_around_home_office_319(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(wall_clock,home_office_instance)
        else:
            exp(wall_clock,home_office_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,home_office_instance]=True
        close[home_office_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
def find_home_office_light(home_office: item):
    # Check if there is a light in the home office
    symbol has_light=exists light: item : is_light(light) and inside(light, home_office)
    return has_light

behavior turn_on_light(light: item):
    body:
        switch_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        if exists light: item : is_light(light) and inside(light, home_office):
            # If a light in the home office is identified, turn it on
            bind light: item where:
                is_light(light) and inside(light, home_office)
            turn_on_light(light)
        
        else:
            # Check all items in the home office that are not visited for a light
            foreach item: item:
                if inside(item, home_office) and is_light(item) and not visited(item):
                    observe(item, "Check if it is the light in the home office")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_home_office_light(home_office: item):
    # Check if there is a light in the home office
    symbol has_light=exists light: item : is_light(light) and inside(light, home_office)
    return has_light

behavior turn_on_light(light: item):
    body:
        switch_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        if exists light: item : is_light(light) and inside(light, home_office):
            # If a light in the home office is identified, turn it on
            bind light: item where:
                is_light(light) and inside(light, home_office)
            turn_on_light(light)
        
        else:
            # Check all items in the home office that are not visited for a light
            foreach item: item:
                if inside(item, home_office) and is_light(item) and not visited(item):
                    observe(item, "Check if it is the light in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 70 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
