From agent.py
Reset goals: The sub-goals are: 
['1. Wash and prepare the rice and egg.', '2. Cook the rice with the egg in a frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_146(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_food(food:item, sink:item):
    body:
        put_inside(food, sink)
        # Ensure the food is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            # If the pool has a faucet, turn it on to wash food

        wash(food)
        # This is the key step of the behavior, used for washing food
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_off(faucet)
            # If the pool has a faucet, turn it off after washing

behavior prepare_rice_and_egg(rice:item, egg:item, sink:item):
    body:
        wash_food(rice, sink)
        # Wash the rice first
        empty_a_hand()
        wash_food(egg, sink)
        # Wash the egg as well

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to prepare
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to prepare

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        prepare_rice_and_egg(rice, egg, sink)
        # Execute the behavior to wash and prepare the rice and egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item(food:item):
    # Check if the item is food, specifically for rice or egg
    return is_food_rice(food) or is_food_egg(food)

def has_food_rice_and_egg(dish:item):
    # Function to check if there is rice or egg on a specified dishcontainer
    symbol has_food=exists o: item : (is_food_rice(o) or is_food_egg(o)) and inside(o, dish)
    return has_food

behavior clean_item(food:item):
    body:
        if dirty(food):
            # If the food item is dirty, clean it
            wash(food)

behavior prepare_item(food:item, work_surface:item):
    body:
        clean_item(food)
        # Clean the food item
        put_on(food, work_surface)
        # Place the food item on a work surface

behavior __goal__():
    body:
        bind dish: item where:
            containers(dish) and has_food_rice_and_egg(dish)
        # Select a dish or container with rice or egg inside

        bind food_rice: item where:
            is_food_rice(food_rice) and inside(food_rice, dish)
        # Select rice from within the container

        bind food_egg: item where:
            is_food_egg(food_egg) and inside(food_egg, dish)
        # Select an egg from within the container

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter as the work surface
        
        prepare_item(food_rice, kitchen_counter)
        # Prepare the rice on the kitchen counter
        
        prepare_item(food_egg, kitchen_counter)
        # Prepare the egg on the kitchen counter

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_146(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior prepare_rice(rice:item, sink:item):
    body:
        put_inside(rice, sink)
        # Place the rice inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            # If the sink has a faucet, turn it on to wash the rice

        rinse(rice)
        # Rinse the rice

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_off(faucet)
            # Turn off the faucet after rinsing the rice

behavior prepare_egg(egg:item, sink:item):
    body:
        put_inside(egg, sink)
        # Place the egg inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            # If the sink has a faucet, turn it on to wash the egg

        wash(egg)
        # Wash the egg

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_off(faucet)
            # Turn off the faucet after washing the egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to prepare

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to prepare

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        prepare_rice(rice, sink)
        prepare_egg(egg, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

def is_clean_or_dirty(water:item):
    symbol state_of_water=exists sink: item : is_sink(sink) and has_water(sink)
    return state_of_water

behavior wash_food(food:item, water_source:item):
    body:
        put_inside(food, water_source)
        wash(food)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind water_source: item where:
            is_sink(water_source) and is_clean_or_dirty(water_source)

        if has_a_free_hand(char):
            walk_to(water_source)
            grab(rice)
            walk_to(water_source)
            wash_food(rice, water_source)
            empty_a_hand()
        
        if has_a_free_hand(char):
            walk_to(water_source)
            grab(egg)
            walk_to(water_source)
            wash_food(egg, water_source)
            empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_sink_with_faucet(sink:item):
    # Function to check if a sink has a faucet
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior prepare_rice_bowl(bowl:item, sink:item):
    body:
        put_inside(bowl, sink)
        # Place the bowl inside the sink
        if has_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            # If the sink has a faucet, turn it on to fill the bowl with water
        get_water(bowl) # Fill the bowl with water
        if has_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_off(faucet)
            # If the sink has a faucet, turn it off after filling the bowl
        put_close(bowl, sink)
        # Place the bowl close to the sink once it has been filled with water

behavior prepare_egg(egg:item, sink:item):
    body:
        put_inside(egg, sink)
        # Place the egg inside the sink
        if has_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            # If the sink has faucet, turn it on to rinse the egg
        wash(egg) # Wash the egg
        if has_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_off(faucet)
            # If the sink has a faucet, turn it off after washing the egg
        put_close(egg, sink)
        # Place the egg close to the sink once it has been washed

behavior __goal__():
    body:
        bind rice_bowl: item where:
            is_bowl(rice_bowl) and is_food_rice(rice_bowl)
        # Select a bowl with rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        prepare_rice_bowl(rice_bowl, sink) # Prepare the rice by filling the bowl with water
        prepare_egg(egg, sink) # Prepare the egg by washing it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def can_cook_rice(rice:item):
    # Check if the item is rice
    symbol rice_type=exists r: item : is_food_rice(r)
    return rice_type

def can_cook_egg(egg:item):
    # Check if the item is an egg
    symbol egg_type=exists e: item : is_food_egg(e)
    return egg_type

behavior wash_item(item:item):
    body:
        wash(item)
        # Wash the item to make it clean

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and not clean(rice)
        # Bind an instance of rice that is not clean
        
        bind egg: item where:
            is_food_egg(egg) and not clean(egg)
        # Bind an instance of egg that is not clean
        
        wash_item(rice)
        # Wash the rice to make it clean
        
        wash_item(egg)
        # Wash the egg to make it clean

#goal_representation_end

##############################
From agent.py->reset_goal
 
def can_cook_rice(rice:item):
    # Check if the item is rice
    symbol rice_type=exists r: item : is_food_rice(r)
    return rice_type

def can_cook_egg(egg:item):
    # Check if the item is an egg
    symbol egg_type=exists e: item : is_food_egg(e)
    return egg_type

behavior wash_item(item:item):
    body:
        wash(item)
        # Wash the item to make it clean

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and not clean(rice)
        # Bind an instance of rice that is not clean
        
        bind egg: item where:
            is_food_egg(egg) and not clean(egg)
        # Bind an instance of egg that is not clean
        
        wash_item(rice)
        # Wash the rice to make it clean
        
        wash_item(egg)
        # Wash the egg to make it clean

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(sink_42)putin_executor(food_rice_2036, sink_42)wash_executor(food_rice_2036)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(sink_42)putin_executor(food_egg_2020, sink_42)wash_executor(food_egg_2020)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)']
Time info:
Time consume: 130 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 13 steps
Keystate: k2 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
