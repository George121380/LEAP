From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_egg(pot: item):
    symbol has_contents = has_water(pot) and exists o: item: is_food_egg(o) and inside(o, pot)
    return has_contents

def on_stove(pot: item, stove: item):
    return close(pot, stove) and on(pot, stove)

behavior start_boiling(pot: item, stove: item):
    body:
        switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot) and has_water_and_egg(pot) and on_stove(pot, stove)
        
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_is_plugged(pot:item):
    # Function to check if a pot has water and is plugged
    symbol ready_for_boiling=has_water(pot) and plugged(pot)
    return ready_for_boiling

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        put_inside(pot, sink) # Place the pot inside the sink
        get_water(pot) # Fill the pot with water

behavior prepare_water_for_boiling(pot:item):
    body:
        plugin(pot) # Plug the pot in for boiling

behavior boil_egg_in_pot(pot:item, egg:item):
    body:
        put_inside(egg, pot) # Place the egg inside the pot for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        if not has_water_and_is_plugged(pot):
            fill_pot_with_water(pot, sink)
            prepare_water_for_boiling(pot)
        boil_egg_in_pot(pot, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(stove:item):
    # Function to check if theres a pot on the stove
    symbol pot_on_stove=exists pot: item : is_pot(pot) and on(pot, stove)
    return pot_on_stove

def is_faucet_in_kitchen():
    # Function to check if theres a faucet in the kitchen
    symbol faucet_in_kitchen=exists faucet: item : is_faucet(faucet) and exists kitchen: item : is_kitchen(kitchen) and close(faucet, kitchen)
    return faucet_in_kitchen

behavior boil_egg_in_pot(pot:item, stove:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            # Assume the faucet is used to fill the pot with water
            get_water(pot)

        walk_to(stove)
        put_on(pot, stove)
        switch_on(stove)
        # Begin boiling the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_pot_on_stove(stove):
            # If no pot is on the stove, find one
            bind pot: item where:
                is_pot(pot)
            if not inhand(pot):
                grab(pot)

        if is_faucet_in_kitchen():
            bind faucet: item where:
                is_faucet(faucet)
            boil_egg_in_pot(pot, stove, faucet)
        # Use a faucet if available in the kitchen


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_is_clean(pot: item):
    # Function to check if a pot has water and is clean
    symbol water_and_clean = has_water(pot) and clean(pot)
    return water_and_clean

behavior fill_with_water(pot: item):
    body:
        walk_to(pot) # Walk to the pot
        get_water(pot) # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        switch_on(stove) # Turn the stove on

behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        put_inside(egg, pot) # Place the egg in the pot
        put_on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot)
        # Bind a grabbable pot

        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Bind a stove with a switch

        bind egg: item where:
            is_food_egg(egg)
        # Bind an egg

        if not has_water_and_is_clean(pot):
            fill_with_water(pot)

        turn_on_stove(stove)
        
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_and_is_clean(pot: item):
    # Function to check if a pot has water and is clean
    symbol water_and_clean = has_water(pot) and clean(pot)
    return water_and_clean

behavior fill_with_water(pot: item):
    body:
        walk_to(pot) # Walk to the pot
        get_water(pot) # Fill the pot with water

behavior turn_on_stove(stove: item):
    body:
        switch_on(stove) # Turn the stove on

behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        put_inside(egg, pot) # Place the egg in the pot
        put_on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot)
        # Bind a grabbable pot

        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Bind a stove with a switch

        bind egg: item where:
            is_food_egg(egg)
        # Bind an egg

        if not has_water_and_is_clean(pot):
            fill_with_water(pot)

        turn_on_stove(stove)
        
        boil_egg(egg, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fridge_open(fridge:item):
    # Check if the fridge is open
    symbol fridge_open= open(fridge)
    return fridge_open

behavior manage_fridge_door(fridge:item):
    body:
        if not is_fridge_open(fridge):
            opens(fridge) # Open the fridge if its closed

behavior get_egg(egg:item, fridge:item):
    body:
        grab(egg) # Grab the egg from the fridge

behavior prepare_filled_pot(pot:item, faucet:item):
    body:
        switch_on(faucet)
        get_water(pot)
        switch_off(faucet)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        put_on(pot, stove)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select the fridge with ID 289

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
        # Select the egg inside the fridge

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065

        manage_fridge_door(fridge)
        get_egg(egg, fridge)

        prepare_filled_pot(pot, faucet)
        put_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fridge_open(fridge:item):
    # Check if the fridge is open
    symbol fridge_open= open(fridge)
    return fridge_open

behavior manage_fridge_door(fridge:item):
    body:
        if not is_fridge_open(fridge):
            opens(fridge) # Open the fridge if its closed

behavior get_egg(egg:item, fridge:item):
    body:
        grab(egg) # Grab the egg from the fridge

behavior prepare_filled_pot(pot:item, faucet:item):
    body:
        switch_on(faucet)
        get_water(pot)
        switch_off(faucet)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        put_on(pot, stove)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select the fridge with ID 289

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
        # Select the egg inside the fridge

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065

        manage_fridge_door(fridge)
        get_egg(egg, fridge)

        prepare_filled_pot(pot, faucet)
        put_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def faucet_is_off(faucet: item):
    # Function to check if the faucet is off
    return is_off(faucet)

def stove_is_off(stove: item):
    # Function to check if the stove is off
    return is_off(stove)

behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        if has_water(pot):
            # Ensures pot is already filled with water
            assert has_water(pot)
        else:
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior heat_water(stove: item, pot: item):
    body:
        if faucet_is_off(faucet):
            put_on(pot, stove)
            switch_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        bind pot: item where:
            is_pot(pot) and has_water(pot)

        if not faucet_is_off(faucet):
            switch_off(faucet)

        fill_pot_with_water(faucet, pot)
        
        if stove_is_off(stove):
            heat_water(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation

behavior walk_to_kitchen_counter():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        walk_to(kitchen_counter)

behavior find_and_grab_pot():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, kitchen_counter)
        grab(pot)

behavior open_pot():
    body:
        opens(pot)

behavior go_to_faucet():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        walk_to(faucet)

behavior get_water_in_pot():
    body:
        get_water(pot)

behavior go_to_stove():
    body:
        bind stove: item where:
            is_stove(stove)
        walk_to(stove)

behavior place_pot_on_stove():
    body:
        put_on(pot, stove)

behavior grab_egg_from_fridge():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        walk_to(fridge)
        opens(fridge)
        bind egg: item where:
            is_food_egg(egg)
        grab(egg)

behavior place_egg_in_pot():
    body:
        put_inside(egg, pot)

behavior switch_on_stove():
    body:
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        walk_to_kitchen_counter()
        find_and_grab_pot()
        open_pot()
        go_to_faucet()
        get_water_in_pot()
        go_to_stove()
        place_pot_on_stove()
        grab_egg_from_fridge()
        place_egg_in_pot()
        switch_on_stove()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def can_get_water_from_faucet(faucet: item):
    # Determine whether the faucet can currently provide water
    symbol providing_water = exists sink: item: is_sink(sink) and close(faucet, sink)
    return providing_water

behavior obtain_water(faucet: item, pot: item):
    body:
        get_water(pot) # Fill the pot with water from the faucet
        
        if can_get_water_from_faucet(faucet):
            switch_on(faucet) # Turn on the faucet if its connected to the sink
            get_water(pot) # Get water in the pot
            switch_off(faucet) # Turn off the faucet after getting water
        
behavior boil_pot(pot: item, stove: item):
    body:
        if not is_on(stove):
            walk_to(stove)
            
        put_on(pot, stove) # Put the pot on the stove
        switch_on(stove) # Turn on the stove to boil the pots contents
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # The pot is already grabbed
        
        bind faucet: item where:
            is_faucet(faucet) and visited(faucet)
        # The faucet has been visited
        
        obtain_water(faucet, pot)
        
        bind stove: item where:
            is_stove(stove) and visited(stove)
        # The stove has been visited and can be used
        
        boil_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_kitchen(item: item):
    # Determine if the item is in the kitchen
    symbol is_in_kitchen = exists room: item : is_kitchen(room) and inside(item, room)
    return is_in_kitchen

def has_faucet(sink: item):
    # Determine if the sink has a faucet close to it
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior collect_water_in_pot(pot: item, faucet: item):
    body:
        walk_to(faucet)
        # Ensure nearness to the faucet
        assert is_off(faucet)
        switch_on(faucet)
        # Ensure faucet is on
        get_water(pot)
        # Get water in the pot
        assert has_water(pot)
        switch_off(faucet)
        # Switch off faucet after collecting water

behavior boil_egg_on_stove(egg: item, pot: item, stove: item):
    body:
        put_inside(egg, pot)
        # Place the egg inside the pot
        assert is_off(stove)
        switch_on(stove)
        # Ensure the stove is on to boil the egg
        put_on(pot, stove)
        # Place the pot on the stove
        # Assume time passes until the egg is boiled
        switch_off(stove)
        # Turn off the stove after boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
            # Ensure egg is classified correctly
            
        bind pot: item where:
            is_pot(pot) and inhand(pot)
            # Ensure pot is in hand
            
        bind stove: item where:
            is_stove(stove) and in_kitchen(stove)
            # Ensure stove is in the kitchen
            
        bind faucet: item where:
            is_faucet(faucet) and has_faucet(faucet)
            # Ensure faucet is classified correctly
        
        collect_water_in_pot(pot, faucet)
        boil_egg_on_stove(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

def is_kitchen_sink(sink: item):
    symbol is_in_kitchen = exists kitchen: item : is_kitchen(kitchen) and inside(sink, kitchen)
    return is_in_kitchen

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior place_egg_in_pot(egg: item, pot: item):
    body:
        put_inside(egg, pot)

behavior heat_pot_on_stove(pot: item, stove: item):
    body:
        put_on(pot, stove)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_kitchen_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot) and inhand(pot)

        fill_pot_with_water(pot, faucet)
        walk_to(stove)
        heat_pot_on_stove(pot, stove)
        walk_to(egg)
        grab(egg)
        place_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_phone_247_around_microwave_297(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(phone,microwave_instance)
        else:
            exp(phone,microwave_instance)
    eff:
        unknown[phone]=False
        close[phone,microwave_instance]=True
        close[microwave_instance,phone]=True
    

behavior find_headset_2062_around_cpuscreen_171(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(headset,cpuscreen_instance)
        else:
            exp(headset,cpuscreen_instance)
    eff:
        unknown[headset]=False
        close[headset,cpuscreen_instance]=True
        close[cpuscreen_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet_sink(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        put_under(pot, sink) # This assumes theres a behavior to place the pot under the sink
        
        if has_faucet_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            switch_on(faucet)
            
            assert has_water(pot)
            
            switch_off(faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        put_on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        put_inside(egg, pot)
        switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
            
        bind pot: item where:
            is_pot(pot)
        
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065) (Failed)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'switchoff_executor(faucet_43) (Failed)']
Time info:
Time consume: 233 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
