From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and chop the vegetables.', '3. Squeeze lemon juice over the vegetables.', '4. Peel and chop the boiled egg, and mix it with the vegetables.', '5. Put the egg salad into a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_egg(pot:item):
    # Function to check if there is an egg inside the pot
    symbol has_egg=exists o: item : is_food_egg(o) and inside(o, pot)
    return has_egg

behavior boil_egg(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot)
        put_on(pot, stove)
        # Place the pot on the stove
        switch_on(stove)
        # Turn on the stove to boil the water and egg
        assert is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if exists egg: item : is_food_egg(egg) and inside(egg, pot):
            boil_egg(pot, stove)
        else:
            foreach egg: item:
                if is_food_egg(egg) and not inside(egg, pot):
                    put_inside(egg, pot)
                    # Place the egg in the pot
                    boil_egg(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_egg(pot:item):
    # Function to check if there is an egg inside the pot
    symbol has_egg=exists o: item : is_food_egg(o) and inside(o, pot)
    return has_egg

behavior boil_egg(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot)
        put_on(pot, stove)
        # Place the pot on the stove
        switch_on(stove)
        # Turn on the stove to boil the water and egg
        assert is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if exists egg: item : is_food_egg(egg) and inside(egg, pot):
            boil_egg(pot, stove)
        else:
            foreach egg: item:
                if is_food_egg(egg) and not inside(egg, pot):
                    put_inside(egg, pot)
                    # Place the egg in the pot
                    boil_egg(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_vegetable(obj:item):
    # Determine whether the object is a vegetable
    symbol is_veg= is_food_vegetable(obj) and not visited(obj)
    return is_veg

behavior wash_vegetable(vegetable:item, faucet:item):
    body:
        put_close(vegetable, faucet)
        # Bring the vegetable close to the faucet

        switch_on(faucet)
        wash(vegetable)
        switch_off(faucet)
        # Wash the vegetable using water from the faucet

behavior chop_vegetable(vegetable:item, cutting_board:item):
    body:
        put_on(vegetable, cutting_board)
        # Ensure vegetable is placed on the cutting board

        cuts(vegetable)
        # Chop the vegetable

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet that is nearby

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        # Select a cutting board that is nearby

        foreach vegetable: item:
            if is_vegetable(vegetable):
                wash_vegetable(vegetable, faucet)
                chop_vegetable(vegetable, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(x: item):
    # Function to define the category of vegetables
    return is_food_vegetable(x)

behavior wash_vegetable(vegetable: item, faucet: item):
    body:
        if not has_water(faucet):
            switch_on(faucet)
        wash(vegetable)
        if has_a_free_hand(char):
            grab(vegetable)
        rinse(vegetable)

behavior chop_vegetable(vegetable: item, cutting_board: item, knife: item):
    body:
        put_on(vegetable, cutting_board)
        cuts(vegetable)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind knife: item where:
            is_knife(knife)

        foreach vegetable: item:
            if is_vegetable(vegetable):
                wash_vegetable(vegetable, faucet)
                chop_vegetable(vegetable, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vegetable(x: item):
    # Function to define the category of vegetables
    return is_food_vegetable(x)

behavior wash_vegetable(vegetable: item, faucet: item):
    body:
        if not has_water(faucet):
            switch_on(faucet)
        wash(vegetable)
        if has_a_free_hand(char):
            grab(vegetable)
        rinse(vegetable)

behavior chop_vegetable(vegetable: item, cutting_board: item, knife: item):
    body:
        put_on(vegetable, cutting_board)
        cuts(vegetable)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind knife: item where:
            is_knife(knife)

        foreach vegetable: item:
            if is_vegetable(vegetable):
                wash_vegetable(vegetable, faucet)
                chop_vegetable(vegetable, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(sink_42)putin_executor(food_vegetable_2041, sink_42)wash_executor(food_vegetable_2041)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)rinse_executor(food_vegetable_2041)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_vegetable_2041, sink_42)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_vegetable_2041 is inside sink_42. food_vegetable_2041 is close sink_42. sink_42 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_vegetable_2041 is cleaned. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the sink_42. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the sink_42. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
rinse_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_juice(lemon:item, vegetables:item):
    body:
        assert inhand(lemon)
        # Squeeze the lemon to obtain juice over the vegetables
        squeeze(lemon)
        # Ensure the lemon juice is poured over the vegetables

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind the lemon item
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Bind the vegetables that have been cut

        walk_to(lemon)
        # Walk to the lemons location

        grab(lemon)
        # Grab the lemon

        walk_to(vegetables)
        # Walk to the vegetables location

        squeeze_lemon_juice(lemon, vegetables)
        # Perform the lemon squeezing action over the vegetables

        empty_a_hand()
        # Empty the hand to release the lemon after squeezing

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_146(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon item
        put_on(lemon, vegetables)
        # Put the squeezed lemon on the vegetables

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind an item classified as a lemon
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Bind cut vegetables
        
        squeeze_lemon_on_vegetables(lemon, vegetables)
        # Call the behavior to squeeze the lemon on the vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon item
        put_on(lemon, vegetables)
        # Put the squeezed lemon on the vegetables

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind an item classified as a lemon
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Bind cut vegetables
        
        squeeze_lemon_on_vegetables(lemon, vegetables)
        # Call the behavior to squeeze the lemon on the vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(food_vegetable_2041)put_executor(food_lemon_2028, food_vegetable_2041)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_lemon_2028, food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. food_lemon_2028 is close food_vegetable_2041. food_vegetable_2041 is close food_lemon_2028. food_lemon_2028 is on food_vegetable_2041. food_lemon_2028 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the lemon juice over the vegetables. Currently, the lemon has just been placed on the vegetables.
##############################
From agent.py
Human Instruction: You need to squeeze the lemon juice over the vegetables. Currently, the lemon has just been placed on the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_egg_2020.
Action 10: Grab food_egg_2020.
Action 11: Walk to pot_2069.
Action 12: Put food_egg_2020 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Switch on faucet_43.
Action 22: Walk to food_vegetable_2041.
Action 23: Grab food_vegetable_2041.
Action 24: Walk to sink_42.
Action 25: Put food_vegetable_2041 into sink_42.
Action 26: Wash food_vegetable_2041.
Action 27: Walk to food_vegetable_2041.
Action 28: Grab food_vegetable_2041.
Action 29: Rinse food_vegetable_2041.
Action 30: Walk to cutting_board_2051.
Action 31: Put food_vegetable_2041 on cutting_board_2051.
Action 32: Walk to knife_2050.
Action 33: Grab knife_2050.
Action 34: Walk to food_vegetable_2041.
Action 35: Cut food_vegetable_2041.
Action 36: Walk to food_lemon_2028.
Action 37: Grab food_lemon_2028.
Action 38: Walk to food_vegetable_2041.
Action 39: Put food_lemon_2028 on food_vegetable_2041.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and on(food_lemon_2028, vegetables) 
        # Select vegetables on which the lemon is placed

        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, vegetables)
        # Select the lemon placed on the vegetables

        squeeze_lemon_on_vegetables(lemon, vegetables)
        # Squeeze the lemon juice over the vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon over the vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables (chopped)
        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, vegetables)
        # Select the lemon which is placed on the vegetables
        squeeze_lemon_on_vegetables(lemon, vegetables)
        # Perform the squeezing behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon over the vegetables to apply the juice

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, food_vegetable_2041)
        # Select lemon placed on the vegetables
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041
        squeeze_lemon_on_vegetables(lemon, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior squeeze_lemon_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon on the vegetables

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, food_vegetable_2041)
        # Bind the lemon placed on the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Bind the specific vegetables on which the lemon is placed

        squeeze_lemon_on_vegetables(lemon, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_lemon_juice_on_vegetables(lemon:item, vegetables:item):
    body:
        squeeze(lemon)
        # Squeeze the lemon over the vegetables

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, vegetables)

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        pour_lemon_juice_on_vegetables(lemon, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_over_vegetables(lemon:item, vegetables:item):
    body:
        grab(lemon)
        walk_to(vegetables)
        squeeze(lemon)
        empty_a_hand()

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, food_vegetable_2041)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2041
        squeeze_lemon_over_vegetables(lemon, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(sink_42)', 'putin_executor(food_vegetable_2041, sink_42)', 'wash_executor(food_vegetable_2041)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'rinse_executor(food_vegetable_2041)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(food_vegetable_2041)', 'put_executor(food_lemon_2028, food_vegetable_2041)']
Time info:
Time consume: 244 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
