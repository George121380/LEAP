From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water_inside=has_water(pot)
    return has_water_inside

def is_boiling(pot:item):
    # Function to check if the pot is boiling
    symbol pot_is_on=is_on(pot)
    return pot_is_on

behavior prepare_vegetables_for_boiling(vegetable:item, pot:item):
    body:
        if not cut(vegetable):
            cuts(vegetable)
            # Cut the vegetable if not already cut

behavior boil_vegetables(vegetable:item, pot:item):
    body:
        put_inside(vegetable, pot)
        # Put the vegetables inside the pot

behavior start_boiling(pot:item):
    body:
        if has_water(pot) and plugged(pot) and not is_boiling(pot):
            switch_on(pot)
            # Turn on the pot to start boiling

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        prepare_vegetables_for_boiling(vegetable, pot)
        boil_vegetables(vegetable, pot)
        start_boiling(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

def has_vegetables(pot:item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetable=exists o: item : is_food_vegetable(o) and inside(o, pot)
    return has_vegetable

def is_pot_ready(pot:item, stove:item):
    # Function to check if a pot is ready to be used for boiling
    symbol ready=is_pot(pot) and has_water(pot) and on(pot, stove)
    return ready

behavior prepare_pot_for_boiling(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot)
        # Get water in the pot if it doesnt have enough water
        
        if not on(pot, stove):
            put_on(pot, stove)
        # Put the pot on the stove

behavior start_boiling(pot:item, stove:item):
    body:
        assert is_pot_ready(pot, stove)
        # It should be true that the pot has water and is positioned on a stove
        switch_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind a pot object
        
        bind stove: item where:
            is_stove(stove)
        # Bind a stove object
        
        if has_vegetables(pot):
            prepare_pot_for_boiling(pot, stove)
            # Prepare the pot for boiling
            start_boiling(pot, stove)
            # Start boiling the vegetables
        else:
            # Check all pots to find one with vegetables
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Is there any vegetable in the pot")

#goal_representation_end

##############################
From agent.py->reset_goal

def has_vegetables(pot:item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetable=exists o: item : is_food_vegetable(o) and inside(o, pot)
    return has_vegetable

def is_pot_ready(pot:item, stove:item):
    # Function to check if a pot is ready to be used for boiling
    symbol ready=is_pot(pot) and has_water(pot) and on(pot, stove)
    return ready

behavior prepare_pot_for_boiling(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot)
        # Get water in the pot if it doesnt have enough water
        
        if not on(pot, stove):
            put_on(pot, stove)
        # Put the pot on the stove

behavior start_boiling(pot:item, stove:item):
    body:
        assert is_pot_ready(pot, stove)
        # It should be true that the pot has water and is positioned on a stove
        switch_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind a pot object
        
        bind stove: item where:
            is_stove(stove)
        # Bind a stove object
        
        if has_vegetables(pot):
            prepare_pot_for_boiling(pot, stove)
            # Prepare the pot for boiling
            start_boiling(pot, stove)
            # Start boiling the vegetables
        else:
            # Check all pots to find one with vegetables
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Is there any vegetable in the pot")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Is there any vegetable in the pot)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: cutting_board_2051, drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Is there any vegetable in the pot)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
obs(pot_2069, Is there any vegetable in the pot)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there are vegetables in the pot and then check if the pot is ready for boiling. This involves verifying the presence of water and the pot's placement on a stove. No actions have yet confirmed the presence of vegetables, water, or stove placement.
##############################
From agent.py
Human Instruction: You need to ensure there are vegetables in the pot and then check if the pot is ready for boiling. This involves verifying the presence of water and the pot's placement on a stove. No actions have yet confirmed the presence of vegetables, water, or stove placement.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Is there any vegetable in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_or_vegetables_in_pot(pot:item):
    # Check if there is water or vegetables in the pot
    symbol has_water_vegetables=exists o: item : (has_water(pot) or is_food_vegetable(o)) and inside(o, pot)
    return has_water_vegetables

def is_pot_on_stove(pot:item, stove:item):
    # Check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior ensure_ready_to_boil(pot:item, stove:item):
    body:
        if not has_water_or_vegetables_in_pot(pot):
            observe(pot, "Check if there are vegetables and water in the pot")

        if not is_pot_on_stove(pot, stove):
            observe(pot, "Check if the pot is on the stove")
        
        if has_water_or_vegetables_in_pot(pot) and is_pot_on_stove(pot, stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        ensure_ready_to_boil(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_or_vegetables_in_pot(pot:item):
    # Check if there is water or vegetables in the pot
    symbol has_water_vegetables=exists o: item : (has_water(pot) or is_food_vegetable(o)) and inside(o, pot)
    return has_water_vegetables

def is_pot_on_stove(pot:item, stove:item):
    # Check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior ensure_ready_to_boil(pot:item, stove:item):
    body:
        if not has_water_or_vegetables_in_pot(pot):
            observe(pot, "Check if there are vegetables and water in the pot")

        if not is_pot_on_stove(pot, stove):
            observe(pot, "Check if the pot is on the stove")
        
        if has_water_or_vegetables_in_pot(pot) and is_pot_on_stove(pot, stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        ensure_ready_to_boil(pot, stove)

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if there are vegetables and water in the pot)obs(pot_2069, Check if the pot is on the stove)
##############################
From agent.py
obs(pot_2069, Check if there are vegetables and water in the pot)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py
obs(pot_2069, Check if the pot is on the stove)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there are vegetables and water in the pot and move the pot to the stove for boiling. None of these conditions have been met yet. Verify the presence of vegetables and water in the pot, and place the pot on the stove. Then, turn on the stove to start boiling.
##############################
From agent.py
Human Instruction: You need to ensure there are vegetables and water in the pot and move the pot to the stove for boiling. None of these conditions have been met yet. Verify the presence of vegetables and water in the pot, and place the pot on the stove. Then, turn on the stove to start boiling.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Is there any vegetable in the pot.
Action 6: Observe around pot_2069 with the question of Check if there are vegetables and water in the pot.
Action 7: Observe around pot_2069 with the question of Check if the pot is on the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_and_water_in_pot(pot: item):
    # Function to check if there are vegetables and water in the pot
    symbol has_contents = exists v: item: is_food_vegetable(v) and inside(v, pot) and has_water(pot)
    return has_contents

def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    symbol on_stove = on(pot, stove)
    return on_stove

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        put_on(pot, stove) # Place the pot on the stove

behavior boil_vegetables(pot: item, stove: item):
    body:
        switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        if not visited(pot):
            observe(pot, "Check if there are vegetables and water in the pot")
        
        if not visited(stove):
            observe(stove, "Check if the pot is on the stove")
        
        if has_vegetables_and_water_in_pot(pot) and not is_pot_on_stove(pot, stove):
            place_pot_on_stove(pot, stove)
        
        if has_vegetables_and_water_in_pot(pot) and is_pot_on_stove(pot, stove):
            boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables_and_water_in_pot(pot: item):
    # Function to check if there are vegetables and water in the pot
    symbol has_contents = exists v: item: is_food_vegetable(v) and inside(v, pot) and has_water(pot)
    return has_contents

def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    symbol on_stove = on(pot, stove)
    return on_stove

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        put_on(pot, stove) # Place the pot on the stove

behavior boil_vegetables(pot: item, stove: item):
    body:
        switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        if not visited(pot):
            observe(pot, "Check if there are vegetables and water in the pot")
        
        if not visited(stove):
            observe(stove, "Check if the pot is on the stove")
        
        if has_vegetables_and_water_in_pot(pot) and not is_pot_on_stove(pot, stove):
            place_pot_on_stove(pot, stove)
        
        if has_vegetables_and_water_in_pot(pot) and is_pot_on_stove(pot, stove):
            boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if there are vegetables and water in the pot)walk_executor(stove_2065)open_executor(stove_2065)obs(stove_2065, Check if the pot is on the stove)
##############################
From agent.py
obs(pot_2069, Check if there are vegetables and water in the pot)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
obs(stove_2065, Check if the pot is on the stove)
Get this information:  stove_2065 is on kitchen_counter_230. stove_2065 is inside dining_room_201. stove_2065 is close to kitchen_counter_230. stove_2065 is close to character_65. stove_2065 is OPEN. stove_2065 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that there are vegetables and water in pot_2069 and move the pot to stove_2065. Then, turn on the stove to start boiling the vegetables.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_with_vegetables_and_water_fridge(fridge: item):
    # Function to check if there is a pot with vegetables and water in a fridge
    symbol inside_fridge = exists pot: item : is_pot(pot) and inside(pot, fridge) and has_water(pot) and (exists vegetable: item : is_food_vegetable(vegetable) and inside(vegetable, pot))
    return inside_fridge

behavior put_pot_in_fridge(pot: item, fridge: item):
    body:
        put_inside(pot, fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        if exists pot: item : is_pot(pot) and has_water(pot) and (exists vegetable: item : is_food_vegetable(vegetable) and inside(vegetable, pot)):
            bind pot: item where:
                is_pot(pot) and has_water(pot) and (exists vegetable: item : is_food_vegetable(vegetable) and inside(vegetable, pot))
            put_pot_in_fridge(pot, fridge)
        
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there are vegetables and water in the pot")
                    if exists vegetable: item : is_food_vegetable(vegetable) and inside(vegetable, pot) and has_water(pot):
                        put_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        put_inside(pot, fridge) # Place the pot inside the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to be stored
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        put_inside(pot, fridge) # Place the pot inside the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to be stored
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        store_pot_in_fridge(pot, fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(pot_2069, fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is inside fridge_289. pot_2069 is close fridge_289. fridge_289 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(fridge_289)', 'putin_executor(pot_2069, fridge_289)']
Time info:
Time consume: 153 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
