From agent.py
Reset goals: The sub-goals are: 
['Iron the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_146(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_iron(iron:item):
    # Function to check if there is water inside the iron
    symbol has_water=has_water(iron)
    return has_water

def on_ironing_board(skirt:item):
    # Function to check if the skirt is on the ironing board
    symbol on_board=exists ironing_board: item : is_ironing_board(ironing_board) and on(skirt, ironing_board)
    return on_board

behavior prepare_the_iron(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)  # Plug in the iron if its not plugged in
        if not is_on(iron):
            switch_on(iron)  # Turn on the iron if its not on

behavior fill_iron_with_water(iron:item):
    body:
        get_water(iron)  # Fill the iron with water if it doesnt have water

behavior move_skirt_to_ironing_board(skirt:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)  # Move the skirt to the ironing board

behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        prepare_the_iron(iron)  # Ensure the iron is plugged in and turned on
        if not has_water_in_iron(iron):
            fill_iron_with_water(iron)  # Fill the iron with water if necessary
        move_skirt_to_ironing_board(skirt, ironing_board)  # Place the skirt on the ironing board
        assert on_ironing_board(skirt)  # The skirt should be on the ironing board
        if is_on(iron):
            wipe(skirt)  # Iron the skirt

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select an item that is a skirt

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        
        iron_skirt(skirt, iron, ironing_board)  # Iron the skirt using the iron on the ironing board

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_in_iron(iron:item):
    # Function to check if there is water inside the iron
    symbol has_water=has_water(iron)
    return has_water

def on_ironing_board(skirt:item):
    # Function to check if the skirt is on the ironing board
    symbol on_board=exists ironing_board: item : is_ironing_board(ironing_board) and on(skirt, ironing_board)
    return on_board

behavior prepare_the_iron(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)  # Plug in the iron if its not plugged in
        if not is_on(iron):
            switch_on(iron)  # Turn on the iron if its not on

behavior fill_iron_with_water(iron:item):
    body:
        get_water(iron)  # Fill the iron with water if it doesnt have water

behavior move_skirt_to_ironing_board(skirt:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)  # Move the skirt to the ironing board

behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        prepare_the_iron(iron)  # Ensure the iron is plugged in and turned on
        if not has_water_in_iron(iron):
            fill_iron_with_water(iron)  # Fill the iron with water if necessary
        move_skirt_to_ironing_board(skirt, ironing_board)  # Place the skirt on the ironing board
        assert on_ironing_board(skirt)  # The skirt should be on the ironing board
        if is_on(iron):
            wipe(skirt)  # Iron the skirt

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select an item that is a skirt

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        
        iron_skirt(skirt, iron, ironing_board)  # Iron the skirt using the iron on the ironing board

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)grab_executor(iron_2089)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(closetdrawer_146)exp(clothes_skirt_2088, closetdrawer_146)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)wipe_executor(clothes_skirt_2088)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)grab_executor(iron_2089)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(closetdrawer_146)exp(clothes_skirt_2088, closetdrawer_146)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)wipe_executor(clothes_skirt_2088)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, basket_for_clothes_2006, towel_rack_32, towel_rack_34, Robot is close to the iron_2089. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the iron_2089. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the iron_2089. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the iron_2089. Robot is close to the dresser_123. 
##############################
From agent.py
exp(clothes_skirt_2088, closetdrawer_146)
Fail to find clothes_skirt_2088 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(clothes_skirt_2088, closetdrawer_146)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)wipe_executor(clothes_skirt_2088)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the iron_2089. Robot is close to the dresser_123. 
##############################
From agent.py
exp(clothes_skirt_2088, closetdrawer_146)
Fail to find clothes_skirt_2088 around closetdrawer_146. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'grab_executor(iron_2089)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(closetdrawer_146)', 'walk_executor(closetdrawer_146)']
Time info:
Time consume: 44 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
