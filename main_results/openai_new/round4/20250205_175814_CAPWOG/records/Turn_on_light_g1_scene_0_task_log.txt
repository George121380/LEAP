From agent.py
Reset goals: The sub-goals are: 
['Turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

bind bathroom: item where:
    is_bathroom(bathroom)

behavior __goal__():
    body:
        walk_to(bathroom)
        foreach light: item:
            if is_light(light) and inside(light, bathroom) and not is_on(light):
                switch_on(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def has_switch_light_in_bathroom(bathroom:item):
    # Determine whether the bathroom has a light with a switch that can be turned on
    symbol has_switched_light=exists light: item : is_light(light) and has_switch(light) and inside(light, bathroom)
    return has_switched_light

behavior switch_on_light_in_bathroom(light:item):
    body:
        switch_on(light)
        # Turn on the light

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_switch_light_in_bathroom(bathroom):
            bind light: item where:
                is_light(light) and has_switch(light) and inside(light, bathroom)
            # Select light in the bathroom with a switch

            switch_on_light_in_bathroom(light)
            # Trigger the behavior to switch on light in the bathroom

        else:
            foreach light: item:
                if is_light(light) and not visited(light) and inside(light, bathroom):
                    # Check all unvisited lights in the bathroom
                    observe(light,"Check does the light have a switch to turn on")

#goal_representation_end

##############################
From agent.py->reset_goal

def has_switch_light_in_bathroom(bathroom:item):
    # Determine whether the bathroom has a light with a switch that can be turned on
    symbol has_switched_light=exists light: item : is_light(light) and has_switch(light) and inside(light, bathroom)
    return has_switched_light

behavior switch_on_light_in_bathroom(light:item):
    body:
        switch_on(light)
        # Turn on the light

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_switch_light_in_bathroom(bathroom):
            bind light: item where:
                is_light(light) and has_switch(light) and inside(light, bathroom)
            # Select light in the bathroom with a switch

            switch_on_light_in_bathroom(light)
            # Trigger the behavior to switch on light in the bathroom

        else:
            foreach light: item:
                if is_light(light) and not visited(light) and inside(light, bathroom):
                    # Check all unvisited lights in the bathroom
                    observe(light,"Check does the light have a switch to turn on")

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Error record: 'str' object has no attribute 'name'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(light_64)', 'switchon_executor(light_64)']
Time info:
Time consume: 24 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
