From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Put the jacket in the washing machine and wash it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_122(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
behavior hand_wash_jacket(jacket:item):
    body:
        achieve clean(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        hand_wash_jacket(jacket)
        # Execute the handwashing of the jacket to ensure it is clean
#goal_representation_end

##############################
From agent.py->reset_goal
behavior hand_wash_jacket(jacket:item):
    body:
        achieve clean(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        hand_wash_jacket(jacket)
        # Execute the handwashing of the jacket to ensure it is clean
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_122)exp(clothes_jacket_2047, closetdrawer_122)walk_executor(clothes_jacket_2047)grab_executor(clothes_jacket_2047)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_jacket_2047)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the dresser_108. 
##############################
From agent.py
exp(clothes_jacket_2047, closetdrawer_122)
Fail to find clothes_jacket_2047 around closetdrawer_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_122)exp(clothes_jacket_2047, closetdrawer_122)walk_executor(clothes_jacket_2047)grab_executor(clothes_jacket_2047)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_jacket_2047)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the dresser_108. 
##############################
From agent.py
exp(clothes_jacket_2047, closetdrawer_122)
Fail to find clothes_jacket_2047 around closetdrawer_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_122)exp(clothes_jacket_2047, closetdrawer_122)walk_executor(clothes_jacket_2047)grab_executor(clothes_jacket_2047)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_jacket_2047)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the dresser_108. 
##############################
From agent.py
exp(clothes_jacket_2047, closetdrawer_122)
Fail to find clothes_jacket_2047 around closetdrawer_122. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior hand_wash_jacket(jacket:item):
    body:
        achieve clean(jacket)
        # Ensure the jacket is clean after hand washing

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be hand washed

        hand_wash_jacket(jacket)
        # Perform the action of hand washing the jacket
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_jacket(o: item):
    return is_clothes_jacket(o)

behavior find_and_clean_jacket(jacket:item):
    body:
        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer) and id[closetdrawer] == 122
        # Bind to the identified closetdrawer

        if not exists jacket: item : (is_clothes_jacket(jacket) and inside(jacket, closetdrawer)):
            # If the jacket has not been found, observe around the closetdrawer
            observe(closetdrawer, "Check the area for clothes_jacket_2047")

        bind jacket: item where:
            is_clothes_jacket(jacket) and inside(jacket, closetdrawer)
        # Select the jacket from closetdrawer_122

        find_and_clean_jacket(jacket)
        # Wash the jacket by hand

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'jacket') at line 5698, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_122(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
def is_clothes_jacket(j: item):
    return is_clothes_jacket(j)

behavior find_and_clean_jacket(jacket:item):
    body:
        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer) and id[closetdrawer] == 122
        # Bind to the identified closetdrawer

        if not exists j: item : (is_clothes_jacket(j) and inside(j, closetdrawer)):
            # If the jacket has not been found, observe around the closetdrawer
            observe(closetdrawer, "Check the area for clothes_jacket_2047")

        bind jacket: item where:
            is_clothes_jacket(jacket) and inside(jacket, closetdrawer)
        # Select the jacket from closetdrawer_122

        find_and_clean_jacket(jacket)
        # Wash the jacket by hand

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'j') at line 5680, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior find_and_clean_jacket(jacket:item):
    body:
        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer) and id[closetdrawer] == 122
        # Bind to the identified closetdrawer

        if not exists j: item : (is_clothes_jacket(j) and inside(j, closetdrawer)):
            # If the jacket has not been found, observe around the closetdrawer
            observe(closetdrawer, "Check the area for clothes_jacket_2047")

        bind jacket: item where:
            is_clothes_jacket(jacket) and inside(jacket, closetdrawer)
        # Select the jacket from closetdrawer_122

        find_and_clean_jacket(jacket)
        # Wash the jacket by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_42(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def find_and_handwash_jacket(jacket:item):
    # Function to find and hand wash the jacket
    body:
        achieve clean(jacket)
        # Ensure the jacket is clean

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer) and id[closetdrawer] == 122
        # Select the closet drawer with ID 122
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket from known information
        if not visited(jacket):
            observe(closetdrawer, "Look for the jacket around here")
        # Observe closetdrawer_122 if the jacket hasnt been located yet
        find_and_handwash_jacket(jacket)
        # Perform the action to locate and handwash the jacket

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5668, column 9.
Expected one of: 
	* __ANON_6
	* __ANON_2
	* PLUS
	* SLASH
	* COMMA
	* __ANON_7
	* AT
	* __ANON_8
	* GREATER_EQ
	* __ANON_3
	* __ANON_4
	* PERCENT
	* __ANON_0
	* LESS_EQ
	* OR
	* SEMICOLON
	* __ANON_1
	* VBAR
	* RSHIFT
	* __ANON_5
	* IF
	* NOT_EQ
	* AMPERSAND
	* STAR
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* LESSTHAN
	* FLOORDIV
	* DOUBLE_EQUAL
	* _NEWLINE
	* EQUAL
	* LSHIFT
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2059_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation

behavior find_and_handwash_jacket(jacket:item):
    body:
        achieve clean(jacket)
        # Ensure the jacket is clean

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer) and id[closetdrawer] == 122
        # Select the closet drawer with ID 122
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket from known information
        if not visited(jacket):
            observe(closetdrawer, "Look for the jacket around here")
        # Observe closetdrawer_122 if the jacket hasnt been located yet
        find_and_handwash_jacket(jacket)
        # Perform the action to locate and handwash the jacket

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket)
        # Hand wash the jacket

behavior __goal__():
    body:
        bind closetdrawer: item where:
            is_closetdrawer(closetdrawer)
        # Select the closet drawer

        bind jacket: item where:
            is_clothes_jacket(jacket) and not dirty(jacket)
        # Select the jacket that is a clothing item

        achieve close_char(char, closetdrawer)
        # Move character close to the closet drawer

        hand_wash_jacket(jacket)
        # Execute the hand washing of the jacket
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_sink_42(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
            # Select the jacket to be washed
        hand_wash_jacket(jacket)
        # Perform hand washing of the jacket
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_sink_42(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket)
        # Hand wash the jacket

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be washed

        hand_wash_jacket(jacket)
        # Perform the action of hand washing the jacket

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Hand wash the jacket, then wash it by washing machine.
Action History:
['walk_executor(closetdrawer_122)', 'walk_executor(closetdrawer_122)', 'walk_executor(closetdrawer_122)']
Time info:
Time consume: 202 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 35
goal generate times: 7
goal correct times: 1
action_num: 3

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
