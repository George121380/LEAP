From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta together.', '2. Put the cooked chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_chair_2004_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_122(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
behavior cook_chicken_pasta(chicken:item, pasta:item, pot:item, stove:item, water:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        achieve inside(chicken, pot)
        # Place the chicken inside the pot

        achieve inside(water, pot)
        # Add water to the pot

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the chicken and pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be cooked

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta to be cooked

        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind water: item where:
            has_water(water)
        # Select a source of water

        cook_chicken_pasta(chicken, pasta, pot, stove, water)
        # Cook the chicken and pasta together
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_chair_2004_around_stove_2065(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(chair,stove_instance)
        else:
            exp(chair,stove_instance)
    eff:
        unknown[chair]=False
        close[chair,stove_instance]=True
        close[stove_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_and_pasta(chicken:item, pasta:item, pot:item, stove:item):
    body:
        achieve inside(chicken, pot)
        # Place the chicken inside the pot

        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the chicken and pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to cook

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_chicken_and_pasta(chicken, pasta, pot, stove)
        # Execute the cooking of chicken and pasta together

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cook_chicken_and_pasta(chicken:item, pasta:item, pot:item, stove:item):
    body:
        achieve inside(chicken, pot)
        # Place the chicken inside the pot

        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the chicken and pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to cook

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_chicken_and_pasta(chicken, pasta, pot, stove)
        # Execute the cooking of chicken and pasta together

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Place the cooked chicken pasta on the plate

behavior __goal__():
    body:
        bind cooked_chicken_pasta: item where:
            is_food_chicken(cooked_chicken_pasta)
        # Select the cooked chicken pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(cooked_chicken_pasta, plate)
        # Perform the action of placing the chicken pasta on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Place the cooked chicken pasta on the plate

behavior __goal__():
    body:
        bind cooked_chicken_pasta: item where:
            is_food_chicken(cooked_chicken_pasta)
        # Select the cooked chicken pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(cooked_chicken_pasta, plate)
        # Perform the action of placing the chicken pasta on the plate

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(mousepad_167)exp(plate_1000, mousepad_167)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(mousepad_167)
Robot find: mouse_166, keyboard_168, drawing_175, chair_103, Robot is close to the desk_104. Robot is close to the mousepad_167. 
##############################
From agent.py
exp(plate_1000, mousepad_167)
Fail to find plate_1000 around mousepad_167. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(plate_1000, sink_42)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(plate_1000, sink_42)
Fail to find plate_1000 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_358)open_executor(dresser_358)exp(plate_1000, dresser_358)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(dresser_358)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
open_executor(dresser_358)
Robot find: hanger_359, hanger_361, hanger_363, hanger_365, hanger_367, hanger_369, hanger_372, hanger_374, hanger_375, hanger_376, Robot is close to the closetdrawer_384. Robot is close to the closetdrawer_388. Robot is close to the dresser_358. Robot is close to the hanger_359. Robot is close to the closetdrawer_392. Robot is close to the hanger_361. Robot is close to the closetdrawer_394. Robot is close to the hanger_363. Robot is close to the hanger_365. Robot is close to the hanger_367. Robot is close to the hanger_369. Robot is close to the hanger_372. Robot is close to the hanger_374. Robot is close to the hanger_375. Robot is close to the hanger_376. Robot is close to the closetdrawer_377. Robot is close to the closetdrawer_380. Robot is close to the closetdrawer_382. dresser_358 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Locate sink_231. You will find plate_1000 on top of sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. Locate sink_231. You will find plate_1000 on top of sink_231.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_chicken_2017 around fridge_289.
Action 8: Walk to pot_2069.
Action 9: Open pot_2069.
Action 10: Walk to food_chicken_2017.
Action 11: Grab food_chicken_2017.
Action 12: Walk to pot_2069.
Action 13: Put food_chicken_2017 into pot_2069.
Action 14: Walk to dry_pasta_2042.
Action 15: Grab dry_pasta_2042.
Action 16: Walk to pot_2069.
Action 17: Put dry_pasta_2042 into pot_2069.
Action 18: Grab pot_2069.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to cupboard_229.
Action 23: Open cupboard_229.
Action 24: look for plate_1000 around cupboard_229.
Action 25: Walk to table_226.
Action 26: look for plate_1000 around table_226.
Action 27: Walk to mousepad_167.
Action 28: look for plate_1000 around mousepad_167.
Action 29: Walk to sink_42.
Action 30: look for plate_1000 around sink_42.
Action 31: Walk to dishwasher_1001.
Action 32: Open dishwasher_1001.
Action 33: look for plate_1000 around dishwasher_1001.
Action 34: Walk to dresser_358.
Action 35: Open dresser_358.

##############################
From agent.py
exp(plate_1000, dresser_358)
Fail to find plate_1000 around dresser_358. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_chicken_2017, plate_1000)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_chicken_2017. food_chicken_2017 is close plate_1000. food_chicken_2017 is on plate_1000. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(table_226)', 'walk_executor(mousepad_167)', 'walk_executor(sink_42)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(dresser_358)', 'open_executor(dresser_358)', 'walk_executor(sink_231)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(plate_1000)', 'put_executor(food_chicken_2017, plate_1000)']
Time info:
Time consume: 249 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 31
goal generate times: 3
goal correct times: 0
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
