From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Plug the coffee maker into a power source

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Coffee is brewed and poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee_maker(coffee_maker)
        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Plug the coffee maker into a power source

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Coffee is brewed and poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee_maker(coffee_maker)
        make_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the coffee maker has water available to brew coffee, and the brewed coffee should be poured into the cup. Currently, there is no indication that water is added to the coffee maker, or that coffee has been brewed and poured into the cup.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the coffee maker has water available to brew coffee, and the brewed coffee should be poured into the cup. Currently, there is no indication that water is added to the coffee maker, or that coffee has been brewed and poured into the cup.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for cup_2063 around cupboard_229.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_394(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew the coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve inside(cup, coffee_maker)
        # Pour the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        ensure_water_in_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_120(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol water_present=exists o: item : (has_water(coffee_maker))
    return water_present

def has_brewed_coffee(coffee_maker:item):
    # Function to check if the coffee maker has brewed coffee
    symbol brewed_coffee=exists o: item : (is_cup(o) and inside(o, coffee_maker))
    return brewed_coffee

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew the coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve inside(cup, coffee_maker)
        # Pour the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if not has_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker)
        
        brew_coffee(coffee_maker)
        
        if has_brewed_coffee(coffee_maker):
            pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_122(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_coffee(coffee_maker:item):
    # Function to check if the coffee maker has water and brewed coffee is available
    symbol has_water_and_coffee = has_water(coffee_maker) and is_off(coffee_maker)
    return has_water_and_coffee

behavior ensure_water_and_make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Ensure the cup is placed under the coffee maker

        achieve_once inhand(cup)
        # Temporarily hold the cup to pour coffee

        achieve is_off(coffee_maker)
        # Ensure the coffee maker is turned off after brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if not has_water_and_coffee(coffee_maker):
            ensure_water_and_make_coffee(coffee_maker, cup)

        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_392(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the coffee maker
    symbol water_present = has_water(coffee_maker)
    return water_present

def is_coffee_brewed(coffee_maker:item):
    # Function to check if the coffee is brewed
    symbol coffee_brewed = exists item: item : (is_cup(item) and has_water(item))
    return coffee_brewed

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve inside(coffee_maker, cup)
        # Pour the brewed coffee into the cup

behavior turn_off_coffee_maker(coffee_maker:item):
    body:
        achieve is_off(coffee_maker)
        # Turn off the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if not has_water_in_coffee_maker(coffee_maker):
            achieve has_water(coffee_maker)
            # Ensure the coffee maker has water

        if is_coffee_brewed(coffee_maker):
            pour_coffee_into_cup(coffee_maker, cup)
            # Pour brewed coffee into the cup

        turn_off_coffee_maker(coffee_maker)
        # Turn off the coffee maker after using

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup in the coffee maker
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean to receive coffee
        achieve has_water(cup)
        # Pour the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        brew_coffee(coffee_maker, cup)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water in it
    symbol has_water = exists o: item : (is_water(o) and inside(o, coffee_maker))
    return has_water

behavior fill_with_water(coffee_maker:item, water_source:item):
    body:
        achieve has_water(coffee_maker)

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(coffee, cup)
        # Pour coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 232
        # Select the faucet with ID 232

        fill_with_water(coffee_maker, water_source)
        # Fill the coffee maker with water

        brew_coffee(coffee_maker)
        # Brew coffee using the coffee maker

        pour_coffee(cup, coffee_maker)
        # Pour the brewed coffee into the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<cup: item>, Variable<coffee_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water in it
    symbol has_water = exists o: item : (is_water(o) and inside(o, coffee_maker))
    return has_water

behavior fill_with_water(coffee_maker:item, water_source:item):
    body:
        achieve has_water(coffee_maker)

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee(cup:item, coffee_maker:item, coffee:item):
    body:
        achieve inside(coffee, cup)
        # Pour coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 232
        # Select the faucet with ID 232

        bind coffee: item where:
            is_food_coffee(coffee)
        # Select the coffee to pour into the cup

        fill_with_water(coffee_maker, water_source)
        # Fill the coffee maker with water

        brew_coffee(coffee_maker)
        # Brew coffee using the coffee maker

        pour_coffee(cup, coffee_maker, coffee)
        # Pour the brewed coffee into the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_150(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water in it
    symbol has_water = exists o: item : (is_water(o) and inside(o, coffee_maker))
    return has_water

behavior fill_with_water(coffee_maker:item, water_source:item):
    body:
        achieve has_water(coffee_maker)

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee(cup:item, coffee_maker:item, coffee:item):
    body:
        achieve inside(coffee, cup)
        # Pour coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 232
        # Select the faucet with ID 232

        bind coffee: item where:
            is_food_food(coffee)
        # Select the coffee to pour into the cup

        fill_with_water(coffee_maker, water_source)
        # Fill the coffee maker with water

        brew_coffee(coffee_maker)
        # Brew coffee using the coffee maker

        pour_coffee(cup, coffee_maker, coffee)
        # Pour the brewed coffee into the cup

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the coffee maker and necessary supplies such as coffee grounds and water.', '2. Use the coffee maker to brew a cup of coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_coffee_maker_and_supplies():
    body:
        foreach o: item:
            if is_coffe_maker(o) and not visited(o):
                observe(o, "Check if this is the coffee maker")
        foreach o: item:
            if is_food_coffee(o) and not visited(o):
                observe(o, "Check if coffee grounds are available")
        foreach o: item:
            if is_cup(o) and not visited(o):
                observe(o, "Check if this is a cup")
        foreach o: item:
            if is_water(o) and not visited(o):
                observe(o, "Check for available water")

behavior __goal__():
    body:
        find_coffee_maker_and_supplies()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
behavior find_coffee_maker_and_supplies():
    body:
        foreach o: item:
            if is_coffe_maker(o) and not visited(o):
                observe(o, "Check if this is the coffee maker")
        foreach o: item:
            if is_food_food(o) and not visited(o):
                observe(o, "Check if coffee grounds are available")
        foreach o: item:
            if is_cup(o) and not visited(o):
                observe(o, "Check if this is a cup")
        foreach o: item:
            if is_water(o) and not visited(o):
                observe(o, "Check for available water")

behavior __goal__():
    body:
        find_coffee_maker_and_supplies()
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def identify_coffee_maker_and_supplies(coffee_maker:item, supplies:list):
    body:
        foreach supply: item:
            if supply in supplies:
                achieve visited(supply)
        # Visit the coffee maker and necessary supplies

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind water: item where:
            has_water(water)
        # Select the water supply 

        bind coffee_grounds: item where:
            is_food_coffee_grounds(coffee_grounds)
        # Select the coffee grounds

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        identify_coffee_maker_and_supplies(coffee_maker, [water, coffee_grounds, cup])
        # Identify and visit the coffee maker and necessary supplies for making coffee
 
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5703, column 9.
Expected one of: 
	* __ANON_6
	* __ANON_2
	* PLUS
	* SLASH
	* COMMA
	* __ANON_7
	* AT
	* __ANON_8
	* GREATER_EQ
	* __ANON_3
	* __ANON_4
	* PERCENT
	* __ANON_0
	* LESS_EQ
	* OR
	* SEMICOLON
	* __ANON_1
	* VBAR
	* RSHIFT
	* __ANON_5
	* IF
	* NOT_EQ
	* AMPERSAND
	* STAR
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* LESSTHAN
	* FLOORDIV
	* DOUBLE_EQUAL
	* _NEWLINE
	* EQUAL
	* LSHIFT
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_392(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
behavior identify_coffee_maker_and_supplies(coffee_maker:item, supplies:list):
    body:
        foreach supply: item:
            if supply in supplies:
                achieve visited(supply)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind water: item where:
            has_water(water)

        bind coffee_grounds: item where:
            is_food_coffee_grounds(coffee_grounds)

        bind cup: item where:
            is_cup(cup)

        identify_coffee_maker_and_supplies(coffee_maker, [water, coffee_grounds, cup])

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5705, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_122(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
behavior identify_coffee_maker_and_supplies(coffee_maker:item, supplies:list):
    body:
        foreach supply: item:
            if supply in supplies:
                achieve visited(supply)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind water: item where:
            has_water(water)

        bind coffee_grounds: item where:
            is_food_coffee_grounds(coffee_grounds)

        bind cup: item where:
            is_cup(cup)

        identify_coffee_maker_and_supplies(coffee_maker, [water, coffee_grounds, cup])

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_150(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_coffee_maker_scenario(coffe_maker:item, cup:item, faucet:item):
    body:
        observe(coffe_maker, "Check if coffe_maker has water and if its on")
        observe(cup, "Check if there is any coffee poured in the cup")
        observe(faucet, "Check if water is available")

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        observe_coffee_maker_scenario(coffe_maker, cup, faucet)
        # Perform the observations for the coffee maker scenario

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior observe_coffee_maker_scenario(coffe_maker:item, cup:item, faucet:item):
    body:
        observe(coffe_maker, "Check if coffe_maker has water and if its on")
        observe(cup, "Check if there is any coffee poured in the cup")
        observe(faucet, "Check if water is available")

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        observe_coffee_maker_scenario(coffe_maker, cup, faucet)
        # Perform the observations for the coffee maker scenario

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if coffe_maker has water and if its on)walk_executor(cup_2063)obs(cup_2063, Check if there is any coffee poured in the cup)walk_executor(faucet_43)obs(faucet_43, Check if water is available)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if coffe_maker has water and if its on)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Check if there is any coffee poured in the cup)
Get this information:  cup_2063 is close to character_65. cup_2063 is inside dining_room_201.
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
obs(faucet_43, Check if water is available)
Get this information:  faucet_43 is close to floor_2. faucet_43 is close to floor_3. faucet_43 is close to floor_4. faucet_43 is close to bathroom_cabinet_40. faucet_43 is close to bathroom_counter_41. faucet_43 is close to sink_42. faucet_43 is close to wall_9. faucet_43 is close to wall_12. faucet_43 is close to ceiling_16. faucet_43 is close to ceiling_21. faucet_43 is close to basket_for_clothes_2006. faucet_43 is close to character_65. faucet_43 is on bathroom_counter_41. faucet_43 is inside bathroom_1. faucet_43 is CLEAN. faucet_43 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker has the necessary supplies. Currently, it has not been confirmed that water or coffee grounds have been added to the coffee maker, which is required to brew coffee. Identify and gather the coffee grounds and ensure water is available in the coffee maker before proceeding to brew the coffee.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker has the necessary supplies. Currently, it has not been confirmed that water or coffee grounds have been added to the coffee maker, which is required to brew coffee. Identify and gather the coffee grounds and ensure water is available in the coffee maker before proceeding to brew the coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for cup_2063 around cupboard_229.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to coffe_maker_290.
Action 15: Switch off coffe_maker_290.
Action 16: Open coffe_maker_290.
Action 17: Observe around coffe_maker_290 with the question of Check if coffe_maker has water and if its on.
Action 18: Walk to cup_2063.
Action 19: Observe around cup_2063 with the question of Check if there is any coffee poured in the cup.
Action 20: Walk to faucet_43.
Action 21: Observe around faucet_43 with the question of Check if water is available.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_150(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_or_coffee_in_maker(coffee_maker:item):
    # Function to check if there is water or coffee in the coffee maker
    symbol has_water_or_coffee = exists o: item : ((has_water(o) and inside(o, coffee_maker)) or (is_food_coffee(o) and inside(o, coffee_maker)))
    return has_water_or_coffee

behavior __goal__():
    body:
        if exists coffee_maker: item : (is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)):
            # Check if the coffee maker already has water or coffee inside based on the available information
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)
            # Select a coffee maker that already has water or coffee

            achieve close_char(char, coffee_maker)
            # Move the character closer to the coffee maker with water or coffee

        else: 
            # If no confirmed coffee maker with water or coffee is found, initiate exploration to locate one
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    # Check all unvisited coffee makers
                    observe(coffee_maker,"Check if the coffee maker has water or coffee")
                    # Observe whether the coffee maker has water or coffee inside

        if not exists coffee_grounds: item : (is_food_coffee(coffee_grounds)):
            # If no coffee grounds are confirmed, explore to find them
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard, "Check if the cupboard contains any coffee grounds")
                    # Observe whether there are any coffee grounds in the cupboard

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'coffee_grounds') at line 5765, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_or_coffee_in_maker(coffee_maker:item):
    # Function to check if there is water or coffee in the coffee maker
    symbol has_water_or_coffee = exists o: item : ((has_water(o) and inside(o, coffee_maker)) or (is_food_coffee(o) and inside(o, coffee_maker)))
    return has_water_or_coffee

behavior __goal__():
    body:
        if exists coffee_maker: item : (is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)):
            # Check if the coffee maker already has water or coffee inside based on the available information
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)
            # Select a coffee maker that already has water or coffee

            achieve close_char(char, coffee_maker)
            # Move the character closer to the coffee maker with water or coffee

        else: 
            # If no confirmed coffee maker with water or coffee is found, initiate exploration to locate one
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    # Check all unvisited coffee makers
                    observe(coffee_maker,"Check if the coffee maker has water or coffee")
                    # Observe whether the coffee maker has water or coffee inside

        if not exists coffee_grounds: item : (is_food_coffee(coffee_grounds)):
            # If no coffee grounds are confirmed, explore to find them
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard, "Check if the cupboard contains any coffee grounds")
                    # Observe whether there are any coffee grounds in the cupboard

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'coffee_grounds') at line 5729, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_or_coffee_in_maker(coffee_maker:item):
    # Function to check if there is water or coffee in the coffee maker
    symbol has_water_or_coffee = exists o: item : ((has_water(o) and inside(o, coffee_maker)) or (is_food_coffee(o) and inside(o, coffee_maker)))
    return has_water_or_coffee

behavior __goal__():
    body:
        if exists coffee_maker: item : (is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)):
            # Check if the coffee maker already has water or coffee inside based on the available information
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and has_water_or_coffee_in_maker(coffee_maker)
            # Select a coffee maker that already has water or coffee

            achieve close_char(char, coffee_maker)
            # Move the character closer to the coffee maker with water or coffee

        else: 
            # If no confirmed coffee maker with water or coffee is found, initiate exploration to locate one
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    # Check all unvisited coffee makers
                    observe(coffee_maker,"Check if the coffee maker has water or coffee")
                    # Observe whether the coffee maker has water or coffee inside

        if not exists coffee_grounds: item : (is_food_coffee(coffee_grounds) and inside(coffee_grounds, cupboard)):
            # If no coffee grounds are confirmed, explore to find them
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard, "Check if the cupboard contains any coffee grounds")
                    # Observe whether there are any coffee grounds in the cupboard

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_supplies(x:item):
    # Function to check if the specified coffee maker has water and supplies
    return has_water(x)

def has_coffee_grounds(coffee_maker:item):
    # Function to check if the specified coffee maker has coffee grounds
    symbol has_grounds = exists o: item : (is_food_food(o) and on(o, coffee_maker))
    return has_grounds

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        if not has_water_and_supplies(coffee_maker):
            # Check and gather supplies
            foreach o: item:
                if (can_open(o) or grabbable(o)) and not visited(o):
                    observe(o, "Check if the item can be used to fill water or has supplies")
        
        if not has_coffee_grounds(coffee_maker):
            # Observe to ensure coffee grounds are available
            observe(coffee_maker, "Verify if coffee grounds are added")

        achieve close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_and_supplies(x:item):
    # Function to check if the specified coffee maker has water and supplies
    return has_water(x)

def has_coffee_grounds(coffee_maker:item):
    # Function to check if the specified coffee maker has coffee grounds
    symbol has_grounds = exists o: item : (is_food_food(o) and on(o, coffee_maker))
    return has_grounds

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        if not has_water_and_supplies(coffee_maker):
            # Check and gather supplies
            foreach o: item:
                if (can_open(o) or grabbable(o)) and not visited(o):
                    observe(o, "Check if the item can be used to fill water or has supplies")
        
        if not has_coffee_grounds(coffee_maker):
            # Observe to ensure coffee grounds are available
            observe(coffee_maker, "Verify if coffee grounds are added")

        achieve close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)obs(coffe_maker_290, Verify if coffee grounds are added)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Verify if coffee grounds are added)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker has water and coffee grounds. You need to confirm the presence of these supplies in the coffee maker before proceeding to brew the coffee.
##############################
From agent.py
Human Instruction: Ensure the coffee maker has water and coffee grounds. You need to confirm the presence of these supplies in the coffee maker before proceeding to brew the coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for cup_2063 around cupboard_229.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to coffe_maker_290.
Action 15: Switch off coffe_maker_290.
Action 16: Open coffe_maker_290.
Action 17: Observe around coffe_maker_290 with the question of Check if coffe_maker has water and if its on.
Action 18: Walk to cup_2063.
Action 19: Observe around cup_2063 with the question of Check if there is any coffee poured in the cup.
Action 20: Walk to faucet_43.
Action 21: Observe around faucet_43 with the question of Check if water is available.
Action 22: Walk to coffe_maker_290.
Action 23: Observe around coffe_maker_290 with the question of Verify if coffee grounds are added.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior verify_coffee_maker(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if the coffee maker has water and if it is on")
        observe(coffee_maker, "Verify if coffee grounds are added")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        verify_coffee_maker(coffee_maker)
        # Verify the required supplies are present in the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior verify_coffee_maker(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if the coffee maker has water and if it is on")
        observe(coffee_maker, "Verify if coffee grounds are added")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        verify_coffee_maker(coffee_maker)
        # Verify the required supplies are present in the coffee maker

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Check if the coffee maker has water and if it is on)obs(coffe_maker_290, Verify if coffee grounds are added)
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker has water and if it is on)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
obs(coffe_maker_290, Verify if coffee grounds are added)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to verify the presence of water and coffee grounds in the coffee maker. Currently, there is no confirmation that the coffee maker has water or coffee grounds. Please ensure these supplies are present before proceeding.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker has coffee grounds and water
    symbol ready= exists o: item : (has_water(coffee_maker) and is_coffee_filter(o) and inside(o, coffee_maker))
    return ready

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Ensure the cup is in place on the coffee maker

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on for brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if is_coffee_maker_ready(coffee_maker):
            brew_coffee(coffee_maker, cup)
        else:
            observe(coffee_maker, "Verify water, coffee grounds and ensure it is ready to brew")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker has coffee grounds and water
    symbol ready= exists o: item : (has_water(coffee_maker) and is_coffee_filter(o) and inside(o, coffee_maker))
    return ready

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Ensure the cup is in place on the coffee maker

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on for brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if is_coffee_maker_ready(coffee_maker):
            brew_coffee(coffee_maker, cup)
        else:
            observe(coffee_maker, "Verify water, coffee grounds and ensure it is ready to brew")

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Verify water, coffee grounds and ensure it is ready to brew)
##############################
From agent.py
obs(coffe_maker_290, Verify water, coffee grounds and ensure it is ready to brew)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker has both coffee grounds and water. Verify their presence and then proceed to place the cup on the coffee maker and turn it on for brewing.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker has both coffee grounds and water. Verify their presence and then proceed to place the cup on the coffee maker and turn it on for brewing.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for cup_2063 around cupboard_229.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to coffe_maker_290.
Action 15: Switch off coffe_maker_290.
Action 16: Open coffe_maker_290.
Action 17: Observe around coffe_maker_290 with the question of Check if coffe_maker has water and if its on.
Action 18: Walk to cup_2063.
Action 19: Observe around cup_2063 with the question of Check if there is any coffee poured in the cup.
Action 20: Walk to faucet_43.
Action 21: Observe around faucet_43 with the question of Check if water is available.
Action 22: Walk to coffe_maker_290.
Action 23: Observe around coffe_maker_290 with the question of Verify if coffee grounds are added.
Action 24: Observe around coffe_maker_290 with the question of Check if the coffee maker has water and if it is on.
Action 25: Observe around coffe_maker_290 with the question of Verify if coffee grounds are added.
Action 26: Invalid parameter input.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_grounds(coffe_maker:item):
    # Function to check if the coffee maker has coffee grounds
    symbol has_coffee_grounds=exists o: item : (is_food_food(o) and inside(o, coffe_maker))
    return has_coffee_grounds

behavior brew_coffee(coffe_maker:item, cup:item):
    body:
        achieve on(cup, coffe_maker)
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Select the coffee maker with ID 290

        if not (has_coffee_grounds(coffe_maker) and has_water(coffe_maker)):
            observe(coffe_maker, "Check if it has enough coffee grounds and water")
        # Observe if the coffee maker has coffee grounds and water

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        brew_coffee(coffe_maker, cup)
        # Execute the operation to brew coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_coffee_grounds(coffe_maker:item):
    # Function to check if the coffee maker has coffee grounds
    symbol has_coffee_grounds=exists o: item : (is_food_food(o) and inside(o, coffe_maker))
    return has_coffee_grounds

behavior brew_coffee(coffe_maker:item, cup:item):
    body:
        achieve on(cup, coffe_maker)
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Select the coffee maker with ID 290

        if not (has_coffee_grounds(coffe_maker) and has_water(coffe_maker)):
            observe(coffe_maker, "Check if it has enough coffee grounds and water")
        # Observe if the coffee maker has coffee grounds and water

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        brew_coffee(coffe_maker, cup)
        # Execute the operation to brew coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Check if it has enough coffee grounds and water)put_executor(cup_2063, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
obs(coffe_maker_290, Check if it has enough coffee grounds and water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2063)', 'walk_executor(faucet_43)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 454 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 37
goal generate times: 15
goal correct times: 2
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
