From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into a bowl and whisk it.', '2. Heat the frying pan.', '3. Pour the whisked egg into the frying pan and scramble it until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_bowl_2072_around_bench_228(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior crack_egg_into_bowl_and_whisk(egg:item, bowl:item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Whisk the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        crack_egg_into_bowl_and_whisk(egg, bowl)
        # Execute the process of cracking and whisking the egg in the bowl
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior crack_and_whisk_egg(egg:item, bowl:item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

        achieve cut(egg)
        # Whisk the egg to mix it evenly

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        crack_and_whisk_egg(egg, bowl)
        # Perform the operation of cracking the egg into the bowl and whisking it
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_for_whisking(bowl:item):
    # Function to check if a bowl is suitable for whisking
    symbol suitable_bowl = exists prop: item : (is_bowl(bowl) and grabbable(bowl))
    return suitable_bowl

behavior crack_and_whisk_egg(egg:item, bowl:item, whisk:item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

        achieve_once inhand(whisk)
        # Ensure the whisk is held in hand to whisk the egg
        
        achieve clean(whisk)
        # Ensure the whisk is clean before whisking

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and whisked

        bind bowl: item where:
            is_bowl_for_whisking(bowl)
        # Select a suitable bowl for whisking

        bind whisk: item where:
            is_whisk(whisk)
        # Select a whisk for whisking the egg

        crack_and_whisk_egg(egg, bowl, whisk)
        # Perform the action of cracking and whisking the egg

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_whisk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_dessert_2018_around_fridge_289(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#goal_representation
 
def is_whisking_bowl(bowl: item):
    # Function to check if a bowl is suitable for whisking
    symbol suitable_bowl = exists obj: item : (is_bowl(bowl) and grabbable(bowl))
    return suitable_bowl

def is_whisk_item(whisk: item):
    # Function to check if an item is a whisk
    symbol is_whisk = exists whisk_obj: item : (is_whisk(whisk))
    return is_whisk

behavior crack_and_whisk_egg(egg:item, bowl:item, whisk:item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

        achieve clean(whisk)
        # Ensure the whisk is clean before whisking

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and whisked

        bind bowl: item where:
            is_whisking_bowl(bowl)
        # Select a suitable bowl for whisking

        bind whisk: item where:
            is_whisk_item(whisk)
        # Select a whisk for whisking the egg

        crack_and_whisk_egg(egg, bowl, whisk)
        # Perform the action of cracking and whisking the egg

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_whisk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_bowl_2071_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
def is_whisking_bowl(bowl: item):
    # Function to check if a bowl is suitable for whisking
    symbol suitable_bowl = exists obj: item : (is_bowl(bowl) and grabbable(bowl))
    return suitable_bowl

def is_whisk_item(whisk: item):
    # Function to check if an item is a whisk
    symbol whisk_item = exists whisk_obj: item : (is_whisk(whisk))
    return whisk_item

behavior crack_and_whisk_egg(egg: item, bowl: item, whisk: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

        achieve clean(whisk)
        # Ensure the whisk is clean before whisking

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and whisked

        bind bowl: item where:
            is_whisking_bowl(bowl)
        # Select a suitable bowl for whisking

        bind whisk: item where:
            is_whisk_item(whisk)
        # Select a whisk for whisking the egg

        crack_and_whisk_egg(egg, bowl, whisk)
        # Perform the action of cracking and whisking the egg

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 103 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 40
goal generate times: 3
goal correct times: 2
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
