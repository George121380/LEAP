From agent.py
Reset goals: The sub-goals are: 
['1. Identify the bowls and plates that need washing.', '2. Load the identified bowls and plates into the dishwasher.', '3. Start the dishwasher to wash the bowls and plates.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
def has_bowls_or_plates(x:item):
    # Function to check if there are bowls or plates in a specific location
    symbol found_items=exists o: item : ((is_bowl(o) or is_plate(o)) and inside(o, x))
    return found_items

behavior identify_bowls_plates(x:item):
    body:
        achieve visited(x)

behavior __goal__():
    body:
        foreach item: item:
            if is_sink(item) or is_table(item) or is_dishwasher(item):
                if has_bowls_or_plates(item) and not visited(item):
                    identify_bowls_plates(item)
                    # Observe if there are any bowls or plates that need washing
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
def has_dirty_bowls_or_plates(obj:item):
    # Function to check if there are dirty bowls or plates
    symbol has_dirty_items = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty_items

behavior __goal__():
    body:
        foreach o: item:
            if (is_bowl(o) or is_plate(o)) and not visited(o):
                observe(o, "Check if the item is dirty")
                # Observe whether each bowl or plate is dirty

        if exists o: item : ((is_bowl(o) or is_plate(o)) and has_dirty_bowls_or_plates(o)):
            # If dirty bowls or plates are found, proceed to identify them
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and dirty(o):
                    achieve visited(o)
#goal_representation_end

##############################
Error is:
Failed to rename the derived function application.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_bowls_or_plates():
    # Function to check if there are any dirty bowls or plates
    symbol has_dirty = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty

behavior __goal__():
    body:
        if has_dirty_bowls_or_plates():
            # Check if there are dirty bowls or plates based on the available information
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and dirty(o) and not visited(o):
                    observe(o, "Identify if this is a bowl or a plate that needs washing")
        else:
            # If no dirty bowls or plates are found, initiate exploration to locate them
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and not visited(o):
                    observe(o, "Identify if this is a bowl or a plate that needs washing")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_dirty_bowls_or_plates():
    # Function to check if there are any dirty bowls or plates
    symbol has_dirty = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty

behavior __goal__():
    body:
        if has_dirty_bowls_or_plates():
            # Check if there are dirty bowls or plates based on the available information
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and dirty(o) and not visited(o):
                    observe(o, "Identify if this is a bowl or a plate that needs washing")
        else:
            # If no dirty bowls or plates are found, initiate exploration to locate them
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and not visited(o):
                    observe(o, "Identify if this is a bowl or a plate that needs washing")

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2071, sink_42)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(sink_42)exp(bowl_2072, sink_42)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(bowl_2071, sink_42)
Fail to find bowl_2071 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(closetdrawer_150)exp(plate_1000, closetdrawer_150)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(dishwasher_1001)exp(bowl_2072, dishwasher_1001)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Fail to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(bowl_2071, stove_2065)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(stove_2065)exp(bowl_2072, stove_2065)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(closetdrawer_394)exp(plate_1000, closetdrawer_394)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(bowl_2071, stove_2065)
Fail to find bowl_2071 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(bowl_2071, fridge_289)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(fridge_289)exp(bowl_2072, fridge_289)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(fridge_289)exp(plate_1000, fridge_289)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to the dining room, which is designated as dining_room_201. Locate table_226 within the dining room; bowl_2071 is on this table. Look carefully on top of table_226 to find the bowl.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room, which is designated as dining_room_201. Locate table_226 within the dining room; bowl_2071 is on this table. Look carefully on top of table_226 to find the bowl.

The actions you have taken:
Action 1: Walk to sink_42.
Action 2: look for bowl_2071 around sink_42.
Action 3: Walk to kitchen_counter_230.
Action 4: look for bowl_2071 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for bowl_2071 around cupboard_229.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to stove_2065.
Action 12: Open stove_2065.
Action 13: look for bowl_2071 around stove_2065.
Action 14: Walk to fridge_289.
Action 15: Switch off fridge_289.
Action 16: Open fridge_289.

##############################
From agent.py
exp(bowl_2071, fridge_289)
Fail to find bowl_2071 around fridge_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)walk_executor(table_226)exp(plate_1000, table_226)walk_executor(plate_1000)obs(plate_1000, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)walk_executor(bowl_2072)obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
obs(bowl_2071, Identify if this is a bowl or a plate that needs washing)
Get this information:  bowl_2071 is close to table_226. bowl_2071 is close to character_65. bowl_2071 is on table_226. bowl_2071 is inside dining_room_201. bowl_2071 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2072. 
##############################
From agent.py
obs(bowl_2072, Identify if this is a bowl or a plate that needs washing)
Get this information:  bowl_2072 is close to table_226. bowl_2072 is close to character_65. bowl_2072 is on table_226. bowl_2072 is inside dining_room_201. bowl_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_closetdrawer_122(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(plate,closetdrawer_instance)
        else:
            exp(plate,closetdrawer_instance)
    eff:
        unknown[plate]=False
        close[plate,closetdrawer_instance]=True
        close[closetdrawer_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_item_into_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2071
        # Bind to the bowl with ID 2071

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Bind to the dishwasher

        load_item_into_dishwasher(bowl, dishwasher)
        # Load the identified bowl into the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_item_into_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2071
        # Bind to the bowl with ID 2071

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Bind to the dishwasher

        load_item_into_dishwasher(bowl, dishwasher)
        # Load the identified bowl into the dishwasher

##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. 
##############################
From agent.py
putin_executor(bowl_2071, dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. bowl_2071 is close dishwasher_1001. bowl_2071 is inside dishwasher_1001. dishwasher_1001 is close bowl_2071. bowl_2071 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_microwave_297(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(plate,microwave_instance)
        else:
            exp(plate,microwave_instance)
    eff:
        unknown[plate]=False
        close[plate,microwave_instance]=True
        close[microwave_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) 
        # Close the dishwasher door
        
        achieve is_on(dishwasher) 
        # Turn on the dishwasher to start it

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 1001
        # Select the dishwasher with ID 1001

        start_dishwasher(dishwasher)
        # Execute the start operation for the dishwasher
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) 
        # Close the dishwasher door
        
        achieve is_on(dishwasher) 
        # Turn on the dishwasher to start it

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 1001
        # Select the dishwasher with ID 1001

        start_dishwasher(dishwasher)
        # Execute the start operation for the dishwasher
##############################
From agent.py-> find a plan in act()
close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
close_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
wash all the bowls and the plates with dishwasher
Action History:
['walk_executor(sink_42)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'walk_executor(bowl_2072)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2071, dishwasher_1001)', 'close_executor(dishwasher_1001)', 'switchon_executor(dishwasher_1001)']
Time info:
Time consume: 187 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 16
goal generate times: 5
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 10 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
