From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if the item is the book needed")
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if the item is the book needed")
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the item is the book needed)walk_executor(bookshelf_233)exp(book_2067, bookshelf_233)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if the item is the book needed)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the item is the book needed)walk_executor(bookshelf_101)exp(book_2067, bookshelf_101)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if the item is the book needed)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the item is the book needed)walk_executor(bookshelf_354)exp(book_2067, bookshelf_354)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if the item is the book needed)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the item is the book needed)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if the item is the book needed)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Check if the item is the book needed)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Check if the item is the book needed)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        place_book_on_table(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        place_book_on_table(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
grab_executor(book_2067)walk_executor(coffee_table_2068)put_executor(book_2067, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. Grabbing book_2067 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2067, coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2067. book_2067 is close coffee_table_2068. book_2067 is on coffee_table_2068. book_2067 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'grab_executor(book_2067)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2067, coffee_table_2068)']
Time info:
Time consume: 63 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 26
goal generate times: 2
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
