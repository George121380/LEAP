From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the potatoes.', '2. Cut the potatoes into strips.', '3. Fry the potato strips until golden brown.', '4. Place the French fries on a serving plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_shower_38(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_122(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_clean_potatoes(potato:item):
    body:
        if dirty(potato):
            wash(potato)
            # Ensure the potato is clean if it is dirty

behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato, "Locate a potato for cleaning")
                # Find and check each unvisited potato

        foreach potato: item:
            if is_food_potato(potato) and visited(potato):
                find_and_clean_potatoes(potato)
                # Clean each visited potato

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_shower_38(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_clean_potatoes():
    body:
        # Step 1: Bind a potato
        bind potato: item where:
            is_food_potato(potato)
        
        # Step 2: Ensure the potato is cleaned
        achieve clean(potato)

behavior __goal__():
    body:
        # Execute the behavior to find and clean the potatoes
        foreach potato: item:
            if is_food_potato(potato) and not clean(potato):
                # For each potato that is not clean, perform cleaning
                find_and_clean_potatoes()

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_122(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_clean_potatoes(potato:item):
    body:
        observe(potato, "Check if the item is a potato")
        achieve clean(potato)

behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                find_and_clean_potatoes(potato)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_clean_potatoes(potato:item):
    body:
        observe(potato, "Check if the item is a potato")
        achieve clean(potato)

behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                find_and_clean_potatoes(potato)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_potato_2035, stove_2065)walk_executor(food_potato_2035)obs(food_potato_2035, Check if the item is a potato)grab_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(food_potato_2035, stove_2065)
Fail to find food_potato_2035 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)obs(food_potato_2035, Check if the item is a potato)grab_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2035, Check if the item is a potato)
##############################
From agent.py
obs(food_potato_2035, Check if the item is a potato)
Get this information:  food_potato_2035 is inside fridge_289. food_potato_2035 is inside dining_room_201. food_potato_2035 is close to fridge_289. food_potato_2035 is close to character_65. food_potato_2035 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2087_around_closetdrawer_122(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation

behavior cut_potatoes(potatoes:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to cut the potatoes

        achieve on(potatoes, cutting_board)
        # Ensure the potatoes are placed on the cutting board for cutting

        achieve cut(potatoes)
        # Cut the potatoes into strips

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potatoes, cutting_board, knife)
        # Perform the cutting operation on the potatoes

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior cut_potatoes(potatoes:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to cut the potatoes

        achieve on(potatoes, cutting_board)
        # Ensure the potatoes are placed on the cutting board for cutting

        achieve cut(potatoes)
        # Cut the potatoes into strips

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potatoes, cutting_board, knife)
        # Perform the cutting operation on the potatoes

##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2087_around_closetdrawer_377(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

behavior find_cat_2055_around_fryingpan_2083(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(cat,fryingpan_instance)
        else:
            exp(cat,fryingpan_instance)
    eff:
        unknown[cat]=False
        close[cat,fryingpan_instance]=True
        close[fryingpan_instance,cat]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_122(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_fryable(oil:item, pan:item, potato:item):
    # Function to check if the oil, pan, and potato are suitable for frying
    return is_oil(oil) and is_fryingpan(pan) and is_food_potato(potato)

behavior fry_potato_strips(potato_strips:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve inside(oil, fryingpan)
        # Add oil into the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove

        achieve inside(potato_strips, fryingpan)
        # Place the potato strips in the frying pan

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan to monitor the frying process

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the potato strips that are cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potato_strips(potato_strips, fryingpan, oil, stove)
        # Execute the frying of the potato strips until golden brown

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_fryable(oil:item, pan:item, potato:item):
    # Function to check if the oil, pan, and potato are suitable for frying
    return is_oil(oil) and is_fryingpan(pan) and is_food_potato(potato)

behavior fry_potato_strips(potato_strips:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve inside(oil, fryingpan)
        # Add oil into the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove

        achieve inside(potato_strips, fryingpan)
        # Place the potato strips in the frying pan

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan to monitor the frying process

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the potato strips that are cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potato_strips(potato_strips, fryingpan, oil, stove)
        # Execute the frying of the potato strips until golden brown

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve on(fries, plate)
        # Place the French fries on the serving plate

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries)
        # Select the cooked French fries

        bind serving_plate: item where:
            is_plate(serving_plate)
        # Select a suitable serving plate

        place_fries_on_plate(fries, serving_plate)
        # Perform the action of placing the French fries on the serving plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve on(fries, plate)
        # Place the French fries on the serving plate

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries)
        # Select the cooked French fries

        bind serving_plate: item where:
            is_plate(serving_plate)
        # Select a suitable serving plate

        place_fries_on_plate(fries, serving_plate)
        # Perform the action of placing the French fries on the serving plate

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(plate_1000, coffee_table_2068)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the knife_2050. Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(plate_1000, coffee_table_2068)
Fail to find plate_1000 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(plate_1000, table_355)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the knife_2050. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(plate_1000, table_355)
Fail to find plate_1000 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(plate_1000, sink_42)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(plate_1000, sink_42)
Fail to find plate_1000 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to the dining room identified as dining_room_201. There you will find a sink labeled sink_231. The target item, plate_1000, is located directly on top of sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room identified as dining_room_201. There you will find a sink labeled sink_231. The target item, plate_1000, is located directly on top of sink_231.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for food_potato_2035 around stove_2065.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_potato_2035 around fridge_289.
Action 8: Observe around food_potato_2035 with the question of Check if the item is a potato.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_potato_2035.
Action 12: Grab food_potato_2035.
Action 13: Walk to cutting_board_2051.
Action 14: Put food_potato_2035 on cutting_board_2051.
Action 15: Walk to food_potato_2035.
Action 16: Cut food_potato_2035.
Action 17: Walk to oil_2079.
Action 18: Grab oil_2079.
Action 19: Walk to fryingpan_2083.
Action 20: Put oil_2079 into fryingpan_2083.
Action 21: Grab fryingpan_2083.
Action 22: Walk to stove_2065.
Action 23: Put fryingpan_2083 on stove_2065.
Action 24: Switch on stove_2065.
Action 25: Walk to food_potato_2035.
Action 26: Grab food_potato_2035.
Action 27: Walk to fryingpan_2083.
Action 28: Put food_potato_2035 into fryingpan_2083.
Action 29: Walk to coffee_table_2068.
Action 30: look for plate_1000 around coffee_table_2068.
Action 31: Walk to table_226.
Action 32: look for plate_1000 around table_226.
Action 33: Walk to table_355.
Action 34: look for plate_1000 around table_355.
Action 35: Walk to sink_42.
Action 36: look for plate_1000 around sink_42.
Action 37: Walk to cupboard_229.
Action 38: Open cupboard_229.

##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_2022)grab_executor(food_food_2022)walk_executor(plate_1000)put_executor(food_food_2022, plate_1000)
##############################
From agent.py
walk_executor(food_food_2022)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_food_2022. 
##############################
From agent.py
grab_executor(food_food_2022)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_food_2022. Grabbing food_food_2022 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_food_2022. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_food_2022, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_food_2022. Robot is close to the plate_1000. Robot is close to the sink_231. food_food_2022 is close plate_1000. plate_1000 is close food_food_2022. food_food_2022 is on plate_1000. food_food_2022 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the cooked French fries into the plate_1000, which was identified as the serving plate. You found the plate located on sink_231 but placed a different item, food_food_2022, on it instead. Retrieve the correct fries and place them on the plate_1000.
##############################
From agent.py
Human Instruction: You need to place the cooked French fries into the plate_1000, which was identified as the serving plate. You found the plate located on sink_231 but placed a different item, food_food_2022, on it instead. Retrieve the correct fries and place them on the plate_1000.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for food_potato_2035 around stove_2065.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_potato_2035 around fridge_289.
Action 8: Observe around food_potato_2035 with the question of Check if the item is a potato.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_potato_2035.
Action 12: Grab food_potato_2035.
Action 13: Walk to cutting_board_2051.
Action 14: Put food_potato_2035 on cutting_board_2051.
Action 15: Walk to food_potato_2035.
Action 16: Cut food_potato_2035.
Action 17: Walk to oil_2079.
Action 18: Grab oil_2079.
Action 19: Walk to fryingpan_2083.
Action 20: Put oil_2079 into fryingpan_2083.
Action 21: Grab fryingpan_2083.
Action 22: Walk to stove_2065.
Action 23: Put fryingpan_2083 on stove_2065.
Action 24: Switch on stove_2065.
Action 25: Walk to food_potato_2035.
Action 26: Grab food_potato_2035.
Action 27: Walk to fryingpan_2083.
Action 28: Put food_potato_2035 into fryingpan_2083.
Action 29: Walk to coffee_table_2068.
Action 30: look for plate_1000 around coffee_table_2068.
Action 31: Walk to table_226.
Action 32: look for plate_1000 around table_226.
Action 33: Walk to table_355.
Action 34: look for plate_1000 around table_355.
Action 35: Walk to sink_42.
Action 36: look for plate_1000 around sink_42.
Action 37: Walk to cupboard_229.
Action 38: Open cupboard_229.
Action 39: look for plate_1000 around cupboard_229.
Action 40: Walk to sink_231.
Action 41: look for plate_1000 around sink_231.
Action 42: Walk to food_food_2022.
Action 43: Grab food_food_2022.
Action 44: Walk to plate_1000.
Action 45: Put food_food_2022 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve on(fries, plate)
        # Place the fries on the serving plate
        
behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries) and id[fries] == 2035
        # Select the fries that have been cooked 

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the serving plate with ID 1000
        
        place_fries_on_plate(fries, plate)
        # Place the fries on the serving plate

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_powersocket_412(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mouse,powersocket_instance)
        else:
            exp(mouse,powersocket_instance)
    eff:
        unknown[mouse]=False
        close[mouse,powersocket_instance]=True
        close[powersocket_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries)
        # Select the cooked French fries

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the serving plate with ID 1000

        bind food_food_2022: item where:
            id[food_food_2022] == 2022
        # Select the incorrect item currently on the plate

        achieve inside(food_food_2022, sink_231)
        # Remove the incorrect item from the plate and place it into the sink

        achieve on(french_fries, plate)
        # Place the French fries on the serving plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_tvstand_353(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(chair,tvstand_instance)
        else:
            exp(chair,tvstand_instance)
    eff:
        unknown[chair]=False
        close[chair,tvstand_instance]=True
        close[tvstand_instance,chair]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries)
        # Select the cooked French fries

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the serving plate with ID 1000

        bind food_food_2022: item where:
            id[food_food_2022] == 2022
        # Select the incorrect item currently on the plate

        bind sink_231: item where:
            id[sink_231] == 231
        # Select the sink with ID 231

        achieve inside(food_food_2022, sink_231)
        # Remove the incorrect item from the plate and place it into the sink

        achieve on(french_fries, plate)
        # Place the French fries on the serving plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries)
        # Select the cooked French fries

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the serving plate with ID 1000

        bind food_food_2022: item where:
            id[food_food_2022] == 2022
        # Select the incorrect item currently on the plate

        bind sink_231: item where:
            id[sink_231] == 231
        # Select the sink with ID 231

        achieve inside(food_food_2022, sink_231)
        # Remove the incorrect item from the plate and place it into the sink

        achieve on(french_fries, plate)
        # Place the French fries on the serving plate

##############################
From agent.py-> find a plan in act()
grab_executor(food_food_2022)putin_executor(food_food_2022, sink_231)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(plate_1000)put_executor(food_potato_2035, plate_1000)
##############################
From agent.py
grab_executor(food_food_2022)
Robot find: Robot is close to the knife_2050. Robot is close to the food_food_2022. Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing food_food_2022 by left hand. 
##############################
From agent.py
putin_executor(food_food_2022, sink_231)
Robot find: Robot is close to the knife_2050. Robot is close to the food_food_2022. Robot is close to the plate_1000. Robot is close to the sink_231. food_food_2022 is close sink_231. food_food_2022 is inside sink_231. sink_231 is close food_food_2022. food_food_2022 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_potato_2035, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_potato_2035. food_potato_2035 is close plate_1000. food_potato_2035 is on plate_1000. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'walk_executor(coffee_table_2068)', 'walk_executor(table_226)', 'walk_executor(table_355)', 'walk_executor(sink_42)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(sink_231)', 'walk_executor(food_food_2022)', 'grab_executor(food_food_2022)', 'walk_executor(plate_1000)', 'put_executor(food_food_2022, plate_1000)', 'grab_executor(food_food_2022)', 'putin_executor(food_food_2022, sink_231)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(plate_1000)', 'put_executor(food_potato_2035, plate_1000)']
Time info:
Time consume: 254 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 19
goal generate times: 8
goal correct times: 1
action_num: 42

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
