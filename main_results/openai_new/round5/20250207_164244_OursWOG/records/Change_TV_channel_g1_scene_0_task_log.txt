From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV by touching the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def is_television(x: item):
    return True
        
behavior turn_on_tv(tv: item, remote_control:item):
    body:
        achieve is_on(tv)
        # Turn on the TV

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control) and close_char(char, remote_control)
        # Select a remote control that is close to character

        turn_on_tv(tv, remote_control)
        # Turn on the TV by touching the remote control

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        achieve close_char(char, remote_control)
        # Ensure the character is close to the remote control

        achieve is_on(television)
        # Turn on the television

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_television(remote:item, television:item):
    body:
        achieve close_char(char, remote)
        # Move closer to the remote control to interact with it
        achieve is_on(television)
        # Ensure the television is turned on

behavior __goal__():
    body:
        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        turn_on_television(remote, television)
        # Execute the behavior to turn on the television using the remote control
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV by touching the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        bind television: item where:
            is_television(television)
        # Select the television

        achieve close_char(char, remote_control)
        # Move the character closer to the remote control
        
        achieve close_char(char, television)
        # Move the character closer to the television
        
        touch(remote_control)
        # Touch the remote control to operate it
        
        achieve is_on(television)
        # Turn on the television

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_television(tv:item, remote:item):
    body:
        achieve is_on(tv)
        # Turn on the television using the remote control

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        achieve close_char(char, remote)
        # Ensure the character is close to the remote control

        turn_on_television(tv, remote)
        # Execute the action of turning on the television

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(remote_control:item):
    body:
        achieve is_on(tv)
        # Turn on the TV

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television

        turn_on_tv(remote_control)
        # Perform the action to turn on the TV


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: tv; available variables: [Variable<remote_control: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
behavior turn_on_tv(remote_control:item, tv:item):
    body:
        achieve is_on(tv)
        # Turn on the TV

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television

        turn_on_tv(remote_control, tv)
        # Perform the action to turn on the TV

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_tv(remote_control:item, tv:item):
    body:
        achieve is_on(tv)
        # Turn on the TV

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television

        turn_on_tv(remote_control, tv)
        # Perform the action to turn on the TV

##############################
From agent.py-> find a plan in act()
walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
walk_executor(television_248)
Robot find: wall_clock_249, drawing_241, cd_player_2060, mat_236, drawing_242, drawing_243, phone_247, cd_2075, Robot is close to the television_248. Robot is close to the tvstand_225. 
##############################
From agent.py
switchon_executor(television_248)
Robot find: Robot is close to the television_248. Robot is close to the tvstand_225. television_248 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on the TV by touching the remote control. The actions taken did not specify the use of a remote control to turn on the television, which is a key requirement for completing this goal.
##############################
From agent.py
Human Instruction: You need to turn on the TV by touching the remote control. The actions taken did not specify the use of a remote control to turn on the television, which is a key requirement for completing this goal.

The actions you have taken:
Action 1: Walk to television_248.
Action 2: Switch on television_248.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        bind television: item where:
            is_television(television)
        # Select the television

        achieve close_char(char, remote_control)
        # Move close to the remote control

        achieve close_char(char, television)
        # Move close to the television

        achieve is_on(television)
        # Ensure the television is turned on

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control has been located and visited

        achieve_once inhand(remote_control)
        # Pick up the remote control to perform the action

        achieve on(remote_control, char)
        # Ensure the remote control is in possession for interaction

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        achieve close_char(char, television)
        # Move character close to the television 

        touch_remote_control(remote_control)
        # Execute the action to touch the remote control for turning on the television

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: V::remote_control, O::char
Argument #1 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
behavior touch_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control has been located and visited

        achieve_once inhand(remote_control)
        # Pick up the remote control to perform the action

        achieve on(remote_control, char)
        # Ensure the remote control is in possession for interaction

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        achieve close_char(char, remote_control)
        # Move character close to the remote control

        touch_remote_control(remote_control)
        # Execute the action to touch the remote control for turning on the television

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: V::remote_control, O::char
Argument #1 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation

behavior touch_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control has been located and visited

        achieve_once inhand(remote_control)
        # Pick up the remote control to perform the action

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        achieve close_char(char, remote_control)
        # Move character close to the remote control

        touch(remote_control)
        # Execute the action to touch the remote control for turning on the television

        achieve is_on(television)
        # Ensure the television is turned on

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior touch_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control has been located and visited

        achieve_once inhand(remote_control)
        # Pick up the remote control to perform the action

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        achieve close_char(char, remote_control)
        # Move character close to the remote control

        touch(remote_control)
        # Execute the action to touch the remote control for turning on the television

        achieve is_on(television)
        # Ensure the television is turned on

##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_353)exp(remote_control_2052, tvstand_353)walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(tvstand_353)
Robot find: dvd_player_2061, mat_401, drawing_400, Robot is close to the tvstand_353. 
##############################
From agent.py
exp(remote_control_2052, tvstand_353)
Fail to find remote_control_2052 around tvstand_353. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(remote_control_2052, table_355)walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(table_355)
Robot find: headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(remote_control_2052, table_355)
Find remote_control_2052. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(remote_control_2052)
Robot find: Robot is close to the couch_352. Robot is close to the remote_control_2052. 
##############################
From agent.py
touch_executor(remote_control_2052)
Robot find: Robot is close to the couch_352. Robot is close to the remote_control_2052. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the TV by touching the remote control.
Action History:
['walk_executor(television_248)', 'switchon_executor(television_248)', 'walk_executor(tvstand_353)', 'walk_executor(table_355)', 'walk_executor(remote_control_2052)', 'touch_executor(remote_control_2052)']
Time info:
Time consume: 141 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 24
goal generate times: 8
goal correct times: 3
action_num: 6

Task complete rate:
1
Scene_id: 0
##############################
