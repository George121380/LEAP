From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_toilet_paper_2090_around_bathroom_counter_41(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet

        achieve clean(toilet)
        # Ensure the toilet is cleaned using the toilet paper

behavior throw_toilet_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the toilet paper by placing it inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet

        achieve clean(toilet)
        # Ensure the toilet is cleaned using the toilet paper

behavior throw_toilet_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the toilet paper by placing it inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_41)exp(toilet_paper_2090, bathroom_counter_41)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)open_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(toilet_paper_2090, bathroom_counter_41)
Fail to find toilet_paper_2090 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(toilet_paper_2090, bathroom_cabinet_40)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)open_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. 
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. bathroom_cabinet_40 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, bathroom_cabinet_40)
Fail to find toilet_paper_2090 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_37)open_executor(toilet_37)exp(toilet_paper_2090, toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_37)
Robot find: toilet_paper_2090, Robot is close to the toilet_37. 
##############################
From agent.py
open_executor(toilet_37)
Robot find: Robot is close to the toilet_37. toilet_37 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, toilet_37)
Find toilet_paper_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. 
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
walk_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The toilet has not been wiped with the toilet paper. You need to ensure that the action of wiping the toilet with the toilet paper is completed before disposing of it into the toilet.
##############################
From agent.py
Human Instruction: The toilet has not been wiped with the toilet paper. You need to ensure that the action of wiping the toilet with the toilet paper is completed before disposing of it into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_counter_41.
Action 2: look for toilet_paper_2090 around bathroom_counter_41.
Action 3: Walk to bathroom_cabinet_40.
Action 4: Open bathroom_cabinet_40.
Action 5: look for toilet_paper_2090 around bathroom_cabinet_40.
Action 6: Walk to toilet_37.
Action 7: Open toilet_37.
Action 8: look for toilet_paper_2090 around toilet_37.
Action 9: Walk to toilet_paper_2090.
Action 10: Grab toilet_paper_2090.
Action 11: Walk to toilet_37.
Action 12: Put toilet_paper_2090 into toilet_37.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        achieve clean(toilet)
        # Ensure the toilet is wiped clean with the toilet paper

behavior discard_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with the toilet paper

        discard_paper_into_toilet(toilet, toilet_paper)
        # Dispose of the toilet paper into the toilet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wipe_and_throw_toilet_paper(toilet_paper:item, toilet:item):
    body:
        wipe(toilet)
        # Wipe the toilet with the toilet paper

        achieve inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        wipe_and_throw_toilet_paper(toilet_paper, toilet)
        # Execute wiping the toilet and throwing the toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_and_throw_toilet_paper(toilet_paper:item, toilet:item):
    body:
        wipe(toilet)
        # Wipe the toilet with the toilet paper

        achieve inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        wipe_and_throw_toilet_paper(toilet_paper, toilet)
        # Execute wiping the toilet and throwing the toilet paper into the toilet

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_37)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_122(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_and_dispose_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve dirty(toilet) # Ensure the toilet is initially dirty
        wipe(toilet) # Wipe the toilet with the toilet paper
        achieve clean(toilet) # Ensure the toilet is clean after wiping
        achieve inside(toilet_paper, toilet) # Dispose of the toilet paper in the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_and_dispose_toilet_paper(toilet_paper, toilet)
        # Perform the action of wiping the toilet and disposing the paper

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_122(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_napkin_2005_around_closetdrawer_122(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(napkin,closetdrawer_instance)
        else:
            exp(napkin,closetdrawer_instance)
    eff:
        unknown[napkin]=False
        close[napkin,closetdrawer_instance]=True
        close[closetdrawer_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_and_dispose_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve clean(toilet)
        # Ensure the toilet is wiped clean with the toilet paper

        achieve inside(toilet_paper, toilet)
        # Dispose of the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_and_dispose_toilet_paper(toilet, toilet_paper)
        # Perform the action to wipe the toilet and dispose of the toilet paper

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_napkin_2005_around_closetdrawer_122(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(napkin,closetdrawer_instance)
        else:
            exp(napkin,closetdrawer_instance)
    eff:
        unknown[napkin]=False
        close[napkin,closetdrawer_instance]=True
        close[closetdrawer_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve clean(toilet) 
        # Wipe the toilet to make it clean

behavior throw_toilet_paper_in_toilet(toilet_paper:item, toilet:item):
    body:
        achieve inside(toilet_paper, toilet) 
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select the toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Ensure the toilet paper is held in hand to wipe the toilet

        achieve dirty(toilet)
        # Ensure the toilet is dirty before wiping

        achieve clean(toilet)
        # Ensure the toilet is clean after wiping

behavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select the toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve clean(toilet)
        # Wipe the toilet with the toilet paper to ensure it is clean

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Discard the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select the toilet with ID 37

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_150(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Ensure the toilet paper is held in hand to wipe the toilet

        wipe(toilet)
        # Wipe the toilet

behavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Ensure the toilet paper is held in hand to wipe the toilet

        wipe(toilet)
        # Wipe the toilet

behavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2090)wipe_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
wipe_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_counter_41)', 'walk_executor(bathroom_cabinet_40)', 'open_executor(bathroom_cabinet_40)', 'walk_executor(toilet_37)', 'open_executor(toilet_37)', 'walk_executor(toilet_paper_2090)', 'grab_executor(toilet_paper_2090)', 'walk_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)', 'wipe_executor(toilet_37) (Failed)', 'grab_executor(toilet_paper_2090)', 'wipe_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)']
Time info:
Time consume: 197 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 39
goal generate times: 9
goal correct times: 0
action_num: 13

Task complete rate:
1
Scene_id: 0
##############################
