From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup.', '2. Fill the cup with water.', '3. Slice the kiwi and add it to the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_a_cup():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if this is a cup")

behavior __goal__():
    body:
        find_a_cup()

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_a_cup():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if this is a cup")

behavior __goal__():
    body:
        find_a_cup()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)obs(cup_2063, Check if this is a cup)walk_executor(kitchen_counter_230)exp(cup_2064, kitchen_counter_230)walk_executor(cup_2064)obs(cup_2064, Check if this is a cup)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)obs(cup_2063, Check if this is a cup)walk_executor(cup_2064)obs(cup_2064, Check if this is a cup)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Check if this is a cup)
Get this information:  cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230. cup_2063 is inside dining_room_201.
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
obs(cup_2064, Check if this is a cup)
Get this information:  cup_2064 is inside dining_room_201. cup_2064 is close to kitchen_counter_230. cup_2064 is close to character_65. cup_2064 is on kitchen_counter_230.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Move the character close to the faucet

        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup with ID 2064

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)
        # Fill the cup with water using the faucet

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet to fill the cup

        achieve has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup with ID 2064

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the cup

        fill_cup_with_water(cup, faucet)
        # Fill the cup with water

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_cup_with_water(cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_cup_with_water(cup)

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2064)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2064. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, knife:item, cup:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that already has water

        slice_kiwi_and_add_to_cup(kiwi, cutting_board, knife, cup)
        # Slice the kiwi and add it to the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_and_add_kiwi(kiwi:item, cutting_board:item, knife:item, cup:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        slice_and_add_kiwi(kiwi, cutting_board, knife, cup)
        # Execute the slicing and adding of kiwi to the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_and_add_kiwi_to_cup(kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water in it

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_and_add_kiwi_to_cup(kiwi, cup, knife, cutting_board)
        # Perform the operation to slice and add the kiwi to the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water in it

        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_kiwi_and_add_to_cup(kiwi, cup, cutting_board, knife)
        # Perform the slicing and adding operation of the kiwi into the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, knife:item, cup:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that is already filled with water

        slice_kiwi_and_add_to_cup(kiwi, cutting_board, knife, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_bench_228(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(food_kiwi,bench_instance)
        else:
            exp(food_kiwi,bench_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bench_instance]=True
        close[bench_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def is_cutboard_on_surface(cutting_board:item):
    # Function to check if a cutting board is on a surface that can hold items securely
    symbol on_surface=exists o: item : (surfaces(o) and on(cutting_board, o))
    return on_surface

behavior slice_kiwi(kiwi:item, cutting_board:item, knife:item):
    body:
        if not is_cutboard_on_surface(cutting_board):
            achieve on(cutting_board, kitchen_counter) # Ensure the cutting board is on a stable surface
        achieve_once inhand(knife) # Grab the knife to slice the kiwi
        achieve on(kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve cut(kiwi) # Slice the kiwi

behavior add_kiwi_to_cup(sliced_kiwi:item, cup:item):
    body:
        achieve inside(sliced_kiwi, cup) # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi to slice

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water in it

        slice_kiwi(kiwi, cutting_board, knife)
        add_kiwi_to_cup(kiwi, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<kiwi: item>, Variable<cutting_board: item>, Variable<knife: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def is_cutboard_on_surface(cutting_board:item):
    # Function to check if a cutting board is on a surface that can hold items securely
    symbol on_surface=exists o: item : (surfaces(o) and on(cutting_board, o))
    return on_surface

behavior slice_kiwi(kiwi:item, cutting_board:item, knife:item, kitchen_counter:item):
    body:
        if not is_cutboard_on_surface(cutting_board):
            achieve on(cutting_board, kitchen_counter) # Ensure the cutting board is on a stable surface
        achieve_once inhand(knife) # Grab the knife to slice the kiwi
        achieve on(kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve cut(kiwi) # Slice the kiwi

behavior add_kiwi_to_cup(sliced_kiwi:item, cup:item):
    body:
        achieve inside(sliced_kiwi, cup) # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi to slice

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water in it

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        slice_kiwi(kiwi, cutting_board, knife, kitchen_counter)
        add_kiwi_to_cup(kiwi, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def slice_kiwi(kiwi:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

def add_sliced_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve inside(kiwi, cup)
        # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        slice_kiwi(kiwi, cutting_board, knife)
        # Perform the slicing operation on the kiwi

        add_sliced_kiwi_to_cup(kiwi, cup)
        # Add the sliced kiwi to the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5702, column 9.
Expected one of: 
	* __ANON_6
	* __ANON_2
	* PLUS
	* SLASH
	* COMMA
	* __ANON_7
	* AT
	* __ANON_8
	* GREATER_EQ
	* __ANON_3
	* __ANON_4
	* PERCENT
	* __ANON_0
	* LESS_EQ
	* OR
	* SEMICOLON
	* __ANON_1
	* VBAR
	* RSHIFT
	* __ANON_5
	* IF
	* NOT_EQ
	* AMPERSAND
	* STAR
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* LESSTHAN
	* FLOORDIV
	* DOUBLE_EQUAL
	* _NEWLINE
	* EQUAL
	* LSHIFT
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#goal_representation
 
def slice_kiwi(kiwi:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

def add_sliced_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve inside(kiwi, cup)
        # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        slice_kiwi(kiwi, cutting_board, knife)
        # Perform the slicing operation on the kiwi

        add_sliced_kiwi_to_cup(kiwi, cup)
        # Add the sliced kiwi to the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5720, column 9.
Expected one of: 
	* __ANON_6
	* __ANON_2
	* PLUS
	* SLASH
	* COMMA
	* __ANON_7
	* AT
	* __ANON_8
	* GREATER_EQ
	* __ANON_3
	* __ANON_4
	* PERCENT
	* __ANON_0
	* LESS_EQ
	* OR
	* SEMICOLON
	* __ANON_1
	* VBAR
	* RSHIFT
	* __ANON_5
	* IF
	* NOT_EQ
	* AMPERSAND
	* STAR
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* LESSTHAN
	* FLOORDIV
	* DOUBLE_EQUAL
	* _NEWLINE
	* EQUAL
	* LSHIFT
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#goal_representation
 
def slice_kiwi(kiwi:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

def add_sliced_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve inside(kiwi, cup)
        # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        slice_kiwi(kiwi, cutting_board, knife)
        # Perform the slicing operation on the kiwi

        add_sliced_kiwi_to_cup(kiwi, cup)
        # Add the sliced kiwi to the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, knife:item, cup:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi
        
        achieve on(kiwi, cutting_board)
        # Ensure the kiwi is placed on the cutting board for slicing
        
        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi to be sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        slice_kiwi_and_add_to_cup(kiwi, cutting_board, knife, cup)
        # Perform the slicing of kiwi and add it to the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the kiwi

        achieve on(kiwi, cutting_board)
        # Place the kiwi on the cutting board for slicing

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that already contains water

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_kiwi_and_add_to_cup(kiwi, cup, cutting_board, knife)
        # Perform the operation of slicing the kiwi and adding it to the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)']
Time info:
Time consume: 289 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 31
goal generate times: 13
goal correct times: 1
action_num: 7

Task complete rate:
Keystate: k1 - Requires: 14 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
