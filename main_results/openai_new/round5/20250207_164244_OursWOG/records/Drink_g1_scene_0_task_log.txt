From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        observe(cup, "Check if the item is a cup") 

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_cup(cup:item):
    body:
        observe(cup, "Check if the item is a cup") 

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)obs(cup_2063, Check if the item is a cup)walk_executor(kitchen_counter_230)exp(cup_2064, kitchen_counter_230)walk_executor(cup_2064)obs(cup_2064, Check if the item is a cup)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)obs(cup_2063, Check if the item is a cup)walk_executor(cup_2064)obs(cup_2064, Check if the item is a cup)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Check if the item is a cup)
Get this information:  cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230. cup_2063 is inside dining_room_201.
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
obs(cup_2064, Check if the item is a cup)
Get this information:  cup_2064 is inside dining_room_201. cup_2064 is close to kitchen_counter_230. cup_2064 is close to character_65. cup_2064 is on kitchen_counter_230.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill one of the identified cups (cup_2063 or cup_2064) with water to complete the goal of "Get a cup of water."
##############################
From agent.py
Human Instruction: You need to fill one of the identified cups (cup_2063 or cup_2064) with water to complete the goal of "Get a cup of water."

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for cup_2063 around kitchen_counter_230.
Action 3: Walk to cup_2063.
Action 4: Observe around cup_2063 with the question of Check if the item is a cup.
Action 5: Walk to cup_2064.
Action 6: Observe around cup_2064 with the question of Check if the item is a cup.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_water_into_cup(cup:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind water_source: item where:
            has_water(water_source)
        # Assume there is a water source in the scene

        pour_water_into_cup(cup)
        # Perform the action to fill the selected cup with water

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup_2063: item where:
            is_cup(cup_2063) and id[cup_2063] == 2063
        # Select the cup with id 2063

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064] == 2064
        # Select the cup with id 2064

        if not has_water(cup_2063):
            fill_cup_with_water(cup_2063)
        elif not has_water(cup_2064):
            fill_cup_with_water(cup_2064)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('NOT', 'not') at line 5697, column 14.
Expected one of: 
	* __ANON_6
	* __ANON_2
	* PLUS
	* SLASH
	* COMMA
	* __ANON_7
	* AT
	* __ANON_8
	* GREATER_EQ
	* __ANON_3
	* __ANON_4
	* PERCENT
	* __ANON_0
	* LESS_EQ
	* OR
	* SEMICOLON
	* __ANON_1
	* VBAR
	* RSHIFT
	* __ANON_5
	* IF
	* NOT_EQ
	* AMPERSAND
	* STAR
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* LESSTHAN
	* FLOORDIV
	* DOUBLE_EQUAL
	* _NEWLINE
	* EQUAL
	* LSHIFT
	* MINUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#goal_representation
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup_2063: item where:
            is_cup(cup_2063) and id[cup_2063] == 2063
        # Select the cup with id 2063

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064] == 2064
        # Select the cup with id 2064

        if exists cup:item : (is_cup(cup) and not has_water(cup)):
            if not has_water(cup_2063):
                fill_cup_with_water(cup_2063)
            else:
                fill_cup_with_water(cup_2064)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup_2063: item where:
            is_cup(cup_2063) and id[cup_2063] == 2063
        # Select the cup with id 2063

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064] == 2064
        # Select the cup with id 2064

        if exists cup:item : (is_cup(cup) and not has_water(cup)):
            if not has_water(cup_2063):
                fill_cup_with_water(cup_2063)
            else:
                fill_cup_with_water(cup_2064)

##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'walk_executor(cup_2064)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)']
Time info:
Time consume: 79 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 40
goal generate times: 3
goal correct times: 1
action_num: 8

Task complete rate:
1
Scene_id: 0
##############################
