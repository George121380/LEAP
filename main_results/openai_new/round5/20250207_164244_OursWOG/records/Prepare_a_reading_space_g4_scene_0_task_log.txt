From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_place_on_table(book: item, table: item, home_office: item):
    body:
        achieve on(book, table)
        # Place the book on the coffee table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_coffee_table(table) 

        bind home_office: item where:
            is_home_office(home_office)

        find_book_and_place_on_table(book, table, home_office)
        # Find the book and place it on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book_and_place_on_table(book: item, table: item, home_office: item):
    body:
        achieve on(book, table)
        # Place the book on the coffee table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_coffee_table(table) 

        bind home_office: item where:
            is_home_office(home_office)

        find_book_and_place_on_table(book, table, home_office)
        # Find the book and place it on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(table:item, cup:item, milk:item, stove:item):
    body:
        achieve inside(milk, cup) # Fill the cup with milk
        achieve is_on(stove) # Turn on the stove to heat the milk
        achieve once inhand(cup) # Hold the cup in hand to heat it on the stove
        achieve on(cup, table) # Place the cup on the table after the milk is heated

behavior __goal__():
    body:
        bind table: item where:
            is_coffee_table(table)
        # Select the coffee table

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour the milk into

        bind milk: item where:
            is_milk(milk)
        # Select the milk for the hot drink

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk

        achieve inside_char(char, home_office) # Ensure the character is in the home office

        prepare_hot_milk_and_place_on_table(table, cup, milk, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inhand') at line 5714, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_chair_356_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(table:item, cup:item, milk:item, stove:item):
    body:
        achieve inside(milk, cup) # Fill the cup with milk
        achieve is_on(stove) # Turn on the stove to heat the milk
        achieve_once inhand(cup) # Hold the cup in hand to heat it on the stove
        achieve on(cup, table) # Place the cup on the table after the milk is heated

behavior __goal__():
    body:
        bind table: item where:
            is_coffee_table(table)
        # Select the coffee table

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour the milk into

        bind milk: item where:
            is_milk(milk)
        # Select the milk for the hot drink

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk

        achieve inside_char(char, home_office) # Ensure the character is in the home office

        prepare_hot_milk_and_place_on_table(table, cup, milk, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(table:item, cup:item, milk:item, stove:item):
    body:
        achieve inside(milk, cup) # Fill the cup with milk
        achieve is_on(stove) # Turn on the stove to heat the milk
        achieve_once inhand(cup) # Hold the cup in hand to heat it on the stove
        achieve on(cup, table) # Place the cup on the table after the milk is heated

behavior __goal__():
    body:
        bind table: item where:
            is_coffee_table(table)
        # Select the coffee table

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour the milk into

        bind milk: item where:
            is_milk(milk)
        # Select the milk for the hot drink

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk

        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office to ensure characters location

        achieve inside_char(char, home_office) # Ensure the character is in the home office

        prepare_hot_milk_and_place_on_table(table, cup, milk, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)
        # Put the milk in the microwave
        achieve closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior pour_milk(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior put_cup_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Put the cup on the table

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select a coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        heat_milk(milk, microwave)
        # Heat the milk using the microwave

        pour_milk(milk, cup)
        # Pour the hot milk into the cup

        put_cup_on_table(cup, coffee_table)
        # Place the cup of hot milk on the coffee table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_pot_2069_around_table_226(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(milk:item, stove:item, pot:item):
    body:
        achieve inside(milk, pot)
        # Pour milk into the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk

behavior put_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        prepare_hot_milk(milk, stove, pot)
        # Prepare the hot milk

        put_on_table(cup, coffee_table)
        # Put the cup on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_hot_milk(milk:item, stove:item, pot:item):
    body:
        achieve inside(milk, pot)
        # Pour milk into the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk

behavior put_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        prepare_hot_milk(milk, stove, pot)
        # Prepare the hot milk

        put_on_table(cup, coffee_table)
        # Put the cup on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(pot_2069, table_226)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(table_226)exp(cup_2063, table_226)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_238, drawing_239, drawing_240, drawing_242, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(pot_2069, table_226)
Fail to find pot_2069 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)exp(cup_2063, stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. milk_2043 is inside pot_2069. pot_2069 is close milk_2043. milk_2043 is close pot_2069. milk_2043 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the cup_2063. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(cup_2063, coffee_table_2068)
Robot find: Robot is close to the cup_2063. Robot is close to the coffee_table_2068. coffee_table_2068 is close cup_2063. cup_2063 is close coffee_table_2068. cup_2063 is on coffee_table_2068. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to pour the hot milk into the cup and then put the cup on the designated table as specified in the task. Currently, the milk has been prepared but has not yet been transferred to the cup.
##############################
From agent.py
Human Instruction: The robot needs to pour the hot milk into the cup and then put the cup on the designated table as specified in the task. Currently, the milk has been prepared but has not yet been transferred to the cup.

The actions you have taken:
Action 1: Walk to bookshelf_233.
Action 2: Open bookshelf_233.
Action 3: look for book_2066 around bookshelf_233.
Action 4: Walk to bookshelf_101.
Action 5: Open bookshelf_101.
Action 6: look for book_2066 around bookshelf_101.
Action 7: Walk to bookshelf_354.
Action 8: Open bookshelf_354.
Action 9: look for book_2066 around bookshelf_354.
Action 10: Walk to book_2066.
Action 11: Grab book_2066.
Action 12: Walk to coffee_table_2068.
Action 13: Put book_2066 on coffee_table_2068.
Action 14: Walk to table_226.
Action 15: look for pot_2069 around table_226.
Action 16: Walk to stove_2065.
Action 17: Open stove_2065.
Action 18: look for pot_2069 around stove_2065.
Action 19: Walk to fridge_289.
Action 20: Switch off fridge_289.
Action 21: Open fridge_289.
Action 22: look for milk_2043 around fridge_289.
Action 23: Walk to pot_2069.
Action 24: Open pot_2069.
Action 25: Walk to milk_2043.
Action 26: Grab milk_2043.
Action 27: Walk to pot_2069.
Action 28: Put milk_2043 into pot_2069.
Action 29: Grab pot_2069.
Action 30: Walk to stove_2065.
Action 31: Put pot_2069 on stove_2065.
Action 32: Switch on stove_2065.
Action 33: Walk to cup_2063.
Action 34: Grab cup_2063.
Action 35: Walk to coffee_table_2068.
Action 36: Put cup_2063 on coffee_table_2068.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior pour_hot_milk(milk:item, pot:item, cup:item, table:item):
    body:
        achieve inside(milk, pot)
        achieve inside(milk, cup)
        achieve on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind a milk instance

        bind pot: item where:
            is_pot(pot)
        # Bind a pot instance

        bind cup: item where:
            is_cup(cup)
        # Bind a cup instance

        bind table: item where:
            is_table(table)
        # Bind a table instance

        achieve is_milk(milk) and is_pot(pot)
        # Ensure milk is in the pot

        pour_hot_milk(milk, pot, cup, table)
        # Pour hot milk into the cup and place it on the table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior place_on_table(cup:item, coffee_table:item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cup: item where:
            is_cup(cup)
        # Select cup

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        pour_milk_into_cup(milk, cup)
        place_on_table(cup, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior place_on_table(cup:item, coffee_table:item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cup: item where:
            is_cup(cup)
        # Select cup

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        pour_milk_into_cup(milk, cup)
        place_on_table(cup, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffee_table_2068. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffee_table_2068. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)', 'walk_executor(table_226)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(pot_2069)', 'putin_executor(milk_2043, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffee_table_2068)', 'put_executor(cup_2063, coffee_table_2068)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)']
Time info:
Time consume: 271 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 1
goal generate times: 6
goal correct times: 0
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 8 steps
Keystate: k3 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
