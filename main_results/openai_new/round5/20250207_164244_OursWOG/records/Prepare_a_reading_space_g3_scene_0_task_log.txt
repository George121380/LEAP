From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_a_book(bookshelf:item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book=exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_a_book(bookshelf)):
            # Check if there is a bookshelf with a book based on the available information
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_a_book(bookshelf)
            # Select a bookshelf that has a book on it
            achieve close_char(char, bookshelf) 
            # Move the character closer to the bookshelf with the book

        else: 
            # If no bookshelf with a book is found, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check is there any book on the bookshelf")
                    # Observe whether each bookshelf has any book

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_a_book(bookshelf:item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book=exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_a_book(bookshelf)):
            # Check if there is a bookshelf with a book based on the available information
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_a_book(bookshelf)
            # Select a bookshelf that has a book on it
            achieve close_char(char, bookshelf) 
            # Move the character closer to the bookshelf with the book

        else: 
            # If no bookshelf with a book is found, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check is there any book on the bookshelf")
                    # Observe whether each bookshelf has any book

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)obs(bookshelf_101, Check is there any book on the bookshelf)walk_executor(bookshelf_233)open_executor(bookshelf_233)obs(bookshelf_233, Check is there any book on the bookshelf)walk_executor(bookshelf_354)open_executor(bookshelf_354)obs(bookshelf_354, Check is there any book on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
obs(bookshelf_101, Check is there any book on the bookshelf)
Get this information:  bookshelf_101 is on floor_72. bookshelf_101 is facing drawing_174. photoframe_185 is inside bookshelf_101. bookshelf_101 is inside bedroom_67. bookshelf_101 is close to floor_2. bookshelf_101 is close to floor_3. bookshelf_101 is close to wall_12. bookshelf_101 is close to wall_14. bookshelf_101 is close to ceiling_16. bookshelf_101 is close to walllamp_28. bookshelf_101 is close to towel_rack_31. bookshelf_101 is close to towel_rack_32. bookshelf_101 is close to bathroom_counter_41. bookshelf_101 is close to door_44. bookshelf_101 is close to doorjamb_45. bookshelf_101 is close to drawing_176. bookshelf_101 is close to photoframe_185. bookshelf_101 is close to light_64. bookshelf_101 is close to floor_72. bookshelf_101 is close to wall_79. bookshelf_101 is close to wall_82. bookshelf_101 is close to wall_85. bookshelf_101 is close to ceiling_90. bookshelf_101 is close to character_65. bookshelf_101 is CLEAN. bookshelf_101 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
obs(bookshelf_233, Check is there any book on the bookshelf)
Get this information:  bookshelf_233 is facing television_248. bookshelf_233 is on floor_207. bookshelf_233 is inside dining_room_201. bookshelf_233 is close to doorjamb_165. bookshelf_233 is close to mouse_166. bookshelf_233 is close to mousepad_167. bookshelf_233 is close to keyboard_168. bookshelf_233 is close to light_169. bookshelf_233 is close to computer_170. bookshelf_233 is close to cpuscreen_171. bookshelf_233 is close to floor_75. bookshelf_233 is close to floor_76. bookshelf_233 is close to floor_206. bookshelf_233 is close to floor_207. bookshelf_233 is close to wall_209. bookshelf_233 is close to wall_210. bookshelf_233 is close to wall_83. bookshelf_233 is close to wall_84. bookshelf_233 is close to ceiling_218. bookshelf_233 is close to ceiling_93. bookshelf_233 is close to door_222. bookshelf_233 is close to chair_103. bookshelf_233 is close to desk_104. bookshelf_233 is close to character_65. bookshelf_233 is OPEN. bookshelf_233 is DIRTY.
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
obs(bookshelf_354, Check is there any book on the bookshelf)
Get this information:  bookshelf_354 is facing drawing_402. bookshelf_354 is facing drawing_403. bookshelf_354 is facing drawing_404. book_2066 is on bookshelf_354. bookshelf_354 is close to filing_cabinet_399. bookshelf_354 is close to book_2066. bookshelf_354 is close to book_2067. bookshelf_354 is close to drawing_403. bookshelf_354 is close to drawing_402. bookshelf_354 is close to photoframe_430. bookshelf_354 is close to floor_320. bookshelf_354 is close to floor_321. bookshelf_354 is close to wall_332. bookshelf_354 is close to wall_335. bookshelf_354 is close to ceiling_337. bookshelf_354 is close to ceiling_338. bookshelf_354 is close to wall_214. bookshelf_354 is close to wall_215. bookshelf_354 is close to walllamp_350. bookshelf_354 is close to wallshelf_234. bookshelf_354 is close to drawing_241. bookshelf_354 is close to drawing_242. bookshelf_354 is close to drawing_243. bookshelf_354 is close to character_65. photoframe_430 is inside bookshelf_354. bookshelf_354 is on floor_320. book_2067 is on bookshelf_354. bookshelf_354 is inside home_office_319. bookshelf_354 is CLEAN. bookshelf_354 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office

        put_book_on_coffee_table(book, coffee_table)
        # Put the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office

        put_book_on_coffee_table(book, coffee_table)
        # Put the book on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Find the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select a window in the home office

        open_window_in_home_office(window)
        # Open the window in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Find the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select a window in the home office

        open_window_in_home_office(window)
        # Open the window in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(window_348)open_executor(window_348)
##############################
From agent.py
walk_executor(window_348)
Robot find: drawing_400, mat_401, pillow_405, Robot is close to the window_348. 
##############################
From agent.py
open_executor(window_348)
Robot find: Robot is close to the window_348. window_348 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)', 'walk_executor(window_348)', 'open_executor(window_348)']
Time info:
Time consume: 83 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 1
goal generate times: 3
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
