############################################################
When the sub-task is: Turn on the lights in the bedroom and the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Find the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Find the bathroom

        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, bedroom)
        # Select a light in the bedroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select a light in the bathroom

        achieve is_on(bedroom_light)
        # Turn on the bedroom light

        achieve is_on(bathroom_light)
        # Turn on the bathroom light

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the chicken

        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board for slicing

        achieve cut(chicken)
        # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_chicken(chicken, cutting_board, knife)
        # Perform the slicing operation on the chicken

############################################################
When the sub-task is: 1. Identify a table in the dining room and put the milk and egg on it.
A successful representation:
 
def is_in_dining_room(o:item):
    # Function to check if an item is inside the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(o, room))
    return in_dining_room

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind dining_table: item where:
            is_table(dining_table) and is_in_dining_room(dining_table)
        # Select a table inside the dining room

        put_on_table(milk, dining_table)
        # Put milk on the table

        put_on_table(egg, dining_table)
        # Put egg on the table

############################################################
When the sub-task is: 2. Remove all items from the fridge and throw them into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)
                # Throw each item in the fridge into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        throw_items_in_trash(fridge, trashcan)
        # Throw all items in the fridge to the trashcan

############################################################
When the sub-task is: 3. Place the milk and eggs back in the fridge.
A successful representation:
 
behavior put_food_back_in_fridge(food:item, fridge:item):
    body:
        achieve inside(food, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==226
        # Select the table with ID 226 where the milk and eggs are placed

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        put_food_back_in_fridge(milk, fridge)
        put_food_back_in_fridge(eggs, fridge)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: Use a pot to boil water.
A successful representation:
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Select a window inside the bathroom

        open_window(window)
        # Open the window in the bathroom
 
############################################################
When the sub-task is: 1. Find the book and put it on the table in the home office.
A successful representation:
 
def on_home_office_table(book:item, table:item):
    # Function to check if a book is on the home office table
    symbol is_on_table = exists o: item : (o == book and on(o, table))
    return is_on_table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        if not on_home_office_table(book, table):
            # If the book is not on the home office table, put it there
            achieve on(book, table)

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind home_office_light: item where:
            is_light(home_office_light) and inside(home_office_light, home_office)
        # Select a light in the home office

        achieve is_on(home_office_light)
        # Turn on the home office light

############################################################
When the sub-task is: 1. Fry the steak.
A successful representation:
 
behavior fry_steak(steak:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve inside(oil, fryingpan)
        # Add oil into the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove

        achieve inside(steak, fryingpan)
        # Place the steak in the frying pan

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan to monitor the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak to be fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_steak(steak, fryingpan, oil, stove)
        # Execute the frying of the steak

############################################################
When the sub-task is: 2. Cut the steak.
A successful representation:
 
behavior cut_the_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to cut the steak

        achieve on(steak, cutting_board)
        # Ensure the steak is placed on the cutting board for cutting

        achieve cut(steak)
        # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak to be cut

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_the_steak(steak, cutting_board, knife)
        # Perform the cutting operation on the steak

############################################################
When the sub-task is: 3. Put the steak on a plate.
A successful representation:
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        achieve on(steak, plate)
        # Place the steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak, which is already cut

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak

        put_steak_on_plate(steak, plate)
        # Perform the action of putting the steak on the plate

############################################################
When the sub-task is: 1. Find a pizza and a hamburger.
A successful representation:
 
def is_pizza_or_hamburger(o: item):
    # Function to check if an item is pizza or hamburger
    return is_food_pizza(o) or is_food_hamburger(o)

behavior find_food_item(o: item):
    body:
        observe(o, "Check if the item is pizza or hamburger") 

behavior __goal__():
    body:
        foreach o: item:
            if is_pizza_or_hamburger(o) and not visited(o):
                find_food_item(o)

############################################################
When the sub-task is: 2. Put the pizza and the hamburger on a plate.
A successful representation:
behavior place_on_plate(item:item, plate:item):
    body:
        achieve on(item, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(pizza, plate)
        # Put the pizza on the plate

        place_on_plate(hamburger, plate)
        # Put the hamburger on the plate
############################################################
When the sub-task is: 3. Heat the plate with pizza and hamburger in the microwave.
A successful representation:
 
behavior heat_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave) 
        # Place the plate inside the microwave

        achieve closed(microwave)
        # Close the microwave door

        achieve is_on(microwave)
        # Turn on the microwave to heat the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select plate with ID 1000

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_plate_in_microwave(plate, microwave)
        # Execute the heating operation of the plate in the microwave

############################################################
When the sub-task is: 4. Place the heated plate on a table in the dining room.
A successful representation:
 
def is_in_dining_room(o:item):
    # Function to check if an item is inside the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(o, room))
    return in_dining_room

behavior place_heated_plate_on_table(plate:item, table:item):
    body:
        achieve on(plate, table)
        # Place the heated plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        bind dining_table: item where:
            is_table(dining_table) and is_in_dining_room(dining_table)
        # Select a table inside the dining room

        place_heated_plate_on_table(plate, dining_table)
        # Place the heated plate on the dining table

############################################################
When the sub-task is: 1. Find the CD player.
A successful representation:
behavior __goal__():
    body:
        foreach player: item:
            if is_cd_player(player) and not visited(player):
                observe(player, "Check if the item is a CD player")
############################################################
When the sub-task is: 2. Insert the CD into the CD player.
A successful representation:
 
behavior insert_cd(cd:item, cd_player:item):
    body:
        achieve inside(cd, cd_player)
        # Insert the CD into the CD player

behavior __goal__():
    body:
        bind cd: item where:
            is_cd(cd)
        # Select the CD

        bind cd_player: item where:
            is_cd_player(cd_player) and id[cd_player] == 2060
        # Select the CD player with ID 2060

        insert_cd(cd, cd_player)

############################################################
When the sub-task is: 3. Play music using the CD player.
A successful representation:
 
behavior play_music(cd_player:item):
    body:
        achieve is_on(cd_player)

behavior __goal__():
    body:
        bind cd_player: item where:
            is_cd_player(cd_player)
        play_music(cd_player)

############################################################
When the sub-task is: 1. Boil the egg.
A successful representation:
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

############################################################
When the sub-task is: 2. Wash and cut the vegetables.
A successful representation:
 
behavior wash_and_cut_vegetables(vegetable:item, cutting_board:item, knife:item):
    body:
        achieve clean(vegetable)
        # Ensure the vegetables are clean

        achieve_once inhand(knife)
        # Ensure the knife is held in hand to cut the vegetables

        achieve on(vegetable, cutting_board)
        # Ensure the vegetables are placed on the cutting board for cutting

        achieve cut(vegetable)
        # Cut the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable to be washed and cut

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        wash_and_cut_vegetables(vegetable, cutting_board, knife)
        # Perform the operations of washing and cutting the vegetables

############################################################
When the sub-task is: 3. Cut the boiled egg and lemon.
A successful representation:

behavior cut_item(item:item, knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to cut the item

        achieve on(item, cutting_board)
        # Ensure the item is placed on the cutting board for cutting

        achieve cut(item)
        # Cut the item

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_item(boiled_egg, knife, cutting_board)
        cut_item(lemon, knife, cutting_board)

############################################################
When the sub-task is: 4. Mix the boiled egg, vegetables, and lemon in a bowl.
A successful representation:
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve inside(egg, bowl)
        # Place the boiled egg pieces in the bowl

        achieve inside(vegetables, bowl)
        # Place the cut vegetables into the bowl

        achieve inside(lemon, bowl)
        # Add the cut lemon into the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the boiled and cut egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the washed and cut vegetables

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients

        mix_ingredients(egg, vegetables, lemon, bowl)
        # Mix the boiled egg, vegetables, and lemon in the bowl

############################################################
When the sub-task is: Turn on the TV by touching the remote control.
A successful representation:

behavior touch_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control has been located and visited

        achieve_once inhand(remote_control)
        # Pick up the remote control to perform the action

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        achieve close_char(char, remote_control)
        # Move character close to the remote control

        touch(remote_control)
        # Execute the action to touch the remote control for turning on the television

        achieve is_on(television)
        # Ensure the television is turned on

############################################################
When the sub-task is: 1. Find a table in the dining room.
A successful representation:
behavior find_table_in_dining_room():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if there is a table in the dining room")

behavior __goal__():
    body:
        find_table_in_dining_room()
############################################################
When the sub-task is: 2. Place milk, turkey, egg, fish, and chicken on the table.
A successful representation:
 
def is_in_dining_room(o:item):
    # Function to check if an item is inside the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(o, room))
    return in_dining_room

behavior place_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dining_table: item where:
            is_table(dining_table) and is_in_dining_room(dining_table)
        # Select a table inside the dining room

        place_on_table(milk, dining_table)
        # Put milk on the table

        place_on_table(turkey, dining_table)
        # Put turkey on the table

        place_on_table(egg, dining_table)
        # Put egg on the table

        place_on_table(fish, dining_table)
        # Put fish on the table

        place_on_table(chicken, dining_table)
        # Put chicken on the table

############################################################
When the sub-task is: 1. Place the bowls and plates in the dishwasher and start it.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
def has_forks(table:item):
    # Function to check if there are forks on a specified table
    symbol has_fork= exists o: item : (is_fork(o) and on(o, table))
    return has_fork

behavior observe_forks_on_table(table:item):
    body:
        observe(table, "Check if there are forks on the table")

behavior wash_forks(fork:item):
    body:
        wash(fork) 
        # Wash the fork by hand

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 226
        # Select the table with ID 226

        foreach o: item:
            if is_fork(o) and on(o, table):
                wash_forks(o)
        # Wash each fork that is on the table

############################################################
When the sub-task is: 1. Identify the basket containing clothes.
A successful representation:
behavior identify_basket_for_clothes(basket:item):
    body:
        observe(basket, "Check if this is the basket containing clothes")

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        identify_basket_for_clothes(basket)
############################################################
When the sub-task is: 2. Add the clothes and soap to the washing machine.
A successful representation:

behavior add_clothes_and_soap_to_washing_machine(clothes:item, soap:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place the clothes inside the washing machine

        achieve inside(soap, washing_machine)
        # Add the soap into the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Identify the basket containing clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Identify the washing machine

        bind soap: item where:
            is_soap(soap)
        # Identify the soap

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                add_clothes_and_soap_to_washing_machine(clothes, soap, washing_machine)
        # Add all clothes from the basket to the washing machine

############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:
 
behavior turn_on_washing_machine(washing_machine:item):
    body:
        achieve is_on(washing_machine)
        # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2007
        # Select the washing machine with ID 2007

        turn_on_washing_machine(washing_machine)
        # Execute the action to turn on the washing machine

############################################################
When the sub-task is: 1. Peel and slice the bananas.
A successful representation:

behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Ensure the knife is held in hand to slice the banana

        achieve on(banana, cutting_board)
        # Ensure the banana is placed on the cutting board for slicing

        achieve cut(banana)
        # Slice the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Perform the operations of peeling and slicing the banana

############################################################
When the sub-task is: 2. Heat oil in a frying pan.
A successful representation:
 
behavior heat_oil_in_pan(oil:item, frying_pan:item, stove:item):
    body:
        achieve inside(oil, frying_pan)
        # Pour the oil into the frying pan

        achieve on(frying_pan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to heat the oil

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, frying_pan, stove)
        # Execute the procedure to heat the oil in the frying pan

############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        # Select the milk with ID 2043

        fill_cup_with_milk(cup, milk)
        # Fill the selected cup with milk
############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
behavior heat_milk_in_microwave(cup_of_milk:item, microwave:item):
    body:
        achieve inside(cup_of_milk, microwave)
        # Place the cup of milk inside the microwave

        achieve closed(microwave)
        # Close the microwave door

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup_of_milk: item where:
            is_cup(cup_of_milk) and id[cup_of_milk] == 2063
        # Select the cup with ID 2063 filled with milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_milk_in_microwave(cup_of_milk, microwave)
        # Execute the heating operation of the cup of milk in the microwave

############################################################
When the sub-task is: Boil some rice in a pot.
A successful representation:
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be boiled

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_rice_to_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

############################################################
When the sub-task is: Slice the chicken and give it to the cat.
A successful representation:
 
behavior give_sliced_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        # Ensure the sliced chicken is close to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the sliced chicken

        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055

        give_sliced_chicken_to_cat(chicken, cat)
        # Perform the action of giving the sliced chicken to the cat

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Find the bathroom
        
        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select a light in the bathroom

        achieve is_on(bathroom_light)
        # Turn on the bathroom light

############################################################
When the sub-task is: Wipe the toilet with toilet paper, then throw it into the toilet.
A successful representation:
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Ensure the toilet paper is held in hand to wipe the toilet

        wipe(toilet)
        # Wipe the toilet

behavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Dispose of the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet, toilet_paper)

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup_2063: item where:
            is_cup(cup_2063) and id[cup_2063] == 2063
        # Select the cup with id 2063

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064] == 2064
        # Select the cup with id 2064

        if exists cup:item : (is_cup(cup) and not has_water(cup)):
            if not has_water(cup_2063):
                fill_cup_with_water(cup_2063)
            else:
                fill_cup_with_water(cup_2064)

############################################################
When the sub-task is: 1. Identify the fridge with items in it.
A successful representation:
 
behavior identify_fridge_with_items(fridge:item):
    body:
        observe(fridge, "Check if there are any items inside the fridge")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        identify_fridge_with_items(fridge)

############################################################
When the sub-task is: 2. Transfer all the items from the fridge to the trashcan.
A successful representation:
 
behavior transfer_items_from_fridge_to_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)
                # Transfer each item in the fridge to the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge with items

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        transfer_items_from_fridge_to_trash(fridge, trashcan)
        # Transfer all items from the fridge to the trashcan

############################################################
When the sub-task is: Boil the egg.
A successful representation:
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
