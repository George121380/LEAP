From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to my cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_fridge_289(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cat,fridge_instance)
        else:
            exp(cat,fridge_instance)
    eff:
        unknown[cat]=False
        close[cat,fridge_instance]=True
        close[fridge_instance,cat]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chicken_and_cat():
    body:
        # Locate the chicken and cat
        bind chicken: item where:
            is_food_chicken(chicken)
        bind cat: item where:
            is_cat(cat)

behavior slice_chicken(chicken:item):
    body:
        # Achieve a state where the chicken is cut
        achieve cut(chicken)

behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        # Achieve a state where the chicken is on the cat or close to the cat
        achieve on(chicken, cat)

behavior __goal__():
    body:
        find_chicken_and_cat()
        # First, find the chicken and the cat

        bind chicken: item where:
            is_food_chicken(chicken)
        bind cat: item where:
            is_cat(cat)
        # Bind the chicken and cat found by find_chicken_and_cat

        slice_chicken(chicken)
        # Slice the chicken

        give_chicken_to_cat(chicken, cat)
        # Give the sliced chicken to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to my cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken that needs slicing

        bind cat: item where:
            is_cat(cat)
        # Select a cat to give the chicken to

        slice_chicken(chicken)
        # Slice the chicken

        give_chicken_to_cat(chicken, cat)
        # Give the sliced chicken to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to my cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_fridge_289(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cat,fridge_instance)
        else:
            exp(cat,fridge_instance)
    eff:
        unknown[cat]=False
        close[cat,fridge_instance]=True
        close[fridge_instance,cat]=True
    

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) # Ensure the chicken is cut

behavior feed_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat) # Make sure the chicken is close to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a piece of chicken
        bind cat: item where:
            is_cat(cat)
        # Select the cat
        cut_chicken(chicken)
        feed_cat(chicken, cat)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Slice some chicken and give it to my cat.
Action History:
[]
Time info:
Time consume: 171 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
