From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_book(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior prepare_and_place_hot_milk(cup:item, coffee_table:item):
    body:
        bind milk_source: item where:
            is_milk(milk_source)
        # Assuming the hot milk needs to be prepared using a source of milk
        achieve_once inhand(milk_source)
        # Hold the milk (or its container) to prepare hot milk
        
        bind hot_milk: item where:
            is_cup(hot_milk) and pourable(hot_milk) and drinkable(hot_milk)
        # Bind to a cup suitable for holding hot milk

        achieve on(hot_milk, coffee_table)
        # Place the prepared hot milk on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind to a book in the scene

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Bind to the coffee table in the home office

        find_and_place_book(book, coffee_table)
        # Find the book and place it on the coffee table

        bind cup: item where:
            is_cup(cup) and pourable(cup) and drinkable(cup)
        # Bind to a suitable cup

        prepare_and_place_hot_milk(cup, coffee_table)
        # Prepare a cup of hot milk and place it on the table

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior prepare_hot_milk_and_place_on_table(cup:item, coffee_table:item):
    body:
        achieve has_water(cup) # Fill the cup or use existing water to heat milk
        achieve on(cup, coffee_table) # Place the cup on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, is_home_office(coffee_table))
        # Select the coffee table inside the home office
        place_book_on_coffee_table(book, coffee_table)

        bind cup: item where:
            is_cup(cup) and drinkable(cup)
        # Select a cup that is drinkable
        prepare_hot_milk_and_place_on_table(cup, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 109 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 16 steps
Keystate: k3 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
