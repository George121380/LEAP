From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_168_around_desk_104(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation

def needs_to_plug(computer:item):
    # Function to check if the computer needs to be plugged in before being turned on
    symbol not_plugged = unplugged(computer) and has_plug(computer)
    return not_plugged

def find_powersocket(home_office:item):
    # Function to determine if there is a power socket near the computer
    symbol socket_near=exists socket:item: is_powersocket(socket) and close(socket, home_office)
    return socket_near

behavior plug_in(computer:item, socket:item):
    body:
        achieve plugged(computer)
        # Ensure the computer is plugged in

behavior turn_on_device(computer:item):
    body:
        achieve is_on(computer)
        # Turn on the device

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select a computer inside the home office

        if needs_to_plug(computer) and find_powersocket(home_office):
            bind socket: item where:
                is_powersocket(socket) and close(socket, home_office)
            plug_in(computer, socket)
            # If the computer needs to be plugged in and there is a nearby socket, plug it in

        else:
            foreach socket: item:
                if is_powersocket(socket) and not visited(socket):
                    observe(socket, "Check is the socket near the home office")
                    # If no known socket is close, observe to find one

        turn_on_device(computer)
        # Finally, turn the computer on

#goal_representation_end

##############################
From agent.py->reset_goal

def needs_to_plug(computer:item):
    # Function to check if the computer needs to be plugged in before being turned on
    symbol not_plugged = unplugged(computer) and has_plug(computer)
    return not_plugged

def find_powersocket(home_office:item):
    # Function to determine if there is a power socket near the computer
    symbol socket_near=exists socket:item: is_powersocket(socket) and close(socket, home_office)
    return socket_near

behavior plug_in(computer:item, socket:item):
    body:
        achieve plugged(computer)
        # Ensure the computer is plugged in

behavior turn_on_device(computer:item):
    body:
        achieve is_on(computer)
        # Turn on the device

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select a computer inside the home office

        if needs_to_plug(computer) and find_powersocket(home_office):
            bind socket: item where:
                is_powersocket(socket) and close(socket, home_office)
            plug_in(computer, socket)
            # If the computer needs to be plugged in and there is a nearby socket, plug it in

        else:
            foreach socket: item:
                if is_powersocket(socket) and not visited(socket):
                    observe(socket, "Check is the socket near the home office")
                    # If no known socket is close, observe to find one

        turn_on_device(computer)
        # Finally, turn the computer on

##############################
From agent.py-> find a plan in act()
walk_executor(powersocket_246)obs(powersocket_246, Check is the socket near the home office)walk_executor(powersocket_412)obs(powersocket_412, Check is the socket near the home office)walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
walk_executor(powersocket_246)
Find wall_clock_249. Find drawing_243. Find drawing_238. Find phone_247. Robot is inside the dining_room_201. Robot is close to the powersocket_246. Robot is no longer inside bathroom_1.
##############################
From agent.py
obs(powersocket_246, Check is the socket near the home office)
Get this information:  powersocket_246 is facing wall_clock_249. powersocket_246 is facing drawing_243. powersocket_246 is close to trashcan_99. powersocket_246 is close to doorjamb_165. powersocket_246 is close to light_169. powersocket_246 is close to floor_202. powersocket_246 is close to floor_203. powersocket_246 is close to floor_76. powersocket_246 is close to floor_77. powersocket_246 is close to floor_206. powersocket_246 is close to drawing_238. powersocket_246 is close to drawing_174. powersocket_246 is close to wall_209. powersocket_246 is close to wall_211. powersocket_246 is close to wall_84. powersocket_246 is close to light_245. powersocket_246 is close to wall_85. powersocket_246 is close to phone_247. powersocket_246 is close to door_222. powersocket_246 is close to character_65. powersocket_246 is inside dining_room_201. powersocket_246 is CLEAN.
##############################
From agent.py
walk_executor(powersocket_412)
Find mouse_413. Robot is inside the home_office_319. Robot is close to the powersocket_412. Robot is no longer inside dining_room_201.Robot is no longer close powersocket_246.
##############################
From agent.py
obs(powersocket_412, Check is the socket near the home office)
Get this information:  powersocket_412 is inside home_office_319. powersocket_412 is close to computer_417. powersocket_412 is close to tvstand_225. powersocket_412 is close to desk_357. powersocket_412 is close to floor_325. powersocket_412 is close to floor_326. powersocket_412 is close to wall_330. powersocket_412 is close to wall_331. powersocket_412 is close to floor_208. powersocket_412 is close to wall_213. powersocket_412 is close to doorjamb_346. powersocket_412 is close to mouse_413. powersocket_412 is close to mousepad_414. powersocket_412 is close to character_65. powersocket_412 is CLEAN.
##############################
From agent.py
walk_executor(computer_417)
Robot is inside the home_office_319. Robot is close to the computer_417. Robot is no longer close powersocket_412.
##############################
From agent.py
switchon_executor(computer_417)
Robot is inside the home_office_319. Robot is close to the computer_417. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(powersocket_246)', 'walk_executor(powersocket_412)', 'walk_executor(computer_417)', 'switchon_executor(computer_417)']
Time info:
Time consume: 20 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
