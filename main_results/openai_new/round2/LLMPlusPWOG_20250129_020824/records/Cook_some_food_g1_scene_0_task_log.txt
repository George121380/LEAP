From agent.py
Reset goals: The sub-goals are: 
['Boil vegetables with a pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_384(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable_and_pot_stove(stove:item):
    # Function to check if there is a pot and vegetables on a stove
    symbol has_items=exists pot: item : is_pot(pot) and on(pot, stove)
    symbol has_vegetables=exists vegetable: item : is_food_vegetable(vegetable) and on(vegetable, stove)
    return has_items and has_vegetables

def stove_in_use(stove:item):
    # Function to check if the stove is currently in use
    symbol in_use=is_on(stove)
    return in_use

behavior add_water(pot:item):
    body:
        achieve has_water(pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior boil_vegetables(pot:item):
    body:
        # Ensure vegetables are in the pot and the stove is on
        # The boiling process is handled by the system, so no need to specify further actions here
        achieve has_water(pot) # Make sure theres water in the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_vegetable_and_pot_stove(stove)
        # Select a stove with both a pot and vegetables

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and on(vegetables, stove)
        # Select vegetables on the stove

        if not has_water(pot):
            add_water(pot)
        # Ensure there is water in the pot if not already

        if not stove_in_use(stove):
            turn_on_stove(stove)
        # Turn on the stove if it is not already on

        boil_vegetables(pot)
        # Boil the vegetables in the pot

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil vegetables with a pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_384(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

def is_vegetables_clean_and_cut(vegetables:item):
    # Function to check if vegetables are clean and cut
    symbol clean_cut_status=clean(vegetables) and cut(vegetables)
    return clean_cut_status

behavior clean_and_cut_vegetables(vegetables:item, sink:item):
    body:
        if not clean(vegetables):
            achieve_once inside(vegetables, sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                achieve_once is_on(faucet)
                wash(vegetables)
                achieve_once is_off(faucet)

        if not cut(vegetables):
            achieve cut(vegetables)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove) 
        achieve is_on(stove) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select uncooked vegetables
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind stove_faucet: item where:
            is_faucet(stove_faucet) and close(stove_faucet, stove)
        # Select a faucet near the stove for filling the pot

        clean_and_cut_vegetables(vegetables, sink) 
        
        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, stove_faucet)

        achieve_once inside(vegetables, pot)

        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 162 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 22 steps
Keystate: k2 - Requires: 17 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
