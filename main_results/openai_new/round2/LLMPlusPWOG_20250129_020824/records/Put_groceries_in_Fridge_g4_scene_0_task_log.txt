From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cutting_board_2051_around_cupboard_229(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cutting_board,cupboard_instance)
        else:
            exp(cutting_board,cupboard_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,cupboard_instance]=True
        close[cupboard_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item, cutting_board: item):
    body:
        achieve cut(chicken) 
        # Ensure the chicken is cut

behavior put_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        if not cut(chicken):
            achieve on(chicken, cutting_board)
            cut_chicken(chicken, cutting_board)
        # Cut the chicken if its not cut already
        
        put_chicken_in_fridge(chicken, fridge)
        # Put the chicken in the fridge after cutting

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior put_back_to_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        cut_chicken(chicken)
        put_back_to_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) 
        # Ensure that the chicken is cut into pieces

behavior store_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge) 
        # Place the cut chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge item
        
        cut_chicken(chicken)
        store_chicken_in_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Cut the chicken into pieces, then put back to the fridge.
Action History:
[]
Time info:
Time consume: 134 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
