From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_384(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        put_pot_on_stove(pot, stove)
        start_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        put_pot_on_stove(pot, stove)
        start_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside the dining_room_201. Robot is close to the wall_211. Robot is close to the cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside the dining_room_201. Robot is close to the wall_211. Robot is close to the cupboard_229. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_239. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find towel_rack_32. Find towel_rack_34. Find towel_rack_31. Find basket_for_clothes_2006. Robot is inside the bathroom_1. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside the bathroom_1. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside the dining_room_201. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add rice to the pot and ensure that the water in the pot is boiling with the rice.
##############################
From agent.py
Human Instruction: You need to add rice to the pot and ensure that the water in the pot is boiling with the rice.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Grab pot_2069.
Action 8: Walk to faucet_43.
Action 9: Switch on faucet_43.
Action 10: Switch off faucet_43.
Action 11: Walk to stove_2065.
Action 12: Put pot_2069 on stove_2065.
Action 13: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the specified pot
    symbol has_rice=exists o: item: is_food_rice(o) and inside(o, pot)
    return has_rice

behavior ensure_rice_boiling(pot:item, stove:item):
    body:
        # Ensure the pot is on the stove to enable boiling
        achieve on(pot, stove)
        achieve is_on(stove)  # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the specific stove with ID 2065

        if not has_rice_in_pot(pot):
            # If the pot doesnt have rice, observe to ensure rice is added
            observe(pot, "Check if there is any rice in the pot")

        ensure_rice_boiling(pot, stove)
        # Ensure the rice in the pot is boiling by placing it on the stove and turning it on

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_tray_296(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(food_rice,tray_instance)
        else:
            exp(food_rice,tray_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,tray_instance]=True
        close[tray_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot(item: item):
    # Function to check if an item is a pot
    return is_pot(item)

def is_stove(item: item):
    # Function to check if an item is a stove
    return is_stove(item)

def is_faucet(item: item):
    # Function to check if an item is a faucet
    return is_faucet(item)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_water(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) # Ensure the pot is already filled with water
        
        bind stove: item where:
            is_stove(stove) and on(pot, stove) # Ensure pot is on the stove
        
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_water(pot, stove) # Boil the water in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)

behavior ensure_boiling(pot:item):
    body:
        achieve has_water(pot)
        # Water should be inside the pot
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Select a stove where the pot is placed
        achieve is_on(stove)
        # Make sure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on stove 2065
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        add_rice_to_pot(rice, pot)
        ensure_boiling(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 167 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
