From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_pan(pan: item):
    # Function to check if a pan is in the kitchen
    symbol in_kitchen_pan=exists room: item : is_kitchen(room) and inside(pan, room)
    return in_kitchen_pan

def has_egg(on_pan: item):
    # Function to check if there is an egg on a specified pan
    symbol has_egg = exists egg: item : is_food_egg(egg) and on(egg, on_pan)
    return has_egg

def is_oil_present(pan: item):
    # Check if theres oil on the specified pan
    symbol oil_on_pan=exists oil_item: item : is_oil(oil_item) and on(oil_item, pan)
    return oil_on_pan

behavior fry_egg(egg:item, pan:item):
    body:
        achieve on(egg, pan)
        # Place the egg on the pan
        assert is_on(pan)
        # Ensure the pan is on
        achieve is_food_egg(egg)
        # Cook the egg on the pan

behavior prepare_fried_rice_with_egg():
    body:
        bind pan: item where:
            is_fryingpan(pan) and in_kitchen_pan(pan)
        # Select a pan in the kitchen

        bind rice: item where:
            is_food_rice(rice) and on(rice, pan)
        # Select rice on the pan

        bind egg: item where:
            is_food_egg(egg) and not has_egg(pan)
        # Select an egg that is not on the pan

        if not is_oil_present(pan):
            bind oil: item where:
                is_oil(oil)
            # Ensure oil is found
            achieve on(oil, pan)
            # Place oil on the pan before cooking

        fry_egg(egg, pan)
        # Fry the egg on the pan

        achieve inside(rice, pan)
        # Ensure rice is added to the pan

        if not is_on(pan):
            achieve is_on(pan)
        # Ensure the pan is turned on for cooking

behavior __goal__():
    body:
        prepare_fried_rice_with_egg()

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_fryingpan(kitchen_counter:item):
    # Function to check if there is a frying pan on a specified kitchen counter
    symbol has_fryingpan=exists o: item : is_fryingpan(o) and on(o, kitchen_counter)
    return has_fryingpan

def has_egg(food:item):
    # Function to check if there is an egg that is classified as food
    symbol has_egg=exists o: item : is_food_egg(o) and inside(o, food)
    return has_egg

behavior cook_fried_rice_with_egg(fryingpan: item, egg: item):
    body:
        achieve_once inhand(egg)
        achieve on(egg, fryingpan)
        # Ensure the egg is placed on a frying pan
        # (Cooking steps omitted as per task these are intermediate states)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_fryingpan(kitchen_counter)
        # Select a frying pan on the kitchen counter

        bind egg: item where:
            is_food_egg(egg) and has_egg(egg)
        # Select an egg classified as food

        cook_fried_rice_with_egg(fryingpan, egg)
        # Engage the cooking process to make fried rice with egg

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_fried_rice_ingredients(kitchen_counter:item):
    # Function to check if there are ingredients for fried rice on a specified kitchen counter
    symbol has_rice=exists o: item : is_food_rice(o) and on(o, kitchen_counter)
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, kitchen_counter)
    return has_rice and has_egg

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_fried_rice_ingredients(kitchen_counter):
            # Check if there is a kitchen counter with rice and egg based on the available information
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_fried_rice_ingredients(kitchen_counter)
            # Select a kitchen counter that has rice and egg
            achieve close_char(char, kitchen_counter)
            # Move the character closer to the kitchen counter with rice and egg
        
        else:
            # If no kitchen counter with rice and egg is found, initiate exploration to locate one
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    # Check all unvisited kitchen counters
                    observe(kitchen_counter,"Check is there any rice or egg on the kitchen counter")
                    # Observe whether each kitchen counter has rice and egg for fried rice

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_fried_rice_ingredients(kitchen_counter:item):
    # Function to check if there are ingredients for fried rice on a specified kitchen counter
    symbol has_rice=exists o: item : is_food_rice(o) and on(o, kitchen_counter)
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, kitchen_counter)
    return has_rice and has_egg

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_fried_rice_ingredients(kitchen_counter):
            # Check if there is a kitchen counter with rice and egg based on the available information
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_fried_rice_ingredients(kitchen_counter)
            # Select a kitchen counter that has rice and egg
            achieve close_char(char, kitchen_counter)
            # Move the character closer to the kitchen counter with rice and egg
        
        else:
            # If no kitchen counter with rice and egg is found, initiate exploration to locate one
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    # Check all unvisited kitchen counters
                    observe(kitchen_counter,"Check is there any rice or egg on the kitchen counter")
                    # Observe whether each kitchen counter has rice and egg for fried rice

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check is there any rice or egg on the kitchen counter)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_239. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
obs(kitchen_counter_230, Check is there any rice or egg on the kitchen counter)
Get this information:  pot_2069 is on kitchen_counter_230. knife_2050 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. sink_231 is inside kitchen_counter_230. cup_2064 is on kitchen_counter_230. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. cup_2063 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to find and identify rice and eggs on the kitchen counter, as these ingredients are necessary for fried rice with egg. Currently, there is no information indicating the presence of rice or eggs on the kitchen counter. You need to continue exploration to locate the required ingredients.
##############################
From agent.py
Human Instruction: The robot needs to find and identify rice and eggs on the kitchen counter, as these ingredients are necessary for fried rice with egg. Currently, there is no information indicating the presence of rice or eggs on the kitchen counter. You need to continue exploration to locate the required ingredients.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check is there any rice or egg on the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_egg_on_counter(counter:item):
    # Function to check if there are rice or eggs on a specified counter
    symbol has_rice_or_egg=exists o: item : (is_food_rice(o) or is_food_egg(o)) and on(o, counter)
    return has_rice_or_egg

behavior __goal__():
    body:
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter]==230
        # Select kitchen counter with ID 230
        
        if has_rice_or_egg_on_counter(counter):
            achieve close_char(char, counter)
            # If there is rice or egg on the counter, approach it

        else:
            observe(counter, "Check is there any rice or egg on the kitchen counter")
            # Observe if there is rice or egg on the counter if not already confirmed

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_rice_or_egg_on_counter(counter:item):
    # Function to check if there are rice or eggs on a specified counter
    symbol has_rice_or_egg=exists o: item : (is_food_rice(o) or is_food_egg(o)) and on(o, counter)
    return has_rice_or_egg

behavior __goal__():
    body:
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter]==230
        # Select kitchen counter with ID 230
        
        if has_rice_or_egg_on_counter(counter):
            achieve close_char(char, counter)
            # If there is rice or egg on the counter, approach it

        else:
            observe(counter, "Check is there any rice or egg on the kitchen counter")
            # Observe if there is rice or egg on the counter if not already confirmed

##############################
From agent.py-> find a plan in act()
obs(kitchen_counter_230, Check is there any rice or egg on the kitchen counter)
##############################
From agent.py
obs(kitchen_counter_230, Check is there any rice or egg on the kitchen counter)
Get this information:  pot_2069 is on kitchen_counter_230. knife_2050 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. sink_231 is inside kitchen_counter_230. cup_2064 is on kitchen_counter_230. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. cup_2063 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to locate the rice and eggs required for making fried rice with egg. Continue exploring the area or other locations to find these ingredients, as they were not identified on the kitchen counter during the observations.
##############################
From agent.py
Human Instruction: The robot needs to locate the rice and eggs required for making fried rice with egg. Continue exploring the area or other locations to find these ingredients, as they were not identified on the kitchen counter during the observations.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check is there any rice or egg on the kitchen counter.
Action 3: Observe around kitchen_counter_230 with the question of Check is there any rice or egg on the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_egg(kitchen_counter:item):
    # Function to check if there is rice or egg on a specified kitchen counter
    symbol has_rice_or_egg=exists o: item : (is_food_rice(o) or is_food_egg(o)) and on(o, kitchen_counter)
    return has_rice_or_egg

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_rice_or_egg(kitchen_counter):
            # Check if there is a kitchen counter with rice or egg based on the available information
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_rice_or_egg(kitchen_counter)
            # Select a kitchen counter that has rice or egg
            achieve close_char(char, kitchen_counter)
            # Move the character closer to the kitchen counter with rice or egg
        
        else:
            # If no kitchen counter with rice or egg is found, explore to locate one
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    # Check all unvisited kitchen counters
                    observe(kitchen_counter, "Check is there any rice or egg on the kitchen counter")
                    # Observe whether each kitchen counter has any rice or egg

#goal_representation_end

##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)']
Time info:
Time consume: 230 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 17 steps
Keystate: k2 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
