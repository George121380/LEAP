From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Find one of the tables in the dining room.', '3. Put the milk, turkey, eggs, fish, and chicken on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_fish(x: item):
    return is_food(x) and is_food_fish(x)

behavior wash_food(food:item, sink:item):
    body:
        put_inside(food, sink)
        # Ensure the food is placed inside the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_on(faucet)
            # If the sink has a faucet, turn it on to clean the food

        wash(food) # This is the key step of the behavior, used for cleaning food
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        # Select the dirty fish item
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        wash_food(fish, sink)
        # Wash the fish in the sink

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 41 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 23 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
