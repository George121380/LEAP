From agent.py
Reset goals: The sub-goals are: 
["1. Cook some rice if it's not already cooked.", '2. Crack the eggs and scramble them.', '3. Mix the cooked rice with the scrambled eggs and fry together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_oil_2079_around_fridge_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice:item):
    # Function to check if rice is already cooked by checking if it is hot and in a container like a pot or a microwave
    symbol cooked=exists container: item : (is_pot(container) or is_microwave(container)) and inside(rice, container) and is_food_rice(rice)
    return cooked

def is_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior cook_rice():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        if not is_water_in_pot(pot):
            get_water(pot)
            # Get water into the pot if it doesnt have water
        
        put_inside(rice, pot)
        # Place the rice inside the pot

        bind stove: item where:
            is_stove(stove) and close_char(char, stove)
        # Select stove

        switch_on(stove)
        # Turn the stove on to cook the rice
        
        # Add a delay or wait condition in practical systems until rice is cooked

        switch_off(stove)
        # Turn the stove off after cooking

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        if not is_rice_cooked(rice):
            cook_rice()
            # Cook rice if its not already cooked

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs.', '2. Cook the rice.', '3. Fry the rice with the eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_fridge(item: item):
    # Function to check if an item is inside the fridge
    symbol inside_fridge = exists fridge: item : is_fridge(fridge) and inside(item, fridge)
    return inside_fridge

behavior locate_item(category: function):
    body:
        foreach item: item:
            if category(item) and not visited(item):
                observe(item, "Check if it is the required item")

behavior __goal__():
    body:
        if not (exists rice: item: is_food_rice(rice) and is_in_fridge(rice)):
            locate_item(is_food_rice)
        
        if not (exists egg: item: is_food_egg(egg) and is_in_fridge(egg)):
            locate_item(is_food_egg)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 108 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 17 steps
Keystate: k2 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
