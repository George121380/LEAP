From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_on(faucet)
            # If the sink has a faucet, turn it on

        scrub(sink) # Scrub the sink to clean it
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_off(faucet)
            # Turn off the faucet after cleaning

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean
        clean_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_on(faucet)
            scrub(sink)
            rinse(sink)
            switch_off(faucet)
        else:
            scrub(sink)
            rinse(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        clean_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            switch_on(faucet)
            scrub(sink)
            rinse(sink)
            switch_off(faucet)
        else:
            scrub(sink)
            rinse(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        clean_sink(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(sink_42)scrub_executor(sink_42)rinse_executor(sink_42)walk_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Find towel_rack_32. Find towel_rack_34. Find towel_rack_31. Find basket_for_clothes_2006. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(sink_42)
Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Robot is no longer close faucet_43.
##############################
From agent.py
scrub_executor(sink_42)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
rinse_executor(sink_42)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. Robot is no longer close sink_42.
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'walk_executor(sink_42)', 'scrub_executor(sink_42)', 'rinse_executor(sink_42)', 'walk_executor(faucet_43)', 'switchoff_executor(faucet_43)']
Time info:
Time consume: 76 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Action Completion Rate: 1.0
Scene_id: 0
##############################
