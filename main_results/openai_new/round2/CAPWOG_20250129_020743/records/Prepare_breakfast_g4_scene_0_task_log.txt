From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken.', '2. Mix the cooked pasta and chicken together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def has_pasta_or_chicken_pot(pot:item):
    # Function to check if there is pasta or chicken food in a specified pot
    symbol has_pasta_or_chicken=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_pasta_or_chicken

behavior put_on_stove(pot:item, stove:item):
    body:
        put_on(pot, stove) # Place the pot on the stove

behavior start_stove(stove:item):
    body:
        switch_on(stove) # Turn on the stove

behavior boil_pasta_and_cook_chicken(pot:item):
    body:
        # Assume the behavior to manage cooking process, eg, monitoring, stirring, depending on scenario constraints

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind pot: item where:
            is_pot(pot) and has_pasta_or_chicken_pot(pot)
        # Select a pot containing pasta or chicken
        put_on_stove(pot, stove)
        start_stove(stove)
        boil_pasta_and_cook_chicken(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 76 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 17 steps
Keystate: k2 - Requires: 15 steps
Keystate: k3 - Requires: 11 steps
Keystate: k4 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
