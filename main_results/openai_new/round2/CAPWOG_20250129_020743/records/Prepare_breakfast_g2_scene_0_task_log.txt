From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into the frying pan.', "2. Scramble the egg until it's fully cooked."]
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_fryingpan_on(kitchen_counter:item):
    # Function to check if a frying pan is on the specified kitchen counter
    symbol has_fryingpan=exists o: item : is_fryingpan(o) and on(o, kitchen_counter)
    return has_fryingpan

def has_egg_on(kitchen_counter:item):
    # Function to check if there is an egg on the specified kitchen counter
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, kitchen_counter)
    return has_egg

behavior crack_egg_to_fryingpan(egg:item, fryingpan:item):
    body:
        grab(egg)
        # Grab the egg
        walk_to(fryingpan)
        # Walk to the frying pan
        squeeze(egg)
        # Crack the egg into the frying pan
        empty_a_hand()
        # Release the egg shell

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_fryingpan_on(kitchen_counter) and has_egg_on(kitchen_counter):
            # If there is a kitchen counter with a frying pan and an egg, proceed to crack the egg into the frying pan
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_fryingpan_on(kitchen_counter) and has_egg_on(kitchen_counter)
            # Select the kitchen counter with both frying pan and egg
            bind egg: item where:
                is_food_egg(egg) and on(egg, kitchen_counter)
            # Select the egg on the kitchen counter
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter)
            # Select the frying pan on the kitchen counter
            crack_egg_to_fryingpan(egg, fryingpan)
            # Execute the behavior to crack the egg into the frying pan

        else:
            # If no suitable kitchen counter is found, explore to locate a frying pan and egg
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check if there is a frying pan and egg on the counter")

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 58 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
