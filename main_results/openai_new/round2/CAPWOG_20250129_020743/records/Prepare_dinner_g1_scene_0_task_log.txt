From agent.py
Reset goals: The sub-goals are: 
['Boil some rice using a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_in_pot(pot: item):
    # Function to check if there is rice in the pot
    symbol has_rice = exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def is_filled_with_water(pot: item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if close(pot, faucet):
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior boil_rice_in_pot(rice: item, pot: item, stove: item):
    body:
        put_inside(rice, pot)
        walk_to(stove)
        if not is_on(stove):
            switch_on(stove)
        # Assume no need to switch off after boiling In a real scenario, we would switch off after some time

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind to a pot

        bind rice: item where:
            is_food_rice(rice)
        # Bind to rice

        bind stove: item where:
            is_stove(stove)
        # Bind to a stove
        
        if not has_rice_in_pot(pot):
            put_inside(rice, pot)
        # Ensure rice is in the pot

        if not is_filled_with_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)
        # Ensure the pot is filled with water

        boil_rice_in_pot(rice, pot, stove)
        # Boil the rice in the pot using the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 62 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
