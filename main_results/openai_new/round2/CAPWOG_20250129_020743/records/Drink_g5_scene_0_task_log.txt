From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(pot:item):
    # Determine whether the pot is on the kitchen counter
    symbol on_kitchen_counter=exists counter:item: is_kitchen_counter(counter) and on(pot, counter)
    return on_kitchen_counter

behavior get_and_fill_pot_with_water(pot:item):
    body:
        grab(pot)
        bind sink: item where:
            is_sink(sink)
        walk_to(sink)
        get_water(pot)

behavior boil_water_on_stove(pot:item, stove:item):
    body:
        put_on(pot, stove)
        switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot item
        bind stove: item where:
            is_stove(stove)
        # Select stove item
        if exists counter: item : is_kitchen_counter(counter) and on(pot, counter):
            # If the pot is known to be on a kitchen counter
            get_and_fill_pot_with_water(pot)
        else:
            # Search for the pot and fill it with water
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check is there any pot on the kitchen counter")

        boil_water_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 63 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
