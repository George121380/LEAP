From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces and put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2050_around_closetdrawer_150(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_fridge_with_space(fridge:item):
    # Checks if the fridge can receive more items by verifying if it is a recipient
    symbol can_store_more=recipient(fridge)
    return can_store_more

behavior cut_chicken(chicken:item):
    body:
        cuts(chicken) # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        put_inside(chicken, fridge) # Place the chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not cut(chicken)
        # Select a chicken that needs to be cut
        
        cut_chicken(chicken)
        # Cut the chicken into pieces
        
        if exists fridge: item : is_fridge(fridge) and find_fridge_with_space(fridge):
            bind fridge: item where:
                is_fridge(fridge) and find_fridge_with_space(fridge)
            store_in_fridge(chicken, fridge)
            # Store the cut chicken into the fridge if its a recipient
        
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if the fridge can store more items")
                    # Check unvisited fridges for storage capability

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces and put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2050_around_closetdrawer_384(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        put_on(chicken, cutting_board)
        # Place the chicken on the cutting board
        grab(knife)
        # Grab the knife
        cuts(chicken)
        # Cut the chicken into pieces
        empty_a_hand()
        # Release the knife

behavior store_chicken(chicken:item, fridge:item):
    body:
        put_inside(chicken, fridge)
        # Put the chicken pieces back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item that is chicken
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        cut_chicken(chicken, cutting_board, knife)
        store_chicken(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_food(food:item):
    body:
        cuts(food)

behavior store_in_fridge(food:item, fridge:item):
    body:
        put_inside(food, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be cut and stored
        cut_food(chicken)
        # Cut the chicken into pieces
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge for storing the chicken
        store_in_fridge(chicken, fridge)
        # Store the cut pieces back in the fridge

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Cut the chicken into pieces, then put back to the fridge.
Action History:
[]
Time info:
Time consume: 164 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
