From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket thoroughly.', '2. Place the jacket into the washing machine for a complete wash.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_dishwasher_1001(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_384(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation

def check_jacket_condition(jacket:item):
    # Function to verify if the jacket requires hand washing
    symbol is_dirty=dirty(jacket)
    return is_dirty

behavior perform_hand_wash(jacket:item):
    body:
        wash(jacket)
        rinse(jacket)
        squeeze(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select a jacket that needs to be hand washed
        if check_jacket_condition(jacket):
            perform_hand_wash(jacket)
        # If the jacket is dirty, then perform hand washing

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_384(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_jacket_clean(jacket:item):
    # Function to check if the jacket is clean
    symbol clean_status=clean(jacket)
    return clean_status

behavior hand_wash_jacket(jacket: item):
    body:
        wash(jacket) # Hand wash the jacket
        rinse(jacket) # Rinse the jacket after washing
        squeeze(jacket) # Squeeze the jacket to remove excess water

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and dirty(jacket)
        # Select a jacket that is dirty for hand washing
        hand_wash_jacket(jacket)
        assert is_jacket_clean(jacket)
        # Ensure the jacket is clean after the hand wash

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_source(location:item):
    # Function to check if the location has access to water
    symbol water_source=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return water_source

behavior hand_wash(jacket:item, location:item):
    body:
        put_inside(jacket, location)
        # Ensure the jacket is placed at the location for washing
        
        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            switch_on(faucet)
            # Turn on the faucet if theres a water source
        
        wash(jacket)
        scrub(jacket)
        rinse(jacket)
        # Execute washing actions on the jacket
        
        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            switch_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to wash

        bind location: item where:
            is_sink(location)
        # Select a sink location for washing

        hand_wash(jacket, location)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Hand wash the jacket, then wash it by washing machine.
Action History:
[]
Time info:
Time consume: 191 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
