From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_closetdrawer_394(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(toilet_paper,closetdrawer_instance)
        else:
            exp(toilet_paper,closetdrawer_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,closetdrawer_instance]=True
        close[closetdrawer_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        grab(toilet_paper)
        # Grasp the toilet paper
        wipe(toilet)
        # Wipe the toilet to make it clean
        empty_a_hand()
        # Release the toilet paper from hand

behavior discard_toilet_paper(toilet_paper:item, toilet:item):
    body:
        grab(toilet_paper)
        # Grasp the used toilet paper again

        put_inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        wipe_toilet(toilet, toilet_paper)
        # Call the behavior to wipe the toilet

        discard_toilet_paper(toilet_paper, toilet)
        # Call the behavior to throw the used toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper and then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet_paper:item, toilet:item): 
    body:
        wipe(toilet)
        # Wipe the toilet with toilet paper
        put_inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper
        
        bind toilet: item where:
            is_toilet(toilet)
        # Select toilet
        
        wipe_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet(toilet_paper:item, toilet:item): 
    body:
        wipe(toilet)
        # Wipe the toilet with toilet paper
        put_inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper
        
        bind toilet: item where:
            is_toilet(toilet)
        # Select toilet
        
        wipe_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_37)wipe_executor(toilet_37)walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(toilet_paper_2090, bathroom_cabinet_40)walk_executor(toilet_37)open_executor(toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_37)
Find toilet_paper_2090. Find basket_for_clothes_2006. Robot is inside the bathroom_1. Robot is close to the toilet_37. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def can_use_toilet(toilet:item):
    # Function to determine if the toilet can be used (not specified if dirty or clean)
    return True

behavior wipe_and_dispose(toilet:item, toilet_paper:item):
    body:
        wipe(toilet)
        put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and can_use_toilet(toilet)
        # Find toilet that can be used
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Bind toilet paper
        
        wipe_and_dispose(toilet, toilet_paper)

#goal_representation_end

##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(toilet_37)', 'wipe_executor(toilet_37) (Failed)']
Time info:
Time consume: 106 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
Task complete rate:
Keystate: k1 - Requires: 2 steps
Keystate: k2 - Requires: 5 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
