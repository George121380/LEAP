From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_cupboard_131(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_wash_noodles_and_chicken(noodles:item, chicken:item):
    body:
        achieve clean(noodles)
        achieve clean(chicken)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        find_and_wash_noodles_and_chicken(noodles, chicken)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_wash_noodles_and_chicken(noodles:item, chicken:item):
    body:
        achieve clean(noodles)
        achieve clean(chicken)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        find_and_wash_noodles_and_chicken(noodles, chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_noodles_2062, cupboard_131)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)wash_executor(food_noodles_2062)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(food_noodles_2062, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_noodles_2062, cupboard_131)
Fail to find food_noodles_2062 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_noodles_2062, cupboard_130)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)wash_executor(food_noodles_2062)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cupboard_130)exp(food_chicken_2050, cupboard_130)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(food_noodles_2062, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_noodles_2062, cupboard_130)
Fail to find food_noodles_2062 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_noodles_2062, kitchen_counter_132)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)wash_executor(food_noodles_2062)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(food_noodles_2062, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_noodles_2062, kitchen_counter_132)
Fail to find food_noodles_2062 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_noodles_2062, fridge_140)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)wash_executor(food_noodles_2062)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(food_noodles_2062, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_noodles_2062, fridge_140)
Find food_noodles_2062. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Identify the noodles and chicken.', '2. Boil the noodles with the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131]==131
        # Bind cupboard_131 instance

        observe(cupboard_131, "check if food_noodles_2062 is within this cupboard")
        # Check if noodles are in cupboard_131

        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130]==130
        # Bind cupboard_130 instance

        observe(cupboard_130, "check if food_noodles_2062 is within this cupboard")
        # Check if noodles are in cupboard_130

        bind kitchen_counter_132: item where:
            is_kitchen_counter(kitchen_counter_132) and id[kitchen_counter_132]==132
        # Bind kitchen_counter_132 instance

        observe(kitchen_counter_132, "check if food_noodles_2062 is on the kitchen counter")
        # Check if noodles are on kitchen_counter_132

        bind fridge_140: item where:
            is_fridge(fridge_140) and id[fridge_140]==140
        # Bind fridge_140 instance

        if is_on(fridge_140):
            achieve_once is_off(fridge_140)
        # Ensure the fridge is off before opening

        achieve_once open(fridge_140)        
        # Open the fridge to look for items

        observe(fridge_140, "check if food_noodles_2062 or food_chicken is inside the fridge")
        # Inspect inside the fridge for noodles or chicken
      
        achieve_once closed(fridge_140)        
        # Close the fridge after the search
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131]==131
        # Bind cupboard_131 instance

        observe(cupboard_131, "check if food_noodles_2062 is within this cupboard")
        # Check if noodles are in cupboard_131

        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130]==130
        # Bind cupboard_130 instance

        observe(cupboard_130, "check if food_noodles_2062 is within this cupboard")
        # Check if noodles are in cupboard_130

        bind kitchen_counter_132: item where:
            is_kitchen_counter(kitchen_counter_132) and id[kitchen_counter_132]==132
        # Bind kitchen_counter_132 instance

        observe(kitchen_counter_132, "check if food_noodles_2062 is on the kitchen counter")
        # Check if noodles are on kitchen_counter_132

        bind fridge_140: item where:
            is_fridge(fridge_140) and id[fridge_140]==140
        # Bind fridge_140 instance

        if is_on(fridge_140):
            achieve_once is_off(fridge_140)
        # Ensure the fridge is off before opening

        achieve_once open(fridge_140)        
        # Open the fridge to look for items

        observe(fridge_140, "check if food_noodles_2062 or food_chicken is inside the fridge")
        # Inspect inside the fridge for noodles or chicken
      
        achieve_once closed(fridge_140)        
        # Close the fridge after the search
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)obs(cupboard_131, check if food_noodles_2062 is within this cupboard)walk_executor(cupboard_130)obs(cupboard_130, check if food_noodles_2062 is within this cupboard)walk_executor(kitchen_counter_132)obs(kitchen_counter_132, check if food_noodles_2062 is on the kitchen counter)walk_executor(fridge_140)obs(fridge_140, check if food_noodles_2062 or food_chicken is inside the fridge)close_executor(fridge_140)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, check if food_noodles_2062 is within this cupboard)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is CLEAN. cupboard_131 is OPEN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, check if food_noodles_2062 is within this cupboard)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is CLEAN. cupboard_130 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, check if food_noodles_2062 is on the kitchen counter)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is CLEAN. kitchen_counter_132 is OPEN.
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(fridge_140, check if food_noodles_2062 or food_chicken is inside the fridge)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN.
##############################
From agent.py
close_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_coin_2004_around_stove_2090(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(coin,stove_instance)
        else:
            exp(coin,stove_instance)
    eff:
        unknown[coin]=False
        close[coin,stove_instance]=True
        close[stove_instance,coin]=True
    

#exp_behavior_end

#goal_representation

behavior boil_noodles_with_chicken(noodles:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove) 

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_noodles_with_chicken(noodles, chicken, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior boil_noodles_with_chicken(noodles:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove) 

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_noodles_with_chicken(noodles, chicken, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(fridge_140)open_executor(fridge_140)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the fridge_140. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the oven_141. Robot is close to the pot_54. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot does not contain water, a necessary condition for boiling. You need to ensure that the pot has water before moving on to place it on the stove to boil the noodles with the chicken.
##############################
From agent.py
Human Instruction: The pot does not contain water, a necessary condition for boiling. You need to ensure that the pot has water before moving on to place it on the stove to boil the noodles with the chicken.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_noodles_2062 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_noodles_2062 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_noodles_2062 around kitchen_counter_132.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_noodles_2062 around fridge_140.
Action 12: Walk to cupboard_131.
Action 13: Observe around cupboard_131 with the question of check if food_noodles_2062 is within this cupboard.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of check if food_noodles_2062 is within this cupboard.
Action 16: Walk to kitchen_counter_132.
Action 17: Observe around kitchen_counter_132 with the question of check if food_noodles_2062 is on the kitchen counter.
Action 18: Walk to fridge_140.
Action 19: Observe around fridge_140 with the question of check if food_noodles_2062 or food_chicken is inside the fridge.
Action 20: Close fridge_140.
Action 21: Walk to pot_54.
Action 22: Open pot_54.
Action 23: Walk to fridge_140.
Action 24: Open fridge_140.
Action 25: Walk to food_noodles_2062.
Action 26: Grab food_noodles_2062.
Action 27: Walk to pot_54.
Action 28: Put food_noodles_2062 into pot_54.
Action 29: Walk to food_chicken_2050.
Action 30: Grab food_chicken_2050.
Action 31: Walk to pot_54.
Action 32: Put food_chicken_2050 into pot_54.
Action 33: Grab pot_54.
Action 34: Walk to faucet_134.
Action 35: Switch off faucet_134.
Action 36: Walk to stove_2090.
Action 37: Put pot_54 on stove_2090.
Action 38: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot) # Fill the pot with water using the faucet

behavior boil_pot(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents of the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        fill_pot_with_water(pot, faucet)
        boil_pot(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot) # Fill the pot with water using the faucet

behavior boil_pot(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents of the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        fill_pot_with_water(pot, faucet)
        boil_pot(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it on the stove.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before placing it on the stove.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_noodles_2062 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_noodles_2062 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_noodles_2062 around kitchen_counter_132.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_noodles_2062 around fridge_140.
Action 12: Walk to cupboard_131.
Action 13: Observe around cupboard_131 with the question of check if food_noodles_2062 is within this cupboard.
Action 14: Walk to cupboard_130.
Action 15: Observe around cupboard_130 with the question of check if food_noodles_2062 is within this cupboard.
Action 16: Walk to kitchen_counter_132.
Action 17: Observe around kitchen_counter_132 with the question of check if food_noodles_2062 is on the kitchen counter.
Action 18: Walk to fridge_140.
Action 19: Observe around fridge_140 with the question of check if food_noodles_2062 or food_chicken is inside the fridge.
Action 20: Close fridge_140.
Action 21: Walk to pot_54.
Action 22: Open pot_54.
Action 23: Walk to fridge_140.
Action 24: Open fridge_140.
Action 25: Walk to food_noodles_2062.
Action 26: Grab food_noodles_2062.
Action 27: Walk to pot_54.
Action 28: Put food_noodles_2062 into pot_54.
Action 29: Walk to food_chicken_2050.
Action 30: Grab food_chicken_2050.
Action 31: Walk to pot_54.
Action 32: Put food_chicken_2050 into pot_54.
Action 33: Grab pot_54.
Action 34: Walk to faucet_134.
Action 35: Switch off faucet_134.
Action 36: Walk to stove_2090.
Action 37: Put pot_54 on stove_2090.
Action 38: Switch on stove_2090.
Action 39: Grab pot_54.
Action 40: Walk to faucet_308.
Action 41: Switch off faucet_308.
Action 42: Walk to stove_2090.
Action 43: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_noodles_with_chicken(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)
        # Select a pot located in the kitchen for cooking

        bind stove: item where:
            is_stove(stove) and inside(stove, kitchen)
        # Select a stove located in the kitchen for boiling

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, kitchen)
        # Select a faucet located in the kitchen for filling water

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        boil_noodles_with_chicken(pot, stove)
        # Boil the noodles and chicken in the pot placed on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coin_2004_around_pot_2093(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_noodles_with_chicken(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
        # Identify the kitchen where the items are located

        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)
        # Select a pot located in the kitchen for cooking

        bind stove: item where:
            is_stove(stove) and inside(stove, kitchen)
        # Select a stove located in the kitchen for boiling

        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, kitchen)
        # Select a faucet located in the kitchen for filling water

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        boil_noodles_with_chicken(pot, stove)
        # Boil the noodles and chicken in the pot placed on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_coin_2004_around_ceilinglamp_43(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==43
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(coin,ceilinglamp_instance)
        else:
            exp(coin,ceilinglamp_instance)
    eff:
        unknown[coin]=False
        close[coin,ceilinglamp_instance]=True
        close[ceilinglamp_instance,coin]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water using the faucet

behavior boil_noodles_and_chicken(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_noodles_and_chicken(pot, stove) # Boil the noodles and chicken on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water using the faucet

behavior boil_noodles_and_chicken(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_noodles_and_chicken(pot, stove) # Boil the noodles and chicken on the stove
##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it on the stove to properly boil the noodles and chicken.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'close_executor(fridge_140)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 202 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 41

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
