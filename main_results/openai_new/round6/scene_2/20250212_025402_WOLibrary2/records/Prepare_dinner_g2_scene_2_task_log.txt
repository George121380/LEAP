From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Clean and prepare the chicken and onion for roasting.', '3. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_or_onion(item: item):
    # Function to check if an item is either a chicken or an onion
    return is_food_chicken(item) or is_food_onion(item)

behavior __goal__():
    body:
        if exists item: item : (is_chicken_or_onion(item)):
            # Check if there exists an item that is either chicken or onion
            bind item: item where:
                is_chicken_or_onion(item) # Bind the item that is either chicken or onion
            achieve close_char(char, item)
            # Move the character closer to the identified item

        else:
            # If no chicken or onion is found, start observing unvisited items
            foreach item: item:
                if not visited(item) and (is_food(item)):
                    observe(item,"Check if this is chicken or onion")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_chicken_or_onion(item: item):
    # Function to check if an item is either a chicken or an onion
    return is_food_chicken(item) or is_food_onion(item)

behavior __goal__():
    body:
        if exists item: item : (is_chicken_or_onion(item)):
            # Check if there exists an item that is either chicken or onion
            bind item: item where:
                is_chicken_or_onion(item) # Bind the item that is either chicken or onion
            achieve close_char(char, item)
            # Move the character closer to the identified item

        else:
            # If no chicken or onion is found, start observing unvisited items
            foreach item: item:
                if not visited(item) and (is_food(item)):
                    observe(item,"Check if this is chicken or onion")

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(food_onion_2026, cutting_board_2080)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_onion_2026, cutting_board_2080)
Fail to find food_onion_2026 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_132)
Fail to find food_onion_2026 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_stereo_2007_around_desk_261(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item1:item):
    body:
        wash(item1)
        # Wash the item
        achieve clean(item1)
        # Ensure the item is clean

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion to clean
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken to clean
        clean_item(onion)
        clean_item(chicken)
        # Ensure both onion and chicken are cleaned

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_chicken_or_onion(obj: item):
    # Function to check if the object is dirty and either a chicken or an onion
    symbol dirty_chicken_or_onion = (is_food_chicken(obj) or is_food_onion(obj)) and dirty(obj)
    return dirty_chicken_or_onion

behavior clean_item(obj: item):
    # Behavior to clean a dirty item
    body:
        achieve_once clean(obj)

behavior __goal__():
    body:
        foreach obj: item:
            if is_dirty_chicken_or_onion(obj):
                clean_item(obj)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stereo_2007_around_desk_261(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(obj:item):
    body:
        wash(obj)
        # Wash the item
        achieve clean(obj)
        # Ensure the item is clean

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select food_onion_2026
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select food_chicken_2050

        clean_item(onion)
        clean_item(chicken)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven, then turn on the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_oven_141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_onion,oven_instance)
        else:
            exp(food_onion,oven_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,oven_instance]=True
        close[oven_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior insert_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as a food item

        bind onion: item where:
            is_food_onion(onion)
        # Select onion as a food item

        bind oven: item where:
            is_oven(oven) and has_switch(oven)
        # Select an oven that has a switch
        
        insert_items_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)exp(food_onion_2026, oven_141)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
exp(food_onion_2026, oven_141)
Find food_onion_2026. 
##############################
From agent.py-> find a plan in act()
close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has put the chicken in the oven and turned it on; however, it still needs to put the onion in the oven to complete the sub-task.
##############################
From agent.py
Human Instruction: The robot has put the chicken in the oven and turned it on; however, it still needs to put the onion in the oven to complete the sub-task.

Human Guidance: Put the chicken and onion in the oven. Then turn on the oven.
The actions you have taken:
Action 1: Walk to cutting_board_2080.
Action 2: look for food_onion_2026 around cutting_board_2080.
Action 3: Walk to kitchen_counter_132.
Action 4: look for food_onion_2026 around kitchen_counter_132.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to oven_141.
Action 10: Open oven_141.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to oven_141.
Action 14: Put food_chicken_2050 into oven_141.
Action 15: look for food_onion_2026 around oven_141.
Action 16: Close oven_141.
Action 17: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141
        
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        achieve_once open(oven)
        put_onion_in_oven(onion, oven)
        achieve_once closed(oven)
        start_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141
        
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        achieve_once open(oven)
        put_onion_in_oven(onion, oven)
        achieve_once closed(oven)
        start_oven(oven)

##############################
From agent.py-> find a plan in act()
switchoff_executor(oven_141)open_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
switchoff_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned off. 
##############################
From agent.py
open_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to put the onion in the oven.
##############################
From agent.py
Human Instruction: The robot needs to put the onion in the oven.

Human Guidance: Put the chicken and onion in the oven. Then turn on the oven.
The actions you have taken:
Action 1: Walk to cutting_board_2080.
Action 2: look for food_onion_2026 around cutting_board_2080.
Action 3: Walk to kitchen_counter_132.
Action 4: look for food_onion_2026 around kitchen_counter_132.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to oven_141.
Action 10: Open oven_141.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to oven_141.
Action 14: Put food_chicken_2050 into oven_141.
Action 15: look for food_onion_2026 around oven_141.
Action 16: Close oven_141.
Action 17: Switch on oven_141.
Action 18: Switch off oven_141.
Action 19: Open oven_141.
Action 20: Close oven_141.
Action 21: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)
        # Place the item inside the oven

behavior switch_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        put_in_oven(chicken, oven)
        # Put the chicken in the oven
        put_in_oven(onion, oven)
        # Put the onion in the oven
        switch_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141
        
        place_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Place chicken inside the oven
        achieve_once inside(onion, oven) # Place onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven door is closed
        achieve is_on(oven) # Turn on the oven to start cooking

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        put_in_oven(chicken, onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the chicken and onion in the oven, then turn on the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def locate_food_items(oven: item):
    # Function to check if chicken and onion are present in the oven
    symbol has_chicken_and_onion = exists o1: item : (is_food_chicken(o1) and inside(o1, oven)) and exists o2: item : (is_food_onion(o2) and inside(o2, oven))
    return has_chicken_and_onion

behavior place_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the specific oven with ID 141

        if not locate_food_items(oven):
            # If the chicken and onion are not already inside the oven, proceed to place them
            bind food_chicken: item where:
                is_food_chicken(food_chicken) and id[food_chicken] == 2050
            bind food_onion: item where:
                is_food_onion(food_onion) and id[food_onion] == 2026

            place_in_oven(food_chicken, oven)
            place_in_oven(food_onion, oven)

        # Ensure the oven is turned on afterward
        turn_on_oven(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5891, column 108.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_rack_300_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

#goal_representation
 
def locate_food_items(oven: item):
    # Function to check if chicken and onion are present in the oven
    symbol has_chicken_and_onion = exists o1: item : (is_food_chicken(o1) and inside(o1, oven)) and exists o2: item : (is_food_onion(o2) and inside(o2, oven))
    return has_chicken_and_onion

behavior place_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the specific oven with ID 141

        if not locate_food_items(oven):
            # If the chicken and onion are not already inside the oven, proceed to place them
            bind food_chicken: item where:
                is_food_chicken(food_chicken) and id[food_chicken] == 2050
            bind food_onion: item where:
                is_food_onion(food_onion) and id[food_onion] == 2026

            place_in_oven(food_chicken, oven)
            place_in_oven(food_onion, oven)

        # Ensure the oven is turned on afterward
        turn_on_oven(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5891, column 108.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def locate_food_items(oven: item):
    # Function to check if chicken and onion are present in the oven
    symbol has_chicken_and_onion = exists o1: item : (is_food_chicken(o1) and inside(o1, oven)) and exists o: item : (is_food_onion(o) and inside(o, oven))
    return has_chicken_and_onion

behavior place_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the specific oven with ID 141

        if not locate_food_items(oven):
            # If the chicken and onion are not already inside the oven, proceed to place them
            bind food_chicken: item where:
                is_food_chicken(food_chicken) and id[food_chicken] == 2050
            bind food_onion: item where:
                is_food_onion(food_onion) and id[food_onion] == 2026

            place_in_oven(food_chicken, oven)
            place_in_oven(food_onion, oven)

        # Ensure the oven is turned on afterward
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_oven(oven:item):
    body:
        achieve_once open(oven)

behavior put_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior close_oven(oven:item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        open_oven(oven)
        # Open the oven
        put_in_oven(chicken, oven)
        # Put the chicken in the oven
        put_in_oven(onion, oven)
        # Put the onion in the oven
        close_oven(oven)
        # Close the oven
        turn_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_oven(oven:item):
    body:
        achieve_once open(oven)

behavior put_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior close_oven(oven:item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        open_oven(oven)
        # Open the oven
        put_in_oven(chicken, oven)
        # Put the chicken in the oven
        put_in_oven(onion, oven)
        # Put the onion in the oven
        close_oven(oven)
        # Close the oven
        turn_on_oven(oven)
        # Turn on the oven

##############################
From agent.py-> find a plan in act()
switchoff_executor(oven_141)open_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
switchoff_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned off. 
##############################
From agent.py
open_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(cutting_board_2080)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)', 'switchoff_executor(oven_141)', 'open_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)', 'switchoff_executor(oven_141)', 'open_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)']
Time info:
Time consume: 212 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 11
goal correct times: 0
action_num: 21

Task complete rate:
1
Scene_id: 2
##############################
