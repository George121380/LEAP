From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the fish needed for the soup.', '2. Prepare additional ingredients, such as vegetables and spices.', '3. Cook the fish and additional ingredients in a pot of water.', '4. Let the soup simmer until the fish is cooked through and flavors are well combined.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2054_around_cutting_board_2080(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_fish,cutting_board_instance)
        else:
            exp(food_fish,cutting_board_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,cutting_board_instance]=True
        close[cutting_board_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Clean the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        clean_fish(fish)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Clean the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        clean_fish(fish)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(food_fish_2054, cutting_board_2080)walk_executor(food_fish_2054)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_fish_2054, cutting_board_2080)
Fail to find food_fish_2054 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_fish_2054 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetable(vegetable:item):
    body:
        achieve_once clean(vegetable)
        # Wash the vegetable to make it clean

behavior cut_vegetable(vegetable:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable into pieces

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        wash_vegetable(vegetable)
        # Wash the selected vegetable
        
        achieve_once on(vegetable, cutting_board)
        # Place the vegetable on the cutting board
        
        cut_vegetable(vegetable)
        # Cut the vegetable on the cutting board

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetable(vegetable:item):
    body:
        achieve_once clean(vegetable)
        # Wash the vegetable to make it clean

behavior cut_vegetable(vegetable:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable into pieces

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        wash_vegetable(vegetable)
        # Wash the selected vegetable
        
        achieve_once on(vegetable, cutting_board)
        # Place the vegetable on the cutting board
        
        cut_vegetable(vegetable)
        # Cut the vegetable on the cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the food_fish_2054. Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
cut_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot:item):
    body:
        achieve has_water(pot)

behavior cook_fish_and_ingredients(pot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        # Select a cut vegetable
        add_water_to_pot(pot) # Add water to the pot
        cook_fish_and_ingredients(pot, fish, vegetable) # Cook fish and ingredients in the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_pot(pot:item):
    body:
        achieve has_water(pot)

behavior cook_fish_and_ingredients(pot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        # Select a cut vegetable
        add_water_to_pot(pot) # Add water to the pot
        cook_fish_and_ingredients(pot, fish, vegetable) # Cook fish and ingredients in the pot

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(knife_2036, kitchen_counter_128)
Robot find: Robot is close to the food_fish_2054. Robot is close to the knife_2036. Robot is close to the kitchen_counter_128. knife_2036 is close kitchen_counter_128. kitchen_counter_128 is close knife_2036. knife_2036 is on kitchen_counter_128. knife_2036 released by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by left hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior simmer_until_cooked(pot: item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water so the soup can simmer
        achieve is_on(stove)
        # Ensure the stove is turned on so that the soup can simmer
        achieve cut(food_fish_2054)
        # Ensure the fish is cut so it can be adequately cooked and combine flavors
        foreach ingredient: item:
            if is_food_vegetable(ingredient) and inside(ingredient, pot):
                # Check that all additional ingredients, such as vegetables, are inside the pot
                achieve combined_with_fish(ingredient, food_fish_2054)
                # Ensure the vegetables and fish are combined so they can impart flavors while simmering

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for simmering the soup
        simmer_until_cooked(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2094_around_trashcan_360(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(vacuum_cleaner,trashcan_instance)
        else:
            exp(vacuum_cleaner,trashcan_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,trashcan_instance]=True
        close[trashcan_instance,vacuum_cleaner]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
behavior simmer_until_cooked(pot: item, stove: item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water so the soup can simmer
        achieve is_on(stove)
        # Ensure the stove is turned on so that the soup can simmer
        achieve cut(food_fish_2054)
        # Ensure the fish is cut so it can be adequately cooked and combine flavors
        foreach ingredient: item:
            if is_food_vegetable(ingredient) and inside(ingredient, pot):
                # Check that all additional ingredients, such as vegetables, are inside the pot
                achieve combined_with_fish(ingredient, food_fish_2054)
                # Ensure the vegetables and fish are combined so they can impart flavors while simmering

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        # Select a pot and stove for simmering the soup
        simmer_until_cooked(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_fish_2054; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation

def is_food_fish(fish: item):
    # Function to check if the item is a type of fish
    return is_food_fish(fish)

behavior simmer_until_cooked(pot: item, stove: item, fish: item, vegetable: item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water so the soup can simmer
        achieve is_on(stove)
        # Ensure the stove is turned on so that the soup can simmer
        achieve cut(fish)
        # Ensure the fish is cut so it can be adequately cooked and combine flavors
        if is_food_vegetable(vegetable) and inside(vegetable, pot):
            # Check that all additional ingredients, such as vegetables, are inside the pot
            achieve combined_with_fish(vegetable, fish)
            # Ensure the vegetables and fish are combined so they can impart flavors while simmering

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a pot and stove for simmering the soup
        simmer_until_cooked(pot, stove, fish, vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior simmer_soup(pot:item):
    body:
        achieve_once is_on(stove)
        # Set the stove to low heat to begin simmering
        
        achieve inside(pot, stove)
        # Ensure the pot is on the stove for simmering
        
        observe(pot, "Check if the fish is cooked through and flavors are well combined")
        # Periodically check the soup to determine if its done simmering
        
        achieve_once is_off(stove)
        # Turn off the stove once the soup is ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water in it, which contains the soup ingredients
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove for simmering
        
        simmer_soup(pot)
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#goal_representation
 
behavior simmer_soup(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Set the stove to low heat to begin simmering
        
        achieve inside(pot, stove)
        # Ensure the pot is on the stove for simmering
        
        observe(pot, "Check if the fish is cooked through and flavors are well combined")
        # Periodically check the soup to determine if its done simmering
        
        achieve_once is_off(stove)
        # Turn off the stove once the soup is ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water in it, which contains the soup ingredients
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove for simmering
        
        simmer_soup(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior simmer_soup(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Set the stove to low heat to begin simmering
        
        achieve inside(pot, stove)
        # Ensure the pot is on the stove for simmering
        
        observe(pot, "Check if the fish is cooked through and flavors are well combined")
        # Periodically check the soup to determine if its done simmering
        
        achieve_once is_off(stove)
        # Turn off the stove once the soup is ready

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water in it, which contains the soup ingredients
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove for simmering
        
        simmer_soup(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)switchoff_executor(stove_2090)open_executor(stove_2090)putin_executor(pot_54, stove_2090)walk_executor(pot_54)obs(pot_54, Check if the fish is cooked through and flavors are well combined)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned off. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
putin_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 is inside stove_2090. pot_54 released by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. 
##############################
From agent.py
obs(pot_54, Check if the fish is cooked through and flavors are well combined)
Get this information:  food_fish_2054 is inside pot_54. pot_54 is close to character_219. pot_54 is close to stove_2090. food_vegetable_2072 is inside pot_54. pot_54 is inside dining_room_1. pot_54 is inside stove_2090. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(cutting_board_2080)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'wash_executor(food_fish_2054)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(cutting_board_2080)', 'put_executor(food_vegetable_2072, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_vegetable_2072)', 'cut_executor(food_vegetable_2072)', 'walk_executor(kitchen_counter_128)', 'put_executor(knife_2036, kitchen_counter_128)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'switchoff_executor(stove_2090)', 'open_executor(stove_2090)', 'putin_executor(pot_54, stove_2090)', 'walk_executor(pot_54)']
Time info:
Time consume: 205 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 1
action_num: 41

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
