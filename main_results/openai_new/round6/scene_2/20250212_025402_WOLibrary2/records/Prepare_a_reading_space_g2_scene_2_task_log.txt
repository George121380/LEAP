From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the table in the home office.', '3. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book = exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        if exists table: item : (is_table(table) and inside(table, home_office) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and inside(table, home_office) and has_book_on_table(table)
            # Select a table with a book
            achieve close_char(char, table)
            # Move the character closer to the table with the book

        else:
            # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, home_office):
                    # Check all unvisited tables inside the home office
                    observe(table, "Check is there any book on the table")
                    # Observe whether each table has any book

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book = exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        if exists table: item : (is_table(table) and inside(table, home_office) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and inside(table, home_office) and has_book_on_table(table)
            # Select a table with a book
            achieve close_char(char, table)
            # Move the character closer to the table with the book

        else:
            # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, home_office):
                    # Check all unvisited tables inside the home office
                    observe(table, "Check is there any book on the table")
                    # Observe whether each table has any book

##############################
From agent.py-> find a plan in act()
walk_executor(table_193)obs(table_193, Check is there any book on the table)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
obs(table_193, Check is there any book on the table)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to continue searching as no book has been identified on table_193 or in the home office. You should observe other tables in the home office for a book.
##############################
From agent.py
Human Instruction: The robot needs to continue searching as no book has been identified on table_193 or in the home office. You should observe other tables in the home office for a book.

The actions you have taken:
Action 1: Walk to table_193.
Action 2: Observe around table_193 with the question of Check is there any book on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_for_book(table:item):
    body:
        observe(table, "Check is there any book on the table")
        # Observe the specified table to check if theres any book on it

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_table(table) and inside(table, home_office) and not visited(table):
                # Check all tables inside the home office that have not been visited
                observe_for_book(table)
                # Look for a book on each unvisited table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book=exists b: item : (is_book(b) and on(b, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and has_book_on_table(table) # Select a table that has a book on it
            achieve close_char(char, table)
            # Move the character closer to the table with a book
        
        else:
            # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any book on the table")
                    # Observe whether each table has any book

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book=exists b: item : (is_book(b) and on(b, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and has_book_on_table(table) # Select a table that has a book on it
            achieve close_char(char, table)
            # Move the character closer to the table with a book
        
        else:
            # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any book on the table")
                    # Observe whether each table has any book

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Check is there any book on the table)walk_executor(table_127)obs(table_127, Check is there any book on the table)walk_executor(table_193)obs(table_193, Check is there any book on the table)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
obs(table_123, Check is there any book on the table)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
obs(table_127, Check is there any book on the table)
Get this information:  fork_2104 is on table_127. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. plate_2105 is on table_127. table_127 is facing drawing_118. bowl_2097 is on table_127. console_2027 is on table_127. table_127 is inside dining_room_1. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py
obs(table_193, Check is there any book on the table)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for the book because it has not been identified on table_193, table_123, or table_127. Observe other tables in the home office for a book.
##############################
From agent.py
Human Instruction: You need to continue searching for the book because it has not been identified on table_193, table_123, or table_127. Observe other tables in the home office for a book.

The actions you have taken:
Action 1: Walk to table_193.
Action 2: Observe around table_193 with the question of Check is there any book on the table.
Action 3: Walk to table_123.
Action 4: Observe around table_123 with the question of Check is there any book on the table.
Action 5: Walk to table_127.
Action 6: Observe around table_127 with the question of Check is there any book on the table.
Action 7: Walk to table_193.
Action 8: Observe around table_193 with the question of Check is there any book on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and has_book_on_table(table) # The condition has_book_on_table can only be used when you are certain that there is a book on the table In this case, you can be confident because you have already verified it with an if condition
            # Select a table that has a book on it
            achieve close_char(char, table) 
            # Move the character closer to the table with the book

        else: 
           # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any book on the table")
                    # Observe whether each table has a book

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table:item):
    # Function to check if there is a book on the specified table
    symbol has_book = exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and has_book_on_table(table)
            # Select a table that has a book on it
            achieve close_char(char, table) 
            # Move the character closer to the table with the book

        else: 
           # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any book on the table")
                    # Observe whether each table has any book

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def observe_tables_for_book(table:item):
    # Function to observe a table and check for the presence of a book
    if visited(table):
        return False
    observe(table, "Check is there any book on the table")
    return True

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table):
                if observe_tables_for_book(table):
                    break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def observe_tables_for_book(table:item):
    # Function to observe a table and check for the presence of a book
    observe(table, "Check is there any book on the table")
    return visited(table)

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                # Observe each unvisited table in the home office
                if observe_tables_for_book(table):
                    break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def observe_tables_for_book(table:item):
    # Function to observe a table and check for the presence of a book
    observe(table, "Check is there any book on the table")
    return visited(table)

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                # Observe each unvisited table in the home office
                observe_tables_for_book(table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the book." ?
Answer: Find the book on the bookshelf.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_on_bookshelf(book:item, bookshelf:item):
    body:
        if is_readable(book) and on(book, bookshelf):
            achieve close_char(char, bookshelf)
        else:
            observe(bookshelf, "Check for a readable book on the bookshelf")

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf
        bind book: item where:
            is_readable(book)
        # Select a readable book
        find_book_on_bookshelf(book, bookshelf)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_readable not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior find_book_on_bookshelf(book:item, bookshelf:item):
    body:
        if readable(book) and on(book, bookshelf):
            achieve close_char(char, bookshelf)
        else:
            observe(bookshelf, "Check for a readable book on the bookshelf")

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf
        bind book: item where:
            is_book(book) and readable(book)
        # Select a readable book
        find_book_on_bookshelf(book, bookshelf)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_book_on_bookshelf(book:item, bookshelf:item):
    body:
        if readable(book) and on(book, bookshelf):
            achieve close_char(char, bookshelf)
        else:
            observe(bookshelf, "Check for a readable book on the bookshelf")

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf
        bind book: item where:
            is_book(book) and readable(book)
        # Select a readable book
        find_book_on_bookshelf(book, bookshelf)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)obs(bookshelf_136, Check for a readable book on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
obs(bookshelf_136, Check for a readable book on the bookshelf)
Get this information:  bookshelf_136 is on floor_12. bookshelf_136 is on floor_13. book_2091 is on bookshelf_136. bookshelf_136 is close to wall_5. bookshelf_136 is close to wall_10. bookshelf_136 is close to floor_12. bookshelf_136 is close to floor_13. bookshelf_136 is close to floor_18. bookshelf_136 is close to ceiling_25. bookshelf_136 is close to doorjamb_285. bookshelf_136 is close to ceiling_30. bookshelf_136 is close to door_286. bookshelf_136 is close to door_38. bookshelf_136 is close to book_2091. bookshelf_136 is close to floor_336. bookshelf_136 is close to floor_337. bookshelf_136 is close to wall_344. bookshelf_136 is close to wall_345. bookshelf_136 is close to ceiling_355. bookshelf_136 is close to doorjamb_356. bookshelf_136 is close to desk_375. bookshelf_136 is close to computer_379. bookshelf_136 is close to mouse_380. bookshelf_136 is close to mousepad_381. bookshelf_136 is close to keyboard_382. bookshelf_136 is close to cpuscreen_383. bookshelf_136 is close to character_219. bookshelf_136 is inside dining_room_1. bookshelf_136 is CLEAN. bookshelf_136 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office= exists room: item: (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book in hand

        foreach table: item:
            if is_table(table) and is_home_office_table(table) and surfaces(table):
                put_on_table(book, table)
                break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_home_office_table(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item: (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book in hand

        foreach table: item:
            if is_table(table) and is_home_office_table(table) and surfaces(table):
                put_on_table(book, table)
                break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#goal_representation
 
def is_home_office_table(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item: (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book in hand

        foreach table: item:
            if is_table(table) and is_home_office_table(table) and surfaces(table):
                put_on_table(book, table)
                break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office
        place_book_on_table(book, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book found
        
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table in the home office

        place_book_on_table(book, table)
        # Place the book on the selected table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book found

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table in the home office

        place_book_on_table(book, table)
        # Place the book on the selected table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book found

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table in the home office

        place_book_on_table(book, table)
        # Place the book on the selected table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)
        # Turn on the light in the home office

behavior __goal__():
    body:
        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select a light inside the home office
        turn_on_light(light)
        # Turn on the light inside the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)
        # Turn on the light in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select a light inside the home office
        turn_on_light(light)
        # Turn on the light inside the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)
        # Turn on the light in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select a light inside the home office
        turn_on_light(light)
        # Turn on the light inside the home office

##############################
From agent.py-> find a plan in act()
walk_executor(light_217)switchon_executor(light_217)
##############################
From agent.py
walk_executor(light_217)
Robot find: Robot is close to the light_217. 
##############################
From agent.py
switchon_executor(light_217)
Robot find: Robot is close to the light_217. light_217 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(table_193)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(table_193)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(light_217)', 'switchon_executor(light_217)']
Time info:
Time consume: 345 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 11
goal correct times: 5
action_num: 11

Task complete rate:
1
Scene_id: 2
##############################
