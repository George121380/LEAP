From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into the frying pan.', '2. Cook the egg while stirring frequently to scramble it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior crack_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        crack_egg(egg, fryingpan)
        # Crack the egg into the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal

behavior crack_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        crack_egg(egg, fryingpan)
        # Crack the egg into the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(kitchen_counter_132)exp(food_egg_2053, kitchen_counter_132)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_egg_2053, kitchen_counter_132)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_egg_2053, kitchen_counter_132)
Fail to find food_egg_2053 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_egg_2053, cupboard_131)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_egg_2053, cupboard_131)
Fail to find food_egg_2053 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_139)exp(food_egg_2053, stovefan_139)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(stovefan_139)
Robot find: Robot is close to the stovefan_139. 
##############################
From agent.py
exp(food_egg_2053, stovefan_139)
Fail to find food_egg_2053 around stovefan_139. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_286)exp(food_egg_2053, door_286)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(door_286)
Robot find: drawing_296, mat_292, Robot is close to the door_286. 
##############################
From agent.py
exp(food_egg_2053, door_286)
Fail to find food_egg_2053 around door_286. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior scramble_egg(egg:item, pan:item):
    body:
        achieve inside(egg, pan) 
        # The egg is already in the pan as per the completed subtask

behavior stir_egg(egg:item, pan:item):
    body:
        # Continuously stir the egg in the frying pan to scramble it
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pan: item where:
            is_fryingpan(pan)
        achieve is_on(pan)
        scramble_egg(egg, pan)
        stir_egg(egg, pan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_egg_in_fryingpan(fryingpan:item):
    # Function to check if the egg is in the fryingpan
    symbol has_egg=exists o: item : (is_food_egg(o) and inside(o, fryingpan))
    return has_egg

behavior stir_and_scramble(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # This verifies the egg is in the fryingpan before scrambling
        # The actual stirring action isnt explicitly detailed here since the program will determine how to achieve scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind to any fryingpan
        
        bind egg: item where:
            is_food_egg(egg)
        # Bind the food item which is an egg
        
        if ensure_egg_in_fryingpan(fryingpan):
            stir_and_scramble(egg, fryingpan)
        else:
            observe(fryingpan, "Check if the egg is inside the fryingpan")
            # If no egg is found in the fryingpan, observe to verify its presence

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cook_and_stir_egg(egg:item, fryingpan:item):
    body:
        achieve_once on(egg, fryingpan)
        # Ensure the egg is on the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select the visited frying pan

        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        # Select the egg that is already cracked into the frying pan

        cook_and_stir_egg(egg, fryingpan)
        # Cook and stir the egg in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. cook the egg while stirring frequently to scramble it." ?
Answer: The part of the plan that deviates is putting the egg directly in the pan without preparing the pan first. Follow these steps to cook the egg: Put the pan on the stove. Turn on the stove. Put oil in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Scramble the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        put_pan_on_stove(pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        put_pan_on_stove(pan, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2090)
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour the specified oil into the identified pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the fryingpan on the stove
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan) # Pour oil into the pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
 
behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour the specified oil into the identified pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the fryingpan on the stove
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan) # Pour oil into the pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour the specified oil into the identified pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the fryingpan on the stove
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan) # Pour oil into the pan

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the oil_2102. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot find: Robot is close to the oil_2102. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. oil_2102 is close fryingpan_2107. oil_2102 is inside fryingpan_2107. fryingpan_2107 is close oil_2102. oil_2102 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_pan(fryingpan:item, egg:item):
    body:
        achieve cut(egg)
        # The egg must be scrambled, indicating it should be cut in some fashion

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2090)
        # Select the frying pan on the stove
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)
        # Select the egg in the frying pan

        scramble_egg_in_pan(fryingpan, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior scramble_egg_in_pan(fryingpan:item, egg:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)

        scramble_egg_in_pan(fryingpan, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_egg_in_pan(fryingpan:item, egg:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)

        scramble_egg_in_pan(fryingpan, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_egg_2053. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_sink_307(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_in_pan(pan:item):
    # Function to check if an egg is in the pan
    symbol egg_in_pan = exists o: item: (is_food_egg(o) and inside(o, pan))
    return egg_in_pan

behavior scramble_egg_in_pan(egg:item):
    body:
        achieve open(egg)
        # Crack the egg open
        achieve cut(egg)
        # Stir the egg while it is cooking in the pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        if is_egg_in_pan(pan):
            bind egg: item where:
                is_food_egg(egg) and inside(egg, pan)
            # Use the egg inside the pan
            scramble_egg_in_pan(egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_sink_307(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg) # For simplicity, assume the scrambling process relates to the cut state
        achieve inside(egg, pan) # Ensure the scrambled egg ends up inside the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) 
        # Select the egg instance
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance
        
        scramble_egg_in_pan(egg, pan) # Scramble the egg in the pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg) # For simplicity, assume the scrambling process relates to the cut state
        achieve inside(egg, pan) # Ensure the scrambled egg ends up inside the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) 
        # Select the egg instance
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance
        
        scramble_egg_in_pan(egg, pan) # Scramble the egg in the pan

##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(knife_2036, sink_307)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Locate the dining room, identified as dining_room_1. Inside dining_room_1, you will find a dishwasher labeled dishwasher_143. The target item, knife_2036, is inside this dishwasher_143.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate the dining room, identified as dining_room_1. Inside dining_room_1, you will find a dishwasher labeled dishwasher_143. The target item, knife_2036, is inside this dishwasher_143.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for fryingpan_2107 around stove_2090.
Action 4: Walk to kitchen_counter_132.
Action 5: look for food_egg_2053 around kitchen_counter_132.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for food_egg_2053 around cupboard_131.
Action 9: Walk to stovefan_139.
Action 10: look for food_egg_2053 around stovefan_139.
Action 11: Walk to door_286.
Action 12: look for food_egg_2053 around door_286.
Action 13: Walk to fridge_140.
Action 14: Switch off fridge_140.
Action 15: Open fridge_140.
Action 16: look for food_egg_2053 around fridge_140.
Action 17: Grab food_egg_2053.
Action 18: Walk to fryingpan_2107.
Action 19: Put food_egg_2053 into fryingpan_2107.
Action 20: Grab fryingpan_2107.
Action 21: Walk to stove_2090.
Action 22: Put fryingpan_2107 on stove_2090.
Action 23: Switch on stove_2090.
Action 24: Walk to oil_2102.
Action 25: Grab oil_2102.
Action 26: Walk to fryingpan_2107.
Action 27: Put oil_2102 into fryingpan_2107.
Action 28: Walk to food_egg_2053.
Action 29: Grab food_egg_2053.
Action 30: Walk to cutting_board_2080.
Action 31: Put food_egg_2053 on cutting_board_2080.
Action 32: Walk to knifeblock_52.
Action 33: look for knife_2036 around knifeblock_52.
Action 34: Walk to sink_307.

##############################
From agent.py
exp(knife_2036, sink_307)
Fail to find knife_2036 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
cut_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(stovefan_139)', 'walk_executor(door_286)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(fryingpan_2107)', 'putin_executor(oil_2102, fryingpan_2107)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(sink_307)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_egg_2053)', 'cut_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)']
Time info:
Time consume: 286 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 10
goal correct times: 2
action_num: 35

Task complete rate:
1
Scene_id: 2
##############################
