From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat them in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2065_around_stove_2090(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_pizza,stove_instance)
        else:
            exp(food_pizza,stove_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,stove_instance]=True
        close[stove_instance,food_pizza]=True
    

behavior find_food_hamburger_2057_around_kitchen_counter_132(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
def is_pizza_or_hamburger(o:item):
    # Function to check if an item is pizza or hamburger
    return is_food_pizza(o) or is_food_hamburger(o)

behavior find_pizza_and_hamburger():
    body:
        foreach o: item:
            if is_pizza_or_hamburger(o):
                achieve visited(o)
                # Mark each found pizza or hamburger as visited

behavior __goal__():
    body:
        find_pizza_and_hamburger()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pizza_or_hamburger(o:item):
    # Function to check if an item is pizza or hamburger
    return is_food_pizza(o) or is_food_hamburger(o)

behavior find_pizza_and_hamburger():
    body:
        foreach o: item:
            if is_pizza_or_hamburger(o):
                achieve visited(o)
                # Mark each found pizza or hamburger as visited

behavior __goal__():
    body:
        find_pizza_and_hamburger()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_hamburger_2057, kitchen_counter_132)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, look around this place)walk_executor(stove_2090)open_executor(stove_2090)exp(food_pizza_2065, stove_2090)walk_executor(food_pizza_2065)obs(food_pizza_2065, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_hamburger_2057, kitchen_counter_132)
Fail to find food_hamburger_2057 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_hamburger_2057, cupboard_131)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, look around this place)walk_executor(cupboard_131)exp(food_pizza_2065, cupboard_131)walk_executor(food_pizza_2065)obs(food_pizza_2065, look around this place)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_hamburger_2057, cupboard_131)
Fail to find food_hamburger_2057 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_hamburger_2057, cupboard_130)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, look around this place)walk_executor(cupboard_130)exp(food_pizza_2065, cupboard_130)walk_executor(food_pizza_2065)obs(food_pizza_2065, look around this place)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_hamburger_2057, cupboard_130)
Fail to find food_hamburger_2057 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, look around this place)walk_executor(kitchen_counter_129)exp(food_pizza_2065, kitchen_counter_129)walk_executor(food_pizza_2065)obs(food_pizza_2065, look around this place)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_hamburger_2057, fridge_140)
Find food_hamburger_2057. 
##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2057, look around this place)obs(food_pizza_2065, look around this place)
##############################
From agent.py
obs(food_hamburger_2057, look around this place)
Get this information:  food_hamburger_2057 is inside dining_room_1. food_hamburger_2057 is inside fridge_140. food_hamburger_2057 is close to fridge_140. food_hamburger_2057 is close to character_219. food_hamburger_2057 is CLEAN.
##############################
From agent.py
obs(food_pizza_2065, look around this place)
Get this information:  food_pizza_2065 is inside dining_room_1. food_pizza_2065 is inside fridge_140. food_pizza_2065 is close to fridge_140. food_pizza_2065 is close to character_219. food_pizza_2065 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_sink_307(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_plate(item:item):
    # Function to check if the item is a plate
    return is_plate(item)

behavior place_item_on_plate(item:item, plate:item):
    body:
        achieve_once on(item, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Bind the item representing a plate

        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind the item representing the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind the item representing the hamburger

        place_item_on_plate(pizza, plate)
        # Place the pizza on the plate

        place_item_on_plate(hamburger, plate)
        # Place the hamburger on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_plate(item:item):
    # Function to check if the item is a plate
    return is_plate(item)

behavior place_item_on_plate(item:item, plate:item):
    body:
        achieve_once on(item, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Bind the item representing a plate

        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind the item representing the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind the item representing the hamburger

        place_item_on_plate(pizza, plate)
        # Place the pizza on the plate

        place_item_on_plate(hamburger, plate)
        # Place the hamburger on the plate

##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(plate_2105, sink_307)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
exp(plate_2105, sink_307)
Fail to find plate_2105 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(plate_2105, kitchen_counter_128)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_128)
Fail to find plate_2105 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(plate_2105, sink_133)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: The plate_2105 is located in dining_room_1. You can find it on table_127. Make sure to check the surface of table_127 for the plate, as it is right on top of it. The table will be near the plate.
Re-decompose: None

##############################
From agent.py
Human Instruction: The plate_2105 is located in dining_room_1. You can find it on table_127. Make sure to check the surface of table_127 for the plate, as it is right on top of it. The table will be near the plate.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_hamburger_2057 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_hamburger_2057 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for food_hamburger_2057 around cupboard_130.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_hamburger_2057 around fridge_140.
Action 12: Observe around food_hamburger_2057 with the question of look around this place.
Action 13: Observe around food_pizza_2065 with the question of look around this place.
Action 14: Walk to sink_307.
Action 15: look for plate_2105 around sink_307.
Action 16: Walk to kitchen_counter_128.
Action 17: look for plate_2105 around kitchen_counter_128.
Action 18: Walk to sink_133.

##############################
From agent.py
exp(plate_2105, sink_133)
Fail to find plate_2105 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(food_pizza_2065)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the fridge_140. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_pizza_2065, plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_pizza_2065. food_pizza_2065 is close plate_2105. food_pizza_2065 is on plate_2105. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_hamburger_2057, plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_hamburger_2057. food_hamburger_2057 is close plate_2105. food_hamburger_2057 is on plate_2105. food_hamburger_2057 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(plate, table)
        # Select the plate that contains the pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate in the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laser_pointer_2025_around_wallshelf_301(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(laser_pointer,wallshelf_instance)
        else:
            exp(laser_pointer,wallshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,wallshelf_instance]=True
        close[wallshelf_instance,laser_pointer]=True
    

#goal_representation

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists table: item : (is_table(table) and on(plate, table))
        # Select the plate that contains the pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate in the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'table') at line 5933, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_microwave_149(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists table: item : (is_table(table) and on(plate, table))
        # Select the plate that contains the pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate in the microwave

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_bench_122(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(fork,bench_instance)
        else:
            exp(fork,bench_instance)
    eff:
        unknown[fork]=False
        close[fork,bench_instance]=True
        close[bench_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_food_in_microwave(microwave:item, plate:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) 
        # Select a microwave
        bind plate: item where:
            is_plate(plate) and on(food_hamburger_2057, plate) and on(food_pizza_2065, plate)
        # Select plate with ID 2105 which already contains pizza and hamburger
        heat_food_in_microwave(microwave, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2057; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#goal_representation
 
behavior heat_food_in_microwave(microwave:item, plate:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) 
        # Select a microwave
        bind plate: item where:
            is_plate(plate) and exists food_hamburger: item : (is_food_hamburger(food_hamburger) and on(food_hamburger, plate)) and exists food_pizza: item : (is_food_pizza(food_pizza) and on(food_pizza, plate))
        # Select plate which contains both pizza and hamburger
        heat_food_in_microwave(microwave, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'food_hamburger') at line 5935, column 40.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
behavior heat_food_in_microwave(microwave:item, plate:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        bind plate: item where:
            is_plate(plate) and exists food_hamburger: item : (is_food_hamburger(food_hamburger) and on(food_hamburger, plate)) and exists food_pizza: item : (is_food_pizza(food_pizza) and on(food_pizza, plate))
        # Select plate which contains both pizza and hamburger
        heat_food_in_microwave(microwave, plate)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_microwave_149(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(coin,microwave_instance)
        else:
            exp(coin,microwave_instance)
    eff:
        unknown[coin]=False
        close[coin,microwave_instance]=True
        close[microwave_instance,coin]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==2105
        # Select plate with ID 2105
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        heat_in_microwave(plate, microwave) # Heat the plate in the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==2105
        # Select plate with ID 2105
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        heat_in_microwave(plate, microwave) # Heat the plate in the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. microwave_149 is close plate_2105. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        # Select the plate with ID 2105
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is in the dining room
        
        put_plate_on_table(plate, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        # Select the plate with ID 2105
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is in the dining room
        
        put_plate_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        # Select the plate with ID 2105
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Ensure the table is in the dining room
        
        put_plate_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_149)open_executor(microwave_149)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(plate_2105, table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. plate_2105 is on table_123. table_123 is close plate_2105. plate_2105 is close table_123. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The plate (plate_2105) needs to be placed on a table in the dining room. Currently, the plate is on table_123, which needs to be confirmed as a table inside the dining room to complete the sub-task.
##############################
From agent.py
Human Instruction: The plate (plate_2105) needs to be placed on a table in the dining room. Currently, the plate is on table_123, which needs to be confirmed as a table inside the dining room to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_hamburger_2057 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_hamburger_2057 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for food_hamburger_2057 around cupboard_130.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_hamburger_2057 around fridge_140.
Action 12: Observe around food_hamburger_2057 with the question of look around this place.
Action 13: Observe around food_pizza_2065 with the question of look around this place.
Action 14: Walk to sink_307.
Action 15: look for plate_2105 around sink_307.
Action 16: Walk to kitchen_counter_128.
Action 17: look for plate_2105 around kitchen_counter_128.
Action 18: Walk to sink_133.
Action 19: look for plate_2105 around sink_133.
Action 20: Walk to table_127.
Action 21: look for plate_2105 around table_127.
Action 22: Walk to food_pizza_2065.
Action 23: Grab food_pizza_2065.
Action 24: Walk to plate_2105.
Action 25: Put food_pizza_2065 on plate_2105.
Action 26: Walk to food_hamburger_2057.
Action 27: Grab food_hamburger_2057.
Action 28: Walk to plate_2105.
Action 29: Put food_hamburger_2057 on plate_2105.
Action 30: Walk to microwave_149.
Action 31: Open microwave_149.
Action 32: Walk to plate_2105.
Action 33: Grab plate_2105.
Action 34: Walk to microwave_149.
Action 35: Put plate_2105 into microwave_149.
Action 36: Close microwave_149.
Action 37: Switch on microwave_149.
Action 38: Switch off microwave_149.
Action 39: Open microwave_149.
Action 40: Grab plate_2105.
Action 41: Walk to table_123.
Action 42: Put plate_2105 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_dining_room(table:item):
    # Function to check if a table is inside the dining room
    symbol inside_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return inside_dining_room

behavior confirm_plate_location(plate:item):
    body:
        if not is_inside_dining_room(table_123):
            observe(table_123, "Confirm if table_123 is inside the dining room")
        achieve inside(plate, table_123)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        confirm_plate_location(plate)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_123; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_inside_dining_room(table:item):
    # Function to check if a table is inside the dining room
    symbol inside_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return inside_dining_room

behavior confirm_plate_location(plate:item, table:item):
    body:
        if not is_inside_dining_room(table):
            observe(table, "Confirm if table is inside the dining room")
        achieve inside(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        bind table: item where:
            is_table(table) and id[table] == 123
        confirm_plate_location(plate, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==2105
        bind table: item where:
            is_table(table) and id[table]==123
        bind dining_room: item where:
            is_dining_room(dining_room)
        if inside(table, dining_room):
            put_on_table(plate, table)
        else:
            observe(table, "Check is the table inside the dining room")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and on(plate, table_123)
        # Select plate_2105 on table_123

        achieve on(plate, table)
        # Place the plate on the selected table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_123; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_263_around_bed_264(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(chair,bed_instance)
        else:
            exp(chair,bed_instance)
    eff:
        unknown[chair]=False
        close[chair,bed_instance]=True
        close[bed_instance,chair]=True
    

#goal_representation
 
def is_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and on(plate, table)
        # Select plate_2105 on the chosen table

        achieve on(plate, table)
        # Place the plate on the selected table in the dining room

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. put the plate on a table in the dining room." ?
Answer: Put the plate on the table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(table:item):
    # Check if the table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==2105
        # Select the plate with ID 2105
        
        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Select a table in the dining room
        
        if is_in_dining_room(table):
            achieve_once on(plate, table) 
            # Place plate_2105 on the dining room table
        
        else:
            observe(table, "Check if this table is inside the dining room")
            # If the table is not confirmed to be in the dining room, observe to confirm

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        # Select the plate with ID 2105
        
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table inside the dining room
        
        place_plate_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        bind dining_room: item where:
            is_dining_room(dining_room)
        observe(plate, "Confirm table_123 is inside the dining room")
        achieve on(plate, table_123)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_123; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        bind table: item where:
            is_table(table) and id[table] == 123
        bind dining_room: item where:
            is_dining_room(dining_room)
        observe(table, "Confirm table_123 is inside the dining room")
        achieve on(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        bind table: item where:
            is_table(table) and id[table] == 123
        bind dining_room: item where:
            is_dining_room(dining_room)
        observe(table, "Confirm table_123 is inside the dining room")
        achieve on(plate, table)

##############################
From agent.py-> find a plan in act()
obs(table_123, Confirm table_123 is inside the dining room)
##############################
From agent.py
obs(table_123, Confirm table_123 is inside the dining room)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. plate_2105 is on table_123. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. table_123 is close to plate_2105. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(sink_307)', 'walk_executor(kitchen_counter_128)', 'walk_executor(sink_133)', 'walk_executor(table_127)', 'walk_executor(food_pizza_2065)', 'grab_executor(food_pizza_2065)', 'walk_executor(plate_2105)', 'put_executor(food_pizza_2065, plate_2105)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(plate_2105)', 'put_executor(food_hamburger_2057, plate_2105)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'grab_executor(plate_2105)', 'walk_executor(table_123)', 'put_executor(plate_2105, table_123)']
Time info:
Time consume: 394 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 12
goal correct times: 3
action_num: 32

Task complete rate:
1
Scene_id: 2
##############################
