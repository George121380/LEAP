From agent.py
Reset goals: The sub-goals are: 
['Boil some noodles with chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2062_around_kitchen_counter_128(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior take_from_storage(storage:item, obj:item):
    body:
        achieve_once inhand(obj) # Temporarily take the object in hand

behavior put_in_container(container:item, obj:item):
    body:
        achieve_once inside(obj, container) # Place the object inside the container

behavior boil(container:item):
    body:
        achieve_once is_on(container) # Simulate boiling by turning the container on

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot) and close(pot, stove)
        # Select a suitable pot that is close to the stove

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind storage: item where:
            containers(storage)
        # Select a container that acts as storage

        take_from_storage(storage, noodles)
        # Take noodles out of storage
        
        take_from_storage(storage, chicken)
        # Take chicken out of storage

        put_in_container(pot, noodles)
        # Place noodles in the pot

        put_in_container(pot, chicken)
        # Place chicken in the pot

        achieve has_water(pot)
        # Ensure there is water in the pot

        boil(pot)
        # Boil contents in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2062_around_fridge_140(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_keyboard_382_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_water(stove:item, pot:item, faucet:item):
    body:
        achieve plugged(stove)
        # Ensure the stove is plugged in before using it
        achieve is_on(stove)
        # Turn on the stove to boil water
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior add_to_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Identify the stove

        bind pot: item where:
            is_pot(pot)
        # Identify the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Identify the faucet for water

        bind noodles: item where:
            is_food_noodles(noodles)
        # Identify the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken

        prepare_water(stove, pot, faucet)
        # Prepare water using stove and pot

        add_to_pot(noodles, chicken, pot)
        # Add noodles and chicken to the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2062_around_kitchen_counter_128(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_noodles_with_chicken(pot: item, stove: item, food_noodles: item, food_chicken: item):
    body:
        achieve_once inside(food_noodles, pot)
        # Place the noodles in the pot
        achieve_once inside(food_chicken, pot)
        # Place the chicken in the pot
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        fill_pot_with_water(pot)
        boil_noodles_with_chicken(pot, stove, food_noodles, food_chicken)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_noodles_with_chicken(pot: item, stove: item, food_noodles: item, food_chicken: item):
    body:
        achieve_once inside(food_noodles, pot)
        # Place the noodles in the pot
        achieve_once inside(food_chicken, pot)
        # Place the chicken in the pot
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        fill_pot_with_water(pot)
        boil_noodles_with_chicken(pot, stove, food_noodles, food_chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_54, cupboard_130)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_noodles_2062, kitchen_counter_128)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_54, cupboard_130)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_noodles_2062, kitchen_counter_128)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_54. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_noodles_2062, kitchen_counter_128)
Fail to find food_noodles_2062 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_noodles_2062, fridge_140)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_noodles_2062, fridge_140)
Find food_noodles_2062. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_noodles_2062. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the food_noodles_2062. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water as part of boiling noodles with chicken.
##############################
From agent.py
Human Instruction: Fill the pot with water as part of boiling noodles with chicken.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_noodles_2062 around kitchen_counter_128.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_noodles_2062 around fridge_140.
Action 16: Walk to faucet_134.
Action 17: Switch on faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to food_noodles_2062.
Action 20: Grab food_noodles_2062.
Action 21: Walk to pot_54.
Action 22: Put food_noodles_2062 into pot_54.
Action 23: Walk to food_chicken_2050.
Action 24: Grab food_chicken_2050.
Action 25: Walk to pot_54.
Action 26: Put food_chicken_2050 into pot_54.
Action 27: Walk to stove_2090.
Action 28: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_headset_2086_around_bathroom_cabinet_305(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(headset,bathroom_cabinet_instance)
        else:
            exp(headset,bathroom_cabinet_instance)
    eff:
        unknown[headset]=False
        close[headset,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,headset]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior add_noodles_and_chicken_to_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Add noodles to the pot
        achieve_once inside(chicken, pot)
        # Add chicken to the pot

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        add_noodles_and_chicken_to_pot(noodles, chicken, pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        
behavior add_noodles_to_pot(noodles:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        
behavior add_chicken_to_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        
behavior heat_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        add_noodles_to_pot(noodles, pot)
        add_chicken_to_pot(chicken, pot)
        heat_pot_on_stove(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        
behavior add_noodles_to_pot(noodles:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        
behavior add_chicken_to_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        
behavior heat_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        add_noodles_to_pot(noodles, pot)
        add_chicken_to_pot(chicken, pot)
        heat_pot_on_stove(pot, stove)
##############################
From agent.py-> find a plan in act()
put_executor(pot_54, stove_2090)
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water. The actions suggest that the faucet was switched on and off, but there is no evidence that the pot was filled with water. Ensure the pot has water in it before proceeding.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water. The actions suggest that the faucet was switched on and off, but there is no evidence that the pot was filled with water. Ensure the pot has water in it before proceeding.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_noodles_2062 around kitchen_counter_128.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_noodles_2062 around fridge_140.
Action 16: Walk to faucet_134.
Action 17: Switch on faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to food_noodles_2062.
Action 20: Grab food_noodles_2062.
Action 21: Walk to pot_54.
Action 22: Put food_noodles_2062 into pot_54.
Action 23: Walk to food_chicken_2050.
Action 24: Grab food_chicken_2050.
Action 25: Walk to pot_54.
Action 26: Put food_chicken_2050 into pot_54.
Action 27: Walk to stove_2090.
Action 28: Switch on stove_2090.
Action 29: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_noodles_with_chicken(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2062
        # Select the noodles with ID 2062

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select the chicken with ID 2050
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        boil_noodles_with_chicken(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior add_noodles_to_pot(noodles:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Add noodles to the pot

behavior add_chicken_to_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        # Add chicken to the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to boil the contents of the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select any faucet

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        add_noodles_to_pot(noodles, pot)
        add_chicken_to_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_sink_133(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_filled_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once has_water(pot)

behavior place_ingredients(pot:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot_54
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select food_noodles_2062
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select food_chicken_2050
        bind faucet: item where:
            is_faucet(faucet)
        # Select any faucet, can be faucet_134
        bind stove: item where:
            is_stove(stove)
        # Select stove_2090

        ensure_filled_pot(pot, faucet)
        place_ingredients(pot, noodles, chicken)
        
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior add_noodles_to_pot(noodles:item, pot:item):
    body:
        achieve_once inside(noodles, pot)

behavior add_chicken_to_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        ensure_water_in_pot(pot, faucet)
        add_noodles_to_pot(noodles, pot)
        add_chicken_to_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_131(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior cook_noodles_with_chicken(pot:item, stove:item, food_noodles:item, food_chicken:item):
    body:
        achieve_once inside(food_noodles, pot)
        achieve_once inside(food_chicken, pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet) and not has_water(pot)
        # Select a faucet to fill water into the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select noodles

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken

        fill_pot(pot, faucet)
        cook_noodles_with_chicken(pot, stove, food_noodles, food_chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        start_boiling(pot, stove)
        # Start boiling the water in the pot on the stove
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some noodles with chicken." ?
Answer: Put the chicken on the cutting board and cut it into pieces. Find a pot and fill it with water. Put the pot on the stove and turn on the stove. Put the chicken and noodles in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior add_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind noodles: item where:
            is_food_noodles(noodles)

        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        fill_pot_with_water(pot, faucet)
        cut_chicken(chicken, cutting_board)
        add_to_pot(noodles, pot)
        add_to_pot(chicken, pot)
        achieve_once on(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior add_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind noodles: item where:
            is_food_noodles(noodles)

        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        fill_pot_with_water(pot, faucet)
        cut_chicken(chicken, cutting_board)
        add_to_pot(noodles, pot)
        add_to_pot(chicken, pot)
        achieve_once on(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. cutting_board_2080 is close food_chicken_2050. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_379)exp(knife_2036, computer_379)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(computer_379)
Robot find: chair_374, mouse_380, keyboard_382, Robot is close to the computer_379. 
##############################
From agent.py
exp(knife_2036, computer_379)
Fail to find knife_2036 around computer_379. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(knife_2036, wallshelf_301)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(knife_2036, wallshelf_301)
Fail to find knife_2036 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_361)exp(knife_2036, photoframe_361)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(photoframe_361)
Robot find: stamp_2031, drawing_389, Robot is close to the photoframe_361. Robot is close to the bookshelf_372. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: The target item, knife_2036, is inside the dishwasher_143, which is located in dining room 1. Please open the dishwasher_143, and you will find knife_2036 inside.
Re-decompose: None

##############################
From agent.py
Human Instruction: The pot needs to be filled with water. The actions suggest that the faucet was switched on and off, but there is no evidence that the pot was filled with water. Ensure the pot has water in it before proceeding.
The target item, knife_2036, is inside the dishwasher_143, which is located in dining room 1. Please open the dishwasher_143, and you will find knife_2036 inside.

Human Guidance: Put the chicken on the cutting board and cut it into pieces. Find a pot and fill it with water. Put the pot on the stove and turn on the stove. Put the chicken and noodles in the pot.
The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_noodles_2062 around kitchen_counter_128.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_noodles_2062 around fridge_140.
Action 16: Walk to faucet_134.
Action 17: Switch on faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to food_noodles_2062.
Action 20: Grab food_noodles_2062.
Action 21: Walk to pot_54.
Action 22: Put food_noodles_2062 into pot_54.
Action 23: Walk to food_chicken_2050.
Action 24: Grab food_chicken_2050.
Action 25: Walk to pot_54.
Action 26: Put food_chicken_2050 into pot_54.
Action 27: Walk to stove_2090.
Action 28: Switch on stove_2090.
Action 29: Put pot_54 on stove_2090.
Action 30: Walk to food_chicken_2050.
Action 31: Grab food_chicken_2050.
Action 32: Walk to cutting_board_2080.
Action 33: Put food_chicken_2050 on cutting_board_2080.
Action 34: Walk to knifeblock_52.
Action 35: look for knife_2036 around knifeblock_52.
Action 36: Walk to cupboard_131.
Action 37: Open cupboard_131.
Action 38: look for knife_2036 around cupboard_131.
Action 39: Walk to computer_379.
Action 40: look for knife_2036 around computer_379.
Action 41: Walk to wallshelf_301.
Action 42: look for knife_2036 around wallshelf_301.
Action 43: Walk to photoframe_361.

##############################
From agent.py
exp(knife_2036, photoframe_361)
Fail to find knife_2036 around photoframe_361. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
cut_executor(food_chicken_2050)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the knife_2036. Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the knife_2036. Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. Robot is close to the food_noodles_2062. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Although the faucet was switched on and off, there is no clear indication that the pot was actually filled. This is an essential step to complete the sub-task of boiling noodles with chicken.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_128)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(cutting_board_2080)', 'put_executor(food_chicken_2050, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(computer_379)', 'walk_executor(wallshelf_301)', 'walk_executor(photoframe_361)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_chicken_2050)', 'cut_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)']
Time info:
Time consume: 426 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 44

Task complete rate:
1
Scene_id: 2
##############################
