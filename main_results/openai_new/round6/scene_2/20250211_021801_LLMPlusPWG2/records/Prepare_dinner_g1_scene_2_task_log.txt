From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_382_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior boil_rice_by_pot(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(food_rice, pot)
        # Put rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select rice
        boil_rice_by_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_382_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior observe_items(pot:item, stove:item, water_source:item, rice:item):
    body:
        observe(pot, "Check properties and contents of the pot")
        observe(stove, "Check if it has a switch")
        observe(water_source, "Check if it can provide water")
        observe(rice, "Check if it is raw rice")

behavior add_water_to_pot(pot:item, water_source:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot) # Add rice to the pot

behavior turn_stove_on(stove:item):
    body:
        achieve is_on(stove) # Turn the stove on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind water_source: item where:
            is_faucet(water_source)
        bind rice: item where:
            is_food_rice(rice)
        
        observe_items(pot, stove, water_source, rice)
        
        add_water_to_pot(pot, water_source)
        add_rice_to_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_stove_on(stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior observe_items(pot:item, stove:item, water_source:item, rice:item):
    body:
        observe(pot, "Check properties and contents of the pot")
        observe(stove, "Check if it has a switch")
        observe(water_source, "Check if it can provide water")
        observe(rice, "Check if it is raw rice")

behavior add_water_to_pot(pot:item, water_source:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot) # Add rice to the pot

behavior turn_stove_on(stove:item):
    body:
        achieve is_on(stove) # Turn the stove on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind water_source: item where:
            is_faucet(water_source)
        bind rice: item where:
            is_food_rice(rice)
        
        observe_items(pot, stove, water_source, rice)
        
        add_water_to_pot(pot, water_source)
        add_rice_to_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_stove_on(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check properties and contents of the pot)walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check if it has a switch)walk_executor(faucet_134)obs(faucet_134, Check if it can provide water)walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(food_rice_2067)obs(food_rice_2067, Check if it is raw rice)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)obs(pot_54, Check properties and contents of the pot)walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check if it has a switch)walk_executor(faucet_134)obs(faucet_134, Check if it can provide water)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)obs(food_rice_2067, Check if it is raw rice)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
obs(pot_54, Check properties and contents of the pot)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
obs(stove_2090, Check if it has a switch)
Get this information:  stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is on kitchen_counter_129. stove_2090 is OPEN. stove_2090 is OFF.
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
obs(faucet_134, Check if it can provide water)
Get this information:  faucet_134 is inside dining_room_1. faucet_134 is on kitchen_counter_132. faucet_134 is close to cupboard_130. faucet_134 is close to wall_2. faucet_134 is close to kitchen_counter_132. faucet_134 is close to sink_133. faucet_134 is close to wall_6. faucet_134 is close to walllamp_45. faucet_134 is close to oven_141. faucet_134 is close to floor_15. faucet_134 is close to floor_16. faucet_134 is close to knifeblock_52. faucet_134 is close to microwave_149. faucet_134 is close to ceiling_27. faucet_134 is close to ceiling_28. faucet_134 is close to character_219. faucet_134 is ON. faucet_134 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_rice_2067, cupboard_131)
Fail to find food_rice_2067 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)obs(pot_54, Check properties and contents of the pot)walk_executor(stove_2090)obs(stove_2090, Check if it has a switch)walk_executor(faucet_134)obs(faucet_134, Check if it can provide water)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)obs(food_rice_2067, Check if it is raw rice)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
obs(pot_54, Check properties and contents of the pot)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
obs(stove_2090, Check if it has a switch)
Get this information:  stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is on kitchen_counter_129. stove_2090 is OPEN. stove_2090 is OFF.
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
obs(faucet_134, Check if it can provide water)
Get this information:  faucet_134 is inside dining_room_1. faucet_134 is on kitchen_counter_132. faucet_134 is close to cupboard_130. faucet_134 is close to wall_2. faucet_134 is close to kitchen_counter_132. faucet_134 is close to sink_133. faucet_134 is close to wall_6. faucet_134 is close to walllamp_45. faucet_134 is close to oven_141. faucet_134 is close to floor_15. faucet_134 is close to floor_16. faucet_134 is close to knifeblock_52. faucet_134 is close to microwave_149. faucet_134 is close to ceiling_27. faucet_134 is close to ceiling_28. faucet_134 is close to character_219. faucet_134 is ON. faucet_134 is CLEAN.
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)obs(pot_54, Check properties and contents of the pot)walk_executor(stove_2090)obs(stove_2090, Check if it has a switch)walk_executor(faucet_134)obs(faucet_134, Check if it can provide water)walk_executor(food_rice_2067)obs(food_rice_2067, Check if it is raw rice)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
obs(pot_54, Check properties and contents of the pot)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
obs(stove_2090, Check if it has a switch)
Get this information:  stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is on kitchen_counter_129. stove_2090 is OPEN. stove_2090 is OFF.
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
obs(faucet_134, Check if it can provide water)
Get this information:  faucet_134 is inside dining_room_1. faucet_134 is on kitchen_counter_132. faucet_134 is close to cupboard_130. faucet_134 is close to wall_2. faucet_134 is close to kitchen_counter_132. faucet_134 is close to sink_133. faucet_134 is close to wall_6. faucet_134 is close to walllamp_45. faucet_134 is close to oven_141. faucet_134 is close to floor_15. faucet_134 is close to floor_16. faucet_134 is close to knifeblock_52. faucet_134 is close to microwave_149. faucet_134 is close to ceiling_27. faucet_134 is close to ceiling_28. faucet_134 is close to character_219. faucet_134 is ON. faucet_134 is CLEAN.
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the food_rice_2067. Robot is close to the fridge_140. 
##############################
From agent.py
obs(food_rice_2067, Check if it is raw rice)
Get this information:  food_rice_2067 is inside dining_room_1. food_rice_2067 is inside fridge_140. food_rice_2067 is close to fridge_140. food_rice_2067 is close to character_219. food_rice_2067 is CLEAN.
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_54. Robot is close to the food_rice_2067. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_54. Robot is close to the food_rice_2067. Robot is close to the fridge_140. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_rice_2067. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_rice_2067. food_rice_2067 is inside pot_54. pot_54 is close food_rice_2067. food_rice_2067 is close pot_54. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot still needs to add water to the pot before boiling the rice.
##############################
From agent.py
Human Instruction: The robot still needs to add water to the pot before boiling the rice.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 6: Walk to stove_2090.
Action 7: Open stove_2090.
Action 8: Observe around stove_2090 with the question of Check if it has a switch.
Action 9: Walk to faucet_134.
Action 10: Observe around faucet_134 with the question of Check if it can provide water.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for food_rice_2067 around cupboard_131.
Action 14: Walk to pot_54.
Action 15: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 16: Walk to stove_2090.
Action 17: Observe around stove_2090 with the question of Check if it has a switch.
Action 18: Walk to faucet_134.
Action 19: Observe around faucet_134 with the question of Check if it can provide water.
Action 20: Walk to fridge_140.
Action 21: Switch off fridge_140.
Action 22: Open fridge_140.
Action 23: look for food_rice_2067 around fridge_140.
Action 24: Walk to pot_54.
Action 25: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 26: Walk to stove_2090.
Action 27: Observe around stove_2090 with the question of Check if it has a switch.
Action 28: Walk to faucet_134.
Action 29: Observe around faucet_134 with the question of Check if it can provide water.
Action 30: Walk to food_rice_2067.
Action 31: Observe around food_rice_2067 with the question of Check if it is raw rice.
Action 32: Walk to pot_54.
Action 33: Grab pot_54.
Action 34: Walk to faucet_134.
Action 35: Switch off faucet_134.
Action 36: Walk to food_rice_2067.
Action 37: Grab food_rice_2067.
Action 38: Walk to pot_54.
Action 39: Put food_rice_2067 into pot_54.
Action 40: Walk to stove_2090.
Action 41: Put pot_54 on stove_2090.
Action 42: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_fork_2104_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

#exp_behavior_end

#goal_representation
markdown
behavior fill_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior cook_rice(pot:item, stove:item):
    body:
        achieve_on(pot, stove)
        achieve is_on(stove)
        # Put the pot on the stove and turn on the stove to cook rice 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot for cooking rice
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice for cooking
        
        bind stove: item where:
            is_stove(stove)
        # Select stove for cooking rice
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select faucet for water
        
        fill_water(pot, faucet)
        # Step to fill the pot with water
        
        achieve_once inside(rice, pot)
        # Put rice into the pot
        
        cook_rice(pot, stove)
        # Step to cook the rice in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is near the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior start_boiling(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_water_to_pot(pot, faucet)
        put_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        start_boiling(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is near the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior start_boiling(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_water_to_pot(pot, faucet)
        put_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        start_boiling(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot still needs to add water to the pot before boiling the rice.
##############################
From agent.py
Human Instruction: The robot still needs to add water to the pot before boiling the rice.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 6: Walk to stove_2090.
Action 7: Open stove_2090.
Action 8: Observe around stove_2090 with the question of Check if it has a switch.
Action 9: Walk to faucet_134.
Action 10: Observe around faucet_134 with the question of Check if it can provide water.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for food_rice_2067 around cupboard_131.
Action 14: Walk to pot_54.
Action 15: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 16: Walk to stove_2090.
Action 17: Observe around stove_2090 with the question of Check if it has a switch.
Action 18: Walk to faucet_134.
Action 19: Observe around faucet_134 with the question of Check if it can provide water.
Action 20: Walk to fridge_140.
Action 21: Switch off fridge_140.
Action 22: Open fridge_140.
Action 23: look for food_rice_2067 around fridge_140.
Action 24: Walk to pot_54.
Action 25: Observe around pot_54 with the question of Check properties and contents of the pot.
Action 26: Walk to stove_2090.
Action 27: Observe around stove_2090 with the question of Check if it has a switch.
Action 28: Walk to faucet_134.
Action 29: Observe around faucet_134 with the question of Check if it can provide water.
Action 30: Walk to food_rice_2067.
Action 31: Observe around food_rice_2067 with the question of Check if it is raw rice.
Action 32: Walk to pot_54.
Action 33: Grab pot_54.
Action 34: Walk to faucet_134.
Action 35: Switch off faucet_134.
Action 36: Walk to food_rice_2067.
Action 37: Grab food_rice_2067.
Action 38: Walk to pot_54.
Action 39: Put food_rice_2067 into pot_54.
Action 40: Walk to stove_2090.
Action 41: Put pot_54 on stove_2090.
Action 42: Switch on stove_2090.
Action 43: Walk to faucet_134.
Action 44: Walk to pot_54.
Action 45: Grab pot_54.
Action 46: Walk to faucet_308.
Action 47: Switch off faucet_308.
Action 48: Walk to stove_2090.
Action 49: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water inside

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        # Place the pot on the stove and turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        bind faucet: item where:
            is_faucet(134) and has_water(faucet)
        # Select a faucet that can provide water and has ID 134

        add_water_to_pot(pot, faucet)
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        add_water_to_pot(pot, faucet)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        add_water_to_pot(pot, faucet)
        boil_rice(pot, stove, rice)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the pot using the faucet before boiling the rice.
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'walk_executor(stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_54)', 'walk_executor(stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(food_rice_2067)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(pot_54)', 'putin_executor(food_rice_2067, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 286 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 42

Task complete rate:
1
Scene_id: 2
##############################
