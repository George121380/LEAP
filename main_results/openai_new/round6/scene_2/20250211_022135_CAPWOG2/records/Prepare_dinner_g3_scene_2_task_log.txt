From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon with the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_snack_2069_around_fridge_140(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_bacon(bacon:item):
    body:
        if not inhand(bacon):
            grab(bacon)

behavior walk_to_stove(stove:item):
    body:
        if not close_char(char, stove):
            walk_to(stove)

behavior switch_on_stove(stove:item):
    body:
        if has_switch(stove) and is_off(stove):
            switch_on(stove)

behavior place_bacon(fryingpan:item, bacon:item):
    body:
        if inhand(bacon) and not on(bacon, fryingpan):
            put_on(bacon, fryingpan)

behavior cook_bacon_with_pan(fryingpan:item, stove:item):
    body:
        walk_to_stove(stove)
        switch_on_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon) and grabbable(bacon)
        grab_bacon(bacon)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        place_bacon(fryingpan, bacon)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon_with_pan(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2044_around_fridge_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def locate_bacon(bacon:item):
    # Function to check if the item is bacon on the counter or fridge
    symbol is_bacon_located=exists x: item : (is_food_bacon(x) and (on(x, bacon) or inside(x, bacon)))
    return is_bacon_located

behavior grab_bacon(bacon:item):
    body:
        if not inhand(bacon):
            grab(bacon)

behavior use_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
        if closed(fryingpan):
            opens(fryingpan)

behavior cook_bacon(fryingpan:item, bacon:item):
    body:
        put_on(bacon, fryingpan)
        # Assume cooking happens here
        # After cooking
        empty_a_hand()

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon) and not visited(bacon)
        observe(bacon, "Check if the bacon is on the counter or inside the fridge")
        bind bacon: item where:
            is_food_bacon(bacon) and locate_bacon(bacon)
        grab_bacon(bacon)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        use_fryingpan(fryingpan)
        cook_bacon(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_bacon_2044_around_fridge_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_near_stove(fryingpan:item):
    # Check if the fryingpan is near the stove
    symbol near_stove=exists stove: item : (is_stove(stove) and close(fryingpan, stove))
    return near_stove

behavior use_fryingpan(fryingpan:item, bacon:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)  # Turn on the frying pan if its off
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)  # Place the bacon on the frying pan
        # Wait and cook the bacon Assuming cooking is just waiting
        # Additional logic may be added here if cooking time or actions are specified
        
behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Identify the bacon
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Identify the frying pan
        
        # Ensure frying pan is near stove for cooking
        if not is_near_stove(fryingpan):
            walk_to(fryingpan)  # Move to the location of the fryingpan if not near the stove
        
        use_fryingpan(fryingpan, bacon)  # Cook the bacon in the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_near_stove(fryingpan:item):
    # Check if the fryingpan is near the stove
    symbol near_stove=exists stove: item : (is_stove(stove) and close(fryingpan, stove))
    return near_stove

behavior use_fryingpan(fryingpan:item, bacon:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)  # Turn on the frying pan if its off
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)  # Place the bacon on the frying pan
        # Wait and cook the bacon Assuming cooking is just waiting
        # Additional logic may be added here if cooking time or actions are specified
        
behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Identify the bacon
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Identify the frying pan
        
        # Ensure frying pan is near stove for cooking
        if not is_near_stove(fryingpan):
            walk_to(fryingpan)  # Move to the location of the fryingpan if not near the stove
        
        use_fryingpan(fryingpan, bacon)  # Cook the bacon in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_132)
Fail to find fryingpan_2107 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(fryingpan_2107, cupboard_131)walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(fryingpan_2107, cupboard_131)
Fail to find fryingpan_2107 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(fryingpan_2107, wallshelf_190)walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(fryingpan_2107, wallshelf_190)
Fail to find fryingpan_2107 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(fryingpan_2107, oven_141)walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(fryingpan_2107, oven_141)
Fail to find fryingpan_2107 around oven_141. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_bacon_2044, fridge_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_bacon_2044, fridge_140)
Find food_bacon_2044. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
walk_executor(food_bacon_2044)
Robot find: Robot is close to the fridge_140. Robot is close to the food_bacon_2044. 
##############################
From agent.py
grab_executor(food_bacon_2044)
Robot find: Robot is close to the fridge_140. Robot is close to the food_bacon_2044. Grabbing food_bacon_2044 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_bacon_2044. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_bacon_2044, fryingpan_2107)
Robot find: Robot is close to the food_bacon_2044. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_bacon_2044 is close fryingpan_2107. fryingpan_2107 is close food_bacon_2044. food_bacon_2044 is on fryingpan_2107. food_bacon_2044 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bacon needs to be cooked. The frying pan should be switched on to achieve this, but this action has not been taken yet.
##############################
From agent.py
Human Instruction: The bacon needs to be cooked. The frying pan should be switched on to achieve this, but this action has not been taken yet.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for fryingpan_2107 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for fryingpan_2107 around cupboard_131.
Action 6: Walk to wallshelf_190.
Action 7: look for fryingpan_2107 around wallshelf_190.
Action 8: Walk to oven_141.
Action 9: Open oven_141.
Action 10: look for fryingpan_2107 around oven_141.
Action 11: Walk to stove_2090.
Action 12: Open stove_2090.
Action 13: look for fryingpan_2107 around stove_2090.
Action 14: Walk to fryingpan_2107.
Action 15: Walk to fridge_140.
Action 16: Switch off fridge_140.
Action 17: Open fridge_140.
Action 18: look for food_bacon_2044 around fridge_140.
Action 19: Walk to fryingpan_2107.
Action 20: Walk to food_bacon_2044.
Action 21: Grab food_bacon_2044.
Action 22: Walk to fryingpan_2107.
Action 23: Put food_bacon_2044 on fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_373(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior switch_on_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Selecting the frying pan
        switch_on_fryingpan(fryingpan)
        # Switch on the frying pan to cook the bacon

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_coffe_maker_147(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(blender,coffe_maker_instance)
        else:
            exp(blender,coffe_maker_instance)
    eff:
        unknown[blender]=False
        close[blender,coffe_maker_instance]=True
        close[coffe_maker_instance,blender]=True
    

behavior find_oil_2102_around_wallshelf_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon_on_fryingpan(fryingpan:item, bacon:item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan to start cooking the bacon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
            and on(bacon, fryingpan)
        cook_bacon_on_fryingpan(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan) # Switch on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon(fryingpan) # Cook the bacon on the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_kitchen_counter_128(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_oil_2102_around_knifeblock_52(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(oil,knifeblock_instance)
        else:
            exp(oil,knifeblock_instance)
    eff:
        unknown[oil]=False
        close[oil,knifeblock_instance]=True
        close[knifeblock_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior cook_bacon(fryingpan:item, bacon:item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan) # Frying pan must be turned on
        watch(bacon) # Monitoring the cooking process
        # Add additional actions here if necessary to complete bacon cooking

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        cook_bacon(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_on_fryingpan(fryingpan:item):
    # Function to check if there is food on the frying pan
    symbol has_food=exists f: item : (is_food_bacon(f) and on(f, fryingpan))
    return has_food

behavior place_bacon_on_fryingpan(fryingpan:item, bacon:item):
    body:
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)

behavior switch_on_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Selecting the frying pan
        
        bind bacon: item where:
            is_food_bacon(bacon)
        # Selecting the bacon

        place_bacon_on_fryingpan(fryingpan, bacon)
        switch_on_fryingpan(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon(fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_on_fryingpan(bacon:item, fryingpan:item):
    # Function to check if the bacon is on the frying pan
    symbol bacon_on_fryingpan=on(bacon, fryingpan)
    return bacon_on_fryingpan

behavior cook_bacon(bacon:item, fryingpan:item):
    body:
        if not is_on(fryingpan) and has_switch(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        if is_bacon_on_fryingpan(bacon, fryingpan):
            cook_bacon(bacon, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_food_bread_2016_around_cupboard_130(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan_on(fryingpan: item):
    symbol pan_on = is_on(fryingpan)
    return pan_on

behavior cook_bacon(fryingpan: item, bacon: item):
    body:
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind bacon: item where:
            is_food_bacon(bacon)

        cook_bacon(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_cupboard_130(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior switch_on_frying_pan(pan:item):
    body:
        if is_off(pan):
            switch_on(pan)
            # Switch on the frying pan

behavior cook_bacon(bacon:item, pan:item):
    body:
        if not on(bacon, pan):
            put_on(bacon, pan)
            # Put bacon on the frying pan
        switch_on_frying_pan(pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan]==2107
        # Select frying pan with ID 2107
        bind bacon: item where:
            is_food_bacon(bacon) and id[bacon]==2044
        # Select bacon with ID 2044
        cook_bacon(bacon, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol on_stove=on(fryingpan, stove) 
    return on_stove 

def has_bacon_on_pan(bacon:item, fryingpan:item):
    # Function to check if the bacon is on the frying pan
    symbol on_fryingpan=on(bacon, fryingpan)
    return on_fryingpan 

behavior cook_bacon(fryingpan:item, stove:item, bacon:item):
    body:
        if has_bacon_on_pan(bacon, fryingpan) and is_fryingpan_on_stove(fryingpan, stove) and is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
        bind stove: item where:
            is_stove(stove) and close_char(char, fryingpan)
        cook_bacon(fryingpan, stove, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_knifeblock_52(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(oil,knifeblock_instance)
        else:
            exp(oil,knifeblock_instance)
    eff:
        unknown[oil]=False
        close[oil,knifeblock_instance]=True
        close[knifeblock_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan: item, bacon: item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan
        if not inside(bacon, fryingpan):
            put_on(bacon, fryingpan) # Place bacon on the frying pan to cook

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) # Ensure we have a frying pan
        bind bacon: item where:
            is_food_bacon(bacon) # Ensure we have bacon
        cook_bacon(fryingpan, bacon) # Call the behavior to cook bacon

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_wallshelf_191(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_on_frying_pan(frying_pan:item):
    # Function to check if there is bacon on the frying pan
    symbol bacon_on_pan=exists o: item : (is_food_bacon(o) and on(o, frying_pan))
    return bacon_on_pan

behavior ensure_bacon_is_cooked(frying_pan:item):
    body:
        if has_switch(frying_pan) and is_off(frying_pan):
            switch_on(frying_pan) # Switch on the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        if is_bacon_on_frying_pan(frying_pan):
            # Check if the bacon is on the frying pan based on the available information
            ensure_bacon_is_cooked(frying_pan)
            # Ensure the frying pan is switched on to cook the bacon

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_phone_47_around_dresser_377(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

behavior find_food_bread_2016_around_dishwasher_143(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_bread,dishwasher_instance)
        else:
            exp(food_bread,dishwasher_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,dishwasher_instance]=True
        close[dishwasher_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(bacon:item, fryingpan:item):
    body:
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan) # Put the bacon on the frying pan
        if not is_on(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Select the frying pan that is close to the character
        bind bacon: item where:
            is_food_bacon(bacon) and close_char(char, bacon)
        # Select the bacon that is close to the character
        cook_bacon(bacon, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_373(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_oil_2005_around_wallshelf_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_fryingpan(fryingpan: item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)

behavior cook_bacon(bacon: item):
    body:
        if not close_char(char, bacon):
            walk_to(bacon)
        # ensure bacon is in the frying pan already, as per the completed actions
        if not is_food(bacon):
            puts_on(fryingpan, bacon)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        walk_to(fryingpan)
        turn_on_fryingpan(fryingpan)
        cook_bacon(bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior switch_on_fryingpan(fryingpan:item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)

behavior cook_bacon(fryingpan:item, bacon:item):
    body:
        if on(bacon, fryingpan) and is_on(fryingpan):
            # Assume bacon gets cooked over time once placed on an active frying pan
            touch(bacon) # Simulate checking the cooking process

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
        # ensure bacon is on the fryingpan
        put_on(bacon, fryingpan)
        switch_on_fryingpan(fryingpan)
        cook_bacon(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan(obj:item):
    # Check if the object is a frying pan
    return true

def has_bacon_on_fryingpan(fryingpan:item):
    # Check if the frying pan has bacon on it
    symbol has_bacon=exists o: item : (is_food_bacon(o) and on(o, fryingpan))
    return has_bacon

behavior switch_on_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan) and has_switch(fryingpan):
            switch_on(fryingpan)

behavior cook_bacon(fryingpan:item):
    body:
        if has_bacon_on_fryingpan(fryingpan):
            switch_on_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item, bacon:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
        cook_bacon(fryingpan, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior activate_frying_pan(fryingpan: item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
        # Ensure the frying pan is turned on before cooking bacon
        activate_frying_pan(fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Cook bacon with the frying pan.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(wallshelf_190)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(fryingpan_2107)', 'walk_executor(food_bacon_2044)', 'grab_executor(food_bacon_2044)', 'walk_executor(fryingpan_2107)', 'put_executor(food_bacon_2044, fryingpan_2107)']
Time info:
Time consume: 331 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 21
goal correct times: 0
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
