From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to brew a cup of coffee.', '2. Add milk and sugar to the brewed coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2088_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_filter(coffee_maker:item):
    # Function to check if the coffee maker has a coffee filter
    symbol has_filter=exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    return has_filter

def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    return has_water(coffee_maker)

behavior prepare_coffee(coffee_maker:item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        # Select a coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not has_coffee_filter(coffee_maker):
            observe(coffee_maker, "Check if there is a coffee filter inside")
        if not has_water_in_coffee_maker(coffee_maker):
            get_water(coffee_maker)

        prepare_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_coffee_filter(coffee_maker:item):
    # Function to check if the coffee maker has a coffee filter
    symbol has_filter=exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    return has_filter

def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    return has_water(coffee_maker)

behavior prepare_coffee(coffee_maker:item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        # Select a coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not has_coffee_filter(coffee_maker):
            observe(coffee_maker, "Check if there is a coffee filter inside")
        if not has_water_in_coffee_maker(coffee_maker):
            get_water(coffee_maker)

        prepare_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if there is a coffee filter inside)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check if there is a coffee filter inside)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that there is a coffee filter and water in the coffee maker to brew coffee. Check whether these elements are present before proceeding.
##############################
From agent.py
Human Instruction: You need to ensure that there is a coffee filter and water in the coffee maker to brew coffee. Check whether these elements are present before proceeding.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check if there is a coffee filter inside.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_filter(coffee_maker: item):
    symbol has_filter=exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    return has_filter

def has_water_in_coffee_maker(coffee_maker: item):
    symbol has_water=has_water(coffee_maker)
    return has_water

behavior prepare_coffee_with_coffee_maker(coffee_maker: item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not visited(coffee_maker):
            walk_to(coffee_maker)
            observe(coffee_maker, "Check if there is a coffee filter inside")
        
        if has_coffee_filter(coffee_maker) and has_water_in_coffee_maker(coffee_maker):
            prepare_coffee_with_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_filter_and_water(coffee_maker: item):
    # Function to check if the coffee maker has a filter and water
    symbol has_filter=exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    symbol has_water=has_water(coffee_maker)
    return has_filter and has_water

behavior prepare_coffee(coffee_maker: item):
    body:
        if not is_on(coffee_maker):
            bind switch: item where:
                has_switch(coffee_maker)
            switch_on(coffee_maker)
            # Switch on the coffee maker once all conditions are met

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        walk_to(coffee_maker)
        # Approach the coffee maker
        opens(coffee_maker)
        observe(coffee_maker, "Check if there is a coffee filter inside")
        # Check for coffee filter inside
        observe(coffee_maker, "Check if there is water")
        # Check for water inside
        if has_filter_and_water(coffee_maker):
            closes(coffee_maker)
            prepare_coffee(coffee_maker)
        else:
            observe(coffee_maker, "Ensure the coffee maker has filter and water")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_filter_and_water(coffee_maker: item):
    # Function to check if the coffee maker has a filter and water
    symbol has_filter=exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    symbol has_water=has_water(coffee_maker)
    return has_filter and has_water

behavior prepare_coffee(coffee_maker: item):
    body:
        if not is_on(coffee_maker):
            bind switch: item where:
                has_switch(coffee_maker)
            switch_on(coffee_maker)
            # Switch on the coffee maker once all conditions are met

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        walk_to(coffee_maker)
        # Approach the coffee maker
        opens(coffee_maker)
        observe(coffee_maker, "Check if there is a coffee filter inside")
        # Check for coffee filter inside
        observe(coffee_maker, "Check if there is water")
        # Check for water inside
        if has_filter_and_water(coffee_maker):
            closes(coffee_maker)
            prepare_coffee(coffee_maker)
        else:
            observe(coffee_maker, "Ensure the coffee maker has filter and water")

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if there is a coffee filter inside)obs(coffe_maker_147, Check if there is water)obs(coffe_maker_147, Ensure the coffee maker has filter and water)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check if there is a coffee filter inside)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_147, Check if there is water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is PLUGGED_IN.
##############################
From agent.py
obs(coffe_maker_147, Ensure the coffee maker has filter and water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that there is a coffee filter and water in the coffee maker before trying to brew coffee. The robot observed the coffee maker multiple times but did not confirm the presence of a coffee filter and water, which is necessary to proceed with brewing. Once this is confirmed, the coffee maker must be closed, turned on, and allowed to brew the coffee.
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is a coffee filter and water in the coffee maker before trying to brew coffee. The robot observed the coffee maker multiple times but did not confirm the presence of a coffee filter and water, which is necessary to proceed with brewing. Once this is confirmed, the coffee maker must be closed, turned on, and allowed to brew the coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check if there is a coffee filter inside.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.
Action 6: Walk to coffe_maker_147.
Action 7: Switch off coffe_maker_147.
Action 8: Open coffe_maker_147.
Action 9: Observe around coffe_maker_147 with the question of Check if there is a coffee filter inside.
Action 10: Observe around coffe_maker_147 with the question of Check if there is water.
Action 11: Observe around coffe_maker_147 with the question of Ensure the coffee maker has filter and water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def check_coffee_ready(coffee_maker:item):
    # Function to check if the coffee is brewed and ready
    return is_on(coffee_maker) and closed(coffee_maker)

behavior start_brewing(coffee_maker:item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker)
            # Turn on the coffee maker to start brewing coffee

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)
            # Close the coffee maker

behavior ensure_filter_and_water(coffee_maker:item):
    body:
        if not (visited(coffee_maker) and is_coffee_filter(coffee_maker) and has_water(coffee_maker)):
            observe(coffee_maker, "Ensure the coffee maker has filter and water")
            # Check if there is a coffee filter and water in the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) 

        ensure_filter_and_water(coffee_maker)
        prepare_coffee_maker(coffee_maker)
        start_brewing(coffee_maker)

        if not check_coffee_ready(coffee_maker):
            start_brewing(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def check_coffee_ready(coffee_maker:item):
    # Function to check if the coffee is brewed and ready
    return is_on(coffee_maker) and closed(coffee_maker)

behavior start_brewing(coffee_maker:item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker)
            # Turn on the coffee maker to start brewing coffee

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)
            # Close the coffee maker

behavior ensure_filter_and_water(coffee_maker:item):
    body:
        if not (visited(coffee_maker) and is_coffee_filter(coffee_maker) and has_water(coffee_maker)):
            observe(coffee_maker, "Ensure the coffee maker has filter and water")
            # Check if there is a coffee filter and water in the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) 

        ensure_filter_and_water(coffee_maker)
        prepare_coffee_maker(coffee_maker)
        start_brewing(coffee_maker)

        if not check_coffee_ready(coffee_maker):
            start_brewing(coffee_maker)

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_147, Ensure the coffee maker has filter and water)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
obs(coffe_maker_147, Ensure the coffee maker has filter and water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to confirm the presence of a coffee filter and water in the coffee maker. Once confirmed, it should ensure the coffee maker is closed and turned on to start brewing the coffee.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_132(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_128(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_coffee(milk: item, coffee: item):
    body:
        if is_milk(milk) and drinkable(coffee) and not inhand(milk):
            grab(milk)
        if inhand(milk):
            put_inside(milk, coffee)
            empty_a_hand()

behavior add_sugar_coffee(sugar: item, coffee: item):
    body:
        if is_food_sugar(sugar) and drinkable(coffee) and not inhand(sugar):
            grab(sugar)
        if inhand(sugar):
            put_inside(sugar, coffee)
            empty_a_hand()

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        bind coffee: item where:
            is_cup(coffee) and drinkable(coffee)
        add_milk_coffee(milk, coffee)
        add_sugar_coffee(sugar, coffee)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_132(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)
        if not inside(sugar, cup):
            put_inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)
        if not inside(sugar, cup):
            put_inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        add_milk_and_sugar(cup, milk, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(kitchen_counter_132)exp(food_sugar_2070, kitchen_counter_132)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(cupboard_130)exp(food_sugar_2070, cupboard_130)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(cup_2087, table_127)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(cupboard_130)exp(food_sugar_2070, cupboard_130)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(cup_2087, table_127)
Fail to find cup_2087 around table_127. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_127)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
