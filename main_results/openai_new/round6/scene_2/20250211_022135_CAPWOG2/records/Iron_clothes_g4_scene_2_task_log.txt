From agent.py
Reset goals: The sub-goals are: 
['Iron the shirt and put it on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironed(shirt:item):
    # Function to check if the shirt has been ironed
    symbol ironed_shirt = exists i: item : (is_clothes_shirt(i) and i == shirt and not dirty(i))
    return ironed_shirt

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        if not is_ironed(shirt):
            if unplugged(iron):
                plugin(iron)
            if is_off(iron):
                switch_on(iron)
            if not inhand(shirt):
                grab(shirt)
            if not on(shirt, ironing_board):
                put_on(shirt, ironing_board)
            if not clean(shirt):
                wipe(shirt)
            if is_on(iron):
                switch_off(iron)
            if plugged(iron):
                plugout(iron)

behavior place_shirt_on_bed(shirt: item, bed: item):
    body:
        if not inhand(shirt):
            bind shirt_in_hand: item where:
                is_clothes_shirt(shirt_in_hand)
            grab(shirt_in_hand)
        if not on(shirt, bed):
            put_on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind bed: item where:
            is_bed(bed)
        iron_shirt(shirt, iron, ironing_board)
        place_shirt_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ironed(shirt:item):
    # Function to check if the shirt has been ironed
    symbol ironed_shirt = exists i: item : (is_clothes_shirt(i) and i == shirt and not dirty(i))
    return ironed_shirt

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        if not is_ironed(shirt):
            if unplugged(iron):
                plugin(iron)
            if is_off(iron):
                switch_on(iron)
            if not inhand(shirt):
                grab(shirt)
            if not on(shirt, ironing_board):
                put_on(shirt, ironing_board)
            if not clean(shirt):
                wipe(shirt)
            if is_on(iron):
                switch_off(iron)
            if plugged(iron):
                plugout(iron)

behavior place_shirt_on_bed(shirt: item, bed: item):
    body:
        if not inhand(shirt):
            bind shirt_in_hand: item where:
                is_clothes_shirt(shirt_in_hand)
            grab(shirt_in_hand)
        if not on(shirt, bed):
            put_on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind bed: item where:
            is_bed(bed)
        iron_shirt(shirt, iron, ironing_board)
        place_shirt_on_bed(shirt, bed)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(basket_for_clothes_2040)']
Time info:
Time consume: 28 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0
action_num: 1

Task complete rate:
Keystate: k1 - Requires: 9 steps
Keystate: k2 - Requires: 3 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
