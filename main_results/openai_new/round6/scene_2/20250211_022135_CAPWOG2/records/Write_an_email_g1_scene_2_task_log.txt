From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2112_around_desk_261(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_keyboard_382_around_desk_375(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer(computer:item):
    body:
        if is_off(computer):
            switch_on(computer)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        turn_on_computer(computer)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_keyboard_2111_around_desk_375(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind office: item where:
            is_home_office(office) 
        # Identify the home office location to find the computer
        
        bind computer: item where:
            is_computer(computer) and inside(computer, office)
        # Find the computer inside the home office

        if not visited(computer):
            observe(computer, "Check for power supply connection and switch status")
            # Observe the computer to gather more information about its current status

        if is_off(computer):
            switch_on(computer) 
            # Turn on the computer if it is currently off


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind office: item where:
            is_home_office(office) 
        # Identify the home office location to find the computer
        
        bind computer: item where:
            is_computer(computer) and inside(computer, office)
        # Find the computer inside the home office

        if not visited(computer):
            observe(computer, "Check for power supply connection and switch status")
            # Observe the computer to gather more information about its current status

        if is_off(computer):
            switch_on(computer) 
            # Turn on the computer if it is currently off


##############################
From agent.py-> find a plan in act()
walk_executor(computer_2110)obs(computer_2110, Check for power supply connection and switch status)switchon_executor(computer_2110)
##############################
From agent.py
walk_executor(computer_2110)
Robot find: dvd_player_2000, mouse_2112, chair_2119, keyboard_2111, pillow_195, laser_pointer_2025, mat_201, oil_2005, drawing_196, Robot is close to the table_193. Robot is close to the computer_2110. 
##############################
From agent.py
obs(computer_2110, Check for power supply connection and switch status)
Get this information:  computer_2110 is close to mouse_2112. computer_2110 is close to table_193. computer_2110 is close to chair_2119. computer_2110 is close to keyboard_2111. computer_2110 is close to character_219. computer_2110 is on table_193. keyboard_2111 is on computer_2110. computer_2110 is inside home_office_161. mouse_2112 is on computer_2110. computer_2110 is CLEAN. computer_2110 is OFF. computer_2110 is PLUGGED_IN.
##############################
From agent.py
switchon_executor(computer_2110)
Robot find: Robot is close to the table_193. Robot is close to the computer_2110. computer_2110 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(computer_2110)', 'switchon_executor(computer_2110)']
Time info:
Time consume: 45 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
