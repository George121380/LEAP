From agent.py
Reset goals: The sub-goals are: 
["1. Gather coffee grounds and fill the coffee maker's filter.  ", '2. Add water to the coffee maker.  ', '3. Turn on the coffee maker to brew the coffee.  ', '4. Pour the brewed coffee into a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_coffee_grounds(coffee_grounds: item, container: item):
    body:
        if not inside(coffee_grounds, container):
            put_inside(coffee_grounds, container) # Place the coffee grounds inside the container

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_coffee_grounds(coffee_grounds) and grabbable(coffee_grounds)
        # Select the coffee grounds that can be grabbed

        bind container: item where:
            is_coffee_filter(container) and recipient(container)
        # Select a coffee filter container
        
        gather_coffee_grounds(coffee_grounds, container)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_and_fill_coffee_filter(coffee_grounds: item, coffee_filter: item):
    body:
        if not inside(coffee_grounds, coffee_filter):
            put_inside(coffee_grounds, coffee_filter)

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_coffee(coffee_grounds)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        gather_and_fill_coffee_filter(coffee_grounds, coffee_filter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_food_2055_around_coffe_maker_147(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(food_food,coffe_maker_instance)
        else:
            exp(food_food,coffe_maker_instance)
    eff:
        unknown[food_food]=False
        close[food_food,coffe_maker_instance]=True
        close[coffe_maker_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_coffee_grounds(coffee:item, filter:item):
    body:
        if not inside(coffee, filter):
            put_inside(coffee, filter) # Place the coffee grounds inside the coffee makers filter

behavior __goal__():
    body:
        bind coffee: item where:
            is_food_food(coffee) and grabbable(coffee)
        # Select an item classified as food indicating its coffee grounds and can be grabbed
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter) and recipient(coffee_filter)
        # Select a coffee filter capable of receiving items
        if has_a_free_hand(char):
            grab(coffee)
            # Grab the coffee grounds if there is a free hand
            gather_coffee_grounds(coffee, coffee_filter)
            # Fill the coffee makers filter with coffee grounds

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_food_2055_around_coffe_maker_147(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(food_food,coffe_maker_instance)
        else:
            exp(food_food,coffe_maker_instance)
    eff:
        unknown[food_food]=False
        close[food_food,coffe_maker_instance]=True
        close[coffe_maker_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_coffee_grounds(coffee_filter:item):
    body:
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds)
        if not inside(coffee_grounds, coffee_filter):
            put_inside(coffee_grounds, coffee_filter)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        gather_coffee_grounds(coffee_filter)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_filter(coffee_grounds: item, coffee_filter: item):
    body:
        if not inside(coffee_grounds, coffee_filter):
            put_inside(coffee_grounds, coffee_filter)

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_coffee_grounds(coffee_grounds)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Once we have the coffee grounds and coffee filter, execute the filling behavior
        fill_coffee_filter(coffee_grounds, coffee_filter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_food_2055_around_coffe_maker_147(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(food_food,coffe_maker_instance)
        else:
            exp(food_food,coffe_maker_instance)
    eff:
        unknown[food_food]=False
        close[food_food,coffe_maker_instance]=True
        close[coffe_maker_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_filter_with_grounds(filter:item, grounds:item):
    body:
        if not inside(grounds, filter):
            put_inside(grounds, filter)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind filter: item where:
            is_coffee_filter(filter) and inside(filter, coffee_maker)
        bind grounds: item where:
            is_food_food(grounds) and grabbable(grounds)
        
        fill_coffee_filter_with_grounds(filter, grounds)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 77 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
