From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs.', '2. Cook the rice.', '3. Scramble the eggs.', '4. Mix the cooked rice with scrambled eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_rice_egg():
    # Function to find rice and eggs
    bind rice: item where:
        is_food_rice(rice)
    bind egg: item where:
        is_food_egg(egg)
    return (rice, egg)

behavior __goal__():
    body:
        if not exists rice: item : is_food_rice(rice) or not exists egg: item : is_food_egg(egg):
            # If rice or eggs are not found based on available information, start searching
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if this is rice or an egg")

        # Attempt to bind any found rice and egg for potential followup tasks
        rice, egg = find_rice_egg()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

def find_item(item_type:str, question:str):
    symbol has_item = exists obj: item : (is_food_rice(obj) or is_food_egg(obj) or is_food_food(obj))
    if not has_item:
        foreach obj: item:
            if not visited(obj):
                observe(obj, "question")

behavior __goal__():
    body:
        find_item(rice, Where is the rice)
        find_item(egg, Where are the eggs)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def found_rice_and_egg(rice:item, egg:item):
    # Function to determine if rice and eggs are found
    symbol found=exists r: item : (is_food_rice(r) and is_food_egg(egg))
    return found

behavior __goal__():
    body:
        if not found_rice_and_egg(rice, egg):
            # If rice and eggs are not found, search and find them
            foreach o: item:
                if (is_food_rice(o) or is_food_egg(o)) and not visited(o):
                    observe(o, "Check for rice and egg")
                end

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_rice():
    # Behavior to find rice within the environment
    foreach item: item:
        if is_food_rice(item) and not visited(item):
            observe(item, "Locate the rice")

def find_eggs():
    # Behavior to find eggs within the environment
    foreach item: item:
        if is_food_egg(item) and not visited(item):
            observe(item, "Locate the eggs")

behavior __goal__():
    body:
        find_rice()
        find_eggs()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_rice_in_fridge(fridge:item):
    if not visited(fridge):
        observe(fridge, "Check if there is rice inside the fridge")

def find_eggs_in_fridge(fridge:item):
    if not visited(fridge):
        observe(fridge, "Check if there are eggs inside the fridge")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Assuming rice and eggs might be in the fridge
        find_rice_in_fridge(fridge)
        find_eggs_in_fridge(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_rice_and_egg(storage: item):
    # Function to check if rice or eggs are stored in a specific storage
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, storage))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists storage: item : is_cupboard(storage) and find_rice_and_egg(storage):
            # If we have already found the storage with rice or eggs, we can directly approach it
            bind storage: item where:
                is_cupboard(storage) and find_rice_and_egg(storage)
            walk_to(storage)

        else:
            # Check all storages in the scene that have not been visited
            foreach storage: item:
                if is_cupboard(storage) and not visited(storage):
                    observe(storage, "Check is there any rice or eggs inside the storage")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_rice_and_egg(storage: item):
    # Function to check if rice or eggs are stored in a specific storage
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, storage))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists storage: item : is_cupboard(storage) and find_rice_and_egg(storage):
            # If we have already found the storage with rice or eggs, we can directly approach it
            bind storage: item where:
                is_cupboard(storage) and find_rice_and_egg(storage)
            walk_to(storage)

        else:
            # Check all storages in the scene that have not been visited
            foreach storage: item:
                if is_cupboard(storage) and not visited(storage):
                    observe(storage, "Check is there any rice or eggs inside the storage")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)obs(cupboard_130, Check is there any rice or eggs inside the storage)walk_executor(cupboard_131)open_executor(cupboard_131)obs(cupboard_131, Check is there any rice or eggs inside the storage)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check is there any rice or eggs inside the storage)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is CLEAN. cupboard_130 is OPEN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
obs(cupboard_131, Check is there any rice or eggs inside the storage)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is CLEAN. cupboard_131 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to identify whether the rice or eggs are located inside cupboard_130 or cupboard_131. The current observations have not indicated the presence of rice or eggs in either location. Continue to check other cupboards or storages as per the logic of the goal representation to locate rice and eggs.
##############################
From agent.py
Human Instruction: You need to identify whether the rice or eggs are located inside cupboard_130 or cupboard_131. The current observations have not indicated the presence of rice or eggs in either location. Continue to check other cupboards or storages as per the logic of the goal representation to locate rice and eggs.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: Observe around cupboard_130 with the question of Check is there any rice or eggs inside the storage.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: Observe around cupboard_131 with the question of Check is there any rice or eggs inside the storage.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs_inside(cupboard:item):
    # Function to check if there is rice or eggs in a specified cupboard
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists cupboard: item : is_cupboard(cupboard) and has_rice_or_eggs_inside(cupboard):
            # Check if there is a cupboard with rice or eggs based on the available information
            bind cupboard: item where:
                is_cupboard(cupboard) and has_rice_or_eggs_inside(cupboard)
            # Select a cupboard that has rice or eggs inside
            walk_to(cupboard)
            # Move the character closer to the cupboard with rice or eggs

        else: 
           # If no cupboard with rice or eggs is found, initiate exploration to locate one
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard,"Check is there any rice or eggs inside the storage")
                    # Observe whether each cupboard has any rice or eggs inside

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior walkthrough_check(obj:item):
    body:
        if is_cupboard(obj) and not visited(obj):
            walk_to(obj)
            observe(obj, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard):
                walkthrough_check(cupboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs_in_cupboard(cupboard:item):
    # Function to check if there is rice or eggs in a specified cupboard
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists cupboard: item : is_cupboard(cupboard) and has_rice_or_eggs_in_cupboard(cupboard):
            # Check if there is a cupboard with rice or eggs based on the available information
            bind cupboard: item where:
                is_cupboard(cupboard) and has_rice_or_eggs_in_cupboard(cupboard)
            # Select the cupboard with rice or eggs
            walk_to(cupboard)
            # Move the character closer to the cupboard with rice or eggs

        else:
            # If no cupboard with rice or eggs is found, initiate exploration to locate one
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard,"Check is there any rice or eggs inside the storage")
                    # Observe whether there is any rice or eggs inside the cupboard

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs_inside(cupboard:item):
    # Function to check if there are rice or eggs inside a specified cupboard
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return has_rice_or_eggs

behavior __goal__():
    body:
        if exists cupboard: item : is_cupboard(cupboard) and has_rice_or_eggs_inside(cupboard):
            # Check if there is a cupboard with rice or eggs based on the available information
            bind cupboard: item where:
                is_cupboard(cupboard) and has_rice_or_eggs_inside(cupboard)
            # Select a cupboard containing rice or eggs
            walk_to(cupboard) 
            # Move the character closer to the cupboard with rice or eggs

        else: 
           # If no cupboard with rice or eggs is found, initiate exploration to locate one
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard,"Check is there any rice or eggs inside the storage")
                    # Observe whether each cupboard has any rice or eggs

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_storage(storage:item):
    body:
        if not visited(storage):
            observe(storage, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131
        
        check_storage(cupboard_130)
        check_storage(cupboard_131)

        foreach storage: item:
            if is_cupboard(storage) and not visited(storage):
                check_storage(storage)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs(cupboard: item):
    # Function to check if there is rice or eggs in a specified cupboard
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return has_rice_or_eggs

behavior find_rice_and_eggs_in_cupboard(cupboard: item):
    body:
        if not visited(cupboard):
            observe(cupboard, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131
        
        if not has_rice_or_eggs(cupboard_130):
            find_rice_and_eggs_in_cupboard(cupboard_130)
        
        if not has_rice_or_eggs(cupboard_131):
            find_rice_and_eggs_in_cupboard(cupboard_131)

        if not (has_rice_or_eggs(cupboard_130) or has_rice_or_eggs(cupboard_131)):
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    find_rice_and_eggs_in_cupboard(cupboard)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs in the kitchen.', '2. Cook the rice.', '3. Fry the cooked rice with eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_egg_in_cupboard(cupboard:item):
    # Function to check if there is rice or eggs in a specified cupboard
    symbol has_rice_or_egg=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return has_rice_or_egg

behavior __goal__():
    body:
        if exists cupboard: item : is_cupboard(cupboard) and has_rice_or_egg_in_cupboard(cupboard):
            # If known cupboard has rice or eggs, walk to it
            bind cupboard: item where:
                is_cupboard(cupboard) and has_rice_or_egg_in_cupboard(cupboard)
            walk_to(cupboard)
        else:
            # Check all cupboards in the scene that have not been visited
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard,"Check is there any rice or eggs inside the storage")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior walk_and_observe_cupboards(cupboard:item):
    body:
        if not visited(cupboard):
            walk_to(cupboard)
            if can_open(cupboard):
                opens(cupboard)
            observe(cupboard, "Check is there any rice or eggs inside the storage")

def cupboard_with_items():
    symbol found=exists cupboard: item : (is_cupboard(cupboard) and visited(cupboard) and (exists o: item : (is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard)))
    return found

behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131

        if not cupboard_with_items():
            walk_and_observe_cupboards(cupboard_130)
            walk_and_observe_cupboards(cupboard_131)

            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    walk_and_observe_cupboards(cupboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def contains_rice_or_eggs(cupboard:item):
    # Function to check if there are rice or eggs in a specified cupboard
    symbol contains_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return contains_rice_or_eggs

behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130]==130
        # Verify if cupboard_130 contains rice or eggs
        if not visited(cupboard_130):
            walk_to(cupboard_130)
            observe(cupboard_130,"Check is there any rice or eggs inside the storage")
        
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131]==131
        # Verify if cupboard_131 contains rice or eggs
        if not visited(cupboard_131):
            walk_to(cupboard_131)
            opens(cupboard_131)
            observe(cupboard_131,"Check is there any rice or eggs inside the storage")
        
        # Check other cupboards if rice or eggs are not found in cupboard_130 or cupboard_131
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                walk_to(cupboard)
                opens(cupboard)
                observe(cupboard,"Check is there any rice or eggs inside the storage")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_129(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

def has_rice_or_eggs(storage:item):
    # Function to check if there is rice or eggs in a specified storage
    symbol has_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, storage))
    return has_rice_or_eggs

behavior __goal__():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                observe(cupboard, "Check is there any rice or eggs inside the storage")
                if has_rice_or_eggs(cupboard):
                    walk_to(cupboard)
                    break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_cupboards(cupboard:item):
    body:
        if not visited(cupboard) and is_cupboard(cupboard):
            opens(cupboard)
            observe(cupboard, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard):
                observe_cupboards(cupboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def check_for_rice_and_eggs(location:item):
    # Function to check for rice and eggs in a given location
    symbol has_rice_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, location))
    return has_rice_eggs

behavior __goal__():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                observe(cupboard, "Check is there any rice or eggs inside the storage")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the ingredients and necessary tools for making fried rice with egg, such as rice, eggs, and cooking oil, ensuring they are ready near the stove.', '2. Cook the rice if not already cooked.', '3. Heat oil in a pan, scramble the eggs, and set them aside.', '4. Stir-fry the rice, then add the scrambled eggs, mix everything together, and season as desired.', '']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2005_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_or_rice(x: item):
    # Function to check if the item is either egg or rice
    return is_food_egg(x) or is_food_rice(x)

behavior locate_rice_and_eggs_from_cupboard(cupboard: item):
    body:
        if not visited(cupboard):
            observe(cupboard, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130
        locate_rice_and_eggs_from_cupboard(cupboard_130)

        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131
        locate_rice_and_eggs_from_cupboard(cupboard_131)

        if not exists x: item : (is_egg_or_rice(x) and (inside(x, cupboard_130) or inside(x, cupboard_131))):
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    locate_rice_and_eggs_from_cupboard(cupboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2005_around_fridge_140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def contains_rice_or_egg(storage:item):
    symbol has_rice_or_egg=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, storage))
    return has_rice_or_egg

behavior check_cupboard_for_ingredients(cupboard:item):
    body:
        if can_open(cupboard) and not visited(cupboard):
            opens(cupboard)
            # Open the cupboard if it can be opened and hasnt been visited
        observe(cupboard, "Check is there any rice or eggs inside the storage")
        # Check for rice or eggs inside the cupboard

behavior __goal__():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                check_cupboard_for_ingredients(cupboard)
                # Check all unvisited cupboards for rice or eggs

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2005_around_fridge_140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredients_tool():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind eggs: item where:
            is_food_egg(eggs)
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        if not close_char(char, rice):
            walk_to(rice)
        if not close_char(char, eggs):
            walk_to(eggs)
        if not close_char(char, oil):
            walk_to(oil)

behavior search_for_missing_items():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                observe(cupboard, "Check is there any rice or eggs inside the storage")

behavior __goal__():
    body:
        if exists rice: item: (is_food_rice(rice)) and exists eggs: item: (is_food_egg(eggs)) and exists oil: item: (is_oil(oil)):
            gather_ingredients_tool()
        else:
            search_for_missing_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_stove_2090(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_rice,stove_instance)
        else:
            exp(food_rice,stove_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,stove_instance]=True
        close[stove_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2102_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient(item: item):
    # Function to check if an item is an ingredient for fried rice
    symbol is_ingredient= is_food_rice(item) or is_food_egg(item) or is_oil(item)
    return is_ingredient

behavior find_ingredients_and_tools():
    body:
        foreach cupboard: item:
            if is_cupboard(cupboard) and not visited(cupboard):
                observe(cupboard, "Check is there any rice, eggs, or cooking oil inside the storage")

behavior __goal__():
    body:
        find_ingredients_and_tools()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2102_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_cupboard_for_ingredients(cupboard:item):
    body:
        observe(cupboard, "Check is there any rice or eggs inside the storage")
        
behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130

        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131

        if not visited(cupboard_130):
            walk_to(cupboard_130)
            observe_cupboard_for_ingredients(cupboard_130)
        
        if not visited(cupboard_131):
            walk_to(cupboard_131)
            opens(cupboard_131)
            observe_cupboard_for_ingredients(cupboard_131)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2102_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def location_rice_or_eggs(cupboard:item):
    # Function to check if rice or eggs are inside a specified cupboard
    symbol contains_rice_or_eggs=exists o: item : ((is_food_rice(o) or is_food_egg(o)) and inside(o, cupboard))
    return contains_rice_or_eggs

behavior check_cupboard_for_items(cupboard:item):
    body:
        if not visited(cupboard):
            observe(cupboard, "Check is there any rice or eggs inside the storage")
    
behavior __goal__():
    body:
        bind cupboard_130: item where:
            is_cupboard(cupboard_130) and id[cupboard_130] == 130
        bind cupboard_131: item where:
            is_cupboard(cupboard_131) and id[cupboard_131] == 131
        
        if not location_rice_or_eggs(cupboard_130):
            # Check cupboard_130 for rice or eggs
            if not visited(cupboard_130):
                walk_to(cupboard_130)
            check_cupboard_for_items(cupboard_130)

        if not location_rice_or_eggs(cupboard_131):
            # Check cupboard_131 for rice or eggs
            if not visited(cupboard_131):
                walk_to(cupboard_131)
                opens(cupboard_131)
            check_cupboard_for_items(cupboard_131)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)']
Time info:
Time consume: 493 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 24
goal correct times: 0
action_num: 3

Task complete rate:
Keystate: k1 - Requires: 15 steps
Keystate: k2 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
