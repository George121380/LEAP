From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Boil the water in the pot.', '3. Add the noodles and chicken to the boiling water until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_fill_pot_with_water(pot:item, sink:item):
    body:
        if not inhand(pot):
            grab(pot)
            # Grab the pot if it is not already in hand
        walk_to(sink)
        # Move to the sink where the pot will be filled with water
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water at the sink

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling noodles
        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water
        find_and_fill_pot_with_water(pot, sink)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_fill_pot_with_water(pot:item, sink:item):
    body:
        if not inhand(pot):
            grab(pot)
            # Grab the pot if it is not already in hand
        walk_to(sink)
        # Move to the sink where the pot will be filled with water
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water at the sink

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling noodles
        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water
        find_and_fill_pot_with_water(pot, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(sink_133)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(sink_133)walk_executor(pot_54)open_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water by turning the faucet on.
##############################
From agent.py
Human Instruction: You need to fill the pot with water by turning the faucet on.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Grab pot_54.
Action 6: Walk to sink_133.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_towel_rack_300_around_bathtub_297(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel_rack,bathtub_instance)
        else:
            exp(towel_rack,bathtub_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathtub_instance]=True
        close[bathtub_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation

behavior get_a_pot():
    body:
        bind pot: item where:
            is_pot(pot)
        if not inhand(pot):
            grab(pot)

behavior walk_to_sink_and_fill_pot(sink: item, pot: item, faucet: item):
    body:
        if not close_char(char, sink):
            walk_to(sink)
        if not is_pot_open(pot):
            opens(pot)
        if is_off(faucet):
            switch_on(faucet)
        water(pot)

def is_pot_open(pot: item):
    # Assume the pot needs to be open to fill with water
    return open(pot)

behavior close_faucet(faucet: item):
    body:
        if is_on(faucet):
            switch_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet)
        get_a_pot()
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        walk_to_sink_and_fill_pot(sink, pot, faucet)
        close_faucet(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_bathtub_297(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(pot,bathtub_instance)
        else:
            exp(pot,bathtub_instance)
    eff:
        unknown[pot]=False
        close[pot,bathtub_instance]=True
        close[bathtub_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot_and_fill_with_water(pot:item, sink:item, faucet:item):
    body:
        if not inhand(pot):
            grab(pot)
            # Grab the pot if its not already in hand
        if not close_char(char, sink):
            walk_to(sink)
            # Move to the sink if not already there
        if not is_off(faucet):
            switch_on(faucet)
            # Turn on the faucet
        if not has_water(pot):
            water(pot)
            # Fill the pot with water

behavior close_faucet(faucet:item):
    body:
        if is_on(faucet):
            switch_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet attached to the sink
        find_pot_and_fill_with_water(pot, sink, faucet)
        close_faucet(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_298_around_bathtub_297(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel_rack,bathtub_instance)
        else:
            exp(towel_rack,bathtub_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathtub_instance]=True
        close[bathtub_instance,towel_rack]=True
    

behavior find_pot_54_around_television_216(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(pot,television_instance)
        else:
            exp(pot,television_instance)
    eff:
        unknown[pot]=False
        close[pot,television_instance]=True
        close[television_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot():
    body:
        foreach p: item:
            if is_pot(p) and not visited(p):
                observe(p, "Locate and identify the pot for use")

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if open(pot) and close_char(char, faucet):
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            if is_on(faucet):
                switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        walk_to(pot)
        grab(pot)
        walk_to(sink)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_television_216(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(pot,television_instance)
        else:
            exp(pot,television_instance)
    eff:
        unknown[pot]=False
        close[pot,television_instance]=True
        close[television_instance,pot]=True
    

behavior find_towel_rack_299_around_shower_303(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        if not close_char(char, pot):
            walk_to(pot)
        if not inhand(pot):
            grab(pot)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(pot):
            get_water(pot)
        switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        if not close_char(char, pot):
            walk_to(pot)
        if not inhand(pot):
            grab(pot)
        if not close_char(char, faucet):
            walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not has_water(pot):
            get_water(pot)
        switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_table_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

behavior find_towel_rack_298_around_towel_rack_298(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_pot_water(pot:item, faucet:item):
    body:
        if close_char(char, faucet) and not has_water(pot):
            water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # Select the pot in hand
        bind faucet: item where:
            is_faucet(faucet) and is_on(faucet)
        # Select a faucet that is on
        get_pot_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_298_around_towel_rack_298(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

behavior find_pot_54_around_television_216(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(pot,television_instance)
        else:
            exp(pot,television_instance)
    eff:
        unknown[pot]=False
        close[pot,television_instance]=True
        close[television_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot:item):
    # Function to check if a pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if close_char(char, pot) and close_char(char, faucet):
            if not is_filled_with_water(pot):
                switch_on(faucet)
                get_water(pot)
                switch_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and close_char(char, sink)
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet) and is_off(faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_300_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

behavior find_pot_54_around_table_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_fill_pot(pot:item, faucet:item):
    body:
        if not inhand(pot):
            grab(pot)
        if is_off(pot):
            opens(pot)
        if is_off(faucet):
            switch_on(faucet)
        get_water(pot)

def is_valid_faucet(faucet:item):
    # Function to check if the faucet can be switched on
    return has_switch(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink) and close_char(char, sink)
        if not (exists faucet: item : (close(faucet, sink) and is_valid_faucet(faucet))):
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Check if faucet can be switched on")
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink) and is_valid_faucet(faucet)
        grab_and_fill_pot(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_299_around_shower_303(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_prepare_pot_with_water(pot:item, sink:item, faucet:item):
    body:
        if not has_water(pot):
            if not close_char(char, pot):
                walk_to(pot)
            if not inhand(pot):
                grab(pot)
            if close_char(char, sink):
                put_close(pot, sink)
            if is_off(faucet):
                switch_on(faucet)
            water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        find_and_prepare_pot_with_water(pot, sink, faucet)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_pot():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # Assume pot_54 is in hand, as it was grabbed earlier
        
        bind faucet: item where:
            is_faucet(faucet) and is_on(faucet)
        # Choose faucet_308 since faucet_134 was switched off and issues with faucet_308 were detected

        walk_to(faucet)
        # Walk close to the selected faucet
        
        water(pot)
        # Fill the pot with water from the faucet

behavior __goal__():
    body:
        find_and_fill_pot()
        # Execute the behavior to find the pot and fill it with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_pot():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot) and not inhand(pot)
        walk_to(pot)
        grab(pot)

behavior walk_to_sink_close_faucet():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink) and id[faucet] == 134
        walk_to(sink)
        if is_on(faucet):
            switch_off(faucet)

behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        if is_off(faucet) and inhand(pot):
            walk_to(faucet)
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            if is_on(faucet):
                switch_off(faucet)

behavior __goal__():
    body:
        get_pot()
        walk_to_sink_close_faucet()
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308  # faucet_308 cannot be switched off
        fill_pot_with_water(faucet, pot)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior get_pot():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot) and not inhand(pot)
        walk_to(pot)
        grab(pot)

behavior walk_to_sink_close_faucet():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink) and id[faucet] == 134
        walk_to(sink)
        if is_on(faucet):
            switch_off(faucet)

behavior fill_pot_with_water(faucet: item, pot: item):
    body:
        if is_off(faucet) and inhand(pot):
            walk_to(faucet)
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            if is_on(faucet):
                switch_off(faucet)

behavior __goal__():
    body:
        get_pot()
        walk_to_sink_close_faucet()
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308  # faucet_308 cannot be switched off
        fill_pot_with_water(faucet, pot)


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(sink_133)walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the pot_54. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(sink_133)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchoff_executor(faucet_308) (Failed)', 'walk_executor(cupboard_130)']
Time info:
Time consume: 198 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 27 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
