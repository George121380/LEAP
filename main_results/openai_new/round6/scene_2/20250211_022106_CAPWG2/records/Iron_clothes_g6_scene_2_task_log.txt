From agent.py
Reset goals: The sub-goals are: 
['1. Iron the shirt and the skirt.  ', '2. Place the shirt and the skirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2116_around_basket_for_clothes_2040(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_iron_for_use(iron:item, board:item):
    body:
        if unplugged(iron) and has_plug(iron):
            walk_to(board) # Approach the ironing board where the iron is likely located
            plugin(iron) # Plug in the iron
        if is_off(iron) and has_switch(iron):
            switch_on(iron) # Turn on the iron

behavior iron_cloth(cloth:item, board:item):
    body:
        if is_clothes(cloth):
            if not on(cloth, board):
                put_on(cloth, board) # Place the cloth on the ironing board
            if exists iron: item : is_iron(iron):
                prepare_iron_for_use(iron, board)
                # Proceed to iron the cloth

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt

        iron_cloth(shirt, ironing_board)
        iron_cloth(skirt, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_skirt_2116_around_basket_for_clothes_2040(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ironing_items(shirt:item, skirt:item):
    body:
        if not inhand(shirt):
            grab(shirt)
        if not inhand(skirt):
            grab(skirt)

behavior prepare_iron(iron:item):
    body:
        if is_off(iron):
            switch_on(iron)
        if unplugged(iron):
            plugin(iron)
        
behavior iron_clothes(shirt:item, skirt:item, iron:item):
    body:
        if dirty(shirt):
            observe(shirt, "Check dirt on the shirt")
        if dirty(skirt):
            observe(skirt, "Check dirt on the skirt")
        # Iron the shirt and skirt without specifying exact actions, assuming cleanliness

behavior place_clothes_on_bed(shirt:item, skirt:item, bed:item):
    body:
        if inhand(shirt):
            put_on(shirt, bed)
        if inhand(skirt):
            put_on(skirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and grabbable(shirt)
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and grabbable(skirt)
        
        bind iron: item where:
            is_iron(iron)
        
        bind bed: item where:
            is_bed(bed)
        
        gather_ironing_items(shirt, skirt)
        prepare_iron(iron)
        iron_clothes(shirt, skirt, iron)
        place_clothes_on_bed(shirt, skirt, bed)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior gather_ironing_items(shirt:item, skirt:item):
    body:
        if not inhand(shirt):
            grab(shirt)
        if not inhand(skirt):
            grab(skirt)

behavior prepare_iron(iron:item):
    body:
        if is_off(iron):
            switch_on(iron)
        if unplugged(iron):
            plugin(iron)
        
behavior iron_clothes(shirt:item, skirt:item, iron:item):
    body:
        if dirty(shirt):
            observe(shirt, "Check dirt on the shirt")
        if dirty(skirt):
            observe(skirt, "Check dirt on the skirt")
        # Iron the shirt and skirt without specifying exact actions, assuming cleanliness

behavior place_clothes_on_bed(shirt:item, skirt:item, bed:item):
    body:
        if inhand(shirt):
            put_on(shirt, bed)
        if inhand(skirt):
            put_on(skirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and grabbable(shirt)
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and grabbable(skirt)
        
        bind iron: item where:
            is_iron(iron)
        
        bind bed: item where:
            is_bed(bed)
        
        gather_ironing_items(shirt, skirt)
        prepare_iron(iron)
        iron_clothes(shirt, skirt, iron)
        place_clothes_on_bed(shirt, skirt, bed)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(basket_for_clothes_2040)exp(clothes_skirt_2116, basket_for_clothes_2040)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)put_executor(clothes_skirt_2116, bed_264)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2114)grab_executor(clothes_skirt_2116)obs(clothes_shirt_2114, Check dirt on the shirt)obs(clothes_skirt_2116, Check dirt on the skirt)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)put_executor(clothes_skirt_2116, bed_264)
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. Grabbing clothes_skirt_2116 by left hand. 
##############################
From agent.py
obs(clothes_shirt_2114, Check dirt on the shirt)
Get this information:  clothes_shirt_2114 is close to character_219. clothes_shirt_2114 is inside bathroom_265. clothes_shirt_2114 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2116, Check dirt on the skirt)
Get this information:  clothes_skirt_2116 is inside bathroom_265. clothes_skirt_2116 is close to character_219. clothes_skirt_2116 is DIRTY.
##############################
From agent.py
walk_executor(bed_264)
Robot find: clothes_scarf_2079, pillow_239, clothes_dress_2075, pillow_240, clothes_jacket_2078, mat_237, drawing_238, Robot is close to the clothes_shirt_2114. Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_shirt_2114, bed_264)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. bed_264 is close clothes_shirt_2114. clothes_shirt_2114 is close bed_264. clothes_shirt_2114 is on bed_264. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
put_executor(clothes_skirt_2116, bed_264)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. clothes_skirt_2116 is close bed_264. bed_264 is close clothes_skirt_2116. clothes_skirt_2116 is on bed_264. clothes_skirt_2116 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt and the skirt using the iron.
##############################
From agent.py
Human Instruction: You need to iron the shirt and the skirt using the iron.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Grab clothes_shirt_2114.
Action 4: Grab clothes_skirt_2116.
Action 5: Observe around clothes_shirt_2114 with the question of Check dirt on the shirt.
Action 6: Observe around clothes_skirt_2116 with the question of Check dirt on the skirt.
Action 7: Walk to bed_264.
Action 8: Put clothes_shirt_2114 on bed_264.
Action 9: Put clothes_skirt_2116 on bed_264.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, clothes:item):
    body:
        if not clean(clothes):
            plugin(iron)  # Plug the iron in
            switch_on(iron)  # Turn on the iron
            # Assume we are inside the room with the clothes already
            grab(clothes)  # Grab the clothes again before ironing
            empty_a_hand()  # Assume clothes are placed on the ironing surface
            # Ironing manually will make the clothes clean
            wipe(clothes)
            # Turn off and unplug the iron once done
            switch_off(iron)
            plugout(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron item
        
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt item

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt item

        iron_clothes(iron, shirt)
        iron_clothes(iron, skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_dirty(item: item):
    # Function to check if a clothing item is dirty
    symbol is_dirty = dirty(item)
    return is_dirty

behavior iron_clothes(item1: item, item2: item, iron: item):
    body:
        if not is_on(iron):
            switch_on(iron) # Turn on the iron if it is off
        if not clean(item1):
            # If item1 is dirty, clean it first
            wash(item1)
        if not clean(item2):
            # If item2 is dirty, clean it first
            wash(item2)
        # Now that both pieces of clothing are clean, proceed to iron them
        look_at(iron)
        look_at(item1) # Iron the first item
        look_at(iron)
        look_at(item2) # Iron the second item

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and inside_char(char, basket)
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and inside(shirt, basket)

        bind skirt: item where:
            is_clothes_skirt(skirt) and inside(skirt, basket)

        walk_to(shirt)
        grab(shirt)
        grab(skirt)
        
        # Observe to check if the clothes are dirty
        observe(shirt, "Check dirt on the shirt")
        observe(skirt, "Check dirt on the skirt")

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        walk_to(ironing_board)

        bind iron: item where:
            is_iron(iron)

        walk_to(iron)
        plugin(iron)
        
        iron_clothes(shirt, skirt, iron)
        
        empty_a_hand()
        put_on(shirt, ironing_board)
        empty_a_hand()
        put_on(skirt, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironed(x: item):
    # Check if the clothes item is already ironed
    return not dirty(x)

behavior iron_clothes(ironing_board: item, iron: item, c: item):
    body:
        if not inhand(c):
            grab(c)
            # Grab the clothing item
        if not is_on(iron):
            switch_on(iron)
            # Turn on the iron
        if not close_char(char, ironing_board):
            walk_to(ironing_board)
            # Move close to the ironing board
        if not close(inhand(c), ironing_board):
            put_on(c, ironing_board)
            # Place the clothing on the ironing board
        scrub(c)
        # Use the iron, assumed as scrubbing action to iron the clothes
        if dirty(c):
            # If the clothing is still dirty, wipe it clean
            wipe(c)
        if inhand(c):
            empty_a_hand()
            # Release the clothing item

behavior iron_shirt_and_skirt(ironing_board: item, iron: item):
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        if not is_ironed(shirt):
            iron_clothes(ironing_board, iron, shirt)
            # Iron the shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        if not is_ironed(skirt):
            iron_clothes(ironing_board, iron, skirt)
            # Iron the skirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt_and_skirt(ironing_board, iron)
        # Execute the behavior to iron both the shirt and the skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(x: item, iron: item):
    body:
        if is_clothes(x) and is_off(iron):
            plugin(iron) # Plug in the iron
            switch_on(iron) # Switch on the iron
            empty_a_hand() # Ensure hands are free to grab clothes
            grab(x) # Grab the clothes to be ironed
            touch(x) # Assume this simulates ironing
            put_on(x, bed) # Place the ironed clothes on the bed
        switch_off(iron) # Turn off the iron after use
        plugout(iron) # Unplug the iron for safety

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron)
        bind bed: item where:
            is_bed(bed)
        iron_clothes(shirt, iron)
        iron_clothes(skirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(item_to_iron: item, iron: item, board: item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        if not on(item_to_iron, board):
            put_on(item_to_iron, board)
        # Assume using the iron irons the clothes
        if dirty(item_to_iron):
            scrub(item_to_iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind board: item where:
            is_ironing_board(board)
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        iron_clothes(shirt, iron, board)
        iron_clothes(skirt, iron, board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_clothes(item_to_iron: item, iron: item, board: item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        if not on(item_to_iron, board):
            put_on(item_to_iron, board)
        # Assume using the iron irons the clothes
        if dirty(item_to_iron):
            scrub(item_to_iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind board: item where:
            is_ironing_board(board)
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        iron_clothes(shirt, iron, board)
        iron_clothes(skirt, iron, board)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)walk_executor(clothes_skirt_2116)scrub_executor(clothes_skirt_2116)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the ironing_board_2099. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)walk_executor(clothes_skirt_2116)scrub_executor(clothes_skirt_2116)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is turned on. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. clothes_shirt_2114 is cleaned. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the bed_264. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the bed_264. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_skirt_2116, ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_skirt_2116. clothes_skirt_2116 is close ironing_board_2099. clothes_skirt_2116 is on ironing_board_2099. clothes_skirt_2116 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. 
##############################
From agent.py
scrub_executor(clothes_skirt_2116)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. clothes_skirt_2116 is cleaned. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to use the iron to iron the shirt and the skirt. The current actions involve scrubbing, but ironing requires using the iron that has already been plugged in and turned on.
##############################
From agent.py
Human Instruction: You need to use the iron to iron the shirt and the skirt. The current actions involve scrubbing, but ironing requires using the iron that has already been plugged in and turned on.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Grab clothes_shirt_2114.
Action 4: Grab clothes_skirt_2116.
Action 5: Observe around clothes_shirt_2114 with the question of Check dirt on the shirt.
Action 6: Observe around clothes_skirt_2116 with the question of Check dirt on the skirt.
Action 7: Walk to bed_264.
Action 8: Put clothes_shirt_2114 on bed_264.
Action 9: Put clothes_skirt_2116 on bed_264.
Action 10: Walk to ironing_board_2099.
Action 11: look for iron_2117 around ironing_board_2099.
Action 12: Walk to iron_2117.
Action 13: Plug in iron_2117.
Action 14: Switch on iron_2117.
Action 15: Walk to clothes_shirt_2114.
Action 16: Grab clothes_shirt_2114.
Action 17: Walk to ironing_board_2099.
Action 18: Put clothes_shirt_2114 on ironing_board_2099.
Action 19: Walk to clothes_shirt_2114.
Action 20: Scrub clothes_shirt_2114.
Action 21: Walk to clothes_skirt_2116.
Action 22: Grab clothes_skirt_2116.
Action 23: Walk to ironing_board_2099.
Action 24: Put clothes_skirt_2116 on ironing_board_2099.
Action 25: Walk to clothes_skirt_2116.
Action 26: Scrub clothes_skirt_2116.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_needle_2024_around_bookshelf_189(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(needle,bookshelf_instance)
        else:
            exp(needle,bookshelf_instance)
    eff:
        unknown[needle]=False
        close[needle,bookshelf_instance]=True
        close[bookshelf_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothes:item, ironing_board:item, iron:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)  # Place the clothing on the ironing board
        if close_char(char, iron) and not is_on(iron):
            switch_on(iron)  # Turn on the iron
        if not clean(clothes):
            scrub(clothes)  # Scrub the clothing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the skirt

        iron_clothes(clothes_shirt, ironing_board, iron)  # Iron the shirt
        iron_clothes(clothes_skirt, ironing_board, iron)  # Iron the skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_130(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def ready_to_iron(clothes:item):
    # Function to check if clothes are on the ironing board and ready to be ironed
    return on(clothes, ironing_board) and not clean(clothes)

behavior grab_and_prepare(clothes:item):
    body:
        if not inhand(clothes):
            grab(clothes)  # Grab the clothing item if not in hand
        walk_to(ironing_board)
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)  # Place the clothing item on the ironing board

behavior iron_clothes(clothes:item):
    body:
        if ready_to_iron(clothes):
            observe(clothes, "Ensure the fabric is flat and ready")
            # Assuming scrubbing was a mistake and ironing should be done
            pourable(clothes)  # Symbolizes ironing process

behavior prepare_iron(iron:item):
    body:
        if not is_on(iron):
            if not plugged(iron):
                plugin(iron)  # Plugin the iron if its not plugged
            switch_on(iron)  # Turn on the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron)

        # Ensure iron is ready
        prepare_iron(iron)

        # Handle shirt
        grab_and_prepare(shirt)
        iron_clothes(shirt)

        # Handle skirt
        grab_and_prepare(skirt)
        iron_clothes(skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_130(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_iron_on(iron:item):
    body:
        if not is_on(iron):
            switch_on(iron)

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        if dirty(clothes):
            scrub(clothes)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)

        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind iron: item where:
            is_iron(iron)

        ensure_iron_on(iron)
        
        foreach clothes: item:
            if clothes==clothes_shirt or clothes==clothes_skirt:
                iron_clothes(clothes, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothes:item):
    body:
        if not clean(clothes):
            scrub(clothes)
        
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        if is_off(iron):
            switch_on(iron)
            # Turn on the iron if its off
        
        iron_clothes(shirt)
        # Iron the shirt
        iron_clothes(skirt)
        # Iron the skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_clothes_dress_2075(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind clothes_dress_instance:item where:
            is_clothes_dress(clothes_dress_instance) and id[clothes_dress_instance]==2075
        achieve close_char(char,clothes_dress_instance)
        if can_open(clothes_dress_instance):
            achieve_once open(clothes_dress_instance)
            exp(clothes_hat,clothes_dress_instance)
        else:
            exp(clothes_hat,clothes_dress_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,clothes_dress_instance]=True
        close[clothes_dress_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(ironing_board:item, iron:item, clothes:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        if inhand(clothes):
            empty_a_hand()
        scrub(clothes)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        
        if not is_on(iron):
            if not plugged(iron):
                plugin(iron)
            switch_on(iron)
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and not inhand(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt) and not inhand(skirt)
        
        walk_to(shirt)
        grab(shirt)
        
        walk_to(ironing_board)
        iron_clothes(ironing_board, iron, shirt)
        
        walk_to(skirt)
        grab(skirt)
        
        walk_to(ironing_board)
        iron_clothes(ironing_board, iron, skirt)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_clothes(ironing_board:item, iron:item, clothes:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        if inhand(clothes):
            empty_a_hand()
        scrub(clothes)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        
        if not is_on(iron):
            if not plugged(iron):
                plugin(iron)
            switch_on(iron)
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and not inhand(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt) and not inhand(skirt)
        
        walk_to(shirt)
        grab(shirt)
        
        walk_to(ironing_board)
        iron_clothes(ironing_board, iron, shirt)
        
        walk_to(skirt)
        grab(skirt)
        
        walk_to(ironing_board)
        iron_clothes(ironing_board, iron, skirt)


##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)walk_executor(clothes_skirt_2116)scrub_executor(clothes_skirt_2116)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
put_executor(clothes_skirt_2116, ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. clothes_skirt_2116 is close ironing_board_2099. clothes_skirt_2116 is on ironing_board_2099. clothes_skirt_2116 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
scrub_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to use the iron to iron the shirt and the skirt, not scrub them. Ensure the iron is used as intended to complete the ironing task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_washing_machine_2041(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_hat,washing_machine_instance)
        else:
            exp(clothes_hat,washing_machine_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,washing_machine_instance]=True
        close[washing_machine_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2022_around_cupboard_130(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(clothes_underwear,cupboard_instance)
        else:
            exp(clothes_underwear,cupboard_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,cupboard_instance]=True
        close[cupboard_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_bed(item_1: item, item_2: item, bed: item):
    body:
        if not on(item_1, bed):
            put_on(item_1, bed)
        if not on(item_2, bed):
            put_on(item_2, bed)

behavior __goal__():
    body:
        bind bed: item where:
            is_bed(bed)
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        put_on_bed(shirt, skirt, bed)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_on_bed(item_1: item, item_2: item, bed: item):
    body:
        if not on(item_1, bed):
            put_on(item_1, bed)
        if not on(item_2, bed):
            put_on(item_2, bed)

behavior __goal__():
    body:
        bind bed: item where:
            is_bed(bed)
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        put_on_bed(shirt, skirt, bed)

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(bed_264)put_executor(clothes_skirt_2116, bed_264)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_shirt_2114, bed_264)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. clothes_shirt_2114 is close bed_264. clothes_shirt_2114 is on bed_264. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_skirt_2116, bed_264)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. clothes_skirt_2116 is close bed_264. clothes_skirt_2116 is on bed_264. clothes_skirt_2116 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt, and place them on the bed.
Action History:
['walk_executor(basket_for_clothes_2040)', 'grab_executor(clothes_shirt_2114)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(bed_264)', 'put_executor(clothes_shirt_2114, bed_264)', 'put_executor(clothes_skirt_2116, bed_264)', 'walk_executor(ironing_board_2099)', 'walk_executor(iron_2117)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_skirt_2116, ironing_board_2099)', 'walk_executor(clothes_skirt_2116)', 'scrub_executor(clothes_skirt_2116)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_skirt_2116, ironing_board_2099)', 'walk_executor(clothes_skirt_2116)', 'scrub_executor(clothes_skirt_2116)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(bed_264)', 'put_executor(clothes_shirt_2114, bed_264)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(bed_264)', 'put_executor(clothes_skirt_2116, bed_264)']
Time info:
Time consume: 370 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 13
goal correct times: 0
action_num: 42

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 6 steps
Keystate: k3 - Requires: 0 steps
Keystate: k4 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
