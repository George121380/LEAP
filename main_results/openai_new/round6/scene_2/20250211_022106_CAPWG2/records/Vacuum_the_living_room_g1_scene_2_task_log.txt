From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor by pushing and pulling the vacuum cleaner.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_couch_192(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(vacuum_cleaner,couch_instance)
        else:
            exp(vacuum_cleaner,couch_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,couch_instance]=True
        close[couch_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if not close_char(char, vacuum_cleaner):
            walk_to(vacuum_cleaner)
        if movable(vacuum_cleaner):
            push(vacuum_cleaner)
            pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner to perform the task
        move_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior move_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if not close_char(char, vacuum_cleaner):
            walk_to(vacuum_cleaner)
        if movable(vacuum_cleaner):
            push(vacuum_cleaner)
            pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner to perform the task
        move_vacuum_cleaner(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(vacuum_cleaner_2094, couch_192)walk_executor(vacuum_cleaner_2094)push_executor(vacuum_cleaner_2094)pull_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(couch_192)
Robot find: pillow_195, vacuum_cleaner_2094, drawing_196, cat_2082, Robot is close to the couch_192. 
##############################
From agent.py
exp(vacuum_cleaner_2094, couch_192)
Find vacuum_cleaner_2094. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)push_executor(vacuum_cleaner_2094)pull_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py
push_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py
pull_executor(vacuum_cleaner_2094)
Robot find: Robot is close to the vacuum_cleaner_2094. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Vacuum the floor by push and pull the vacuume clearner.
Action History:
['walk_executor(couch_192)', 'walk_executor(vacuum_cleaner_2094)', 'push_executor(vacuum_cleaner_2094)', 'pull_executor(vacuum_cleaner_2094)']
Time info:
Time consume: 20 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0
action_num: 4

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
