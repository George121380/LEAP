From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.  ', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not is_on(stove):
            switch_on(stove) # Turn on the stove
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not cut(vegetables):
            cuts(vegetables) # Cut the vegetables if they are not already cut
        if not inside(vegetables, pot):
            put_inside(vegetables, pot) # Place the vegetables in the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select a pot that is on the stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil
        
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation

def prepare_pot(pot: item):
    # Ensure the pot is ready for boiling
    if is_dirty(pot):
        rinse(pot)
    if not has_water(pot):
        get_water(pot)

behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        prepare_pot(pot)
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior switch_stove_on(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not has_water(pot):
            fill_pot_with_water(pot)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if not is_on(stove):
            switch_stove_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        if unplugged(stove):
            plugin(stove)
        if is_off(stove):
            switch_on(stove)
        if not has_water(pot):
            walk_to(pot)
            fill_pot_with_water(pot, stove)
        observe(pot, "Check if vegetables are in the pot")
        # Assuming vegetables are added to the pot outside this behavior

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        # Fill the pot with water and boil vegetables
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        if unplugged(stove):
            plugin(stove)
        if is_off(stove):
            switch_on(stove)
        if not has_water(pot):
            walk_to(pot)
            fill_pot_with_water(pot, stove)
        observe(pot, "Check if vegetables are in the pot")
        # Assuming vegetables are added to the pot outside this behavior

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        # Fill the pot with water and boil vegetables
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(kitchen_counter_132)exp(pot_2093, kitchen_counter_132)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)obs(pot_2093, Check if vegetables are in the pot)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_132)
Fail to find pot_2093 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_54)obs(pot_54, Check if vegetables are in the pot)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. 
##############################
From agent.py
obs(pot_54, Check if vegetables are in the pot)
Get this information:  pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the pot is filled with water and that the vegetables are in the pot before boiling. The observation concluded that the pot is open, clean, and empty of water and vegetables. The pot needs to be filled with water, the vegetables need to be added, and then the stove should be turned on to boil the vegetables.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the pot is filled with water and that the vegetables are in the pot before boiling. The observation concluded that the pot is open, clean, and empty of water and vegetables. The pot needs to be filled with water, the vegetables need to be added, and then the stove should be turned on to boil the vegetables.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to kitchen_counter_132.
Action 3: look for pot_2093 around kitchen_counter_132.
Action 4: Walk to faucet_134.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Switch on stove_2090.
Action 12: Walk to pot_54.
Action 13: Observe around pot_54 with the question of Check if vegetables are in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def pot_is_ready(pot:item):
    # Function to check if the pot is ready for boiling vegetables
    symbol ready= open(pot) and has_water(pot)
    return ready

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            put_close(pot, faucet)
            get_water(pot)

behavior add_vegetables_to_pot(pot:item, vegetables:item):
    body:
        if not inside(vegetables, pot):
            walk_to(vegetables)
            grab(vegetables)
            walk_to(pot)
            put_inside(vegetables, pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        walk_to(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(pot, vegetables)

        if pot_is_ready(pot):
            boil_vegetables(pot, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_128(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_128(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def pot_ready_to_boil(pot: item):
    # Check if the pot is ready for boiling (has water and vegetables inside)
    symbol has_vegetables_and_water=exists o: item : (is_food_vegetable(o) and inside(o, pot)) and has_water(pot)
    return has_vegetables_and_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            if not close_char(char, faucet):
                walk_to(faucet)
            get_water(pot)
            put_close(item, faucet)

behavior add_vegetables_to_pot(pot: item):
    body:
        foreach veg: item:
            if is_food_vegetable(veg) and not inside(veg, pot) and grabbable(veg):
                grab(veg)
                if not close_char(char, pot):
                    walk_to(pot)
                put_inside(veg, pot)
                empty_a_hand()

behavior start_boiling(pot: item, stove: item):
    body:
        if pot_ready_to_boil(pot):
            if not close_char(char, stove):
                walk_to(stove)
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and clean(pot) and open(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_128(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable_in_pot(pot:item):
    # Function to check if vegetables are in the pot
    symbol has_vegetable=exists vegetable: item : (is_food_vegetable(vegetable) and inside(vegetable, pot))
    return has_vegetable

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_with_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            walk_to(faucet)
            get_water(pot)

behavior add_vegetables_to_pot(pot:item, vegetable:item):
    body:
        if not inside(vegetable, pot):
            grab(vegetable)
            put_inside(vegetable, pot)

behavior boil_the_vegetables(pot:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot that is open, clean, empty, and on a kitchen counter
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_with_water(pot, faucet)

        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                add_vegetables_to_pot(pot, vegetable)

        boil_the_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling_ready(pot: item):
    # Function to check if the pot is ready to be boiled
    symbol ready = has_water(pot) and exists veggies: item : (is_food_vegetable(veggies) and inside(veggies, pot))
    return ready

def ensure_pot_ready(pot: item):
    # Ensure the pot is open, filled with water, and contains vegetables
    body:
        if not open(pot):
            opens(pot)
        
        if not has_water(pot):
            walk_to(faucet_134)
            get_water(pot)

        if not exists veggies: item : (is_food_vegetable(veggies) and inside(veggies, pot)):
            foreach veggies: item:
                if is_food_vegetable(veggies):
                    grab(veggies)
                    put_inside(veggies, pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)

        bind stove: item where:
            is_stove(stove) and close_char(char, stove)

        ensure_pot_ready(pot)
        
        if is_boiling_ready(pot):
            boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_prepared(pot:item):
    # Function to ensure the pot is open, clean, and filled with water with vegetables
    if not open(pot):
        opens(pot)  # Open the pot if it is not open
    if not has_water(pot):
        get_water(pot)  # Fill the pot with water if it does not have water
    if not inside_char(char, pot):
        # Assuming vegetables are categorized as is_food_vegetable
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not inside(vegetable, pot):
                put_inside(vegetable, pot)  # Add vegetables to the pot

behavior boil_vegetables(stove:item, pot:item):
    body:
        if is_off(stove):
            switch_on(stove)  # Turn on the stove to start boiling
        watch(pot)  # Observe the pot to ensure vegetables are boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        ensure_pot_prepared(pot)
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_vegetables(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_cupboard_131(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water from the faucet

behavior add_vegetables_to_pot(pot: item):
    body:
        if not exists veg: item : (is_food_vegetable(veg) and inside(veg, pot)):
            bind veg: item where:
                is_food_vegetable(veg) and not inside(veg, pot)
            grab(veg)
            put_inside(veg, pot)
            empty_a_hand()
            # Add vegetables to the pot

behavior boil_vegetables_on_stove(pot: item, stove: item):
    body:
        if not is_on(stove):
            walk_to(stove)
            switch_on(stove)
            # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables.  " ?
Answer: Wash the vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables in the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_cupboard_131(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_empty(pot:item):
    # Function to check if a pot is empty, ie, has no water and vegetables
    symbol pot_empty=not has_water(pot) and not exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return pot_empty

def pot_ready_to_boil(pot:item):
    # Function to check if a pot is ready for boiling, ie, has water and vegetables
    symbol ready_to_boil=has_water(pot) and exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return ready_to_boil

behavior put_vegetables_in_pot(veg:item, pot:item):
    body:
        if not inside(veg, pot):
            put_inside(veg, pot) # Place the vegetables inside the pot

behavior prepare_pot_for_boil(pot:item):
    body:
        if is_pot_empty(pot):
            opens(pot) # Open the pot if it is closed
            get_water(pot) # Fill the pot with water
            bind veg: item where:
                is_food_vegetable(veg)
            put_vegetables_in_pot(veg, pot) # Place vegetables in the pot

behavior start_boiling(pot:item, stove:item):
    body:
        if pot_ready_to_boil(pot) and is_off(stove):
            put_on(pot, stove) # Place the pot on the stove
            switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        prepare_pot_for_boil(pot) # Prepare pot with water and vegetables
        start_boiling(pot, stove) # Start boiling the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def water_pot(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior prepare_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior boil_vegetables(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        walk_to(pot)
        water_pot(pot)
        prepare_vegetables(pot, stove, vegetables)
        walk_to(stove)
        boil_vegetables(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_cupboard_131(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_add_vegetables():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        wash(vegetables) # Wash the vegetables first
        get_water(pot) # Fill the pot with water

        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove
        
        if not inside(vegetables, pot):
            put_inside(vegetables, pot) # Add vegetables to the pot

behavior start_boiling(pot:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot)
        
        wash_and_add_vegetables()
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_empty(pot:item):
    # Check if the pot is empty, ie, does not have water or vegetables
    symbol is_empty=not exists o: item : (has_water(pot) or is_food_vegetable(o) and inside(o, pot))
    return is_empty

def is_filled_with_water(pot:item):
    # Check if the pot is filled with water
    symbol filled=has_water(pot)
    return filled

def add_water_to_pot(pot:item, faucet:item):
    # Fill the pot with water if it is empty
    if not is_filled_with_water(pot):
        grab(pot)
        walk_to(faucet)
        get_water(pot)
        empty_a_hand()

def put_vegetables_in_pot(pot:item, vegetables:item):
    # Put vegetables in the pot if they are not already inside
    if not inside(vegetables, pot):
        grab(vegetables)
        put_inside(vegetables, pot)
        empty_a_hand()

def prepare_vegetables(pot:item, faucet:item):
    # Ensure the water and vegetables are in the pot
    if is_pot_empty(pot):
        add_water_to_pot(pot, faucet)
    
    bind vegetables: item where:
        is_food_vegetable(vegetables)
    if not inside(vegetables, pot):
        wash(vegetables)
        put_vegetables_in_pot(pot, vegetables)

behavior boil_vegetables(pot:item, stove:item, faucet:item):
    body:
        if open(pot):
            prepare_vegetables(pot, faucet)
            # After ensuring pot has water and vegetables
            put_on(pot, stove)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        boil_vegetables(pot, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation

def is_pot_filled_with_water(pot:item):
    symbol has_water=has_water(pot)
    return has_water

def is_stove_on(stove:item):
    symbol stove_on=is_on(stove)
    return stove_on

behavior prepare_and_boil_vegetables(pot:item, vegetables:item, stove:item, faucet:item):
    body:
        if not is_pot_filled_with_water(pot):
            get_water(pot)
        
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        
        if not is_stove_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        # Ensure the vegetables are clean before boiling
        wash(vegetables)

        # Follow the procedure to boil the vegetables
        prepare_and_boil_vegetables(pot, vegetables, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_kitchen_counter_128(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_unprepared(pot:item):
    # Check if the pot is open, clean and empty of water and vegetables, and also if its unvisited
    symbol pot_unprepared = open(pot) and clean(pot) and not has_water(pot) and not visited(pot)
    return pot_unprepared

behavior prepare_vegetables_pot(pot:item):
    body:
        if not open(pot):
            opens(pot)
        
        if not clean(pot):
            scrub(pot)
        
        if not has_water(pot):
            get_water(pot)

behavior wash_vegetables(vegetables:item):
    body:
        if dirty(vegetables):
            wash(vegetables)

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_unprepared(pot)
        # Bind the pot that is open, clean, and empty of water and vegetables
        
        prepare_vegetables_pot(pot)
        # Prepare the pot by opening it, cleaning it, and filling it with water
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind an item that is identified as vegetables
        
        wash_vegetables(vegetables)
        # Wash the vegetables
        
        put_vegetables_in_pot(vegetables, pot)
        # Place the vegetables in the pot
        
        bind stove: item where:
            is_stove(stove)
        # Bind the stove item
        
        turn_on_stove(stove)
        # Turn on the stove to start boiling the vegetables

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_134)', 'walk_executor(kitchen_counter_132)', 'walk_executor(faucet_134)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(pot_54)']
Time info:
Time consume: 330 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 16
goal correct times: 0
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 14 steps
Keystate: k3 - Requires: 9 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
