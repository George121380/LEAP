From agent.py
Reset goals: The sub-goals are: 
['1. Find the vegetables to be boiled.', '2. Place the pot on the stove with water.', '3. Boil the vegetables in the pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_fridge_140(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(food: item):
    # Function to check if the item is a vegetable
    return is_food_vegetable(food)

behavior find_vegetables():
    body:
        foreach veg: item:
            # Iterate through items to find vegetables
            if is_food_vegetable(veg) and not visited(veg):
                observe(veg, "Check if this is the vegetable to be boiled")
                # Observe unvisited items to identify vegetables

behavior __goal__():
    body:
        find_vegetables()
        # Use the find_vegetables behavior to search for vegetables

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_vegetable(food: item):
    # Function to check if the item is a vegetable
    return is_food_vegetable(food)

behavior find_vegetables():
    body:
        foreach veg: item:
            # Iterate through items to find vegetables
            if is_food_vegetable(veg) and not visited(veg):
                observe(veg, "Check if this is the vegetable to be boiled")
                # Observe unvisited items to identify vegetables

behavior __goal__():
    body:
        find_vegetables()
        # Use the find_vegetables behavior to search for vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if this is the vegetable to be boiled)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
obs(food_vegetable_2072, Check if this is the vegetable to be boiled)
##############################
From agent.py
obs(food_vegetable_2072, Check if this is the vegetable to be boiled)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_115_around_stove_2090(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(mat,stove_instance)
        else:
            exp(mat,stove_instance)
    eff:
        unknown[mat]=False
        close[mat,stove_instance]=True
        close[stove_instance,mat]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior place_pot_on_stove_with_water(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        place_pot_on_stove_with_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_pot_on_stove_with_water(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        place_pot_on_stove_with_water(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_2093, kitchen_counter_132)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_132)
Fail to find pot_2093 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. The pot is on the stove, but the action to get and fill the pot with water has not been completed.
##############################
From agent.py
Human Instruction: You need to fill the pot with water. The pot is on the stove, but the action to get and fill the pot with water has not been completed.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_vegetable_2072 around fridge_140.
Action 5: Observe around food_vegetable_2072 with the question of Check if this is the vegetable to be boiled.
Action 6: Walk to kitchen_counter_132.
Action 7: look for pot_2093 around kitchen_counter_132.
Action 8: Walk to pot_54.
Action 9: Grab pot_54.
Action 10: Walk to stove_2090.
Action 11: Put pot_54 on stove_2090.
Action 12: Walk to pot_54.
Action 13: Open pot_54.
Action 14: Grab pot_54.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bookshelf_189(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(phone,bookshelf_instance)
        else:
            exp(phone,bookshelf_instance)
    eff:
        unknown[phone]=False
        close[phone,bookshelf_instance]=True
        close[bookshelf_instance,phone]=True
    

behavior find_mat_201_around_bench_125(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Put the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        fill_pot_with_water(pot, faucet)
        put_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Put the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        fill_pot_with_water(pot, faucet)
        put_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water before placing it on the stove.
##############################
From agent.py
Human Instruction: Fill the pot with water before placing it on the stove.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_vegetable_2072 around fridge_140.
Action 5: Observe around food_vegetable_2072 with the question of Check if this is the vegetable to be boiled.
Action 6: Walk to kitchen_counter_132.
Action 7: look for pot_2093 around kitchen_counter_132.
Action 8: Walk to pot_54.
Action 9: Grab pot_54.
Action 10: Walk to stove_2090.
Action 11: Put pot_54 on stove_2090.
Action 12: Walk to pot_54.
Action 13: Open pot_54.
Action 14: Grab pot_54.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to faucet_308.
Action 18: Switch off faucet_308.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_kitchen_counter_128(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_mat_201_around_pot_2093(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(mat,pot_instance)
        else:
            exp(mat,pot_instance)
    eff:
        unknown[mat]=False
        close[mat,pot_instance]=True
        close[pot_instance,mat]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot:item):
    # Check if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not is_filled_with_water(pot):
            walk_to(faucet)
            grab(pot)
            water(pot)
            empty_a_hand()

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_kitchen_counter_128(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_mat_237_around_kitchen_counter_128(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            walk_to(pot)
            grab(pot)
            bind faucet: item where:
                is_faucet(faucet)
            walk_to(faucet)
            get_water(pot)
            
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        walk_to(stove)
        if not on(pot, stove):
            put_on(pot, stove)
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            walk_to(pot)
            grab(pot)
            bind faucet: item where:
                is_faucet(faucet)
            walk_to(faucet)
            get_water(pot)
            
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        walk_to(stove)
        if not on(pot, stove):
            put_on(pot, stove)
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before it is placed on the stove. Ensure that the pot has water in it, and then place it on the stove.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_mat_292_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, vegetable:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot) # Ensure the pot has water before boiling

        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

        if not cut(vegetable):
            cuts(vegetable) # Cut the vegetable if not already cut
        
        if not inside(vegetable, pot):
            put_inside(vegetable, pot) # Put the vegetables inside the pot

        if is_off(stove):
            switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables(pot, vegetable, stove) # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_130(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_mat_201_around_cupboard_131(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, vegetable:item):
    body:
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove to start heating
        if not cut(vegetable):
            cuts(vegetable)
            # Cut the vegetables if they are not cut
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)
            # Place the vegetables inside the pot
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable to be boiled
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        boil_vegetables(pot, stove, vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_mat_201_around_bench_126(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==126
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        if on(pot, stove) and has_water(pot) and inside(vegetables, pot):
            switch_on(stove)
            # Turn on the stove to start boiling the vegetables
        
behavior prepare_vegetables(vegetables:item, pot:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
            # Place the vegetables inside the pot

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            get_water(pot)
            # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        fill_pot_with_water(pot, faucet)
        prepare_vegetables(vegetables, pot)
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bench_122(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(phone,bench_instance)
        else:
            exp(phone,bench_instance)
    eff:
        unknown[phone]=False
        close[phone,bench_instance]=True
        close[bench_instance,phone]=True
    

behavior find_mat_292_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_chair_374_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior fetch_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            get_water(pot)
            empty_a_hand()

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Put the pot on the stove
        if not is_on(stove):
            switch_on(stove) # Turn on the stove
        if not has_water(pot):
            walk_to(stove) 
            grab(pot)
            fetch_water(pot, stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled
        bind pot: item where:
            is_pot(pot)
        # Select the pot to be used
        bind stove: item where:
            is_stove(stove)
        # Select the stove to be used
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

behavior boil_vegetables(pot:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
            # Ensure the stove is turned on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090) and has_water(pot) 
        # Select pot on stove_2090 with water to be boiled

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_201_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_phone_47_around_fryingpan_2107(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2107
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(phone,fryingpan_instance)
        else:
            exp(phone,fryingpan_instance)
    eff:
        unknown[phone]=False
        close[phone,fryingpan_instance]=True
        close[fryingpan_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            if close_char(char, faucet):
                get_water(pot)
            else:
                walk_to(faucet)
                get_water(pot)

behavior boil_vegetables_in_pot(pot: item, stove: item, vegetables: item):
    body:
        if inhand(vegetables):
            put_on(vegetables, pot)
        else:
            bind stove: item where:
                is_stove(stove)
            walk_to(stove)
            grab(vegetables)
            put_on(vegetables, pot)
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        if not has_water_in_pot(pot):
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)
        boil_vegetables_in_pot(pot, stove, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. boil the vegetables in the pot on the stove." ?
Answer: Before boiling the vegetables in the pot on the stove, you need to clean the vegetables first. After placing the pot on the stove with water, turn on the stove. Then put the vegetables in the pot to boil.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the vegetables.', '2. Place the pot on the stove and fill it with water.', '3. Turn on the stove.', '4. Put the vegetables in the pot to boil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_toilet_302(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==302
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(phone,toilet_instance)
        else:
            exp(phone,toilet_instance)
    eff:
        unknown[phone]=False
        close[phone,toilet_instance]=True
        close[toilet_instance,phone]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_mat_386_around_cutting_board_2080(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(mat,cutting_board_instance)
        else:
            exp(mat,cutting_board_instance)
    eff:
        unknown[mat]=False
        close[mat,cutting_board_instance]=True
        close[cutting_board_instance,mat]=True
    

behavior find_soap_2037_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty(vegetable:item):
    # Function to check if the vegetable is dirty
    symbol is_dirty=dirty(vegetable)
    return is_dirty

def is_clean(vegetable:item):
    # Function to check if the vegetable is clean
    symbol is_clean=clean(vegetable)
    return is_clean

behavior clean_vegetable(vegetable:item, faucet:item):
    body:
        if is_dirty(vegetable):
            # Clean the vegetable by washing it under the faucet
            if is_faucet(faucet) and close_char(char, faucet):
                wash(vegetable)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        if is_dirty(vegetable) and not is_clean(vegetable):
            walk_to(faucet)
            clean_vegetable(vegetable, faucet)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dirty(vegetable:item):
    # Function to check if the vegetable is dirty
    symbol is_dirty=dirty(vegetable)
    return is_dirty

def is_clean(vegetable:item):
    # Function to check if the vegetable is clean
    symbol is_clean=clean(vegetable)
    return is_clean

behavior clean_vegetable(vegetable:item, faucet:item):
    body:
        if is_dirty(vegetable):
            # Clean the vegetable by washing it under the faucet
            if is_faucet(faucet) and close_char(char, faucet):
                wash(vegetable)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        if is_dirty(vegetable) and not is_clean(vegetable):
            walk_to(faucet)
            clean_vegetable(vegetable, faucet)


##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_130(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior place_and_fill_pot(pot: item, stove: item, faucet: item):
    body:
        if not on(pot, stove) and not has_water(pot):
            walk_to(pot)
            grab(pot)
            walk_to(faucet)
            if is_off(faucet):
                switch_on(faucet)
            water(pot)
            switch_off(faucet)
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        place_and_fill_pot(pot, stove, faucet)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_115_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_phone_47_around_cupboard_131(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(phone,cupboard_instance)
        else:
            exp(phone,cupboard_instance)
    eff:
        unknown[phone]=False
        close[phone,cupboard_instance]=True
        close[cupboard_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior prepare_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        prepare_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior prepare_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        prepare_stove(pot, stove)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_115_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_phone_47_around_cupboard_130(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(phone,cupboard_instance)
        else:
            exp(phone,cupboard_instance)
    eff:
        unknown[phone]=False
        close[phone,cupboard_instance]=True
        close[cupboard_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_with_water(pot:item, stove:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        place_pot_on_stove_with_water(pot, stove, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pot_on_stove_with_water(pot:item, stove:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        place_pot_on_stove_with_water(pot, stove, faucet)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_mat_237_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            grab(pot)
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            empty_a_hand()

behavior place_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)
            empty_a_hand()

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        fill_with_water(pot, faucet)
        place_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_pot_to_stove(char: character, pot: item, stove: item):
    body:
        if not on(pot, stove):
            walk_to(pot)
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        move_pot_to_stove(char, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_pot_to_stove(char: character, pot: item, stove: item):
    body:
        if not on(pot, stove):
            walk_to(pot)
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        move_pot_to_stove(char, pot, stove)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the pot on the stove and fill it with water." ?
Answer: Fill the pot with water first, then place the pot on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Place the pot on the stove.', '3. Boil the vegetables in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_tvstand_135(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(phone,tvstand_instance)
        else:
            exp(phone,tvstand_instance)
    eff:
        unknown[phone]=False
        close[phone,tvstand_instance]=True
        close[tvstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, place it on the stove, and boil the vegetables.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_114_around_kitchen_counter_128(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

behavior find_homework_2011_around_bookshelf_260(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior boil_vegetables(pot:item, vegetable:item, stove:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_vegetables(pot, vegetable, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_light_258(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==258
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(phone,light_instance)
        else:
            exp(phone,light_instance)
    eff:
        unknown[phone]=False
        close[phone,light_instance]=True
        close[light_instance,phone]=True
    

behavior find_mat_292_around_cupboard_130(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_homework_2011_around_bookshelf_189(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiled(food:item):
    # Function to check if a food item is boiled
    symbol boiled = dirty(food)
    return not boiled # Assuming dirty implies not boiled, as boiled food is clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            walk_to(stove)
            put_on(pot, stove)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not is_boiled(vegetables):
            if not inside(vegetables, pot):
                put_inside(vegetables, pot)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_boiled(food:item):
    # Function to check if a food item is boiled
    symbol boiled = dirty(food)
    return not boiled # Assuming dirty implies not boiled, as boiled food is clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            walk_to(stove)
            put_on(pot, stove)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not is_boiled(vegetables):
            if not inside(vegetables, pot):
                put_inside(vegetables, pot)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_vegetables(pot, stove, vegetables)

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.  ', '2. Place the pot on the stove.  ', '3. Boil the vegetables.  ']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(pot)
            grab(pot)
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bench_122(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(phone,bench_instance)
        else:
            exp(phone,bench_instance)
    eff:
        unknown[phone]=False
        close[phone,bench_instance]=True
        close[bench_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_pot_with_water(pot, faucet)
        # Fill the selected pot with water from the faucet

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_pot_with_water(pot, faucet)
        # Fill the selected pot with water from the faucet

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water.  " ?
Answer: Fill a pot with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_mat_201_around_kitchen_counter_128(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled(pot:item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not is_pot_filled(pot):
            fill_pot(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_filled(pot:item):
    # Function to check if the pot is filled with water
    return has_water(pot)

behavior fill_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not is_pot_filled(pot):
            fill_pot(pot, faucet)

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill a pot with water and boil the cleaned vegetables on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_kitchen_counter_128(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_the_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            if not open(pot):
                opens(pot)
            walk_to(faucet)
            get_water(pot)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072

        fill_the_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_the_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            if not open(pot):
                opens(pot)
            walk_to(faucet)
            get_water(pot)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072

        fill_the_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the stove_2090. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the stove_2090. Robot is close to the kitchen_counter_129. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(kitchen_counter_132)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)']
Time info:
Time consume: 470 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 24
goal correct times: 0
action_num: 35

Task complete rate:
1
Scene_id: 2
##############################
