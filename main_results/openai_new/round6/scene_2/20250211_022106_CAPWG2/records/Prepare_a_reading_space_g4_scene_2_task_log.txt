From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book and place it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(item:item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior locate_and_place_book(book:item, table:item):
    body:
        if not on(book, table):
            grab(book)
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and not visited(book)
        # Locate any unvisited book
        
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        # Locate a table in the home office (coffee table)
        
        locate_and_place_book(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_home_office(item:item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior locate_and_place_book(book:item, table:item):
    body:
        if not on(book, table):
            grab(book)
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and not visited(book)
        # Locate any unvisited book
        
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        # Locate a table in the home office (coffee table)
        
        locate_and_place_book(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_stove_2090(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(cup,stove_instance)
        else:
            exp(cup,stove_instance)
    eff:
        unknown[cup]=False
        close[cup,stove_instance]=True
        close[stove_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(cup: item, hot_milk: item, table: item):
    body:
        if not inside(hot_milk, cup):
            if not has_a_free_hand(char):
                empty_a_hand()
            grab(hot_milk)
            put_inside(hot_milk, cup)
            # Pour hot milk into the cup
        if not on(cup, table):
            put_on(cup, table)
            # Place the cup on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
            # Select a table inside the home office
        bind cup: item where:
            is_cup(cup)
            # Select a cup
        bind hot_milk: item where:
            is_milk(hot_milk) and drinkable(hot_milk)
            # Select hot milk

        prepare_hot_milk_and_place_on_table(cup, hot_milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior warm_milk(milk:item, stove:item):
    body:
        if not is_milk(milk):
            observe(milk, "Check if its actually milk") # Confirm the item is milk
  
        if cuttable(milk): # Assuming milk is in a container that needs to be opened
            cuts(milk)
 
        if is_off(stove):
            switch_on(stove) # Turn on the stove to heat milk

        put_on(milk, stove) # Place milk on the stove to warm

        # Wait for a certain period or condition (simulated environment assumption)
        # to ensure milk is warm, as timing cannot be handled here, its assumed successful

        switch_off(stove) # Turn off the stove after heating

behavior serve_milk(milk:item, table:item):
    body:
        if not on(milk, table):
            put_on(milk, table) # Place the milk on the coffee table

behavior __goal__():
    body:
        bind milk_container: item where:
            is_milk(milk_container)
        # Select milk container

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select coffee table

        bind stove: item where:
            is_stove(stove)
        # Select stove

        warm_milk(milk_container, stove)
        serve_milk(milk_container, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior warm_milk(milk:item, stove:item):
    body:
        if not is_milk(milk):
            observe(milk, "Check if its actually milk") # Confirm the item is milk
  
        if cuttable(milk): # Assuming milk is in a container that needs to be opened
            cuts(milk)
 
        if is_off(stove):
            switch_on(stove) # Turn on the stove to heat milk

        put_on(milk, stove) # Place milk on the stove to warm

        # Wait for a certain period or condition (simulated environment assumption)
        # to ensure milk is warm, as timing cannot be handled here, its assumed successful

        switch_off(stove) # Turn off the stove after heating

behavior serve_milk(milk:item, table:item):
    body:
        if not on(milk, table):
            put_on(milk, table) # Place the milk on the coffee table

behavior __goal__():
    body:
        bind milk_container: item where:
            is_milk(milk_container)
        # Select milk container

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select coffee table

        bind stove: item where:
            is_stove(stove)
        # Select stove

        warm_milk(milk_container, stove)
        serve_milk(milk_container, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)switchoff_executor(stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(stove_2090)put_executor(milk_2074, stove_2090)switchoff_executor(stove_2090)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(milk_2074, stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. milk_2074 is close stove_2090. stove_2090 is close milk_2074. milk_2074 is on stove_2090. milk_2074 released by right hand. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the stove_2090. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot find: Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. milk_2074 is close table_123. table_123 is close milk_2074. milk_2074 is on table_123. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has put the milk on table_123, but it needs to be placed on the coffee table in the home office. Move the milk from table_123 to the correct table. Also, make sure there is a cup of hot milk prepared, as there is no mention of it being in a cup yet.
##############################
From agent.py
Human Instruction: The robot has put the milk on table_123, but it needs to be placed on the coffee table in the home office. Move the milk from table_123 to the correct table. Also, make sure there is a cup of hot milk prepared, as there is no mention of it being in a cup yet.

The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Grab book_2091.
Action 5: Walk to table_193.
Action 6: Put book_2091 on table_193.
Action 7: Walk to stove_2090.
Action 8: Switch on stove_2090.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for milk_2074 around fridge_140.
Action 13: Walk to milk_2074.
Action 14: Grab milk_2074.
Action 15: Walk to stove_2090.
Action 16: Put milk_2074 on stove_2090.
Action 17: Switch off stove_2090.
Action 18: Walk to milk_2074.
Action 19: Grab milk_2074.
Action 20: Walk to table_123.
Action 21: Put milk_2074 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_home_office_161(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cup,home_office_instance)
        else:
            exp(cup,home_office_instance)
    eff:
        unknown[cup]=False
        close[cup,home_office_instance]=True
        close[home_office_instance,cup]=True
    

behavior find_bowl_2095_around_bowl_2095(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_ready_and_in_cup(milk:item):
    # Check if the milk is hot, placed in a cup, and not just placed on a table
    symbol is_ready=exists cup: item : (is_cup(cup) and inside(milk, cup) and drinkable(milk))
    return is_ready

def is_milk_on_table(table:item):
    # Check if there is milk on the specified table
    symbol has_milk=exists milk: item : (is_milk(milk) and on(milk, table))
    return has_milk

behavior move_milk_to_office_table(milk:item, home_office_table:item):
    body:
        if not on(milk, home_office_table):
            if inhand(milk):
                put_on(milk, home_office_table)
            else:
                grab(milk)
                put_on(milk, home_office_table)
            # Move the milk to the home office table

behavior check_and_observe_milk(table:item):
    body:
        if not visited(table):
            observe(table, "Check if milk is on the table and if it is in a cup and ready")

behavior prepare_hot_milk(milk:item, cup:item):
    body:
        if not is_milk_ready_and_in_cup(milk):
            if open(milk):
                closes(milk)
            # Assume wed have other mechanisms to heat the milk and pour it into the cup
            if not inside(milk, cup): 
                put_inside(milk, cup)
            # Additionally attempt to make it drinkable
            if not drinkable(milk):
                # Placeholder for heating the milk to make it drinkable
                pass

behavior __goal__():
    body:
        bind table_123: item where:
            is_table(table_123) and id[table_123] == 123
        # Optionally, locate the current table where the milk is
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, is_home_office(home_office_table))
        
        foreach milk: item:
            if is_milk(milk):
                # If there is milk on the wrong table or not ready
                if is_milk_on_table(table_123) or not is_milk_ready_and_in_cup(milk):
                    check_and_observe_milk(table_123)
                    prepare_hot_milk(milk, cup)
                    move_milk_to_office_table(milk, home_office_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_hot_milk_and_place_on_coffee_table(milk:item, stove:item, coffee_table:item):
    body:
        if not is_off(stove):
            switch_off(stove)
        # Ensure the stove is off since it is not being used currently
        empty_a_hand()
        # Make sure a hand is free to grab items
        grab(milk)
        walk_to(stove)
        put_on(milk, stove)
        switch_on(stove)
        # Heat the milk on the stove
        symbol has_hot_milk=exists hot_milk: item : (is_milk(hot_milk) and on(hot_milk, stove))
        if has_hot_milk:
            empty_a_hand()
            grab(milk)
            switch_off(stove)
            walk_to(coffee_table)
            put_on(milk, coffee_table)

behavior move_milk_to_correct_table(milk:item, coffee_table:item):
    body:
        empty_a_hand()
        grab(milk)
        walk_to(coffee_table)
        put_on(milk, coffee_table)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a table that serves as the coffee table
        bind milk: item where:
            is_milk(milk)
        # Select milk to be moved andor prepared as hot milk
        if on(milk, coffee_table):
            empty_a_hand()
        else:
            if exists milk_on_wrong_table: item : (is_milk(milk_on_wrong_table) and on(milk_on_wrong_table, table_123)):
                move_milk_to_correct_table(milk_on_wrong_table, coffee_table)
            else:
                prepare_hot_milk_and_place_on_coffee_table(milk, stove, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk(milk:item):
    # Function to check if the milk is hot
    symbol is_hot=exists o: item : (is_milk(milk) and is_on(o))
    return is_hot

behavior warm_milk(milk:item, stove:item):
    body:
        if not is_hot_milk(milk):
            switch_on(stove)
            put_on(milk, stove) # Place milk on stove for warming
            switch_off(stove)

behavior transfer_milk(milk:item, cup:item):
    body:
        if not on(milk, cup) and is_cup(cup):
            put_on(milk, cup) # Transfer milk to a cup

behavior place_on_coffee_table(item:item, table:item):
    body:
        if is_table(table) and not on(item, table):
            put_on(item, table) # Place item on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and on(milk, table_123) # Verify milk is on table_123

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        bind stove: item where:
            is_stove(stove)

        bind cup: item where:
            is_cup(cup)

        warm_milk(milk, stove)
        transfer_milk(milk, cup)
        
        place_on_coffee_table(cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove
        
        bind milk: item where:
            is_milk(milk) and id[milk]==2074
        # Select the milk with ID 2074
        if not inhand(milk):
            grab(milk)
            # Grab the milk

        put_on(milk, stove)
        # Place the milk on the stove

behavior transfer_milk(source_table: item, destination_table: item):
    body:
        bind milk: item where:
            is_milk(milk) and on(milk, source_table)
        grab(milk)
        # Grab the milk from the source table
        walk_to(destination_table)
        # Walk to the destination table
        put_on(milk, destination_table)
        # Place the milk on the destination table

behavior __goal__():
    body:
        bind source_table: item where:
            is_table(source_table) and id[source_table]==123
        # Select the source table with ID 123
        bind coffeetable: item where:
            is_table(coffeetable) and is_home_office(coffeetable)
        # Select the coffee table located in the home office
        
        if not on(table_123, coffeetable):
            transfer_milk(source_table, coffeetable)
        else:
            prepare_hot_milk()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_walllamp_46(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==46
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(cup,walllamp_instance)
        else:
            exp(cup,walllamp_instance)
    eff:
        unknown[cup]=False
        close[cup,walllamp_instance]=True
        close[walllamp_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_on_table(table: item):
    # Function to check if there is milk on a specified table
    symbol has_milk=exists o: item : (is_milk(o) and on(o, table))
    return has_milk

def is_cup_on_table(table: item):
    # Function to check if there is a cup on a specified table
    symbol has_cup=exists o: item : (is_cup(o) and on(o, table))
    return has_cup

behavior move_milk(milk:item, target_table:item):
    body:
        if not on(milk, target_table):
            grab(milk)
            put_on(milk, target_table)

behavior prepare_hot_milk(milk:item, cup:item):
    body:
        if not inhand(milk):
            grab(milk)
        if not inhand(cup):
            grab(cup)
        if is_off(cup):
            walk_to(stove_2090)
            put_on(milk, stove_2090)
            switch_on(stove_2090)
            # Wait for the milk to become hot, ensuring stove usage is safe
            switch_off(stove_2090)
            grab(milk)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table)
        # Ensure its the coffee table in the home office

        bind table_123: item where:
            is_table(table_123) and id[table_123] == 123

        if exists milk: item : (is_milk(milk) and on(milk, table_123)):
            move_milk(milk, coffee_table)
        
        if not exists cup: item : (is_cup(cup) and on(cup, coffee_table)):
            # If theres no cup on coffee_table yet, prepare one with hot milk
            bind cup: item where:
                is_cup(cup)
            
            bind milk: item where:
                is_milk(milk)
                
            prepare_hot_milk(milk, cup)
            walk_to(coffee_table)
            put_on(milk, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_with_milk(milk:item, cup:item):
    # Check if the milk is inside a cup and if its drinkable
    return inside(milk, cup) and is_drinkable(milk)

def prepare_hot_milk(milk:item, cup:item, stove:item):
    # Prepare hot milk if its not already in a cup
    body:
        if not is_cup_with_milk(milk, cup):
            if not inside(milk, cup):
                put_inside(milk, cup) # Pour milk into a cup
            if is_off(stove):
                switch_on(stove) # Turn on the stove if it is off
            put_on(cup, stove) # Put the cup of milk on the stove to heat it
            # Assume some time passes for milk to heat
            if is_on(stove):
                switch_off(stove) # Turn off the stove after milk is heated

def move_milk_to_table(milk:item, source_table:item, target_table:item):
    # Move the milk from the source table to the target table
    body:
        if not on(milk, target_table):
            grab(milk) # Grab the milk cup
            walk_to(target_table) # Walk to the target coffee table
            put_on(milk, target_table) # Place milk cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind table_123: item where:
            is_table(table_123) and id[table_123] == 123
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 123
        
        bind stove: item where:
            is_stove(stove)
        
        bind cup: item where:
            is_cup(cup)
        
        # Prepare the hot milk in a cup first
        prepare_hot_milk(milk, cup, stove)
        
        # Move the milk to the coffee table in the home office
        move_milk_to_table(milk, table_123, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. prepare a cup of hot milk and put it on the coffee table in the home office." ?
Answer: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation

def is_in_cup(milk: item, cup: item):
    symbol in_cup=exists m: item : (is_milk(m) and inside(m, cup))
    return in_cup

behavior prepare_milk(cup: item, milk: item):
    body:
        if not is_in_cup(milk, cup):
            put_inside(milk, cup)

behavior heat_milk(cup: item, microwave: item):
    body:
        if not is_on(microwave):
            switch_on(microwave)     

behavior grab_milk_from_fridge():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            is_milk(milk)
        walk_to(fridge)
        opens(fridge)
        observe(fridge,"find milk inside the fridge")
        grab(milk)
        if open(fridge):
            closes(fridge)

behavior move_to_table(milk:item, table:item):
    body:
        if not on(milk, table):
            put_on(milk, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table)
        # Find the coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Find a cup

        grab_milk_from_fridge()
        prepare_milk(cup, milk)
        
        bind microwave: item where:
            is_microwave(microwave)
        # Find the microwave

        heat_milk(cup, microwave)

        move_to_table(cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_and_heat_milk(milk:item, cup:item, microwave:item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)
            # Place the milk inside the cup
        if not inside(cup, microwave):
            put_inside(cup, microwave)
            # Place the cup inside the microwave
        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the milk

behavior move_milk_to_coffee_table(cup:item, coffee_table:item):
    body:
        if not on(cup, coffee_table):
            put_on(cup, coffee_table)
            # Move the cup of hot milk to the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(inside_char(char, coffee_table))
        # Select the coffee table in the home office
        
        prepare_and_heat_milk(milk, cup, microwave)
        move_milk_to_coffee_table(cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk():
    body:
        bind milk: item where:
            is_milk(milk)
        # Grab the milk from the fridge
        walk_to(milk)
        grab(milk)

        bind cup: item where:
            is_cup(cup)
        # Place the milk in a cup
        put_inside(milk, cup)
        empty_a_hand() # Release the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Ensure the microwave is off, open it, put the cup inside, close it, then turn it on
        if is_on(microwave):
            switch_off(microwave)
        if not open(microwave):
            opens(microwave)
        grab(cup)
        put_inside(cup, microwave)
        closes(microwave)
        switch_on(microwave)
        empty_a_hand() # Release the cup
        
behavior move_milk_to_coffee_table():
    body:
        bind milk: item where:
            is_milk(milk)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Move milk from table_123 to the coffee table
        grab(milk)
        walk_to(coffee_table)
        put_on(milk, coffee_table)
        empty_a_hand()

behavior place_cup_on_coffee_table():
    body:
        bind cup: item where:
            is_cup(cup)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # After heating the milk, move the cup to the coffee table
        if open(microwave):
            opens(microwave)
        grab(cup)
        put_on(cup, coffee_table)
        empty_a_hand()

behavior __goal__():
    body:
        prepare_hot_milk()
        move_milk_to_coffee_table()
        place_cup_on_coffee_table()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_coffe_maker_147(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_milk(milk:item, fridge:item):
    body:
        if not inhand(milk):
            if not open(fridge):
                opens(fridge)
            grab(milk)

behavior prepare_hot_milk(milk:item, microwave:item, cup:item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)
        if not is_on(microwave):
            if not inside(cup, microwave):
                put_inside(cup, microwave)
            switch_on(microwave)

behavior move_milk_to_table(milk:item, coffee_table:item):
    body:
        if not on(milk, coffee_table):
            if inhand(milk):
                put_on(milk, coffee_table)
            else:
                walk_to(milk)
                grab(milk)
                put_on(milk, coffee_table)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        bind microwave: item where:
            is_microwave(microwave)
        bind cup: item where:
            is_cup(cup)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        grab_milk(milk, fridge)
        prepare_hot_milk(milk, microwave, cup)
        move_milk_to_table(milk, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation

def is_drinkable_milk(milk:item):
    # Check if an item is drinkable and milk
    return is_milk(milk) and drinkable(milk)

behavior move_to_coffee_table(milk:item, coffee_table:item):
    body:
        if not on(milk, coffee_table):
            put_on(milk, coffee_table) # Move milk onto the coffee table

behavior prepare_hot_milk(milk:item, microwave:item):
    body:
        if not is_drinkable_milk(milk):
            # Prepare hot milk using the microwave
            bind cup: item where:
                is_cup(cup)
            grab(milk)
            put_inside(milk, cup)
            grab(cup)
            put_inside(cup, microwave)
            switch_on(microwave)
            # Assume the milk is now hot after microwaving

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind fridge: item where:
            is_fridge(fridge)
        bind table_123: item where:
            is_table(table_123) and id[table_123]==123
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        bind microwave: item where:
            is_microwave(microwave)
        
        if not on(milk, coffee_table):
            walk_to(table_123)
            grab(milk)
            prepare_hot_milk(milk, microwave)
            move_to_coffee_table(milk, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_drinkable_milk(milk:item):
    # Check if an item is drinkable and milk
    return is_milk(milk) and drinkable(milk)

behavior move_to_coffee_table(milk:item, coffee_table:item):
    body:
        if not on(milk, coffee_table):
            put_on(milk, coffee_table) # Move milk onto the coffee table

behavior prepare_hot_milk(milk:item, microwave:item):
    body:
        if not is_drinkable_milk(milk):
            # Prepare hot milk using the microwave
            bind cup: item where:
                is_cup(cup)
            grab(milk)
            put_inside(milk, cup)
            grab(cup)
            put_inside(cup, microwave)
            switch_on(microwave)
            # Assume the milk is now hot after microwaving

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind fridge: item where:
            is_fridge(fridge)
        bind table_123: item where:
            is_table(table_123) and id[table_123]==123
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        bind microwave: item where:
            is_microwave(microwave)
        
        if not on(milk, coffee_table):
            walk_to(table_123)
            grab(milk)
            prepare_hot_milk(milk, microwave)
            move_to_coffee_table(milk, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the mat_114. Robot is close to the table_123. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. 
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. milk_2074 is close table_193. table_193 is close milk_2074. milk_2074 is on table_193. milk_2074 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the milk in a cup and heat it using the microwave. Then, place the cup of hot milk on the coffee table in the home office. Currently, the milk has been placed directly on the table without being heated or put into a cup.
##############################
From agent.py
Human Instruction: You need to put the milk in a cup and heat it using the microwave. Then, place the cup of hot milk on the coffee table in the home office. Currently, the milk has been placed directly on the table without being heated or put into a cup.

Human Guidance: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the table in the home office.
The actions you have taken:
Action 1: Walk to bookshelf_136.
Action 2: look for book_2091 around bookshelf_136.
Action 3: Walk to book_2091.
Action 4: Grab book_2091.
Action 5: Walk to table_193.
Action 6: Put book_2091 on table_193.
Action 7: Walk to stove_2090.
Action 8: Switch on stove_2090.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for milk_2074 around fridge_140.
Action 13: Walk to milk_2074.
Action 14: Grab milk_2074.
Action 15: Walk to stove_2090.
Action 16: Put milk_2074 on stove_2090.
Action 17: Switch off stove_2090.
Action 18: Walk to milk_2074.
Action 19: Grab milk_2074.
Action 20: Walk to table_123.
Action 21: Put milk_2074 on table_123.
Action 22: Walk to table_123.
Action 23: Grab milk_2074.
Action 24: Walk to table_193.
Action 25: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, microwave:item):
    body:
        if not is_off(microwave):
            switch_off(microwave) # Ensure the microwave is off before heating
        if not open(microwave):
            opens(microwave) # Open the microwave to place the milk
        put_inside(milk, microwave) # Put the milk inside the microwave
        if open(microwave):
            closes(microwave) # Close the microwave door
        switch_on(microwave) # Turn on the microwave for heating
        # Assume enough time is allowed for milk to heat properly
        switch_off(microwave) # Turn the microwave off after heating
        opens(microwave) # Open the microwave door
        grab(milk) # Take the milk out of the microwave

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Get milk from the fridge
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Get a cup
        grab(milk) # Grab the milk
        walk_to(cup) # Walk to the cup
        grab(cup) # Grab the cup in addition to the milk
        empty_a_hand() # Now you have a free hand to pour the milk
        bind microwave: item where:
            is_microwave(microwave)
        heat_milk(milk, microwave) # Heat the milk in the microwave
        put_on(milk, cup) # Pour hot milk into the cup
        walk_to(table_193) # Walk to the coffee table in the home office
        put_on(cup, table_193) # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_and_move_hot_milk(milk: item, cup: item, microwave: item, table: item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)
            # Place the milk inside the cup
        if not inside(cup, microwave):
            put_inside(cup, microwave)
            # Put the cup with milk in the microwave
        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the milk
        if inside(cup, microwave):
            grab(cup)
            # Grab the cup from the microwave after heating
            walk_to(table)
            # Walk close to the target coffee table
            put_on(cup, table)
            # Place the heated cup of milk on the coffee table
        if is_on(microwave):
            switch_off(microwave)
            # Important to ensure the microwave is switched off

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup item
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave item
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table in the home office
        
        prepare_and_move_hot_milk(milk, cup, microwave, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_bowl_2096_around_microwave_149(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_cup(o: item):
    # Determine if the item is in a cup
    symbol in_cup = exists cup: item : (is_cup(cup) and inside(o, cup))
    return in_cup

behavior pour_milk_in_cup(milk: item, cup: item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)

behavior heat_milk(cup: item, microwave: item):
    body:
        if not is_on(microwave):
            switch_on(microwave)
        if not inside(cup, microwave):
            put_inside(cup, microwave)

behavior put_on_table(cup: item, table: item):
    body:
        if not on(cup, table):
            put_on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
            
        bind cup: item where:
            is_cup(cup)
        
        bind table: item where:
            is_table(table) and id[table] == 193 # Assuming the table in the home office has ID 193
            
        bind microwave: item where:
            is_microwave(microwave)
        
        pour_milk_in_cup(milk, cup)
        heat_milk(cup, microwave)
        put_on_table(cup, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_in_cup(o: item):
    # Determine if the item is in a cup
    symbol in_cup = exists cup: item : (is_cup(cup) and inside(o, cup))
    return in_cup

behavior pour_milk_in_cup(milk: item, cup: item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)

behavior heat_milk(cup: item, microwave: item):
    body:
        if not is_on(microwave):
            switch_on(microwave)
        if not inside(cup, microwave):
            put_inside(cup, microwave)

behavior put_on_table(cup: item, table: item):
    body:
        if not on(cup, table):
            put_on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
            
        bind cup: item where:
            is_cup(cup)
        
        bind table: item where:
            is_table(table) and id[table] == 193 # Assuming the table in the home office has ID 193
            
        bind microwave: item where:
            is_microwave(microwave)
        
        pour_milk_in_cup(milk, cup)
        heat_milk(cup, microwave)
        put_on_table(cup, table)

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_193)put_executor(cup_2087, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the table_193. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(cup_2087, microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close cup_2087. cup_2087 is inside microwave_149. cup_2087 is close microwave_149. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the microwave_149. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the cup_2087. Robot is close to the table_193. 
##############################
From agent.py
put_executor(cup_2087, table_193)
Robot find: Robot is close to the cup_2087. Robot is close to the table_193. table_193 is close cup_2087. cup_2087 is close table_193. cup_2087 is on table_193. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(stove_2090)', 'put_executor(milk_2074, stove_2090)', 'switchoff_executor(stove_2090)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_123)', 'put_executor(milk_2074, table_123)', 'walk_executor(table_123)', 'grab_executor(milk_2074)', 'walk_executor(table_193)', 'put_executor(milk_2074, table_193)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(microwave_149)', 'putin_executor(cup_2087, microwave_149)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(table_193)', 'put_executor(cup_2087, table_193)']
Time info:
Time consume: 366 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 17
goal correct times: 0
action_num: 38

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
