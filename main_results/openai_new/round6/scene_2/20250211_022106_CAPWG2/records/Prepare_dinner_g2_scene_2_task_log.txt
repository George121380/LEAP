From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Place the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_stove_2090(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_chicken,stove_instance)
        else:
            exp(food_chicken,stove_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,stove_instance]=True
        close[stove_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def find_chicken_and_onion():
    # Function to find both chicken and onions in the known environment
    symbol has_chicken_onion=exists c: item : (is_food_chicken(c) or is_food_onion(c))
    return has_chicken_onion

behavior __goal__():
    body:
        if find_chicken_and_onion():
            # Check if either chicken or onions are already known
            bind chicken_or_onion: item where:
                (is_food_chicken(chicken_or_onion) or is_food_onion(chicken_or_onion))
            # Select any item categorized as chicken or onion
            walk_to(chicken_or_onion)
            # Move the character closer to the identified chicken or onion

        else:
            # If neither chicken nor onion is found, proceed to search
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not visited(item):
                    observe(item, "Check if this is chicken or onion")
                    # Observe each food item to identify chicken or onion

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_chicken_and_onion():
    # Function to find both chicken and onions in the known environment
    symbol has_chicken_onion=exists c: item : (is_food_chicken(c) or is_food_onion(c))
    return has_chicken_onion

behavior __goal__():
    body:
        if find_chicken_and_onion():
            # Check if either chicken or onions are already known
            bind chicken_or_onion: item where:
                (is_food_chicken(chicken_or_onion) or is_food_onion(chicken_or_onion))
            # Select any item categorized as chicken or onion
            walk_to(chicken_or_onion)
            # Move the character closer to the identified chicken or onion

        else:
            # If neither chicken nor onion is found, proceed to search
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not visited(item):
                    observe(item, "Check if this is chicken or onion")
                    # Observe each food item to identify chicken or onion

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_132)
Fail to find food_onion_2026 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_onion_2026, cupboard_131)
Fail to find food_onion_2026 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have successfully found the chicken (food_chicken_2050), but you still need to find the onion (food_onion_2026) to complete the sub-task. Continue searching for the onion in different potential locations.
##############################
From agent.py
Human Instruction: You have successfully found the chicken (food_chicken_2050), but you still need to find the onion (food_onion_2026) to complete the sub-task. Continue searching for the onion in different potential locations.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_onion_2026 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_onion_2026 around cupboard_131.
Action 6: Walk to fridge_140.
Action 7: Switch off fridge_140.
Action 8: Open fridge_140.
Action 9: look for food_chicken_2050 around fridge_140.
Action 10: Walk to food_chicken_2050.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_approach_onion(onion_id: int):
    body:
        symbol found_onion=exists o: item : (is_food_onion(o) and id[o]==onion_id)
        if found_onion:
            bind onion: item where:
                is_food_onion(onion) and id[onion]==onion_id
            walk_to(onion)
        else:
            foreach location: item:
                if (is_cupboard(location) or is_fridge(location) or is_kitchen_counter(location)) and not visited(location):
                    observe(location, "Check for onion in this location")

behavior __goal__():
    body:
        find_and_approach_onion(2026)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def found_onion():
    # Function to check if the onion has been found in the given locations
    symbol has_found=exists o: item : (is_food_onion(o))
    return has_found

behavior search_and_find():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        if not visited(kitchen_counter):
            walk_to(kitchen_counter)
            observe(kitchen_counter, "Look for onion around the kitchen counter")

        bind cupboard: item where:
            is_cupboard(cupboard)
        if not visited(cupboard):
            walk_to(cupboard)
            opens(cupboard)
            observe(cupboard, "Look for onion around the cupboard")

        bind fridge: item where:
            is_fridge(fridge)
        if not visited(fridge):
            walk_to(fridge)
            switch_off(fridge)
            opens(fridge)
            observe(fridge, "Look for onion around the fridge")

behavior __goal__():
    body:
        if not found_onion():
            search_and_find()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chicken(chicken:item):
    body:
        if not visited(chicken):
            walk_to(chicken)
            observe(chicken, "Check location of the chicken")

behavior find_onion(onion:item):
    body:
        if not visited(onion):
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    walk_to(location)
                    if can_open(location) and not open(location):
                        opens(location)
                    observe(location, "Check if the onion is present")
                    if inside(onion, location):
                        break

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        find_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        find_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def find_onion():
    foreach location: item:
        if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
            if not visited(location):
                observe(location, "Search for the onion")

behavior __goal__():
    body:
        if not exists food_onion: item: is_food_onion(food_onion):
            find_onion()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_onion(onion:item):
    # Function to check if the specified onion is the target onion
    return id[onion] == 2026

behavior __goal__():
    body:
        if not exists onion: item : (is_food_onion(onion) and is_target_onion(onion)):
            # If the target onion has not yet been located
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                    observe(location, "Check for food_onion_2026")
        # No specific action if the onion is already located, as the goal is to find it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def find_onion():
    # Function to search for the onion in identified locations
    bind onion: item where:
        is_food_onion(onion)
    if inside(onion, kitchen_counter_132) or inside(onion, cupboard_131) or inside(onion, fridge_140):
        return
    else:
        if not visited(kitchen_counter_132):
            observe(kitchen_counter_132, "Check for food_onion_2026")
        if not visited(cupboard_131):
            observe(cupboard_131, "Check for food_onion_2026")
        if not visited(fridge_140):
            observe(fridge_140, "Check for food_onion_2026")

behavior __goal__():
    body:
        find_onion()

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the chicken and onion." ?
Answer: The step "find the chicken and onion" needs a new plan. First, focus on locating where the chicken and onion are stored before placing them in the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate where the chicken and onion are stored.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_onion(onion:item):
    body:
        if not close_char(char, onion):
            walk_to(onion)
            # Move towards the onion

behavior __goal__():
    body:
        symbol chicken_found=exists chicken: item : (is_food_chicken(chicken) and close_char(char, chicken))
        if not chicken_found:
            bind chicken: item where:
                is_food_chicken(chicken) and not visited(chicken)
            observe(chicken, "Check if this is food chicken")
            walk_to(chicken)
        else:
            # Chicken is already located,
            # Now search for is_food_onion
            if exists onion: item : (is_food_onion(onion) and close_char(char, onion)):
                bind onion: item where:
                    is_food_onion(onion) and close_char(char, onion)
                locate_onion(onion)
            else:
                foreach possible_spot: item:
                    if not visited(possible_spot):
                        observe(possible_spot, "Check if there is food onion around here")


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_onion_found():
    symbol needed_onion_found = exists onion: item : (is_food_onion(onion) and inside(onion, fridge_140))
    return needed_onion_found

behavior search_for_onion():
    body:
        foreach area: item:
            if (is_kitchen_counter(area) or is_cupboard(area) or is_fridge(area)) and not visited(area):
                observe(area, "Check for presence of food_onion_2026")

behavior __goal__():
    body:
        if not is_needed_onion_found():
            search_for_onion()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_stored(item:item):
    # Function to check if an item is stored in a location
    symbol stored=exists o: item : (inside(item, o) and (is_cupboard(o) or is_fridge(o)))
    return stored

behavior search_for_onion(onion:item):
    body:
        if exists storage: item : ((is_cupboard(storage) or is_fridge(storage)) and not visited(storage)):
            foreach storage: item:
                if (is_cupboard(storage) or is_fridge(storage)) and not visited(storage):
                    observe(storage, "Check is there a food onion inside")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026

        if not is_stored(onion):
            search_for_onion(onion) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_stored(item:item):
    # Function to check if an item is stored in a location
    symbol stored=exists o: item : (inside(item, o) and (is_cupboard(o) or is_fridge(o)))
    return stored

behavior search_for_onion(onion:item):
    body:
        if exists storage: item : ((is_cupboard(storage) or is_fridge(storage)) and not visited(storage)):
            foreach storage: item:
                if (is_cupboard(storage) or is_fridge(storage)) and not visited(storage):
                    observe(storage, "Check is there a food onion inside")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026

        if not is_stored(onion):
            search_for_onion(onion) 

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)obs(cupboard_130, Check is there a food onion inside)walk_executor(cupboard_131)obs(cupboard_131, Check is there a food onion inside)walk_executor(fridge_140)obs(fridge_140, Check is there a food onion inside)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check is there a food onion inside)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check is there a food onion inside)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(fridge_140, Check is there a food onion inside)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for the onion (food_onion_2026) as you have only found the chicken. Check additional locations where the onion might be stored.
##############################
From agent.py
Human Instruction: You need to continue searching for the onion (food_onion_2026) as you have only found the chicken. Check additional locations where the onion might be stored.

Human Guidance: The step "find the chicken and onion" needs a new plan. First, focus on locating where the chicken and onion are stored before placing them in the oven.
The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_onion_2026 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_onion_2026 around cupboard_131.
Action 6: Walk to fridge_140.
Action 7: Switch off fridge_140.
Action 8: Open fridge_140.
Action 9: look for food_chicken_2050 around fridge_140.
Action 10: Walk to food_chicken_2050.
Action 11: Walk to cupboard_130.
Action 12: Observe around cupboard_130 with the question of Check is there a food onion inside.
Action 13: Walk to cupboard_131.
Action 14: Observe around cupboard_131 with the question of Check is there a food onion inside.
Action 15: Walk to fridge_140.
Action 16: Observe around fridge_140 with the question of Check is there a food onion inside.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior inspect_location_for_onion(location:item):
    body:
        if not visited(location):
            observe(location, "Check is there a food onion inside")
  
behavior search_for_onion():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 132
        inspect_location_for_onion(kitchen_counter)

        bind cupboard1: item where:
            is_cupboard(cupboard1) and id[cupboard1] == 131
        inspect_location_for_onion(cupboard1)

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        inspect_location_for_onion(fridge)

        bind cupboard2: item where:
            is_cupboard(cupboard2) and id[cupboard2] == 130
        inspect_location_for_onion(cupboard2)

behavior __goal__():
    body:
        search_for_onion()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior inspect_location_for_onion(location:item):
    body:
        if not visited(location):
            observe(location, "Check is there a food onion inside")
  
behavior search_for_onion():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 132
        inspect_location_for_onion(kitchen_counter)

        bind cupboard1: item where:
            is_cupboard(cupboard1) and id[cupboard1] == 131
        inspect_location_for_onion(cupboard1)

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        inspect_location_for_onion(fridge)

        bind cupboard2: item where:
            is_cupboard(cupboard2) and id[cupboard2] == 130
        inspect_location_for_onion(cupboard2)

behavior __goal__():
    body:
        search_for_onion()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)obs(kitchen_counter_132, Check is there a food onion inside)walk_executor(cupboard_131)obs(cupboard_131, Check is there a food onion inside)walk_executor(fridge_140)obs(fridge_140, Check is there a food onion inside)walk_executor(cupboard_130)obs(cupboard_130, Check is there a food onion inside)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, Check is there a food onion inside)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is OPEN. kitchen_counter_132 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check is there a food onion inside)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(fridge_140, Check is there a food onion inside)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check is there a food onion inside)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for the onion (food_onion_2026) as you have only found the chicken. Check additional locations where the onion might be stored.
##############################
From agent.py
Human Instruction: You need to continue searching for the onion (food_onion_2026) as you have only found the chicken. Check additional locations where the onion might be stored.

Human Guidance: The step "find the chicken and onion" needs a new plan. First, focus on locating where the chicken and onion are stored before placing them in the oven.
The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_onion_2026 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_onion_2026 around cupboard_131.
Action 6: Walk to fridge_140.
Action 7: Switch off fridge_140.
Action 8: Open fridge_140.
Action 9: look for food_chicken_2050 around fridge_140.
Action 10: Walk to food_chicken_2050.
Action 11: Walk to cupboard_130.
Action 12: Observe around cupboard_130 with the question of Check is there a food onion inside.
Action 13: Walk to cupboard_131.
Action 14: Observe around cupboard_131 with the question of Check is there a food onion inside.
Action 15: Walk to fridge_140.
Action 16: Observe around fridge_140 with the question of Check is there a food onion inside.
Action 17: Walk to kitchen_counter_132.
Action 18: Observe around kitchen_counter_132 with the question of Check is there a food onion inside.
Action 19: Walk to cupboard_131.
Action 20: Observe around cupboard_131 with the question of Check is there a food onion inside.
Action 21: Walk to fridge_140.
Action 22: Observe around fridge_140 with the question of Check is there a food onion inside.
Action 23: Walk to cupboard_130.
Action 24: Observe around cupboard_130 with the question of Check is there a food onion inside.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_onion(onion:item):
    body:
        if not visited(onion):
            bind kitchen: item where:
                is_kitchen_counter(kitchen) or is_cupboard(kitchen) or is_fridge(kitchen)
            # Ensure these are the locations that could store an onion
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    observe(location,"Check is there a food onion inside or around it")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Locate the chicken, which you have already found

        bind onion: item where:
            is_food_onion(onion)
        # Locate the onion based on human instruction to ensure completion of subtask
        locate_onion(onion)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_onion(onion:item):
    body:
        if not visited(onion):
            bind kitchen: item where:
                is_kitchen_counter(kitchen) or is_cupboard(kitchen) or is_fridge(kitchen)
            # Ensure these are the locations that could store an onion
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    observe(location,"Check is there a food onion inside or around it")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Locate the chicken, which you have already found

        bind onion: item where:
            is_food_onion(onion)
        # Locate the onion based on human instruction to ensure completion of subtask
        locate_onion(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)obs(kitchen_counter_128, Check is there a food onion inside or around it)walk_executor(kitchen_counter_129)obs(kitchen_counter_129, Check is there a food onion inside or around it)walk_executor(cupboard_130)obs(cupboard_130, Check is there a food onion inside or around it)walk_executor(cupboard_131)obs(cupboard_131, Check is there a food onion inside or around it)walk_executor(kitchen_counter_132)obs(kitchen_counter_132, Check is there a food onion inside or around it)walk_executor(fridge_140)obs(fridge_140, Check is there a food onion inside or around it)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
obs(kitchen_counter_128, Check is there a food onion inside or around it)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLOSED. kitchen_counter_128 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
obs(kitchen_counter_129, Check is there a food onion inside or around it)
Get this information:  fryingpan_2107 is on kitchen_counter_129. coffe_maker_147 is on kitchen_counter_129. toaster_144 is on kitchen_counter_129. kitchen_counter_129 is inside dining_room_1. stove_2090 is on kitchen_counter_129. kitchen_counter_129 is close to wall_2. kitchen_counter_129 is close to cupboard_131. kitchen_counter_129 is close to wall_7. kitchen_counter_129 is close to wall_8. kitchen_counter_129 is close to stovefan_139. kitchen_counter_129 is close to fridge_140. kitchen_counter_129 is close to oven_141. kitchen_counter_129 is close to tray_142. kitchen_counter_129 is close to dishwasher_143. kitchen_counter_129 is close to toaster_144. kitchen_counter_129 is close to floor_16. kitchen_counter_129 is close to coffe_maker_147. kitchen_counter_129 is close to floor_21. kitchen_counter_129 is close to floor_22. kitchen_counter_129 is close to stove_2090. kitchen_counter_129 is close to walllamp_44. kitchen_counter_129 is close to pot_2093. kitchen_counter_129 is close to walllamp_46. kitchen_counter_129 is close to oil_2102. kitchen_counter_129 is close to pot_54. kitchen_counter_129 is close to fryingpan_2107. kitchen_counter_129 is close to character_219. pot_2093 is on kitchen_counter_129. oil_2102 is on kitchen_counter_129. kitchen_counter_129 is CLOSED. kitchen_counter_129 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check is there a food onion inside or around it)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check is there a food onion inside or around it)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, Check is there a food onion inside or around it)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is OPEN. kitchen_counter_132 is CLEAN.
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(fridge_140, Check is there a food onion inside or around it)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for the onion (food_onion_2026) since it has not been found yet. Continue checking additional locations or storages where the onion might be stored to complete this sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_onion():
    body:
        foreach loc: item:
            if is_cupboard(loc) or is_fridge(loc) or is_kitchen_counter(loc):
                foreach o: item:
                    if is_food_onion(o) and inside(o, loc) and not inhand(o):
                        grab(o)
                        empty_a_hand() # Make one hand free if carrying any other item before grabbing the onion again

behavior use_oven(chicken:item, onion:item, oven:item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind oven: item where:
            is_oven(oven)
        find_and_grab_onion()
        bind onion: item where:
            is_food_onion(onion) and inhand(onion)
        use_oven(chicken, onion, oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_onion(x: item):
    return is_food_onion(x)

def is_food_chicken(x: item):
    return is_food_chicken(x)

def is_oven(x: item):
    return is_oven(x)

def find_onion_and_chicken():
    body:
        if not (exists x: item : is_food_onion(x) and inhand(x)) or not (exists y: item : is_food_chicken(y) and inhand(y)):
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                    observe(location, "Check is there a food onion inside or around it and is there a food chicken inside or around it")

behavior grab_chicken_and_onion(chicken:item, onion:item):
    body: 
        if not inhand(chicken):
            grab(chicken)
        if not inhand(onion):
            grab(onion)

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body: 
        if not open(oven):
            opens(oven)
        
        if inhand(chicken):
            put_inside(chicken, oven)

        if inhand(onion):
            put_inside(onion, oven)

        if open(oven):
            closes(oven)

behavior __goal__():
    body:
        find_onion_and_chicken()

        bind chicken: item where:
            is_food_chicken(chicken) and inhand(chicken)

        bind onion: item where:
            is_food_onion(onion) and inhand(onion)

        bind oven: item where:
            is_oven(oven)

        grab_chicken_and_onion(chicken, onion)
        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_trashcan_360(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_onion,trashcan_instance)
        else:
            exp(food_onion,trashcan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,trashcan_instance]=True
        close[trashcan_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def needs_to_collect_items():
    # Determine if both chicken and onion are collected, focusing on if the onion is missing
    symbol missing_onion=not exists onion: item : (is_food_onion(onion) and inhand(onion))
    return missing_onion

behavior collect_onion():
    body:
        foreach location: item:
            if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                observe(location,"Check is there a food onion inside or around it")
                if exists onion: item : (is_food_onion(onion) and close_char(char, onion)):
                    grab(onion)
                    break

behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inhand(chicken)

        bind oven: item where:
            is_oven(oven)

        if needs_to_collect_items(): 
            collect_onion()
        
        if exists onion: item : (is_food_onion(onion) and inhand(onion)):
            bind onion: item where:
                is_food_onion(onion) and inhand(onion)
            place_items_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        
        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        
        place_in_oven(chicken, onion, oven)

##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(cutting_board_2080)exp(food_onion_2026, cutting_board_2080)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_onion_2026, cutting_board_2080)
Find food_onion_2026. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_in_oven(food_chicken:item, oven:item):
    body:
        if not inside(food_chicken, oven):
            put_inside(food_chicken, oven)

behavior place_onion_in_oven(food_onion:item, oven:item):
    body:
        if not inside(food_onion, oven):
            put_inside(food_onion, oven)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken
        
        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        if not visited(food_onion):
            observe(food_onion, "locate the onion")
            walk_to(food_onion)
        
        place_chicken_in_oven(food_chicken, oven)
        place_onion_in_oven(food_onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_chicken_in_oven(food_chicken:item, oven:item):
    body:
        if not inside(food_chicken, oven):
            put_inside(food_chicken, oven)

behavior place_onion_in_oven(food_onion:item, oven:item):
    body:
        if not inside(food_onion, oven):
            put_inside(food_onion, oven)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken
        
        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        if not visited(food_onion):
            observe(food_onion, "locate the onion")
            walk_to(food_onion)
        
        place_chicken_in_oven(food_chicken, oven)
        place_onion_in_oven(food_onion, oven)

##############################
From agent.py-> find a plan in act()
walk_executor(food_onion_2026)obs(food_onion_2026, locate the onion)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(food_onion_2026)
Robot find: Robot is close to the food_onion_2026. Robot is close to the oven_141. 
##############################
From agent.py
obs(food_onion_2026, locate the onion)
Get this information:  food_onion_2026 is close to oven_141. food_onion_2026 is close to character_219. food_onion_2026 is inside dining_room_1. food_onion_2026 is inside oven_141. food_onion_2026 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2026)
Robot find: Robot is close to the food_onion_2026. Robot is close to the oven_141. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(food_chicken_2050)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'walk_executor(fridge_140)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'walk_executor(fridge_140)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'walk_executor(cutting_board_2080)', 'walk_executor(food_onion_2026)', 'walk_executor(food_onion_2026)']
Time info:
Time consume: 299 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 17
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
