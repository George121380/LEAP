From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_chicken_and_onion(chicken:item, onion:item, cutting_board:item):
    body:
        achieve_once cut(chicken)
        # Cut the chicken
        achieve_once cut(onion)
        # Cut the onion
        achieve_once on(chicken, cutting_board)
        # Place cut chicken on the cutting board temporarily
        achieve_once on(onion, cutting_board)
        # Place cut onion on the cutting board temporarily

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve_once closed(oven)
        # Close the oven door
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken for roasting
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion for roasting
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        prepare_chicken_and_onion(chicken, onion, cutting_board)
        # Prepare the chicken and onion for roasting
        place_in_oven(chicken, onion, oven)
        # Place the prepared chicken and onion into the oven to roast

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve is_on(oven)
        # Ensure the oven is turned on for roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select onion
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        roast_chicken_with_onion(chicken, onion, oven)
        # Execute the behavior to roast chicken with onion

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve is_on(oven)
        # Ensure the oven is turned on for roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select onion
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        roast_chicken_with_onion(chicken, onion, oven)
        # Execute the behavior to roast chicken with onion

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: pot_54, Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_129)
Find food_onion_2026. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the food_onion_2026 inside the oven_141.
##############################
From agent.py
Human Instruction: You need to put the food_onion_2026 inside the oven_141.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Walk to oven_141.
Action 6: Open oven_141.
Action 7: Walk to food_chicken_2050.
Action 8: Grab food_chicken_2050.
Action 9: Walk to oven_141.
Action 10: Put food_chicken_2050 into oven_141.
Action 11: Walk to kitchen_counter_129.
Action 12: look for food_onion_2026 around kitchen_counter_129.
Action 13: Walk to oven_141.
Action 14: Close oven_141.
Action 15: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_toaster_144(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(phone,toaster_instance)
        else:
            exp(phone,toaster_instance)
    eff:
        unknown[phone]=False
        close[phone,toaster_instance]=True
        close[toaster_instance,phone]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_start_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        # Select food onion with ID 2026
        
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141
        
        put_onion_in_oven(onion, oven)
        # Put the onion into the oven
        
        close_and_start_oven(oven)
        # Close the oven and turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_chicken_and_onion_inside_oven(oven:item):
    # Function to check if both chicken and onion are inside the oven
    symbol has_chicken_and_onion=exists chicken: item : (is_food_chicken(chicken) and inside(chicken, oven)) and exists onion: item : (is_food_onion(onion) and inside(onion, oven))
    return has_chicken_and_onion

behavior roast_chicken_with_onion(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door
        achieve is_on(oven)
        # Turn on the oven to roast the chicken and onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and is_food_chicken_and_onion_inside_oven(oven)
        # Select the oven with both chicken and onion inside
        roast_chicken_with_onion(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion: item, oven: item):
    body:
        achieve_once inside(onion, oven)

behavior close_oven(oven: item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven: item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion) and id[onion]==2026
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        put_onion_in_oven(onion, oven)
        close_oven(oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bathroom_counter_306(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(phone,bathroom_counter_instance)
        else:
            exp(phone,bathroom_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,bathroom_counter_instance]=True
        close[bathroom_counter_instance,phone]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(oven:item, chicken:item, onion:item):
    body:
        achieve_once inside(chicken, oven)
        # Ensure the chicken is placed inside the oven
        achieve_once inside(onion, oven)
        # Ensure the onion is placed inside the oven
        achieve_once closed(oven)
        # Ensure the oven is closed
        achieve_once is_on(oven)
        # Ensure the oven is turned on

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        # Select the onion with ID 2026

        roast_chicken_with_onion(oven, chicken, onion)
        # Roast the chicken with onion in the specified oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        put_onion_in_oven(onion, oven)
        # Place the onion into the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2008_around_cupboard_130(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_orange,cupboard_instance)
        else:
            exp(food_orange,cupboard_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cupboard_instance]=True
        close[cupboard_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(oven:item, chicken:item, onion:item):
    body:
        # Ensure the chicken and onion are inside the oven and that the oven is turned on
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion
        
        roast_chicken_with_onion(oven, food_chicken, food_onion)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior insert_food_into_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)
        # Place the food item inside the oven

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior switch_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select an oven with ID 141

        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, oven)
        # Select the chicken that is already inside the oven

        bind food_onion: item where:
            is_food_onion(food_onion) and close_char(char, food_onion)
        # Find the onion that is close to the character

        insert_food_into_oven(food_onion, oven)
        close_oven_door(oven)
        switch_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_onion(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior prepare_chicken(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior close_the_oven_door(oven:item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, oven)
        # Select chicken that is already inside the oven

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion to put into the oven

        prepare_onion(food_onion, oven)
        prepare_chicken(food_chicken, oven)
        close_the_oven_door(oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Bind the onion item

        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Bind the oven item

        achieve_once inside(onion, oven)
        # Place the onion inside the oven

        achieve_once closed(oven)
        # Close the oven door

        achieve is_on(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior add_onion_to_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior roast_chicken_with_onion(oven:item):
    body:
        achieve is_on(oven)
        # Ensure the oven is on to roast the contents

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be used
        
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141
        
        add_onion_to_oven(onion, oven)
        roast_chicken_with_onion(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def has_onion_in_area():
    symbol has_onion=exists o: item : (is_food_onion(o) and id[o]==2026)
    return has_onion

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        bind onion: item where:
            is_food_onion(onion) and has_onion_in_area()
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_curtain_198(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(stamp,curtain_instance)
        else:
            exp(stamp,curtain_instance)
    eff:
        unknown[stamp]=False
        close[stamp,curtain_instance]=True
        close[curtain_instance,stamp]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_inside_oven(o:item, oven:item):
    body:
        achieve_once inside(o, oven) # Put the item inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Close the oven door
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken
        
        bind oven: item where:
            is_oven(oven)
        # Select oven for use

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select onion
        
        # Place the chicken in the oven
        put_inside_oven(food_chicken, oven)
        # Place the onion in the oven as instructed
        put_inside_oven(food_onion, oven)
        
        # Start the oven to roast the chicken with onion
        start_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        
        bind onion: item where:
            is_food_onion(onion)
        
        place_onion_in_oven(onion, oven)
        achieve_once closed(oven)
        achieve is_on(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_phone_47_around_curtain_198(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(phone,curtain_instance)
        else:
            exp(phone,curtain_instance)
    eff:
        unknown[phone]=False
        close[phone,curtain_instance]=True
        close[curtain_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior close_oven(oven:item):
    body:
        achieve_once closed(oven)

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, oven_141)
        # Select the chicken that is in the oven
        
        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select onion

        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        put_in_oven(food_onion, oven)
        close_oven(oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior put_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

behavior ensure_oven_on(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        put_in_oven(chicken, oven)
        put_in_oven(onion, oven)
        ensure_oven_on(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_curtain_198(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(phone,curtain_instance)
        else:
            exp(phone,curtain_instance)
    eff:
        unknown[phone]=False
        close[phone,curtain_instance]=True
        close[curtain_instance,phone]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        
behavior close_and_start_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven_141)
        # Select the chicken close to oven_141

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        place_chicken_in_oven(chicken, oven)
        place_onion_in_oven(onion, oven)
        close_and_start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_bathroom_counter_306(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(stamp,bathroom_counter_instance)
        else:
            exp(stamp,bathroom_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bathroom_counter_instance]=True
        close[bathroom_counter_instance,stamp]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141
        
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select chicken to be roasted
        
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        # Select onion to be roasted
        
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        
        achieve is_on(oven)
        # Ensure the oven is on to roast the items
        
        achieve closed(oven)
        # Ensure the oven is closed while roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken placed inside the oven

        bind onion: item where:
            is_food_onion(onion)
        # Select onion that needs to be roasted

        achieve_once inside(onion, oven)
        # Place the onion into the oven for roasting

        achieve closed(oven)
        # Ensure the oven is closed when roasting the chicken with onion

        achieve is_on(oven)
        # Ensure the oven is turned on for roasting the chicken with onion

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'walk_executor(kitchen_counter_129)', 'walk_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)']
Time info:
Time consume: 365 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 20
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
