From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately following your preferred method.', '2. Mix the cooked chicken and pasta together. ', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_washing_machine_2007(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(pot,washing_machine_instance)
        else:
            exp(pot,washing_machine_instance)
    eff:
        unknown[pot]=False
        close[pot,washing_machine_instance]=True
        close[washing_machine_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_towel_rack_34_around_bathroom_cabinet_40(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation

behavior cook_chicken(chicken:item, pot:item, stove:item):
    body:
        achieve_once on(chicken, pot)
        # Place the chicken inside a pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_chicken(chicken, pot, stove)
        cook_pasta(pasta, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior cook_chicken(chicken:item, pot:item, stove:item):
    body:
        achieve_once on(chicken, pot)
        # Place the chicken inside a pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_chicken(chicken, pot, stove)
        cook_pasta(pasta, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(pot_2069, washing_machine_2007)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)put_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. 
##############################
From agent.py
open_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. washing_machine_2007 is opened. 
##############################
From agent.py
exp(pot_2069, washing_machine_2007)
Fail to find pot_2069 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)put_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)put_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(pot_2069)put_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_chicken_2017. food_chicken_2017 is close pot_2069. food_chicken_2017 is on pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is opened. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the chicken and pasta are cooked separately. Place the pot containing the pasta on the stove to cook, as the current actions suggest only the chicken and pasta are in the same pot on the stove, which does not meet the requirement of cooking them separately.
##############################
From agent.py
Human Instruction: You need to ensure the chicken and pasta are cooked separately. Place the pot containing the pasta on the stove to cook, as the current actions suggest only the chicken and pasta are in the same pot on the stove, which does not meet the requirement of cooking them separately.

The actions you have taken:
Action 1: Walk to washing_machine_2007.
Action 2: Open washing_machine_2007.
Action 3: look for pot_2069 around washing_machine_2007.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to fridge_289.
Action 7: Switch off fridge_289.
Action 8: Open fridge_289.
Action 9: look for food_chicken_2017 around fridge_289.
Action 10: Grab food_chicken_2017.
Action 11: Walk to pot_2069.
Action 12: Put food_chicken_2017 on pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to stove_2065.
Action 15: Put pot_2069 on stove_2065.
Action 16: Switch on stove_2065.
Action 17: Walk to pot_2069.
Action 18: Open pot_2069.
Action 19: Walk to dry_pasta_2042.
Action 20: Grab dry_pasta_2042.
Action 21: Walk to pot_2069.
Action 22: Put dry_pasta_2042 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_chair_106_around_bed_105(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(chair,bed_instance)
        else:
            exp(chair,bed_instance)
    eff:
        unknown[chair]=False
        close[chair,bed_instance]=True
        close[bed_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Ensure chicken is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_2069)
        # Select the chicken inside pot_2069
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot_2069)
        # Select the pasta inside pot_2069
        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken] == 2069
        # Select pot for chicken
        bind pot_pasta: item where:
            is_pot(pot_pasta) and id[pot_pasta] = 2069
        # Select another pot for pasta
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        cook_chicken_separately(chicken, pot_chicken, stove)
        cook_pasta_separately(pasta, pot_pasta, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5842, column 49.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_chair_103_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Ensure chicken is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_2069)
        # Select the chicken inside pot_2069
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot_2069)
        # Select the pasta inside pot_2069
        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken] == 2069
        # Select pot for chicken
        bind pot_pasta: item where:
            is_pot(pot_pasta) and id[pot_pasta] == 2068
        # Select another pot for pasta
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        cook_chicken_separately(chicken, pot_chicken, stove)
        cook_pasta_separately(pasta, pot_pasta, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Ensure chicken is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken] == 2069
        # Select pot for chicken
        bind pot_pasta: item where:
            is_pot(pot_pasta) and id[pot_pasta] == 2068
        # Select another pot for pasta
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_chicken)
        # Select the chicken inside pot_pot_chicken
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot_pasta)
        # Select the pasta inside pot_pot_pasta
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        cook_chicken_separately(chicken, pot_chicken, stove)
        cook_pasta_separately(pasta, pot_pasta, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once on(pot, stove)
        # Place the pot with chicken on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once on(pot, stove)
        # Place the pot with pasta on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior ensure_chicken_separated_from_pasta(chicken:item, pasta:item):
    body:
        observe(pasta, "Verify pasta is cooked separately from chicken")
        observe(chicken, "Verify chicken is cooked separately from pasta")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind pot1: item where:
            is_pot(pot1) and not inside(dry_pasta, pot1)
        # Select a pot which is not currently holding pasta

        bind pot2: item where:
            is_pot(pot2) and not inside(chicken, pot2) and pot1 = pot2
        # Select another pot which is not currently holding chicken and is different from the first pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_chicken_separately(chicken, pot1, stove)
        cook_pasta_separately(dry_pasta, pot2, stove)
        ensure_chicken_separated_from_pasta(chicken, dry_pasta)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5814, column 65.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once on(pot, stove)
        # Place the pot with chicken on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once on(pot, stove)
        # Place the pot with pasta on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior ensure_chicken_separated_from_pasta(chicken:item, pasta:item):
    body:
        observe(pasta, "Verify pasta is cooked separately from chicken")
        observe(chicken, "Verify chicken is cooked separately from pasta")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind pot1: item where:
            is_pot(pot1) and not inside(dry_pasta, pot1)
        # Select a pot which is not currently holding pasta

        bind pot2: item where:
            is_pot(pot2) and not inside(chicken, pot2) and pot1 = pot2
        # Select another pot which is not currently holding chicken and is different from the first pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_chicken_separately(chicken, pot1, stove)
        cook_pasta_separately(dry_pasta, pot2, stove)
        ensure_chicken_separated_from_pasta(chicken, dry_pasta)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5814, column 65.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once on(pot, stove)
        # Place the pot with chicken on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior cook_pasta_separately(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once on(pot, stove)
        # Place the pot with pasta on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior ensure_chicken_separated_from_pasta(chicken:item, pasta:item):
    body:
        observe(pasta, "Verify pasta is cooked separately from chicken")
        observe(chicken, "Verify chicken is cooked separately from pasta")

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind pot1: item where:
            is_pot(pot1) and not inside(dry_pasta, pot1)
        # Select a pot which is not currently holding pasta

        bind pot2: item where:
            is_pot(pot2) and not inside(chicken, pot2) and pot1 = pot2
        # Select another pot which is not currently holding chicken and is different from the first pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_chicken_separately(chicken, pot1, stove)
        cook_pasta_separately(dry_pasta, pot2, stove)
        ensure_chicken_separated_from_pasta(chicken, dry_pasta)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken(chicken:item, pot1:item, stove:item):
    body:
        achieve_once inside(chicken, pot1)
        # Place the chicken inside the pot1
        achieve_once on(pot1, stove)
        # Place pot1 on the stove
        achieve is_on(stove)
        # Turn on the stove to cook chicken

behavior boil_pasta(pasta:item, pot2:item, stove:item):
    body:
        achieve_once inside(pasta, pot2)
        # Place the pasta inside the pot2
        achieve_once on(pot2, stove)
        # Place pot2 on the stove
        achieve is_on(stove)
        # Turn on the stove to cook pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_2069)
        # Select the chicken from pot_2069
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot_2069)
        # Select the pasta from pot_2069
        
        bind pot1: item where:
            is_pot(pot1) and id[pot1] == 2069
        # Select pot1 with ID 2069 for chicken
        bind pot2: item where:
            is_pot(pot2) and not id[pot2] == 2069
        # Select a different pot2 for pasta
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        
        cook_chicken(chicken, pot1, stove)
        # Cook the chicken
        
        boil_pasta(pasta, pot2, stove)
        # Cook the pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior cook_chicken(chicken:item, pot1:item, stove:item):
    body:
        achieve_once inside(chicken, pot1)
        # Place the chicken inside the pot1
        achieve_once on(pot1, stove)
        # Place pot1 on the stove
        achieve is_on(stove)
        # Turn on the stove to cook chicken

behavior boil_pasta(pasta:item, pot2:item, stove:item):
    body:
        achieve_once inside(pasta, pot2)
        # Place the pasta inside the pot2
        achieve_once on(pot2, stove)
        # Place pot2 on the stove
        achieve is_on(stove)
        # Turn on the stove to cook pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta
        
        bind pot1: item where:
            is_pot(pot1) and id[pot1] == 2069
        # Select pot1 with ID 2069 for chicken
        bind pot2: item where:
            is_pot(pot2) and not id[pot2] == 2069
        # Select a different pot2 for pasta
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        
        cook_chicken(chicken, pot1, stove)
        # Cook the chicken
        
        boil_pasta(pasta, pot2, stove)
        # Cook the pasta

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. cook the chicken and pasta separately following your preferred method." ?
Answer: To boil some pasta, fill a pot with water, put the pot on the stove, and turn on the stove. Then put the pasta into the pot. To cook chicken, put some oil in a frying pan, put the frying pan on the stove, and turn on the stove. Then put the chicken into the frying pan.
Re-decompose: False

##############################
Error record: 'OursWG' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'put_executor(food_chicken_2017, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)']
Time info:
Time consume: 228 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 32
goal generate times: 4
goal correct times: 1
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 7 steps
Keystate: k4 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
