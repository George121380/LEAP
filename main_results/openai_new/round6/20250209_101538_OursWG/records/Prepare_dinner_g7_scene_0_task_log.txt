From agent.py
Reset goals: The sub-goals are: 
['1. Find the necessary ingredients and utensils to make fish soup.', '2. Wash and prepare the ingredients for the fish soup.', '3. Cook the fish soup using the prepared ingredients.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_or_utensil(item: item):
    # Check if an item is an ingredient or a utensil for making fish soup
    return (
        is_food_fish(item) or
        is_pot(item) or
        is_knife(item) or
        is_food_salt(item) or
        is_food_onion(item) or
        is_bowl(item)
    )

behavior observe_ingredient_or_utensil(item: item):
    body:
        observe(item, "Check if the item is an ingredient or utensil necessary for fish soup")

behavior __goal__():
    body:
        foreach item: item:
            if not visited(item) and is_ingredient_or_utensil(item):
                observe_ingredient_or_utensil(item)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient_or_utensil(item: item):
    # Check if an item is an ingredient or a utensil for making fish soup
    return (
        is_food_fish(item) or
        is_pot(item) or
        is_knife(item) or
        is_food_salt(item) or
        is_food_onion(item) or
        is_bowl(item)
    )

behavior observe_ingredient_or_utensil(item: item):
    body:
        observe(item, "Check if the item is an ingredient or utensil necessary for fish soup")

behavior __goal__():
    body:
        foreach item: item:
            if not visited(item) and is_ingredient_or_utensil(item):
                observe_ingredient_or_utensil(item)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)obs(food_onion_2032, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(food_salt_2037, kitchen_counter_230)walk_executor(food_salt_2037)obs(food_salt_2037, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)obs(knife_2050, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2021, Check if the item is an ingredient or utensil necessary for fish soup)obs(food_onion_2032, Check if the item is an ingredient or utensil necessary for fish soup)obs(food_salt_2037, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)obs(knife_2050, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
obs(food_fish_2021, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  food_fish_2021 is inside fridge_289. food_fish_2021 is inside dining_room_201. food_fish_2021 is close to fridge_289. food_fish_2021 is close to character_65. food_fish_2021 is DIRTY.
##############################
From agent.py
obs(food_onion_2032, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  food_onion_2032 is inside fridge_289. food_onion_2032 is inside dining_room_201. food_onion_2032 is close to fridge_289. food_onion_2032 is close to character_65. food_onion_2032 is CLEAN.
##############################
From agent.py
obs(food_salt_2037, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  food_salt_2037 is close to fridge_289. food_salt_2037 is close to character_65. food_salt_2037 is inside fridge_289. food_salt_2037 is inside dining_room_201. food_salt_2037 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)obs(knife_2050, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
obs(knife_2050, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  knife_2050 is close to kitchen_counter_230. knife_2050 is close to character_65. knife_2050 is on kitchen_counter_230. knife_2050 is inside dining_room_201. knife_2050 is CLEAN.
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
obs(pot_2069, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_35)exp(bowl_2071, wallshelf_35)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(wallshelf_35)exp(bowl_2072, wallshelf_35)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(wallshelf_35)
Robot find: towel_rack_33, towel_rack_34, Robot is close to the wallshelf_35. 
##############################
From agent.py
exp(bowl_2071, wallshelf_35)
Fail to find bowl_2071 around wallshelf_35. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(bowl_2071, washing_machine_2007)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(washing_machine_2007)exp(bowl_2072, washing_machine_2007)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. 
##############################
From agent.py
open_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. washing_machine_2007 is opened. 
##############################
From agent.py
exp(bowl_2071, washing_machine_2007)
Fail to find bowl_2071 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)walk_executor(bowl_2072)obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
obs(bowl_2071, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  bowl_2071 is close to table_226. bowl_2071 is close to character_65. bowl_2071 is on table_226. bowl_2071 is inside dining_room_201. bowl_2071 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2072. 
##############################
From agent.py
obs(bowl_2072, Check if the item is an ingredient or utensil necessary for fish soup)
Get this information:  bowl_2072 is close to table_226. bowl_2072 is close to character_65. bowl_2072 is on table_226. bowl_2072 is inside dining_room_201. bowl_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_ingredients(fish:item, onion:item, salt:item, bowl: item):
    body:
        achieve clean(fish)
        # Clean the fish

        achieve clean(onion)
        # Clean the onion
        
        achieve clean(salt)
        # Clean the salt

        achieve clean(bowl)
        # Clean the bowl to put the prepared ingredients

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2071
        # Select the bowl with ID 2071

        wash_and_prepare_ingredients(fish, onion, salt, bowl)
        # Wash and prepare the fish, onion, and salt, and clean the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_prepare_ingredients(fish:item, onion:item, salt:item, bowl: item):
    body:
        achieve clean(fish)
        # Clean the fish

        achieve clean(onion)
        # Clean the onion
        
        achieve clean(salt)
        # Clean the salt

        achieve clean(bowl)
        # Clean the bowl to put the prepared ingredients

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2071
        # Select the bowl with ID 2071

        wash_and_prepare_ingredients(fish, onion, salt, bowl)
        # Wash and prepare the fish, onion, and salt, and clean the bowl

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(kitchen_counter_230)put_executor(food_fish_2021, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(bowl_2071)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the fridge_289. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the fridge_289. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_fish_2021, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. food_fish_2021 is close kitchen_counter_230. kitchen_counter_230 is close food_fish_2021. food_fish_2021 is on kitchen_counter_230. food_fish_2021 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(bowl_2071)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. bowl_2071 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the onion and check the cleanliness status of the salt. Once these are confirmed or cleaned, the sub-task will be complete.
##############################
From agent.py
Human Instruction: You need to wash the onion and check the cleanliness status of the salt. Once these are confirmed or cleaned, the sub-task will be complete.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Observe around food_fish_2021 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 6: Observe around food_onion_2032 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 7: Observe around food_salt_2037 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 8: Walk to kitchen_counter_230.
Action 9: look for knife_2050 around kitchen_counter_230.
Action 10: Walk to knife_2050.
Action 11: Observe around knife_2050 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 12: Walk to pot_2069.
Action 13: Open pot_2069.
Action 14: Observe around pot_2069 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 15: Walk to kitchen_counter_230.
Action 16: look for bowl_2071 around kitchen_counter_230.
Action 17: Walk to cupboard_229.
Action 18: Open cupboard_229.
Action 19: look for bowl_2071 around cupboard_229.
Action 20: Walk to wallshelf_35.
Action 21: look for bowl_2071 around wallshelf_35.
Action 22: Walk to washing_machine_2007.
Action 23: Open washing_machine_2007.
Action 24: look for bowl_2071 around washing_machine_2007.
Action 25: Walk to table_226.
Action 26: look for bowl_2071 around table_226.
Action 27: Walk to bowl_2071.
Action 28: Observe around bowl_2071 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 29: Walk to bowl_2072.
Action 30: Observe around bowl_2072 with the question of Check if the item is an ingredient or utensil necessary for fish soup.
Action 31: Walk to food_fish_2021.
Action 32: Grab food_fish_2021.
Action 33: Walk to faucet_43.
Action 34: Switch on faucet_43.
Action 35: Wash food_fish_2021.
Action 36: Switch off faucet_43.
Action 37: Walk to bowl_2071.
Action 38: Grab bowl_2071.
Action 39: Walk to kitchen_counter_230.
Action 40: Put food_fish_2021 on kitchen_counter_230.
Action 41: Switch on faucet_232.
Action 42: Wash bowl_2071.
Action 43: Switch off faucet_232.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_check_onion(onion:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure character is close to the faucet before washing
        wash(onion)
        # Wash the onion

behavior check_cleanliness_salt(salt:item):
    body:
        observe(salt, "Check if the salt is clean")
        # Observe the salt to check its cleanliness

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Bind the onion as an item of interest

        bind faucet: item where:
            is_faucet(faucet)
        # Bind a faucet as a water source

        bind salt: item where:
            is_food_salt(salt)
        # Bind the salt as an item of interest

        wash_and_check_onion(onion, faucet)
        check_cleanliness_salt(salt)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_check_onion(onion:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure character is close to the faucet before washing
        wash(onion)
        # Wash the onion

behavior check_cleanliness_salt(salt:item):
    body:
        observe(salt, "Check if the salt is clean")
        # Observe the salt to check its cleanliness

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Bind the onion as an item of interest

        bind faucet: item where:
            is_faucet(faucet)
        # Bind a faucet as a water source

        bind salt: item where:
            is_food_salt(salt)
        # Bind the salt as an item of interest

        wash_and_check_onion(onion, faucet)
        check_cleanliness_salt(salt)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(bowl_2071, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_onion_2032)switchoff_executor(faucet_232)walk_executor(food_salt_2037)obs(food_salt_2037, Check if the salt is clean)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(bowl_2071, kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. bowl_2071 is close kitchen_counter_230. bowl_2071 is on kitchen_counter_230. kitchen_counter_230 is close bowl_2071. bowl_2071 released by left hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_onion_2032)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(food_salt_2037)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Robot is close to the food_salt_2037. 
##############################
From agent.py
obs(food_salt_2037, Check if the salt is clean)
Get this information:  food_salt_2037 is close to fridge_289. food_salt_2037 is close to character_65. food_salt_2037 is inside fridge_289. food_salt_2037 is inside dining_room_201. food_salt_2037 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation

behavior cook_fish_soup(pot:item, fish:item, onion:item, salt:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(onion, pot)
        # Place the onion inside the pot
        achieve_once inside(salt, pot)
        # Add salt into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the fish soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2021
        # Select the fish with ID 2021

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Select the onion with ID 2032
        
        bind salt: item where:
            is_food_salt(salt) and id[salt] == 2037
        # Select the salt with ID 2037
        
        drinkable(pot)
        # Ensure the pot is filled with water

        cook_fish_soup(pot, fish, onion, salt, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_fish_soup(pot:item, fish:item, onion:item, salt:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(onion, pot)
        # Place the onion inside the pot
        achieve_once inside(salt, pot)
        # Add salt into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the fish soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2021
        # Select the fish with ID 2021

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Select the onion with ID 2032
        
        bind salt: item where:
            is_food_salt(salt) and id[salt] == 2037
        # Select the salt with ID 2037
        
        fill_pot_with_water(pot, faucet)
        cook_fish_soup(pot, fish, onion, salt, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_fish_soup(pot:item, fish:item, onion:item, salt:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(onion, pot)
        # Place the onion inside the pot
        achieve_once inside(salt, pot)
        # Add salt into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the fish soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2021
        # Select the fish with ID 2021

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Select the onion with ID 2032
        
        bind salt: item where:
            is_food_salt(salt) and id[salt] == 2037
        # Select the salt with ID 2037
        
        fill_pot_with_water(pot, faucet)
        cook_fish_soup(pot, fish, onion, salt, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(pot_2069)putin_executor(food_fish_2021, pot_2069)putin_executor(food_onion_2032, pot_2069)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(pot_2069)putin_executor(food_salt_2037, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_ingredients_to_pot(fish:item, onion:item, salt:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        # Add the fish to the pot for cooking
        achieve_once inside(onion, pot)
        # Add the onion to the pot for cooking
        achieve_once inside(salt, pot)
        # Add the salt to the pot for cooking

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the fish soup

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select a clean fish

        bind onion: item where:
            is_food_onion(onion) and clean(onion)
        # Select a clean onion

        bind salt: item where:
            is_food_salt(salt) and clean(salt)
        # Select clean salt

        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_ingredients_to_pot(fish, onion, salt, pot)
        start_cooking(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_ingredients_to_pot(fish:item, onion:item, salt:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        # Add the fish to the pot for cooking
        achieve_once inside(onion, pot)
        # Add the onion to the pot for cooking
        achieve_once inside(salt, pot)
        # Add the salt to the pot for cooking

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the fish soup

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select a clean fish

        bind onion: item where:
            is_food_onion(onion) and clean(onion)
        # Select a clean onion

        bind salt: item where:
            is_food_salt(salt) and clean(salt)
        # Select clean salt

        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_ingredients_to_pot(fish, onion, salt, pot)
        start_cooking(pot, stove)

##############################
From agent.py-> find a plan in act()
put_executor(food_onion_2032, kitchen_counter_230)grab_executor(food_fish_2021)putin_executor(food_fish_2021, pot_2069)grab_executor(food_onion_2032)putin_executor(food_onion_2032, pot_2069)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(pot_2069)putin_executor(food_salt_2037, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
put_executor(food_onion_2032, kitchen_counter_230)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_onion_2032. food_onion_2032 is close kitchen_counter_230. food_onion_2032 is on kitchen_counter_230. food_onion_2032 released by right hand. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
putin_executor(food_fish_2021, pot_2069)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. food_fish_2021 is inside pot_2069. food_fish_2021 is close pot_2069. pot_2069 is close food_fish_2021. food_fish_2021 released by right hand. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
putin_executor(food_onion_2032, pot_2069)
Robot find: Robot is close to the food_onion_2032. Robot is close to the pot_2069. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. food_onion_2032 is inside pot_2069. pot_2069 is close food_onion_2032. food_onion_2032 is close pot_2069. food_onion_2032 released by right hand. 
##############################
From agent.py
walk_executor(food_salt_2037)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_salt_2037. 
##############################
From agent.py
grab_executor(food_salt_2037)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_salt_2037. Grabbing food_salt_2037 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_salt_2037. Robot is close to the food_onion_2032. Robot is close to the food_fish_2021. 
##############################
From agent.py
putin_executor(food_salt_2037, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_salt_2037. Robot is close to the food_onion_2032. Robot is close to the food_fish_2021. pot_2069 is close food_salt_2037. food_salt_2037 is close pot_2069. food_salt_2037 is inside pot_2069. food_salt_2037 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_35)', 'walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'walk_executor(bowl_2072)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_fish_2021, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(bowl_2071)', 'switchoff_executor(faucet_232)', 'walk_executor(faucet_43)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(kitchen_counter_230)', 'put_executor(bowl_2071, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_onion_2032)', 'switchoff_executor(faucet_232)', 'walk_executor(food_salt_2037)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021) (Failed)', 'put_executor(food_onion_2032, kitchen_counter_230)', 'grab_executor(food_fish_2021)', 'putin_executor(food_fish_2021, pot_2069)', 'grab_executor(food_onion_2032)', 'putin_executor(food_onion_2032, pot_2069)', 'walk_executor(food_salt_2037)', 'grab_executor(food_salt_2037)', 'walk_executor(pot_2069)', 'putin_executor(food_salt_2037, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 244 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 47
goal generate times: 5
goal correct times: 1
action_num: 57

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
