From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book.', '2. Place the book on the table in the home office.', '3. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book(x: item):
    # Helper function to check if an item is a book
    return True if is_book(x) else False

behavior observe_books(book:item):
    body:
        observe(book, "Check if item is a book")
        
behavior __goal__():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe_books(book)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book(x: item):
    # Helper function to check if an item is a book
    return True if is_book(x) else False

behavior observe_books(book:item):
    body:
        observe(book, "Check if item is a book")
        
behavior __goal__():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe_books(book)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if item is a book)walk_executor(bookshelf_233)exp(book_2067, bookshelf_233)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if item is a book)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if item is a book)walk_executor(bookshelf_101)exp(book_2067, bookshelf_101)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if item is a book)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if item is a book)walk_executor(bookshelf_354)exp(book_2067, bookshelf_354)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if item is a book)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if item is a book)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if item is a book)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Check if item is a book)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Check if item is a book)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        place_book_on_table(book, table)
        # Place the book on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        bind home_office: item where:
            is_home_office(home_office)
        # Bind home_office
        place_book_on_table(book, table)
        # Place the book on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066
        bind home_office: item where:
            is_home_office(home_office)
        # Bind home_office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        place_book_on_table(book, table)
        # Place the book on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066
        bind home_office: item where:
            is_home_office(home_office)
        # Bind home_office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        place_book_on_table(book, table)
        # Place the book on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light in the home office

        achieve is_on(light)
        # Turn on the light in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light in the home office

        achieve is_on(light)
        # Turn on the light in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light in the home office

        achieve is_on(light)
        # Turn on the light in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 116 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 19
goal generate times: 3
goal correct times: 3
action_num: 16

Task complete rate:
1
Scene_id: 0
##############################
