From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt that needs to be hand washed.', '2. Hand wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

behavior find_shirt(shirt:item):
    body:
        observe(shirt, "Check if this is the shirt that needs to be hand washed")

behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                find_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_shirt(shirt:item):
    body:
        observe(shirt, "Check if this is the shirt that needs to be hand washed")

behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                find_shirt(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if this is the shirt that needs to be hand washed)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if this is the shirt that needs to be hand washed)
##############################
From agent.py
obs(clothes_shirt_2086, Check if this is the shirt that needs to be hand washed)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_towel_2059_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item):
    body:
        achieve clean(shirt)
        # Ensure the shirt is clean after washing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and dirty(shirt)
        # Select the shirt that is dirty
        wash_shirt(shirt)
        # Wash the shirt to achieve the clean state

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_shirt(shirt:item):
    body:
        achieve clean(shirt)
        # Ensure the shirt is clean after washing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and dirty(shirt)
        # Select the shirt that is dirty
        wash_shirt(shirt)
        # Wash the shirt to achieve the clean state

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_dresser_123(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(iron,dresser_instance)
        else:
            exp(iron,dresser_instance)
    eff:
        unknown[iron]=False
        close[iron,dresser_instance]=True
        close[dresser_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior iron_shirt(iron:item, ironing_board:item, shirt:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board for ironing

behavior unplug_iron(iron:item):
    body:
        achieve_once unplugged(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        turn_on_iron(iron)
        iron_shirt(iron, ironing_board, shirt)
        unplug_iron(iron)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron

behavior switch_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Switch on the iron

behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once inhand(iron)
        # Hold the iron to iron the shirt
        achieve clean(shirt)
        # Ensure the shirt is ironed and clean

behavior switch_off_iron(iron:item):
    body:
        achieve is_off(iron)
        # Turn off the iron

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)
        # Unplug the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        plug_in_iron(iron)
        switch_on_iron(iron)
        iron_shirt(iron, shirt, ironing_board)
        switch_off_iron(iron)
        unplug_iron(iron)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron
        achieve clean(shirt)
        # Iron the shirt to ensure its clean and wrinklefree

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the cleaned shirt
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron
        achieve clean(shirt)
        # Iron the shirt to ensure its clean and wrinklefree

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the cleaned shirt
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        iron_shirt(shirt, ironing_board, iron)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to use the iron to iron clothes_shirt_2086 on ironing_board_2074. The iron is already turned on and plugged in, and the shirt is ready for ironing.
##############################
From agent.py
Human Instruction: You need to use the iron to iron clothes_shirt_2086 on ironing_board_2074. The iron is already turned on and plugged in, and the shirt is ready for ironing.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Check if this is the shirt that needs to be hand washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to ironing_board_2074.
Action 10: Put clothes_shirt_2086 on ironing_board_2074.
Action 11: look for iron_2089 around ironing_board_2074.
Action 12: Walk to iron_2089.
Action 13: Plug in iron_2089.
Action 14: Switch on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is on for the ironing process
        achieve_once close_char(char, shirt)
        # Ensure character is close to the shirt for the ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Bind to the specific shirt by its ID
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select the specific ironing board by its ID
        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt using the iron and ironing board

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is on for the ironing process
        achieve_once close_char(char, shirt)
        # Ensure character is close to the shirt for the ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Bind to the specific shirt by its ID
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select the specific ironing board by its ID
        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt using the iron and ironing board

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2086)
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt. Although the shirt is washed, placed on the ironing board, and the iron is plugged in and turned on, the action to actually iron the shirt has not been taken yet.
##############################
From agent.py
Human Instruction: You need to iron the shirt. Although the shirt is washed, placed on the ironing board, and the iron is plugged in and turned on, the action to actually iron the shirt has not been taken yet.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Check if this is the shirt that needs to be hand washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to ironing_board_2074.
Action 10: Put clothes_shirt_2086 on ironing_board_2074.
Action 11: look for iron_2089 around ironing_board_2074.
Action 12: Walk to iron_2089.
Action 13: Plug in iron_2089.
Action 14: Switch on iron_2089.
Action 15: Walk to clothes_shirt_2086.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve_once close_char(char, iron)
        # Ensure character is close to the iron before ironing
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board for ironing
        achieve inhand(iron)
        # Ensure the iron is in hand for the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        iron_shirt(shirt, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>, Variable<iron: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, iron)
        # Ensure character is close to the iron before ironing
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board for ironing
        achieve_once inhand(iron)
        # Ensure the iron is in hand for the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, iron)
        # Ensure character is close to the iron before ironing
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board for ironing
        achieve_once inhand(iron)
        # Ensure the iron is in hand for the ironing process

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, iron)
        # Ensure character is close to the iron before ironing
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board for ironing
        achieve_once inhand(iron)
        # Ensure the iron is in hand for the ironing process

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        iron_shirt(shirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)grab_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the action of actually ironing the shirt. The shirt is on the ironing board, and the iron is in your hand and turned on, but the ironing itself has not been done yet.
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(clothes_shirt_2086)', 'walk_executor(iron_2089)', 'grab_executor(iron_2089)']
Time info:
Time consume: 147 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 11
goal generate times: 7
goal correct times: 2
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
