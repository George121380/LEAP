From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the potatoes.  ', '2. Cut the potatoes into strips for fries.  ', '3. Fry or bake the potato strips until golden and crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_potatoes(potato:item):
    body:
        achieve_once inhand(potato)
        # Temporarily hold the potato to transport it to the sink
        observe(sink, "Ensure the sink is ready for washing")
        move(potato) 
        # Move the potato to the sink
        wash(potato)
        # Wash the potato

behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not clean(potato):
                find_and_wash_potatoes(potato)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<potato: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#goal_representation
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once inhand(potato)
        # Temporarily hold the potato to transport it to the sink
        observe(sink, "Ensure the sink is ready for washing")
        move(potato)
        # Move the potato to the sink
        wash(potato)
        # Wash the potato

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        foreach potato: item:
            if is_food_potato(potato) and not clean(potato):
                find_and_wash_potatoes(potato, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once inhand(potato)
        # Temporarily hold the potato to transport it to the sink
        observe(sink, "Ensure the sink is ready for washing")
        move(potato)
        # Move the potato to the sink
        wash(potato)
        # Wash the potato

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        foreach potato: item:
            if is_food_potato(potato) and not clean(potato):
                find_and_wash_potatoes(potato, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(sink_42)obs(sink_42, Ensure the sink is ready for washing)walk_executor(food_potato_2035)move_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(sink_42)obs(sink_42, Ensure the sink is ready for washing)walk_executor(food_potato_2035)move_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash and peel the potatoes.', '2. Cut the potatoes into strips.', '3. Fry the potato strips until golden and crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_potato(potato:item):
    body:
        achieve clean(potato)
        # Wash the potato until it is clean

behavior peel_potato(potato:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Hold the knife to peel
        achieve cut(potato)
        # Peel the potato by cutting off the skin

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato to wash and peel
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling
        
        wash_potato(potato)
        peel_potato(potato, knife)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_potato(potato:item):
    body:
        achieve clean(potato)
        # Wash the potato until it is clean

behavior peel_potato(potato:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Hold the knife to peel
        achieve cut(potato)
        # Peel the potato by cutting off the skin

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato to wash and peel
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling
        
        wash_potato(potato)
        peel_potato(potato, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wash the potato to fulfill the goal representation of achieving a clean potato.
##############################
From agent.py
Human Instruction: The robot needs to wash the potato to fulfill the goal representation of achieving a clean potato.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_potato_2035 around fridge_289.
Action 7: Walk to knife_2050.
Action 8: Grab knife_2050.
Action 9: Walk to food_potato_2035.
Action 10: Grab food_potato_2035.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_potato_2035 on cutting_board_2051.
Action 13: Walk to food_potato_2035.
Action 14: Cut food_potato_2035.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_potato(potato:item):
    body:
        wash(potato)
        # Wash the potato to ensure its clean

behavior peel_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before peeling
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the peeling
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before peeling

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato to wash and peel

        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for prepping

        wash_potato(potato)
        peel_potato(potato, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_potato(potato:item):
    body:
        wash(potato)
        # Wash the potato to ensure its clean

behavior peel_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before peeling
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the peeling
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before peeling

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato to wash and peel

        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for prepping

        wash_potato(potato)
        peel_potato(potato, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato after washing it. Ensure you have the knife in hand, and the potato is on the cutting board, then proceed with peeling.
##############################
From agent.py
Human Instruction: You need to peel the potato after washing it. Ensure you have the knife in hand, and the potato is on the cutting board, then proceed with peeling.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_potato_2035 around fridge_289.
Action 7: Walk to knife_2050.
Action 8: Grab knife_2050.
Action 9: Walk to food_potato_2035.
Action 10: Grab food_potato_2035.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_potato_2035 on cutting_board_2051.
Action 13: Walk to food_potato_2035.
Action 14: Cut food_potato_2035.
Action 15: Grab food_potato_2035.
Action 16: Walk to faucet_43.
Action 17: Switch on faucet_43.
Action 18: Wash food_potato_2035.
Action 19: Switch off faucet_43.
Action 20: Walk to cutting_board_2051.
Action 21: Put food_potato_2035 on cutting_board_2051.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_potato(potato:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure character is close to the faucet
        achieve has_water(potato)
        # Wash the potato

behavior peel_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board
        achieve_once inhand(knife)
        # Hold the knife
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve clean(potato)
        # Peel the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Select the knife with ID 2050

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Select the cutting board with ID 2051

        wash_potato(potato, faucet)
        peel_potato(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_potato(potato:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure character is close to the faucet
        achieve has_water(potato)
        # Wash the potato

behavior peel_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board
        achieve_once inhand(knife)
        # Hold the knife
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve clean(potato)
        # Peel the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Select the knife with ID 2050

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Select the cutting board with ID 2051

        wash_potato(potato, faucet)
        peel_potato(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(cutting_board_2051)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato. Ensure you have the knife in hand, and the potato is on the cutting board, then proceed with peeling.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
markdown
behavior cut_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before cutting
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potato(potato, cutting_board, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'markdown') at line 5783, column 1.
Expected one of: 
	* GOAL
	* IMPORT
	* INCLUDE
	* UNDIRECTED_GENERATOR
	* $END
	* DEF
	* GENERATOR
	* OBJECTS
	* TYPEDEF
	* CONTROLLER
	* INIT
	* _PRAGMA_KEYWORD
	* DOMAIN
	* BEHAVIOR
	* _NEWLINE
	* FEATURE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#goal_representation
behavior cut_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before cutting
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potato(potato, cutting_board, knife)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before cutting
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a food potato

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        cut_potatoes(potato, cutting_board, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(potato, cutting_board)
        # Ensure potato is placed on the cutting board before cutting
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        cut_potatoes(potato, cutting_board, knife)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. cut the potatoes into strips." ?
Answer: Your current plan deviates significantly from the outlined steps. I suggest revisiting your strategy for cutting the potatoes into strips.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cut the potatoes into strips as per the suggested strategy.', '2. Fry the potato strips until they are golden and crispy.']
##############################
Error record: 'OursWG' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_potato_2035)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(faucet_43)', 'walk_executor(cutting_board_2051)']
Time info:
Time consume: 158 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 43
goal generate times: 7
goal correct times: 1
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
