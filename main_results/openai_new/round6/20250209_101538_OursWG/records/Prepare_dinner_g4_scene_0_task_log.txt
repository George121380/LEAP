From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice.', '3. Fry the eggs and combine them with the rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_wash_items(rice:item, egg:item, faucet:item):
    body:
        achieve clean(rice)
        # Wash the rice
        achieve clean(egg)
        # Wash the egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to wash the items
        find_and_wash_items(rice, egg, faucet)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_and_wash_items(rice:item, egg:item, faucet:item):
    body:
        achieve clean(rice)
        # Wash the rice
        achieve clean(egg)
        # Wash the egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to wash the items
        find_and_wash_items(rice, egg, faucet)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs in the kitchen.', '2. Cook the rice and fry the eggs together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_headset_2076_around_desk_104(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(headset,desk_instance)
        else:
            exp(headset,desk_instance)
    eff:
        unknown[headset]=False
        close[headset,desk_instance]=True
        close[desk_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_rice_and_eggs(rice:item, egg:item):
    body:
        achieve visited(rice)
        # Mark rice as visited

        achieve visited(egg)
        # Mark eggs as visited

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        find_rice_and_eggs(rice, egg)
        # Find and visit rice and eggs

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_rice_and_eggs(rice:item, egg:item):
    body:
        achieve visited(rice)
        # Mark rice as visited

        achieve visited(egg)
        # Mark eggs as visited

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        find_rice_and_eggs(rice, egg)
        # Find and visit rice and eggs

##############################
From agent.py-> find a plan in act()
obs(food_rice_2036, look around this place)obs(food_egg_2020, look around this place)
##############################
From agent.py
obs(food_rice_2036, look around this place)
Get this information:  food_rice_2036 is inside fridge_289. food_rice_2036 is inside dining_room_201. food_rice_2036 is close to fridge_289. food_rice_2036 is close to character_65. food_rice_2036 is CLEAN.
##############################
From agent.py
obs(food_egg_2020, look around this place)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_doorjamb_165(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(wall_clock,doorjamb_instance)
        else:
            exp(wall_clock,doorjamb_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,doorjamb_instance]=True
        close[doorjamb_instance,wall_clock]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior cook_rice_and_fry_eggs_together(fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve_once inside(rice, fryingpan)
        # Place rice inside the frying pan
        achieve_once inside(egg, fryingpan)
        # Place eggs inside the frying pan with rice
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the mixture

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select egg with ID 2020
        cook_rice_and_fry_eggs_together(fryingpan, stove, rice, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior cook_rice_and_fry_eggs_together(fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve_once inside(rice, fryingpan)
        # Place rice inside the frying pan
        achieve_once inside(egg, fryingpan)
        # Place eggs inside the frying pan with rice
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the mixture

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select egg with ID 2020
        cook_rice_and_fry_eggs_together(fryingpan, stove, rice, egg)

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 108 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 43
goal generate times: 3
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
