From agent.py
Reset goals: The sub-goals are: 
['1. Find a pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat the plate in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def has_pizza_and_hamburger():
    symbol has_pizza=exists o: item : (is_food_pizza(o))
    symbol has_hamburger=exists o: item : (is_food_hamburger(o))
    return has_pizza and has_hamburger

behavior __goal__():
    body:
        if has_pizza_and_hamburger():
            # If both pizza and hamburger are already identified, proceed
            bind pizza: item where:
                is_food_pizza(pizza)
            # Select the pizza

            bind hamburger: item where:
                is_food_hamburger(hamburger)
            # Select the hamburger

            achieve visited(pizza)
            achieve visited(hamburger)

        else:
            # Otherwise, initiate exploration to locate the pizza and hamburger
            foreach food_item: item:
                if (is_food_pizza(food_item) or is_food_hamburger(food_item)) and not visited(food_item):
                    observe(food_item, "Check if there are pizza and hamburger")
                    # Observe to check for pizza and hamburger

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pizza_and_hamburger():
    symbol has_pizza=exists o: item : (is_food_pizza(o))
    symbol has_hamburger=exists o: item : (is_food_hamburger(o))
    return has_pizza and has_hamburger

behavior __goal__():
    body:
        if has_pizza_and_hamburger():
            # If both pizza and hamburger are already identified, proceed
            bind pizza: item where:
                is_food_pizza(pizza)
            # Select the pizza

            bind hamburger: item where:
                is_food_hamburger(hamburger)
            # Select the hamburger

            achieve visited(pizza)
            achieve visited(hamburger)

        else:
            # Otherwise, initiate exploration to locate the pizza and hamburger
            foreach food_item: item:
                if (is_food_pizza(food_item) or is_food_hamburger(food_item)) and not visited(food_item):
                    observe(food_item, "Check if there are pizza and hamburger")
                    # Observe to check for pizza and hamburger

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)obs(food_pizza_2034, look around this place)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, look around this place)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_pizza_2034, fridge_289)
Find food_pizza_2034. 
##############################
From agent.py-> find a plan in act()
obs(food_pizza_2034, look around this place)obs(food_hamburger_2024, look around this place)
##############################
From agent.py
obs(food_pizza_2034, look around this place)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py
obs(food_hamburger_2024, look around this place)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_items_on_plate(pizza, hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_items_on_plate(pizza, hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_tray_296_around_microwave_297(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tray,microwave_instance)
        else:
            exp(tray,microwave_instance)
    eff:
        unknown[tray]=False
        close[tray,microwave_instance]=True
        close[microwave_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(food_pizza:item, food_hamburger:item, plate:item):
    body:
        achieve_once on(food_pizza, plate)
        achieve_once on(food_hamburger, plate)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select a pizza

        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(food_pizza, food_hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_plate(food_pizza:item, food_hamburger:item, plate:item):
    body:
        achieve_once on(food_pizza, plate)
        achieve_once on(food_hamburger, plate)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select a pizza

        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(food_pizza, food_hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)exp(plate_1000, microwave_297)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
exp(plate_1000, microwave_297)
Fail to find plate_1000 around microwave_297. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_104(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        # Place the first food item on the plate
        achieve_once on(item2, plate)
        # Place the second food item on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(pizza, hamburger, plate)
        # Put both the pizza and the hamburger on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        # Place the first food item on the plate
        achieve_once on(item2, plate)
        # Place the second food item on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_on_plate(pizza, hamburger, plate)
        # Put both the pizza and the hamburger on the plate

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the pizza and hamburger on a plate." ?
Answer: Find a plate and put the pizza and hamburger on it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_ceilinglamp_26(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==26
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(phone,ceilinglamp_instance)
        else:
            exp(phone,ceilinglamp_instance)
    eff:
        unknown[phone]=False
        close[phone,ceilinglamp_instance]=True
        close[ceilinglamp_instance,phone]=True
    

behavior find_plate_1000_around_cpuscreen_416(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(plate,cpuscreen_instance)
        else:
            exp(plate,cpuscreen_instance)
    eff:
        unknown[plate]=False
        close[plate,cpuscreen_instance]=True
        close[cpuscreen_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(pizza, hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(pizza, hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cpuscreen_416)exp(plate_1000, cpuscreen_416)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(cpuscreen_416)
Robot find: keyboard_415, headset_2076, chair_356, phone_2077, mouse_413, pencil_2001, Robot is close to the cpuscreen_416. Robot is close to the desk_357. 
##############################
From agent.py
exp(plate_1000, cpuscreen_416)
Fail to find plate_1000 around cpuscreen_416. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: The target item, plate_1000, is located in dining_room_201. You will find the plate placed on top of sink_231. Look for the sink, and plate_1000 will be right there on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, plate_1000, is located in dining_room_201. You will find the plate placed on top of sink_231. Look for the sink, and plate_1000 will be right there on it.

Human Guidance: Find a plate and put the pizza and hamburger on it.
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_pizza_2034 around fridge_289.
Action 5: Observe around food_pizza_2034 with the question of look around this place.
Action 6: Observe around food_hamburger_2024 with the question of look around this place.
Action 7: Walk to kitchen_counter_230.
Action 8: look for plate_1000 around kitchen_counter_230.
Action 9: Walk to cupboard_229.
Action 10: Open cupboard_229.
Action 11: look for plate_1000 around cupboard_229.
Action 12: Walk to microwave_297.
Action 13: Open microwave_297.
Action 14: look for plate_1000 around microwave_297.
Action 15: Walk to dishwasher_1001.
Action 16: Open dishwasher_1001.
Action 17: look for plate_1000 around dishwasher_1001.
Action 18: Walk to cpuscreen_416.
Action 19: look for plate_1000 around cpuscreen_416.
Action 20: Walk to table_226.

##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_plate_in_microwave(plate, microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_plate_in_microwave(plate, microwave)

##############################
From agent.py-> find a plan in act()
grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        put_plate_on_table(plate, table)
        # Place the plate on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        put_plate_on_table(plate, table)
        # Place the plate on the table in the dining room

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_297)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(cpuscreen_416)', 'walk_executor(table_226)', 'walk_executor(sink_231)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 243 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 53
goal generate times: 7
goal correct times: 0
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
