From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak pieces on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_31_around_bathroom_cabinet_40(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior prepare_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior fry_steak(steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan to fry

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak

        prepare_stove(stove)
        prepare_fryingpan(fryingpan, stove)
        fry_steak(steak, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior prepare_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior fry_steak(steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan to fry

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak

        prepare_stove(stove)
        prepare_fryingpan(fryingpan, stove)
        fry_steak(steak, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(fryingpan_2083, stove_2065)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_steak_2008, fridge_289)
Find food_steak_2008. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_steak_2008, fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_steak_2008 is inside fryingpan_2083. food_steak_2008 is close fryingpan_2083. fryingpan_2083 is close food_steak_2008. food_steak_2008 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(steak, cutting_board)
        # Ensure steak is placed on the cutting board before cutting
        achieve cut(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_steak(steak, cutting_board, knife)
        # Cut the steak using the knife on the cutting board
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once close_char(char, cutting_board)
        # Ensure character is close to the cutting board before cutting
        achieve_once inhand(knife)
        # Ensure knife is in hand to perform the cutting
        achieve_once on(steak, cutting_board)
        # Ensure steak is placed on the cutting board before cutting
        achieve cut(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_steak(steak, cutting_board, knife)
        # Cut the steak using the knife on the cutting board
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(cutting_board_2051)put_executor(food_steak_2008, cutting_board_2051)walk_executor(food_steak_2008)cut_executor(food_steak_2008)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_steak_2008. food_steak_2008 is close cutting_board_2051. food_steak_2008 is on cutting_board_2051. food_steak_2008 released by left hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_104(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        foreach steak_piece: item:
            if is_food_steak(steak_piece) and cut(steak_piece):
                achieve_once on(steak_piece, plate)
        # Place each cut piece of steak on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak pieces on
        
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak that has been cut into pieces
        
        put_steak_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        foreach steak_piece: item:
            if is_food_steak(steak_piece) and cut(steak_piece):
                achieve_once on(steak_piece, plate)
        # Place each cut piece of steak on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak pieces on
        
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak that has been cut into pieces
        
        put_steak_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_63)open_executor(window_63)exp(plate_1000, window_63)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(window_63)
Robot find: towel_rack_33, Robot is close to the knife_2050. Robot is close to the window_63. 
##############################
From agent.py
open_executor(window_63)
Robot find: Robot is close to the knife_2050. Robot is close to the window_63. window_63 is opened. 
##############################
From agent.py
exp(plate_1000, window_63)
Fail to find plate_1000 around window_63. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)exp(plate_1000, computer_417)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(computer_417)
Robot find: chair_356, keyboard_415, mouse_413, Robot is close to the knife_2050. Robot is close to the computer_417. 
##############################
From agent.py
exp(plate_1000, computer_417)
Fail to find plate_1000 around computer_417. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_39)open_executor(curtain_39)exp(plate_1000, curtain_39)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(curtain_39)
Robot find: Robot is close to the knife_2050. Robot is close to the shower_38. Robot is close to the curtain_39. 
##############################
From agent.py
open_executor(curtain_39)
Robot find: Robot is close to the knife_2050. Robot is close to the shower_38. Robot is close to the curtain_39. curtain_39 is opened. 
##############################
From agent.py
exp(plate_1000, curtain_39)
Fail to find plate_1000 around curtain_39. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_245)exp(plate_1000, light_245)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(light_245)
Robot find: wall_clock_249, phone_247, Robot is close to the knife_2050. Robot is close to the light_245. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Locate sink_231, and you will find plate_1000 on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. Locate sink_231, and you will find plate_1000 on it.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Switch on stove_2065.
Action 3: Switch off stove_2065.
Action 4: Open stove_2065.
Action 5: look for fryingpan_2083 around stove_2065.
Action 6: Switch on stove_2065.
Action 7: Walk to fryingpan_2083.
Action 8: Grab fryingpan_2083.
Action 9: Walk to stove_2065.
Action 10: Put fryingpan_2083 on stove_2065.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_steak_2008 around fridge_289.
Action 15: Grab food_steak_2008.
Action 16: Walk to fryingpan_2083.
Action 17: Put food_steak_2008 into fryingpan_2083.
Action 18: Walk to cutting_board_2051.
Action 19: Walk to knife_2050.
Action 20: Grab knife_2050.
Action 21: Walk to food_steak_2008.
Action 22: Grab food_steak_2008.
Action 23: Walk to cutting_board_2051.
Action 24: Put food_steak_2008 on cutting_board_2051.
Action 25: Walk to food_steak_2008.
Action 26: Cut food_steak_2008.
Action 27: Walk to cupboard_229.
Action 28: Open cupboard_229.
Action 29: look for plate_1000 around cupboard_229.
Action 30: Walk to window_63.
Action 31: Open window_63.
Action 32: look for plate_1000 around window_63.
Action 33: Walk to computer_417.
Action 34: look for plate_1000 around computer_417.
Action 35: Walk to dishwasher_1001.
Action 36: Open dishwasher_1001.
Action 37: look for plate_1000 around dishwasher_1001.
Action 38: Walk to curtain_39.
Action 39: Open curtain_39.
Action 40: look for plate_1000 around curtain_39.
Action 41: Walk to light_245.

##############################
From agent.py
exp(plate_1000, light_245)
Fail to find plate_1000 around light_245. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. plate_1000 is close food_steak_2008. food_steak_2008 is on plate_1000. food_steak_2008 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_steak_2008, fryingpan_2083)', 'walk_executor(cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(cutting_board_2051)', 'put_executor(food_steak_2008, cutting_board_2051)', 'walk_executor(food_steak_2008)', 'cut_executor(food_steak_2008)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(window_63)', 'open_executor(window_63)', 'walk_executor(computer_417)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(curtain_39)', 'open_executor(curtain_39)', 'walk_executor(light_245)', 'walk_executor(sink_231)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)']
Time info:
Time consume: 209 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 12
goal generate times: 3
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
