From agent.py
Reset goals: The sub-goals are: 
['1. Check each room to see if any light is off.', '2. Turn on at least one light in the rooms where all lights are off.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior check_light_in_room(room:item):
    body:
        observe(room, "Check if there is a light in the room")
        foreach light: item:
            if is_light(light) and inside(light, room):
                if is_off(light):
                    achieve_once visited(light)

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                check_light_in_room(room)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior check_light_status(light:item):
    body:
        observe(light, "Check if the light is on or off")

behavior __goal__():
    body:
        foreach room_light: item:
            if is_light(room_light) and not visited(room_light):
                check_light_status(room_light)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior check_light_status(light:item):
    body:
        observe(light, "Check if the light is on or off")

behavior __goal__():
    body:
        foreach room_light: item:
            if is_light(room_light) and not visited(room_light):
                check_light_status(room_light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)obs(light_64, Check if the light is on or off)walk_executor(light_169)obs(light_169, Check if the light is on or off)walk_executor(light_245)obs(light_245, Check if the light is on or off)walk_executor(light_411)obs(light_411, Check if the light is on or off)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
obs(light_64, Check if the light is on or off)
Get this information:  light_64 is close to towel_rack_32. light_64 is close to floor_2. light_64 is close to floor_3. light_64 is close to bookshelf_101. light_64 is close to floor_6. light_64 is close to floor_72. light_64 is close to door_44. light_64 is close to doorjamb_45. light_64 is close to wall_14. light_64 is close to wall_79. light_64 is close to floor_77. light_64 is close to ceiling_17. light_64 is close to wall_12. light_64 is close to ceiling_16. light_64 is close to wall_85. light_64 is close to mat_22. light_64 is close to ceiling_90. light_64 is close to ceiling_95. light_64 is close to character_65. light_64 is inside bathroom_1. light_64 is CLEAN. light_64 is CLOSED. light_64 is PLUGGED_IN. light_64 is OFF.
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
obs(light_169, Check if the light is on or off)
Get this information:  light_169 is facing drawing_175. light_169 is inside bedroom_67. light_169 is close to doorjamb_165. light_169 is close to keyboard_168. light_169 is close to computer_170. light_169 is close to cpuscreen_171. light_169 is close to drawing_174. light_169 is close to floor_75. light_169 is close to floor_76. light_169 is close to floor_206. light_169 is close to floor_207. light_169 is close to wall_209. light_169 is close to wall_210. light_169 is close to wall_83. light_169 is close to wall_84. light_169 is close to ceiling_217. light_169 is close to ceiling_218. light_169 is close to ceiling_93. light_169 is close to ceiling_94. light_169 is close to door_222. light_169 is close to chair_103. light_169 is close to desk_104. light_169 is close to bookshelf_233. light_169 is close to light_245. light_169 is close to powersocket_246. light_169 is close to phone_247. light_169 is close to character_65. light_169 is CLEAN. light_169 is CLOSED. light_169 is PLUGGED_IN. light_169 is OFF.
##############################
From agent.py
walk_executor(light_245)
Robot find: drawing_240, drawing_238, wall_clock_249, drawing_241, drawing_242, drawing_243, drawing_239, phone_247, Robot is close to the light_245. 
##############################
From agent.py
obs(light_245, Check if the light is on or off)
Get this information:  light_245 is facing drawing_241. light_245 is facing drawing_242. light_245 is facing drawing_243. light_245 is facing television_248. light_245 is facing wall_clock_249. light_245 is inside dining_room_201. light_245 is close to doorjamb_165. light_245 is close to light_169. light_245 is close to drawing_174. light_245 is close to floor_202. light_245 is close to floor_203. light_245 is close to floor_76. light_245 is close to floor_77. light_245 is close to floor_206. light_245 is close to wall_209. light_245 is close to wall_211. light_245 is close to wall_84. light_245 is close to wall_85. light_245 is close to ceiling_216. light_245 is close to ceiling_217. light_245 is close to ceiling_94. light_245 is close to door_222. light_245 is close to ceiling_95. light_245 is close to trashcan_99. light_245 is close to drawing_238. light_245 is close to drawing_239. light_245 is close to drawing_240. light_245 is close to powersocket_246. light_245 is close to phone_247. light_245 is close to wall_clock_249. light_245 is close to character_65. light_245 is CLEAN. light_245 is CLOSED. light_245 is PLUGGED_IN. light_245 is OFF.
##############################
From agent.py
walk_executor(light_411)
Robot find: drawing_404, drawing_402, Robot is close to the light_411. 
##############################
From agent.py
obs(light_411, Check if the light is on or off)
Get this information:  light_411 is inside home_office_319. light_411 is close to floor_320. light_411 is close to floor_325. light_411 is close to wall_331. light_411 is close to wall_332. light_411 is close to wallshelf_235. light_411 is close to floor_205. light_411 is close to filing_cabinet_399. light_411 is close to floor_208. light_411 is close to ceiling_337. light_411 is close to drawing_402. light_411 is close to drawing_404. light_411 is close to wall_213. light_411 is close to wall_214. light_411 is close to ceiling_342. light_411 is close to doorjamb_346. light_411 is close to ceiling_219. light_411 is close to ceiling_220. light_411 is close to character_65. light_411 is CLEAN. light_411 is CLOSED. light_411 is PLUGGED_IN. light_411 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def lights_are_off_in_room(room:item):
    # Function to check if all lights in a room are off
    symbol all_lights_off = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return all_lights_off

behavior turn_on_light_in_room(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if lights_are_off_in_room(room):
                turn_on_light_in_room(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5690, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

behavior find_phone_247_around_phone_247(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==247
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#goal_representation
 
def lights_are_off_in_room(room:item):
    # Function to check if all lights in a room are off
    symbol all_lights_off = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return all_lights_off

behavior turn_on_light_in_room(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if lights_are_off_in_room(room):
                turn_on_light_in_room(room)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5726, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

#goal_representation
 
def lights_are_off_in_room(room:item):
    # Function to check if all lights in a room are off
    symbol all_lights_off = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return all_lights_off

behavior turn_on_light_in_room(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if lights_are_off_in_room(room):
                turn_on_light_in_room(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior is_light_off(light:item):
    body:
        symbol off= is_off(light)
        return off
  
behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)
        # Turn on the light if its off

behavior __goal__():
    body:
        foreach light: item:
            if is_light(light) and is_light_off(light):
                turn_on_light(light)
                # Turn on each light which is off

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Return statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior is_light_off(light:item):
    body:
        symbol off= is_off(light)
        return off

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)
        # Turn on the light if its off

behavior __goal__():
    body:
        foreach light: item:
            if is_light(light) and is_light_off(light):
                turn_on_light(light)
                # Turn on each light which is off

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Return statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior is_light_off(light:item):
    body:
        symbol off= is_off(light)
        return off

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        foreach light: item:
            if is_light(light) and is_light_off(light):
                turn_on_light(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior observe_lights_in_room(room:item):
    body:
        foreach light: item:
            if is_light(light) and inside(light, room) and not visited(light):
                observe(light, "Check if the light is on or off")

def has_any_light_on_in_room(room:item):
    symbol any_light_on = exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return any_light_on

behavior __goal__():
    body:
        foreach room: item:
            if not has_any_light_on_in_room(room):
                observe_lights_in_room(room)
                # Check the state of each light in rooms where all lights are initially unassessed
                foreach light: item:
                    if is_light(light) and inside(light, room) and is_off(light):
                        turn_on_light(light)
                        # Turn on at least one light in rooms where all lights are off
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior observe_lights_in_room(room:item):
    body:
        foreach light: item:
            if is_light(light) and inside(light, room) and not visited(light):
                observe(light, "Check if the light is on or off")

def has_any_light_on_in_room(room:item):
    symbol any_light_on = exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return any_light_on

behavior __goal__():
    body:
        foreach room: item:
            if not has_any_light_on_in_room(room):
                observe_lights_in_room(room)
                # Check the state of each light in rooms where all lights are initially unassessed
                foreach light: item:
                    if is_light(light) and inside(light, room) and is_off(light):
                        turn_on_light(light)
                        # Turn on at least one light in rooms where all lights are off
##############################
From agent.py-> find a plan in act()
walk_executor(light_64)obs(light_64, Check if the light is on or off)switchon_executor(light_64)walk_executor(light_169)obs(light_169, Check if the light is on or off)switchon_executor(light_169)walk_executor(light_245)obs(light_245, Check if the light is on or off)switchon_executor(light_245)walk_executor(light_411)obs(light_411, Check if the light is on or off)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_64)
Robot find: Robot is close to the light_64. 
##############################
From agent.py
obs(light_64, Check if the light is on or off)
Get this information:  light_64 is close to towel_rack_32. light_64 is close to floor_2. light_64 is close to floor_3. light_64 is close to bookshelf_101. light_64 is close to floor_6. light_64 is close to floor_72. light_64 is close to door_44. light_64 is close to doorjamb_45. light_64 is close to wall_14. light_64 is close to wall_79. light_64 is close to floor_77. light_64 is close to ceiling_17. light_64 is close to wall_12. light_64 is close to ceiling_16. light_64 is close to wall_85. light_64 is close to mat_22. light_64 is close to ceiling_90. light_64 is close to ceiling_95. light_64 is close to character_65. light_64 is inside bathroom_1. light_64 is CLEAN. light_64 is CLOSED. light_64 is PLUGGED_IN. light_64 is OFF.
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py
walk_executor(light_169)
Robot find: Robot is close to the light_169. 
##############################
From agent.py
obs(light_169, Check if the light is on or off)
Get this information:  light_169 is facing drawing_175. light_169 is inside bedroom_67. light_169 is close to doorjamb_165. light_169 is close to keyboard_168. light_169 is close to computer_170. light_169 is close to cpuscreen_171. light_169 is close to drawing_174. light_169 is close to floor_75. light_169 is close to floor_76. light_169 is close to floor_206. light_169 is close to floor_207. light_169 is close to wall_209. light_169 is close to wall_210. light_169 is close to wall_83. light_169 is close to wall_84. light_169 is close to ceiling_217. light_169 is close to ceiling_218. light_169 is close to ceiling_93. light_169 is close to ceiling_94. light_169 is close to door_222. light_169 is close to chair_103. light_169 is close to desk_104. light_169 is close to bookshelf_233. light_169 is close to light_245. light_169 is close to powersocket_246. light_169 is close to phone_247. light_169 is close to character_65. light_169 is CLEAN. light_169 is CLOSED. light_169 is PLUGGED_IN. light_169 is OFF.
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py
walk_executor(light_245)
Robot find: Robot is close to the light_245. 
##############################
From agent.py
obs(light_245, Check if the light is on or off)
Get this information:  light_245 is facing drawing_241. light_245 is facing drawing_242. light_245 is facing drawing_243. light_245 is facing television_248. light_245 is facing wall_clock_249. light_245 is inside dining_room_201. light_245 is close to doorjamb_165. light_245 is close to light_169. light_245 is close to drawing_174. light_245 is close to floor_202. light_245 is close to floor_203. light_245 is close to floor_76. light_245 is close to floor_77. light_245 is close to floor_206. light_245 is close to wall_209. light_245 is close to wall_211. light_245 is close to wall_84. light_245 is close to wall_85. light_245 is close to ceiling_216. light_245 is close to ceiling_217. light_245 is close to ceiling_94. light_245 is close to door_222. light_245 is close to ceiling_95. light_245 is close to trashcan_99. light_245 is close to drawing_238. light_245 is close to drawing_239. light_245 is close to drawing_240. light_245 is close to powersocket_246. light_245 is close to phone_247. light_245 is close to wall_clock_249. light_245 is close to character_65. light_245 is CLEAN. light_245 is CLOSED. light_245 is PLUGGED_IN. light_245 is OFF.
##############################
From agent.py
switchon_executor(light_245)
Robot find: Robot is close to the light_245. light_245 is turned on. 
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
obs(light_411, Check if the light is on or off)
Get this information:  light_411 is inside home_office_319. light_411 is close to floor_320. light_411 is close to floor_325. light_411 is close to wall_331. light_411 is close to wall_332. light_411 is close to wallshelf_235. light_411 is close to floor_205. light_411 is close to filing_cabinet_399. light_411 is close to floor_208. light_411 is close to ceiling_337. light_411 is close to drawing_402. light_411 is close to drawing_404. light_411 is close to wall_213. light_411 is close to wall_214. light_411 is close to ceiling_342. light_411 is close to doorjamb_346. light_411 is close to ceiling_219. light_411 is close to ceiling_220. light_411 is close to character_65. light_411 is CLEAN. light_411 is CLOSED. light_411 is PLUGGED_IN. light_411 is OFF.
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make sure there is at least one light on in every room.
Action History:
['walk_executor(light_64)', 'walk_executor(light_169)', 'walk_executor(light_245)', 'walk_executor(light_411)', 'walk_executor(light_64)', 'switchon_executor(light_64)', 'walk_executor(light_169)', 'switchon_executor(light_169)', 'walk_executor(light_245)', 'switchon_executor(light_245)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 154 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 9
goal generate times: 5
goal correct times: 0
action_num: 12

Task complete rate:
1
Scene_id: 0
##############################
