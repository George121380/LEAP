From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2059_around_bathroom_cabinet_40(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the bathroom sink to ensure its not dirty anymore

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean
        clean_bathroom_sink(sink)
        # Clean the bathroom sink

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the bathroom sink to ensure its not dirty anymore

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean
        clean_bathroom_sink(sink)
        # Clean the bathroom sink

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_sink_state(sink:item):
    body:
        observe(sink, "Check if the sink is dirty or clean")

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42
        if dirty(sink):
            clean_bathroom_sink(sink)
        else:
            observe_sink_state(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_sink_state(sink:item):
    body:
        observe(sink, "Check if the sink is dirty or clean")

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42
        if dirty(sink):
            clean_bathroom_sink(sink)
        else:
            observe_sink_state(sink)

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2059_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_sink(sink:item):
    body:
        wash(sink)
        scrub(sink)
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42
        clean_sink(sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Achieve the state where the sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42, which we want to clean

        clean_sink(sink)
        # Clean the selected sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Achieve the state where the sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42, which we want to clean

        clean_sink(sink)
        # Clean the selected sink

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation

behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42
        clean_sink(sink)
        # Clean the sink directly

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42
        clean_sink(sink)
        # Clean the sink directly

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the bathroom sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the bathroom sink with ID 42
        clean_bathroom_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the bathroom sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the bathroom sink with ID 42
        clean_bathroom_sink(sink)

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_towel_2059_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        clean_bathroom_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        clean_bathroom_sink(sink)

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_tray_296_around_bathroom_cabinet_40(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tray,bathroom_cabinet_instance)
        else:
            exp(tray,bathroom_cabinet_instance)
    eff:
        unknown[tray]=False
        close[tray,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tray]=True
    

behavior find_towel_rack_32_around_towel_rack_32(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_sink(sink:item):
    symbol is_bathroom_sink = exists room: item : (is_bathroom(room) and inside(sink, room))
    return is_bathroom_sink

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink

behavior __goal__():
    body:
        if exists sink: item : (is_sink(sink) and is_bathroom_sink(sink)):
            # Check if there is a bathroom sink based on available information
            bind sink: item where:
                is_sink(sink) and is_bathroom_sink(sink)
            # Select the sink that is in the bathroom
            clean_bathroom_sink(sink)
            # Clean the selected bathroom sink

        else: 
            # If no bathroom sink is found, initiate exploration to locate one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if this sink is in the bathroom")
                    # Observe to determine if a sink is in the bathroom


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_bathroom_sink(sink:item):
    symbol is_bathroom_sink = exists room: item : (is_bathroom(room) and inside(sink, room))
    return is_bathroom_sink

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink

behavior __goal__():
    body:
        if exists sink: item : (is_sink(sink) and is_bathroom_sink(sink)):
            # Check if there is a bathroom sink based on available information
            bind sink: item where:
                is_sink(sink) and is_bathroom_sink(sink)
            # Select the sink that is in the bathroom
            clean_bathroom_sink(sink)
            # Clean the selected bathroom sink

        else: 
            # If no bathroom sink is found, initiate exploration to locate one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if this sink is in the bathroom")
                    # Observe to determine if a sink is in the bathroom


##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42
        clean_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42
        clean_sink(sink)

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_42)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation

behavior clean_sink(sink:item, cleaning_solution:item, towel:item):
    body:
        achieve_once inside(cleaning_solution, sink)
        # Add cleaning solution to the sink
        
        scrub(sink)
        # Scrub the sink to loosen dirt
        
        rinse(sink)
        # Rinse the sink with water
        
        achieve_once inhand(towel)
        # Ensure a towel is in hand to perform the wiping
        
        wipe(sink)
        # Wipe the sink dry

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select a cleaning solution

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        clean_sink(sink, cleaning_solution, towel)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior clean_sink(sink:item, cleaning_solution:item, towel:item):
    body:
        achieve_once inside(cleaning_solution, sink)
        # Add cleaning solution to the sink
        
        scrub(sink)
        # Scrub the sink to loosen dirt
        
        rinse(sink)
        # Rinse the sink with water
        
        achieve_once inhand(towel)
        # Ensure a towel is in hand to perform the wiping
        
        wipe(sink)
        # Wipe the sink dry

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select a cleaning solution

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        clean_sink(sink, cleaning_solution, towel)

##############################
From agent.py-> find a plan in act()
walk_executor(cleaning_solution_2073)grab_executor(cleaning_solution_2073)walk_executor(sink_42)putin_executor(cleaning_solution_2073, sink_42)scrub_executor(sink_42)rinse_executor(sink_42)walk_executor(towel_rack_34)exp(towel_2056, towel_rack_34)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(cleaning_solution_2073)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. 
##############################
From agent.py
grab_executor(cleaning_solution_2073)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. Grabbing cleaning_solution_2073 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
putin_executor(cleaning_solution_2073, sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. Robot is close to the bathroom_counter_41. cleaning_solution_2073 is inside sink_42. cleaning_solution_2073 is close sink_42. cleaning_solution_2073 released by right hand. 
##############################
From agent.py
scrub_executor(sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. Robot is close to the bathroom_counter_41. sink_42 is cleaned. 
##############################
From agent.py
rinse_executor(sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the cleaning_solution_2073. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
walk_executor(towel_rack_34)
Robot find: towel_rack_33, towel_2059, Robot is close to the towel_rack_34. 
##############################
From agent.py
exp(towel_2056, towel_rack_34)
Fail to find towel_2056 around towel_rack_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)scrub_executor(sink_42)rinse_executor(sink_42)walk_executor(towel_2059)grab_executor(towel_2059)walk_executor(sink_42)wipe_executor(sink_42)
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
scrub_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
rinse_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(towel_2059)
Robot find: Robot is close to the towel_rack_34. Robot is close to the towel_2059. 
##############################
From agent.py
grab_executor(towel_2059)
Robot find: Robot is close to the towel_rack_34. Robot is close to the towel_2059. Grabbing towel_2059 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the towel_2059. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
wipe_executor(sink_42)
Robot find: Robot is close to the towel_2059. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_42)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'wipe_executor(sink_42) (Failed)', 'walk_executor(cleaning_solution_2073)', 'grab_executor(cleaning_solution_2073)', 'walk_executor(sink_42)', 'putin_executor(cleaning_solution_2073, sink_42)', 'scrub_executor(sink_42)', 'rinse_executor(sink_42)', 'walk_executor(towel_rack_34)', 'walk_executor(sink_42)', 'scrub_executor(sink_42)', 'rinse_executor(sink_42)', 'walk_executor(towel_2059)', 'grab_executor(towel_2059)', 'walk_executor(sink_42)', 'wipe_executor(sink_42)']
Time info:
Time consume: 166 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 46
goal generate times: 10
goal correct times: 0
action_num: 23

Task complete rate:
1
Scene_id: 0
##############################
