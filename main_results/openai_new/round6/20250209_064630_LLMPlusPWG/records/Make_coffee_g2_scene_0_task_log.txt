From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker, then add milk and sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once inside(cup, coffee_maker) # Place a cup under the coffee maker spout to receive coffee

behavior add_ingredient(ingredient:item, cup:item):
    body:
        achieve_once inside(ingredient, cup) # Add the ingredient to the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee(coffee_maker, cup) # Make a cup of coffee
        add_ingredient(milk, cup) # Add milk to the coffee
        add_ingredient(sugar, cup) # Add sugar to the coffee
#goal_representation_end

##############################
From agent.py->reset_goal
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once inside(cup, coffee_maker) # Place a cup under the coffee maker spout to receive coffee

behavior add_ingredient(ingredient:item, cup:item):
    body:
        achieve_once inside(ingredient, cup) # Add the ingredient to the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee(coffee_maker, cup) # Make a cup of coffee
        add_ingredient(milk, cup) # Add milk to the coffee
        add_ingredient(sugar, cup) # Add sugar to the coffee
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(table_107)exp(cup_2064, table_107)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(kitchen_counter_230)exp(food_sugar_2039, kitchen_counter_230)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(cup_2064, table_107)
Find cup_2064. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(kitchen_counter_230)exp(food_sugar_2039, kitchen_counter_230)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(cup_2064, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2064. cup_2064 is inside coffe_maker_290. cup_2064 is close coffe_maker_290. cup_2064 released by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(milk_2043, cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. milk_2043 is inside cup_2064. cup_2064 is close milk_2043. milk_2043 is close cup_2064. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. food_sugar_2039 is close cup_2064. food_sugar_2039 is inside cup_2064. cup_2064 is close food_sugar_2039. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee has not been made yet because there is no indication that the coffee maker was filled with water or that it operated to make coffee. First, ensure the coffee maker is filled with water and operates to brew the coffee into the cup. Then confirm that the cup is inside the coffee maker when brewing.
##############################
From agent.py
Human Instruction: The coffee has not been made yet because there is no indication that the coffee maker was filled with water or that it operated to make coffee. First, ensure the coffee maker is filled with water and operates to brew the coffee into the cup. Then confirm that the cup is inside the coffee maker when brewing.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to table_107.
Action 5: look for cup_2064 around table_107.
Action 6: Walk to coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: Walk to cup_2064.
Action 9: Grab cup_2064.
Action 10: Walk to coffe_maker_290.
Action 11: Put cup_2064 into coffe_maker_290.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for milk_2043 around fridge_289.
Action 16: Grab milk_2043.
Action 17: Walk to cup_2064.
Action 18: Put milk_2043 into cup_2064.
Action 19: Walk to food_sugar_2039.
Action 20: Grab food_sugar_2039.
Action 21: Walk to cup_2064.
Action 22: Put food_sugar_2039 into cup_2064.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the coffee maker
    symbol has_water=exists o: item : (has_water(o) and inside(o, coffee_maker))
    return has_water

behavior add_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_sugar(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)

behavior brew_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker) # Ensure cup is inside the coffee maker during brewing
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once is_on(coffee_maker) # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select the cup to be used
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk to be added
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar to be added

        if not has_water_in_coffee_maker(coffee_maker):
            # Observe coffee maker if theres no water indicated
            observe(coffee_maker, "Check if it needs water")

        brew_coffee(cup, coffee_maker) # Brew coffee into the cup

        add_milk(cup, milk) # Add milk to the brewed coffee
        add_sugar(cup, sugar) # Add sugar to the brewed coffee

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if there is water in the coffee maker
    symbol has_water=exists o: item : (has_water(o) and inside(o, coffee_maker))
    return has_water

behavior add_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_sugar(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)

behavior brew_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker) # Ensure cup is inside the coffee maker during brewing
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once is_on(coffee_maker) # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select the cup to be used
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk to be added
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar to be added

        if not has_water_in_coffee_maker(coffee_maker):
            # Observe coffee maker if theres no water indicated
            observe(coffee_maker, "Check if it needs water")

        brew_coffee(cup, coffee_maker) # Brew coffee into the cup

        add_milk(cup, milk) # Add milk to the brewed coffee
        add_sugar(cup, sugar) # Add sugar to the brewed coffee

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Check if it needs water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
obs(coffe_maker_290, Check if it needs water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to cup_2064. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2064 is inside coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker has water before brewing the coffee. Once confirmed, operate the machine to brew coffee into the cup. Then add milk and sugar to the brewed coffee.
##############################
From agent.py
Human Instruction: Ensure the coffee maker has water before brewing the coffee. Once confirmed, operate the machine to brew coffee into the cup. Then add milk and sugar to the brewed coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to table_107.
Action 5: look for cup_2064 around table_107.
Action 6: Walk to coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: Walk to cup_2064.
Action 9: Grab cup_2064.
Action 10: Walk to coffe_maker_290.
Action 11: Put cup_2064 into coffe_maker_290.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for milk_2043 around fridge_289.
Action 16: Grab milk_2043.
Action 17: Walk to cup_2064.
Action 18: Put milk_2043 into cup_2064.
Action 19: Walk to food_sugar_2039.
Action 20: Grab food_sugar_2039.
Action 21: Walk to cup_2064.
Action 22: Put food_sugar_2039 into cup_2064.
Action 23: Observe around coffe_maker_290 with the question of Check if it needs water.
Action 24: Close coffe_maker_290.
Action 25: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(cup:item, coffe_maker:item):
    body:
        observe(coffe_maker, "Check if it needs water")
        achieve_once has_water(coffe_maker)
        achieve_once inside(cup, coffe_maker)
        achieve_once is_on(coffe_maker)

behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        bind cup: item where:
            is_cup(cup)
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        
        make_coffee(cup, coffe_maker)
        add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior make_coffee(cup:item, coffe_maker:item):
    body:
        observe(coffe_maker, "Check if it needs water")
        achieve_once has_water(coffe_maker)
        achieve_once inside(cup, coffe_maker)
        achieve_once is_on(coffe_maker)

behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        bind cup: item where:
            is_cup(cup)
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        
        make_coffee(cup, coffe_maker)
        add_milk_and_sugar(cup, milk, sugar)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if it needs water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if it needs water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to cup_2064. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2064 is inside coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(table_107)', 'walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'putin_executor(cup_2064, coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2064)', 'putin_executor(milk_2043, cup_2064)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2064)', 'putin_executor(food_sugar_2039, cup_2064)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 88 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0
action_num: 26

Task complete rate:
1
Scene_id: 0
##############################
