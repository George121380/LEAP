From agent.py
Reset goals: The sub-goals are: 
['Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_table_107(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_egg,table_instance)
        else:
            exp(food_egg,table_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,table_instance]=True
        close[table_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_table_226(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_chicken,table_instance)
        else:
            exp(food_chicken,table_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,table_instance]=True
        close[table_instance,food_chicken]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Ensure the fish is washed and clean


behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)
        # Place each food item on the table


behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        wash_fish(fish)
        # Wash the fish first

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
        # Place all specified items on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Clean the fish

behavior place_items_on_table(table:item, milk:item, turkey:item, eggs:item, fish:item, chicken:item):
    body:
        achieve_once on(milk, table) # Place milk on the table
        achieve_once on(turkey, table) # Place turkey on the table
        achieve_once on(eggs, table) # Place eggs on the table
        achieve_once on(fish, table) # Place fish on the table
        achieve_once on(chicken, table) # Place chicken on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish) # Wash the fish first

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table)
        # Select a table in the dining room that can hold items

        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey item

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item

        place_items_on_table(dining_table, milk, turkey, eggs, fish, chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_food_egg_2020_around_table_107(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_egg,table_instance)
        else:
            exp(food_egg,table_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,table_instance]=True
        close[table_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Clean the fish

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table) # Place milk on the table
        achieve_once on(turkey, table) # Place turkey on the table
        achieve_once on(eggs, table) # Place eggs on the table
        achieve_once on(fish, table) # Place fish on the table
        achieve_once on(chicken, table) # Place chicken on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) 
            # Select a table in the dining room
            
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish to be washed first
        
        wash_fish(fish)
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2020_around_table_355(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_egg,table_instance)
        else:
            exp(food_egg,table_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,table_instance]=True
        close[table_instance,food_egg]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Ensure the fish is washed and clean

behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)
        # Place each item in the list on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

        bind table: item where:
            is_table(table)
        # Identify a table to use for placing items
        
        bind milk: item where:
            is_milk(milk)
        # Bind milk to an item instance
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Bind turkey to an item instance
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Bind eggs to an item instance
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind chicken to an item instance

        symbol items_to_place = [milk, turkey, eggs, fish, chicken]
        place_items_on_table(table, items_to_place)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_food_egg_2020_around_table_107(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_egg,table_instance)
        else:
            exp(food_egg,table_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,table_instance]=True
        close[table_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve clean(fish)

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind dining_table: item where:
            is_table(dining_table) and exists room: item: (is_dining_room(room) and inside(dining_table, room))
        # Select a table in the dining room
        wash_fish(fish)
        place_items_on_table(milk, turkey, eggs, fish, chicken, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_food_egg_2020_around_table_107(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_egg,table_instance)
        else:
            exp(food_egg,table_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,table_instance]=True
        close[table_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Wash the fish until it is clean

behavior place_items(table:item, items:list):
    body:
        foreach i: item:
            if is_food(i):
                achieve_once on(i, table)
        # Place each item from the list on the specified table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed
        bind dining_table: item where:
            is_table(dining_table) 
        # Select a table to place items
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        wash_fish(fish)
        place_items(dining_table, [milk, turkey, eggs, fish, chicken])

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "wash the fish at first. then put milk, turkey, eggs, fish and chicken on one of the table in dining room." ?
Answer: Wash the fish at first by putting it in the sink and washing it. Then put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        # Place the fish in the sink
        wash(fish)
        # Wash the fish

behavior place_on_table(items: list, table:item):
    body:
        foreach i: item:
            if i in items:
                achieve_once on(i, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind table: item where:
            is_table(table)
        # Select a table
        
        wash_fish(fish, sink)
        # Call the wash_fish behavior to wash the fish
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        place_on_table([milk, turkey, eggs, fish, chicken], table)
        # Call the place_on_table behavior to put all items on the table
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fish(fish: item):
    body:
        achieve clean(fish)
        # Clean the fish

behavior place_items_on_table(items: list[item], table: item):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)
        # Place each item in the list on the specified table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish item

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        wash_fish(fish)
        # Wash the fish clean

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select a turkey item

        bind eggs: item where:
            is_food_egg(eggs)
        # Select an egg item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item

        place_items_on_table([milk, turkey, eggs, fish, chicken], table)
        # Place milk, turkey, eggs, fish, and chicken on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior place_on_table(obj: item, table: item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)
        
        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table)
        # Select a table with a surface in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_on_table(milk, dining_table)
        place_on_table(turkey, dining_table)
        place_on_table(eggs, dining_table)
        place_on_table(fish, dining_table)
        place_on_table(chicken, dining_table)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_107)put_executor(milk_2043, table_107)walk_executor(fridge_289)exp(food_turkey_2040, fridge_289)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_107)put_executor(food_turkey_2040, table_107)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_107)put_executor(food_egg_2020, table_107)put_executor(food_fish_2021, table_107)walk_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_107)put_executor(food_chicken_2017, table_107)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_107)put_executor(milk_2043, table_107)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_107)put_executor(food_turkey_2040, table_107)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_107)put_executor(food_egg_2020, table_107)put_executor(food_fish_2021, table_107)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_107)put_executor(food_chicken_2017, table_107)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by left hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_107. 
##############################
From agent.py
put_executor(milk_2043, table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_107. table_107 is close milk_2043. milk_2043 is close table_107. milk_2043 is on table_107. milk_2043 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. Grabbing food_turkey_2040 by left hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_107. 
##############################
From agent.py
put_executor(food_turkey_2040, table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_107. table_107 is close food_turkey_2040. food_turkey_2040 is close table_107. food_turkey_2040 is on table_107. food_turkey_2040 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_107. 
##############################
From agent.py
put_executor(food_egg_2020, table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_107. table_107 is close food_egg_2020. food_egg_2020 is close table_107. food_egg_2020 is on table_107. food_egg_2020 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2021, table_107)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_107. table_107 is close food_fish_2021. food_fish_2021 is close table_107. food_fish_2021 is on table_107. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_107. 
##############################
From agent.py
put_executor(food_chicken_2017, table_107)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_107. table_107 is close food_chicken_2017. food_chicken_2017 is close table_107. food_chicken_2017 is on table_107. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(table_107)', 'put_executor(milk_2043, table_107)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(table_107)', 'put_executor(food_turkey_2040, table_107)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(table_107)', 'put_executor(food_egg_2020, table_107)', 'put_executor(food_fish_2021, table_107)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(table_107)', 'put_executor(food_chicken_2017, table_107)']
Time info:
Time consume: 253 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 9
goal correct times: 0
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
