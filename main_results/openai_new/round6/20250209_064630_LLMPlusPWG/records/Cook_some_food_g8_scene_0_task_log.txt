From agent.py
Reset goals: The sub-goals are: 
['Make a bowl of egg salad with boiled egg, lemon, and vegetables.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_lemon_2028_around_kitchen_counter_230(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_for_salad(bowl: item):
    # Function to check if a bowl is suitable for making salad
    return is_bowl(bowl) and recipient(bowl)

behavior cut_ingredients(ingredient: item):
    body:
        achieve_once cut(ingredient)
        # Cut the specified ingredient

behavior place_ingredient_in_bowl(ingredient: item, bowl: item):
    body:
        achieve_once inside(ingredient, bowl)
        # Place the ingredient into the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl_for_salad(bowl)
        # Select a suitable bowl for making salad
        
        bind egg: item where:
            is_food_egg(egg) and is_food(egg)
        # Select boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        cut_ingredients(egg) # Cut the boiled egg
        place_ingredient_in_bowl(egg, bowl) # Place the cut egg into the bowl
        
        cut_ingredients(lemon) # Cut the lemon
        place_ingredient_in_bowl(lemon, bowl) # Place the cut lemon into the bowl
        
        cut_ingredients(vegetable) # Cut the vegetable
        place_ingredient_in_bowl(vegetable, bowl) # Place the cut vegetable into the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item):
    body:
        achieve cut(egg)
        # Boil and cut the egg

behavior squeeze_lemon(lemon:item):
    body:
        achieve squeeze(lemon)
        # Squeeze the lemon to extract juice

behavior cut_vegetables(vegetable:item):
    body:
        achieve cut(vegetable)
        # Cut the vegetables

behavior mix_ingredients(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        achieve inside(egg, bowl)
        achieve inside(lemon, bowl)
        achieve inside(vegetable, bowl)
        # Mix all ingredients in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        boil_egg(egg)
        squeeze_lemon(lemon)
        cut_vegetables(vegetable)
        mix_ingredients(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_food_lemon_2028_around_kitchen_counter_230(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_item(item: item):
    body:
        achieve_once cut(item) # Cut the item

behavior squeeze_item(item: item):
    body:
        achieve_once inhand(item) # Squeeze the item to extract juice
        squeeze(item)

behavior mix_in_bowl(ingredients: list[item], bowl: item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, bowl) # Put ingredient in the bowl

behavior clean_ingredient(item: item):
    body:
        wash(item) # Wash the ingredient
        achieve_once clean(item)

def is_fruit_or_vegetable(item: item):
    # Check if an item is a fruit or vegetable
    symbol is_usable = (is_food_vegetable(item) or is_food_fruit(item))
    return is_usable

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Find an egg in the environment

        bind lemon: item where:
            is_food_lemon(lemon)
        # Find a lemon in the environment

        bind bowl: item where:
            is_bowl(bowl)
        # Find a bowl in the environment

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Find a vegetable in the environment
        
        clean_ingredient(egg)
        clean_ingredient(lemon)
        clean_ingredient(vegetable)

        cut_item(egg)
        cut_item(vegetable)
        squeeze_item(lemon)

        mix_in_bowl([egg, lemon, vegetable], bowl)
        # Mix all ingredients in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_lemon_2028_around_kitchen_counter_230(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_egg_salad_with_boiled_egg_lemon_and_vegetables(bowl:item, egg:item, lemon:item, vegetable:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind egg: item where:
            is_food_egg(egg)
        # Select boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select vegetables

        make_egg_salad_with_boiled_egg_lemon_and_vegetables(bowl, egg, lemon, vegetable)
        # Make the egg salad

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_lemon_2028_around_kitchen_counter_230(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_boiled_egg(egg:item):
    body:
        achieve_once cut(egg) # Assuming that cutting is part of preparation after boiling

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeeze(lemon) # Squeeze the lemon

behavior prepare_vegetables(vegetable:item):
    body:
        achieve_once cut(vegetable) # Cut the vegetables for salad

behavior mix_in_bowl(egg:item, lemon:item, vegetables:list, bowl:item):
    body:
        achieve_once inside(egg, bowl) # Add the egg to the bowl
        achieve_once inside(lemon, bowl) # Add squeezed lemon to the bowl
        foreach vegetable: item where: (vegetable in vegetables):
            achieve_once inside(vegetable, bowl) # Add vegetables to the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        bind vegetables: list where:
            is_food_vegetable(vegetables)
        prepare_boiled_egg(egg)
        squeeze_lemon(lemon)
        foreach vegetable: item where: (vegetable in vegetables):
            prepare_vegetables(vegetable)
        mix_in_bowl(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_items(item:item):
    body:
        if dirty(item):
            wash(item)

behavior cut_vegetable(vegetable:item):
    body:
        achieve cut(vegetable)

behavior mix_in_bowl(bowl:item, ingredient:item):
    body:
        achieve_once inside(ingredient, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select an egg that can be cut
        bind lemon: item where:
            is_food_lemon(lemon) and cuttable(lemon)
        # Select a lemon that can be cut
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cuttable(vegetable)
        # Select a vegetable that can be cut
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        foreach ingredient: item:
            if ingredient == egg or ingredient == lemon or ingredient == vegetable:
                cut_vegetable(ingredient)
                wash_items(ingredient)

        mix_in_bowl(bowl, egg)
        mix_in_bowl(bowl, lemon)
        mix_in_bowl(bowl, vegetable)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a bowl of egg salad with boiled egg, lemon, and vegetables." ?
Answer: Boil an egg and cut it into pieces. Clean a lemon and cut it into pieces. Wash vegetables and cut them into pieces. Put the egg, lemon, and vegetables in a bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_lemon_2028_around_kitchen_counter_230(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut(ingredient: item):
    body:
        achieve cut(ingredient)

behavior clean_and_cut(ingredient: item):
    body:
        wash(ingredient)
        wash_and_cut(ingredient)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        clean_and_cut(boiled_egg)
        clean_and_cut(lemon)
        clean_and_cut(vegetables)
        
        achieve_once inside(boiled_egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(kitchen_counter_230)exp(food_lemon_2028, kitchen_counter_230)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_vegetable_2041)switchoff_executor(faucet_232)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_vegetable_2041)switchoff_executor(faucet_232)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_vegetable_2041)switchoff_executor(faucet_232)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2072, kitchen_counter_230)
Fail to find bowl_2072 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(table_355)exp(bowl_2072, table_355)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)putin_executor(food_lemon_2028, bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior wash_and_cut(obj:item):
    body:
        wash(obj)
        achieve_once cut(obj)

behavior prepare_dish(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        wash_and_cut(egg)
        wash_and_cut(lemon)
        wash_and_cut(vegetable)
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        prepare_dish(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior wash_and_cut(obj:item):
    body:
        wash(obj)
        achieve_once cut(obj)

behavior prepare_dish(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        wash_and_cut(egg)
        wash_and_cut(lemon)
        wash_and_cut(vegetable)
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        prepare_dish(egg, lemon, vegetable, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)exp(bowl_2072, coffee_table_2068)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)putin_executor(food_lemon_2028, bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_egg_2020. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, kitchen_counter_230)
Robot find: Robot is close to the food_egg_2020. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_egg_2020. food_egg_2020 is close kitchen_counter_230. food_egg_2020 is on kitchen_counter_230. food_egg_2020 released by left hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_egg_2020. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2028)
Robot find: Robot is close to the food_egg_2020. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_egg_2020. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(bowl_2072, coffee_table_2068)
Fail to find bowl_2072 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)grab_executor(food_egg_2020)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)switchon_executor(faucet_232)wash_executor(food_lemon_2028)switchoff_executor(faucet_232)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_vegetable_2041)switchoff_executor(faucet_232)walk_executor(table_107)exp(bowl_2072, table_107)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)putin_executor(food_lemon_2028, bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by left hand. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. faucet_232 is turned off. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2028)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_egg(food_egg:item):
    body:
        achieve_once clean(food_egg)
        achieve_once cut(food_egg)

behavior prepare_lemon(food_lemon:item):
    body:
        achieve_once clean(food_lemon)
        achieve_once cut(food_lemon)

behavior prepare_vegetable(food_vegetable:item):
    body:
        achieve_once clean(food_vegetable)
        achieve_once cut(food_vegetable)

behavior make_salad(food_egg:item, food_lemon:item, food_vegetable:item, bowl:item):
    body:
        achieve_once on(food_egg, bowl)
        achieve_once on(food_lemon, bowl)
        achieve_once on(food_vegetable, bowl)

behavior __goal__():
    body:
        bind food_egg: item where:
            is_food_egg(food_egg)
        
        bind food_lemon: item where:
            is_food_lemon(food_lemon)
        
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        
        bind bowl: item where:
            is_bowl(bowl)

        prepare_egg(food_egg)
        prepare_lemon(food_lemon)
        prepare_vegetable(food_vegetable)
        make_salad(food_egg, food_lemon, food_vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior make_egg_salad(egg: item, lemon: item, vegetable: item, bowl: item):
    body:
        achieve_once clean(egg)
        achieve_once cut(egg)
        achieve_once clean(lemon)
        achieve_once cut(lemon)
        achieve_once clean(vegetable)
        achieve_once cut(vegetable)
        achieve_once inside(bowl, salad_ingredients)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind lemon: item where:
            is_food_lemon(lemon)

        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind bowl: item where:
            is_bowl(bowl)

        make_egg_salad(egg, lemon, vegetable, bowl)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_boiled_egg(egg:item):
    body:
        achieve_once cut(egg) 

behavior prepare_lemon(lemon:item):
    body:
        achieve_once cut(lemon)

behavior prepare_vegetable(vegetable:item):
    body:
        achieve_once cut(vegetable)

behavior put_in_bowl(item:item, bowl:item):
    body:
        achieve_once inside(item, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        prepare_boiled_egg(egg)

        bind lemon: item where:
            is_food_lemon(lemon)
        prepare_lemon(lemon)

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        prepare_vegetable(vegetable)
        
        bind bowl: item where:
            is_bowl(bowl)
        put_in_bowl(egg, bowl)
        put_in_bowl(lemon, bowl)
        put_in_bowl(vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_egg_salad(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        achieve cut(egg)
        achieve cut(lemon)
        achieve cut(vegetable)
        achieve inside(egg, bowl)
        achieve inside(lemon, bowl)
        achieve inside(vegetable, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        prepare_egg_salad(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_egg_salad(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        achieve clean(egg)
        achieve cut(egg)
        achieve clean(lemon)
        achieve cut(lemon)
        achieve clean(vegetable)
        achieve cut(vegetable)
        achieve_once on(egg, bowl)
        achieve_once on(lemon, bowl)
        achieve_once on(vegetable, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        prepare_egg_salad(egg, lemon, vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_item(item: item):
    body:
        achieve_once cut(item)

behavior add_to_bowl(item: item, bowl: item):
    body:
        achieve_once inside(item, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select a cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select a cut lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)
        # Select a cut vegetable

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        add_to_bowl(egg, bowl)
        add_to_bowl(lemon, bowl)
        add_to_bowl(vegetable, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a bowl of egg salad with boiled egg, lemon, and vegetables." ?
Answer: Boil an egg and cut it into pieces. Then put the egg in a bowl. Clean a lemon and cut it into pieces. Put the lemon in the bowl. Wash vegetables and cut them into pieces. Put the vegetables in the bowl.
Re-decompose: False

##############################
Error record: 'LLMPlusPWG' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_lemon_2028)', 'switchoff_executor(faucet_232)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_232)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_43)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_232)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_egg_2020, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_lemon_2028)', 'switchoff_executor(faucet_232)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'grab_executor(food_egg_2020)', 'switchon_executor(faucet_232)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_232)', 'switchon_executor(faucet_232)', 'wash_executor(food_lemon_2028)', 'switchoff_executor(faucet_232)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041) (Failed)']
Time info:
Time consume: 478 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 14
goal correct times: 0
action_num: 86

Task complete rate:
Keystate: k1 - Requires: 14 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
