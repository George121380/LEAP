From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and add some sliced kiwi inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior fetch_water_and_add_kiwi(cup:item, kiwi:item):
    body:
        achieve_once has_water(cup) # Fill the cup with water
        achieve_once cut(kiwi) # Slice the kiwi
        achieve_once inside(kiwi, cup) # Add sliced kiwi into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        fetch_water_and_add_kiwi(cup, kiwi)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fetch_water_and_add_kiwi(cup:item, kiwi:item):
    body:
        achieve_once has_water(cup) # Fill the cup with water
        achieve_once cut(kiwi) # Slice the kiwi
        achieve_once inside(kiwi, cup) # Add sliced kiwi into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        fetch_water_and_add_kiwi(cup, kiwi)

##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(cup_2063, table_107)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(cup_2063, table_107)
Fail to find cup_2063 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(cup_2063, table_355)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(cup_2063, table_355)
Fail to find cup_2063 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Fail to find cup_2063 around coffee_table_2068. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and add some sliced kiwi inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_kitchen_counter_230(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_kiwi,kitchen_counter_instance)
        else:
            exp(food_kiwi,kitchen_counter_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_kiwi]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior cut_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior put_kiwi_in_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        fill_cup_with_water(cup)
        cut_kiwi(kiwi)
        put_kiwi_in_cup(kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior cut_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior put_kiwi_in_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        fill_cup_with_water(cup)
        cut_kiwi(kiwi)
        put_kiwi_in_cup(kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_kiwi_2027, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_kiwi_2027, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_kiwi_2027, kitchen_counter_230)
Fail to find food_kiwi_2027 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_kiwi_2027, fridge_289)
Find food_kiwi_2027. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_kiwi_2027, cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_kiwi_2027. food_kiwi_2027 is close cutting_board_2051. food_kiwi_2027 is on cutting_board_2051. food_kiwi_2027 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
cut_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve has_water(cup)

behavior cut_fruit(fruit: item, knife: item, cutting_board: item):
    body:
        achieve_once on(fruit, cutting_board)
        achieve cut(fruit)

behavior add_fruit_to_cup(fruit: item, cup: item):
    body:
        achieve_once inside(fruit, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup with water
        
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        # Select the cut kiwi
        
        add_fruit_to_cup(food_kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve has_water(cup)

behavior cut_fruit(fruit: item, knife: item, cutting_board: item):
    body:
        achieve_once on(fruit, cutting_board)
        achieve cut(fruit)

behavior add_fruit_to_cup(fruit: item, cup: item):
    body:
        achieve_once inside(fruit, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup with water
        
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        # Select the cut kiwi
        
        add_fruit_to_cup(food_kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
putin_executor(food_kiwi_2027, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. food_kiwi_2027 is inside cup_2063. cup_2063 is close food_kiwi_2027. food_kiwi_2027 is close cup_2063. food_kiwi_2027 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The cup did not achieve the "has_water" condition because after the faucet was turned on and off, there was no action explicitly indicating that water was put into the cup. Ensure the cup is filled with water before proceeding to add the sliced kiwi.
##############################
From agent.py
Human Instruction: The cup did not achieve the "has_water" condition because after the faucet was turned on and off, there was no action explicitly indicating that water was put into the cup. Ensure the cup is filled with water before proceeding to add the sliced kiwi.

Trial and Error: You can not grab food_kiwi_2027
The actions you have taken:
Action 1: Walk to table_107.
Action 2: look for cup_2063 around table_107.
Action 3: Walk to table_355.
Action 4: look for cup_2063 around table_355.
Action 5: Walk to coffee_table_2068.
Action 6: look for cup_2063 around coffee_table_2068.
Action 7: Walk to kitchen_counter_230.
Action 8: look for cup_2063 around kitchen_counter_230.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to kitchen_counter_230.
Action 15: look for food_kiwi_2027 around kitchen_counter_230.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_kiwi_2027 around fridge_289.
Action 20: Grab food_kiwi_2027.
Action 21: Walk to cutting_board_2051.
Action 22: Put food_kiwi_2027 on cutting_board_2051.
Action 23: Walk to knife_2050.
Action 24: Grab knife_2050.
Action 25: Walk to food_kiwi_2027.
Action 26: Cut food_kiwi_2027.
Action 27: Walk to kitchen_counter_230.
Action 28: Put knife_2050 on kitchen_counter_230.
Action 29: Walk to food_kiwi_2027.
Action 30: Grab food_kiwi_2027.
Action 31: Walk to cup_2063.
Action 32: Put food_kiwi_2027 into cup_2063.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_closetdrawer_158(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def has_kiwi_on_cutting_board(cutting_board:item):
    # Function to check if there is sliced kiwi on the cutting board
    symbol has_sliced_kiwi=exists o: item : (is_food_kiwi(o) and cut(o) and on(o, cutting_board))
    return has_sliced_kiwi

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once has_water(cup)

behavior add_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup to fill with water
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board to check for cut kiwi

        # Ensure the cup has water before proceeding
        fill_cup_with_water(cup, faucet)
        
        if has_kiwi_on_cutting_board(cutting_board):
            bind kiwi: item where:
                is_food_kiwi(kiwi) and cut(kiwi) and on(kiwi, cutting_board)
            # Select cut kiwi on the cutting board

            add_kiwi_to_cup(kiwi, cup)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check for sliced kiwi on the cutting board")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_kiwi_on_cutting_board(cutting_board:item):
    # Function to check if there is sliced kiwi on the cutting board
    symbol has_sliced_kiwi=exists o: item : (is_food_kiwi(o) and cut(o) and on(o, cutting_board))
    return has_sliced_kiwi

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once has_water(cup)

behavior add_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup to fill with water
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board to check for cut kiwi

        # Ensure the cup has water before proceeding
        fill_cup_with_water(cup, faucet)
        
        if has_kiwi_on_cutting_board(cutting_board):
            bind kiwi: item where:
                is_food_kiwi(kiwi) and cut(kiwi) and on(kiwi, cutting_board)
            # Select cut kiwi on the cutting board

            add_kiwi_to_cup(kiwi, cup)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check for sliced kiwi on the cutting board")

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)obs(cutting_board_2051, Check for sliced kiwi on the cutting board)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(cutting_board_2051, Check for sliced kiwi on the cutting board)
Get this information:  cutting_board_2051 is on kitchen_counter_230. cutting_board_2051 is inside dining_room_201. cutting_board_2051 is close to kitchen_counter_230. cutting_board_2051 is close to food_kiwi_2027. cutting_board_2051 is close to character_65. cutting_board_2051 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the cup is filled with water. There is no explicit action indicating that water was put into the cup after the faucet was turned on and off.
##############################
From agent.py
Human Instruction: Ensure the cup is filled with water. There is no explicit action indicating that water was put into the cup after the faucet was turned on and off.

Trial and Error: You can not grab food_kiwi_2027
The actions you have taken:
Action 1: Walk to table_107.
Action 2: look for cup_2063 around table_107.
Action 3: Walk to table_355.
Action 4: look for cup_2063 around table_355.
Action 5: Walk to coffee_table_2068.
Action 6: look for cup_2063 around coffee_table_2068.
Action 7: Walk to kitchen_counter_230.
Action 8: look for cup_2063 around kitchen_counter_230.
Action 9: Walk to cup_2063.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to kitchen_counter_230.
Action 15: look for food_kiwi_2027 around kitchen_counter_230.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_kiwi_2027 around fridge_289.
Action 20: Grab food_kiwi_2027.
Action 21: Walk to cutting_board_2051.
Action 22: Put food_kiwi_2027 on cutting_board_2051.
Action 23: Walk to knife_2050.
Action 24: Grab knife_2050.
Action 25: Walk to food_kiwi_2027.
Action 26: Cut food_kiwi_2027.
Action 27: Walk to kitchen_counter_230.
Action 28: Put knife_2050 on kitchen_counter_230.
Action 29: Walk to food_kiwi_2027.
Action 30: Grab food_kiwi_2027.
Action 31: Walk to cup_2063.
Action 32: Put food_kiwi_2027 into cup_2063.
Action 33: Walk to cutting_board_2051.
Action 34: Observe around cutting_board_2051 with the question of Check for sliced kiwi on the cutting board.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_closetdrawer_158(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_plate_1000_around_stove_2065(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(plate,stove_instance)
        else:
            exp(plate,stove_instance)
    eff:
        unknown[plate]=False
        close[plate,stove_instance]=True
        close[stove_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to use
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the cup with water
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi to use
        achieve has_water(cup) 
        # Fill the cup with water
        achieve cut(kiwi)
        # Cut the kiwi
        achieve inside(kiwi, cup)
        # Put the sliced kiwi into the cup of water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_closetdrawer_150(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_plate_1000_around_stove_2065(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(plate,stove_instance)
        else:
            exp(plate,stove_instance)
    eff:
        unknown[plate]=False
        close[plate,stove_instance]=True
        close[stove_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve has_water(cup)

behavior slice_and_add_kiwi_to_cup(food_kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(food_kiwi, cutting_board)
        achieve_once cut(food_kiwi)
        achieve_once inside(food_kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        add_water_to_cup(cup, faucet)
        slice_and_add_kiwi_to_cup(food_kiwi, cup, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve has_water(cup)

behavior slice_and_add_kiwi_to_cup(food_kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(food_kiwi, cutting_board)
        achieve_once cut(food_kiwi)
        achieve_once inside(food_kiwi, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        add_water_to_cup(cup, faucet)
        slice_and_add_kiwi_to_cup(food_kiwi, cup, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_kiwi_2027, cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_kiwi_2027 is close cutting_board_2051. food_kiwi_2027 is on cutting_board_2051. food_kiwi_2027 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
putin_executor(food_kiwi_2027, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. food_kiwi_2027 is inside cup_2063. cup_2063 is close food_kiwi_2027. food_kiwi_2027 is close cup_2063. food_kiwi_2027 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the cup with water. There is no explicit action indicating that water was put into the cup after the faucet was turned on and off.
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(table_107)', 'walk_executor(table_355)', 'walk_executor(coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cutting_board_2051)', 'put_executor(food_kiwi_2027, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_kiwi_2027)', 'cut_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cup_2063)', 'putin_executor(food_kiwi_2027, cup_2063)', 'walk_executor(cutting_board_2051)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cutting_board_2051)', 'put_executor(food_kiwi_2027, cutting_board_2051)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cup_2063)', 'putin_executor(food_kiwi_2027, cup_2063)']
Time info:
Time consume: 178 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 36

Task complete rate:
1
Scene_id: 0
##############################
