From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor by push and pull the vacuume clearner.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_table_107(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation

bind vacuum_cleaner: item where:
    is_vacuum_cleaner(vacuum_cleaner)

behavior turn_on_vacuum(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior plug_vacuum(vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)

behavior push_and_pull_vacuum(vacuum_cleaner: item, floor: item):
    body:
        achieve close(vacuum_cleaner, floor)
        # Detailed actions for ensuring vacuum is moved properly
        push(vacuum_cleaner)
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)

        plug_vacuum(vacuum_cleaner)
        turn_on_vacuum(vacuum_cleaner)
        push_and_pull_vacuum(vacuum_cleaner, floor)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_table_107(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve clean(floor)
        # The goal is to clean the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner
        bind floor: item where:
            is_floor(floor)
        # Select the floor
        vacuum_floor(vacuum_cleaner, floor)
        # Use the vacuum cleaner to clean the floor


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve clean(floor)
        # The goal is to clean the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner
        bind floor: item where:
            is_floor(floor)
        # Select the floor
        vacuum_floor(vacuum_cleaner, floor)
        # Use the vacuum cleaner to clean the floor


##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(vacuum_cleaner_2070, table_107)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(vacuum_cleaner_2070, table_107)
Fail to find vacuum_cleaner_2070 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(vacuum_cleaner_2070, coffee_table_2068)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(vacuum_cleaner_2070, coffee_table_2068)
Fail to find vacuum_cleaner_2070 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(vacuum_cleaner_2070, washing_machine_2007)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. 
##############################
From agent.py
open_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. washing_machine_2007 is opened. 
##############################
From agent.py
exp(vacuum_cleaner_2070, washing_machine_2007)
Fail to find vacuum_cleaner_2070 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(vacuum_cleaner_2070, closetdrawer_158)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_158)
Fail to find vacuum_cleaner_2070 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(vacuum_cleaner_2070, closetdrawer_158)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_158)
Fail to find vacuum_cleaner_2070 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(vacuum_cleaner_2070, closetdrawer_158)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find vacuum_cleaner_2070 ?
Answer: The vacuum_cleaner_2070 is located inside the home_office_319. Once inside, look for the couch_352. The vacuum_cleaner_2070 is close to the couch_352, so it should be nearby.
Re-decompose: None

##############################
From agent.py
Human Instruction: The vacuum_cleaner_2070 is located inside the home_office_319. Once inside, look for the couch_352. The vacuum_cleaner_2070 is close to the couch_352, so it should be nearby.

The actions you have taken:
Action 1: Walk to table_107.
Action 2: look for vacuum_cleaner_2070 around table_107.
Action 3: Walk to coffee_table_2068.
Action 4: look for vacuum_cleaner_2070 around coffee_table_2068.
Action 5: Walk to washing_machine_2007.
Action 6: Open washing_machine_2007.
Action 7: look for vacuum_cleaner_2070 around washing_machine_2007.
Action 8: Walk to closetdrawer_158.
Action 9: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 10: Walk to closetdrawer_158.
Action 11: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 12: Walk to closetdrawer_158.

##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_158)
Fail to find vacuum_cleaner_2070 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)exp(vacuum_cleaner_2070, couch_352)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(couch_352)
Robot find: mat_401, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, pillow_406, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. 
##############################
From agent.py
exp(vacuum_cleaner_2070, couch_352)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. vacuum_cleaner_2070 is plugged in. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. vacuum_cleaner_2070 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to push and pull the vacuum_cleaner_2070 to complete the vacuuming of the floor.
##############################
From agent.py
Human Instruction: You need to push and pull the vacuum_cleaner_2070 to complete the vacuuming of the floor.

The actions you have taken:
Action 1: Walk to table_107.
Action 2: look for vacuum_cleaner_2070 around table_107.
Action 3: Walk to coffee_table_2068.
Action 4: look for vacuum_cleaner_2070 around coffee_table_2068.
Action 5: Walk to washing_machine_2007.
Action 6: Open washing_machine_2007.
Action 7: look for vacuum_cleaner_2070 around washing_machine_2007.
Action 8: Walk to closetdrawer_158.
Action 9: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 10: Walk to closetdrawer_158.
Action 11: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 12: Walk to closetdrawer_158.
Action 13: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 14: Walk to couch_352.
Action 15: look for vacuum_cleaner_2070 around couch_352.
Action 16: Walk to vacuum_cleaner_2070.
Action 17: Plug in vacuum_cleaner_2070.
Action 18: Switch on vacuum_cleaner_2070.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_table_355(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_salt,table_instance)
        else:
            exp(food_salt,table_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,table_instance]=True
        close[table_instance,food_salt]=True
    

behavior find_mat_22_around_mat_173(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==173
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_vacuum_cleaner(vacuum_cleaner:item, power_socket:item):
    body:
        achieve_once plugged(vacuum_cleaner) # Plug the vacuum cleaner into the power socket

behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve_once is_on(vacuum_cleaner) # Turn on the vacuum cleaner

behavior move_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve_once clean(floor) # Clean the floor by moving the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select vacuum cleaner with ID 2070

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        plug_vacuum_cleaner(vacuum_cleaner, power_socket)
        switch_on_vacuum_cleaner(vacuum_cleaner)
        move_vacuum_cleaner(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2084_around_closetdrawer_388(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(detergent,closetdrawer_instance)
        else:
            exp(detergent,closetdrawer_instance)
    eff:
        unknown[detergent]=False
        close[detergent,closetdrawer_instance]=True
        close[closetdrawer_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)
        achieve plugged(vacuum_cleaner)
        achieve close_char(char, vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Operate the vacuum cleaner by ensuring it is plugged in, turned on, and close to the character
        operate_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve_once plugged(vacuum_cleaner)
        achieve_once is_on(vacuum_cleaner)

behavior push_pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        move_vacuum_cleaner(vacuum_cleaner)
        push_pull_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior initiate_vacuuming(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure the vacuum cleaner is switched on

behavior vacuum_floor(vacuum_cleaner:item):
    body:
        achieve close_char(char, vacuum_cleaner) # Ensure the character is close to the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        initiate_vacuuming(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)
        # Push the vacuum cleaner

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)
        # Pull the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged and on
        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)
        # Push the vacuum cleaner

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)
        # Pull the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged and on
        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)
 
##############################
From agent.py-> find a plan in act()
push_executor(vacuum_cleaner_2070)pull_executor(vacuum_cleaner_2070)
##############################
From agent.py
push_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py
pull_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Vacuum the floor by push and pull the vacuume clearner.
Action History:
['walk_executor(table_107)', 'walk_executor(coffee_table_2068)', 'walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(couch_352)', 'walk_executor(vacuum_cleaner_2070)', 'plugin_executor(vacuum_cleaner_2070)', 'switchon_executor(vacuum_cleaner_2070)', 'push_executor(vacuum_cleaner_2070)', 'pull_executor(vacuum_cleaner_2070)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 1 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
