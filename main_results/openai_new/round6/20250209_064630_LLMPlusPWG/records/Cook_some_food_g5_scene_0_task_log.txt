From agent.py
Reset goals: The sub-goals are: 
['Make oil fried banana.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_388(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_banana(banana:item):
    body:
        achieve clean(banana)

behavior cut_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once cut(banana)
    
behavior heat_oil(oil:item, stove:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        achieve is_on(stove)

behavior add_banana_to_oil(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)

behavior fry_banana(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind knife: item where:
            is_knife(knife)

        bind oil: item where:
            is_oil(oil)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        wash_banana(banana)
        cut_banana(banana, cutting_board, knife)
        heat_oil(oil, stove, fryingpan)
        add_banana_to_oil(banana, fryingpan)
        fry_banana(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_banana(banana:item):
    body:
        achieve clean(banana)

behavior cut_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once cut(banana)
    
behavior heat_oil(oil:item, stove:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        achieve is_on(stove)

behavior add_banana_to_oil(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)

behavior fry_banana(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind knife: item where:
            is_knife(knife)

        bind oil: item where:
            is_oil(oil)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        wash_banana(banana)
        cut_banana(banana, cutting_board, knife)
        heat_oil(oil, stove, fryingpan)
        add_banana_to_oil(banana, fryingpan)
        fry_banana(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_banana_2011)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The banana needs to be washed before proceeding with the frying process.
##############################
From agent.py
Human Instruction: The banana needs to be washed before proceeding with the frying process.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: Walk to kitchen_counter_230.
Action 9: look for knife_2050 around kitchen_counter_230.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 into fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_dishwasher_1001(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item):
    body:
        achieve_once clean(item)
        # Wash the item to achieve a clean state

behavior fry_food(food:item, frying_pan:item):
    body:
        achieve cut(food) # Ensure the food is cut before frying
        achieve_once inside(food, frying_pan)
        # Place the food inside the frying pan for frying

behavior heat_oil(oil:item, stove:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan) # Add oil into the frying pan
        achieve is_on(stove) # Ensure the stove is on for heating

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        wash_item(banana) # Wash the banana
        fry_food(banana, frying_pan) # Fry the banana
        heat_oil(oil, stove, frying_pan) # Heat oil in the frying pan using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_closetdrawer_158(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_banana(banana:item):
    body:
        achieve_once clean(banana)
        # Ensure the banana is clean

behavior pour_oil(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the frying pan

behavior fry_banana(banana:item, pan:item):
    body:
        achieve_once cut(banana)
        achieve_once inside(banana, pan)
        # Fry the banana by placing it into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be fried

        bind oil: item where:
            is_oil(oil)
        # Select the oil to be used for frying

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan for frying the banana

        wash_banana(banana)
        pour_oil(oil, frying_pan)
        fry_banana(banana, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_banana(banana:item, faucet:item):
    body:
        achieve_once clean(banana) # Wash the banana to ensure it is clean

behavior cut_banana(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board) # Place banana on the cutting board
        achieve_once cut(banana) # Cut the banana

behavior pour_oil(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into frying pan

behavior fry_banana(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan) # Place the banana pieces into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select banana

        bind faucet: item where:
            is_faucet(faucet)
        # Select faucet for washing

        bind knife: item where:
            is_knife(knife)
        # Select knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select cutting board
        
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        wash_banana(banana, faucet) # Wash the banana
        cut_banana(banana, knife, cutting_board) # Cut banana using knife and cutting board
        pour_oil(oil, fryingpan) # Pour oil into frying pan
        fry_banana(banana, fryingpan) # Fry the banana pieces in the pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_banana(banana:item, faucet:item):
    body:
        achieve_once clean(banana) # Wash the banana to ensure it is clean

behavior cut_banana(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board) # Place banana on the cutting board
        achieve_once cut(banana) # Cut the banana

behavior pour_oil(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into frying pan

behavior fry_banana(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan) # Place the banana pieces into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select banana

        bind faucet: item where:
            is_faucet(faucet)
        # Select faucet for washing

        bind knife: item where:
            is_knife(knife)
        # Select knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select cutting board
        
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        wash_banana(banana, faucet) # Wash the banana
        cut_banana(banana, knife, cutting_board) # Cut banana using knife and cutting board
        pour_oil(oil, fryingpan) # Pour oil into frying pan
        fry_banana(banana, fryingpan) # Fry the banana pieces in the pan

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The banana needs to be washed according to the human instruction, but the current actions do not include washing the banana before frying it. Make sure to wash the banana, as specified in the instructions, before proceeding with the frying process.
##############################
From agent.py
Human Instruction: The banana needs to be washed according to the human instruction, but the current actions do not include washing the banana before frying it. Make sure to wash the banana, as specified in the instructions, before proceeding with the frying process.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: Walk to kitchen_counter_230.
Action 9: look for knife_2050 around kitchen_counter_230.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 into fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 into fryingpan_2083.
Action 24: Grab food_banana_2011.
Action 25: Walk to cutting_board_2051.
Action 26: Put food_banana_2011 on cutting_board_2051.
Action 27: Walk to food_banana_2011.
Action 28: Grab food_banana_2011.
Action 29: Walk to fryingpan_2083.
Action 30: Put food_banana_2011 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2058_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_dishwasher_1001(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_banana(banana:item):
    body:
        achieve_once clean(banana)
        # Wash the banana to make it clean

behavior cut_banana(banana:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Cut the banana

behavior prepare_frying_pan(oil:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan)
        # Pour oil into the frying pan

behavior fry_banana(banana:item, frying_pan:item):
    body:
        achieve_once inside(banana, frying_pan)
        # Place the banana in the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind oil: item where:
            is_oil(oil)
        # Select the oil
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        wash_banana(banana)
        cut_banana(banana, cutting_board)
        prepare_frying_pan(oil, frying_pan)
        fry_banana(banana, frying_pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_banana(banana:item):
    body:
        achieve_once clean(banana)
        # Wash the banana to make it clean

behavior cut_banana(banana:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Cut the banana

behavior prepare_frying_pan(oil:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan)
        # Pour oil into the frying pan

behavior fry_banana(banana:item, frying_pan:item):
    body:
        achieve_once inside(banana, frying_pan)
        # Place the banana in the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind oil: item where:
            is_oil(oil)
        # Select the oil
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        wash_banana(banana)
        cut_banana(banana, cutting_board)
        prepare_frying_pan(oil, frying_pan)
        fry_banana(banana, frying_pan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the banana as per the instructions before frying it.
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)']
Time info:
Time consume: 123 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
