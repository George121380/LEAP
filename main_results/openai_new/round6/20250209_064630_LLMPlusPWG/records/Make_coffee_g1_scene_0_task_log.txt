From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_water_in_coffeemaker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior close_lid(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)

behavior plug_and_turn_on(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker has water
        fill_water_in_coffeemaker(coffee_maker)
        # Close the lid of the coffee maker
        close_lid(coffee_maker)
        # Plug in and turn on the coffee maker
        plug_and_turn_on(coffee_maker)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_water_in_coffeemaker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior close_lid(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)

behavior plug_and_turn_on(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker has water
        fill_water_in_coffeemaker(coffee_maker)
        # Close the lid of the coffee maker
        close_lid(coffee_maker)
        # Plug in and turn on the coffee maker
        plug_and_turn_on(coffee_maker)


##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the coffee maker with water, plug in the coffee maker, and ensure that the lid is closed.
##############################
From agent.py
Human Instruction: The robot needs to fill the coffee maker with water, plug in the coffee maker, and ensure that the lid is closed.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior close_lid(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Ensure the coffee maker lid is closed

behavior plug_in_and_turn_on(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is plugged in and turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        # Select the visited coffee maker
        bind faucet: item where:
            is_faucet(faucet) and visited(faucet)
        # Select the visited faucet

        fill_with_water(coffee_maker, faucet)
        close_lid(coffee_maker)
        plug_in_and_turn_on(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item, socket:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior close_coffee_maker_lid(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Ensure the lid of the coffee maker is closed

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 232

        bind socket: item where:
            is_powersocket(socket)

        plug_in_coffee_maker(coffee_maker, socket)
        fill_coffee_maker_with_water(coffee_maker)
        close_coffee_maker_lid(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior close_coffee_maker_lid(coffee_maker: item):
    body:
        achieve_once closed(coffee_maker)
        # Ensure that the lid of the coffee maker is closed

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Plug in the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        # Select a visited coffee maker
        fill_coffee_maker_with_water(coffee_maker, faucet)
        close_coffee_maker_lid(coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Get close to the faucet
        achieve is_off(faucet)
        # Ensure the faucet is off
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior plug_in_coffee_maker(coffee_maker:item, powersocket:item):
    body:
        achieve close_char(char, powersocket)
        # Get close to the power socket
        achieve plugged(coffee_maker)
        # Plug in the coffee maker

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Ensure the coffee maker lid is closed

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 232
        # Select faucet with ID 232

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select coffee maker with ID 290

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket for plugging

        fill_coffee_maker_with_water(coffee_maker, faucet)
        plug_in_coffee_maker(coffee_maker, powersocket)
        prepare_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_158(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water inside

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior close_coffee_maker_lid(coffee_maker:item):
    body:
        achieve closed(coffee_maker)
        # Ensure the coffee maker lid is closed

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        fill_coffee_maker_with_water(coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        close_coffee_maker_lid(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_388(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior plug_in(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior close_lid(coffee_maker:item):
    body:
        achieve closed(coffee_maker)

behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
    
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        fill_with_water(coffee_maker)
        plug_in(coffee_maker)
        close_lid(coffee_maker)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Error record: 'LLMPlusPWG' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 80 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 5

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
