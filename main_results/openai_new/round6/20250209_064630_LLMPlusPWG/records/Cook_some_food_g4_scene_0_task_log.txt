From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_158(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve plugged(stove)
        # Plug the stove in for operation
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot with the boiled vegetables inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed after placing the pot inside

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove
        
        store_pot_in_fridge(pot, fridge)
        # After boiling, store the entire pot in the fridge
        
        close_fridge(fridge)
        # Ensure the fridge door is closed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        achieve_once on(pot, stove)
        achieve plugged(stove)
        achieve is_on(stove)
        achieve has_water(pot)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        boil_vegetables(vegetable, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior boil_vegetables_with_pot(pot:item, stove:item, vegetables:item):
    body:
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve has_water(pot)
        # Fill the pot with water
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the entire pot inside the fridge
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select some vegetables
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        boil_vegetables_with_pot(pot, stove, vegetables)
        store_pot_in_fridge(pot, fridge)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior boil_vegetables_pot(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Fill pot with water for boiling
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve plugged(stove) # Ensure stove is plugged in to operate
        # Assume stove has a switch based on context, ensuring it is turned on
        achieve is_on(stove) # Turn on the stove to begin boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge) # Store the pot inside the fridge
        achieve_once closed(fridge) # Close the fridge door to maintain proper storage

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) # Select a stove for boiling process

        bind pot: item where:
            is_pot(pot) # Select a pot for cooking
        
        bind fridge: item where:
            is_fridge(fridge) # Select a fridge for storage
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) # Select vegetables for boiling

        boil_vegetables_pot(pot, stove, vegetables) # Execute boiling behavior
        store_pot_in_fridge(pot, fridge) # Execute storage behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def in_fridge(pot:item):
    # Function to check if a pot is in the fridge
    symbol inside_fridge = exists fridge: item : (is_fridge(fridge) and inside(pot, fridge))
    return inside_fridge

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water for boiling
        achieve inside(vegetable, pot) # Place vegetables inside the pot
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve_once is_on(stove) # Turn on the stove to start boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge) # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        
        boil_vegetables(pot, stove)
        # After boiling, store the pot in the fridge
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cleaning_solution_2073_around_fridge_289(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cleaning_solution,fridge_instance)
        else:
            exp(cleaning_solution,fridge_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,fridge_instance]=True
        close[fridge_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water for boiling
        
        achieve_once inside(vegetable, pot)
        # Place the vegetables inside the pot

        achieve plugged(stove)
        # Ensure the stove is plugged in
        
        achieve_once is_on(stove)
        # Turn on the stove to boil the vegetables

        achieve_once is_off(stove)
        # Turn off the stove once the vegetables are boiled

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the whole pot inside the fridge

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable for boiling

        boil_vegetables_with_pot(vegetable, pot, stove)
        store_pot_in_fridge(pot, fridge)
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some vegetables with pot. then store the whole pot in the fridge." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove. Put the pot in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables)
        # Ensure the vegetables are clean

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior put_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior boil_vegetables(pot:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot for boiling

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)
        # Turn off the stove after boiling

behavior move_pot_to_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Move the pot into the fridge

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables for boiling
        
        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        put_on_stove(pot, stove)
        turn_on_stove(stove)
        boil_vegetables(pot, vegetables)
        turn_off_stove(stove)
        move_pot_to_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_cleaning_solution_2073_around_dishwasher_1001(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables: item):
    body:
        foreach veg: item:
            if is_food_vegetable(veg) and inside(veg, vegetables):
                achieve clean(veg)

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior turn_off_stove(stove: item):
    body:
        achieve is_off(stove)

behavior place_vegetables_in_pot(pot: item, vegetables: item):
    body:
        foreach veg: item:
            if is_food_vegetable(veg) and clean(veg):
                achieve_once inside(veg, pot)

behavior store_pot_in_fridge(pot: item, fridge: item):
    body:
        achieve_once inside(pot, fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        place_vegetables_in_pot(pot, vegetables)

        # Assume boiling is done successfully, then turn off stove
        turn_off_stove(stove)

        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables: item):
    body:
        achieve_once clean(vegetables)
        # Ensure the vegetables are clean before cooking

behavior fill_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior store_pot_in_fridge(pot: item, fridge: item):
    body:
        achieve_once inside(pot, fridge)
        # Store the whole pot in the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove to boil the vegetables
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge for storing the pot
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables for boiling
        
        wash_vegetables(vegetables)
        # Wash the vegetables
        
        fill_with_water(pot)
        # Fill the pot with water
        
        put_pot_on_stove(pot, stove)
        # Put the pot on the stove
        
        boil_vegetables(pot, stove, vegetables)
        # Boil the vegetables inside the pot
        
        achieve is_off(stove)
        # Turn off the stove after boiling
        
        store_pot_in_fridge(pot, fridge)
        # Store the whole pot in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_add_vegetables_to_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve clean(vegetables)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve inside(vegetables, pot)

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_and_add_vegetables_to_pot(vegetables, pot, stove)
        turn_off_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_carrot_2014_around_dishwasher_1001(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_carrot,dishwasher_instance)
        else:
            exp(food_carrot,dishwasher_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,dishwasher_instance]=True
        close[dishwasher_instance,food_carrot]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetables(vegetables: item):
    body:
        achieve_once clean(vegetables)
        # Wash the vegetables to ensure they are clean

behavior fill_pot_with_water(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve_once is_on(stove) # Turn on the stove
        achieve_once is_off(stove) # Turn off the stove after boiling

behavior store_pot_in_fridge(pot: item, fridge: item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot with boiled vegetables inside the fridge

behavior close_fridge_door(fridge: item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door to ensure the pot is properly stored

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        boil_vegetables(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)
        close_fridge_door(fridge)
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(pot_2069, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_vegetable_2041, kitchen_counter_230)
Fail to find food_vegetable_2041 around kitchen_counter_230. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_cupboard_229(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_carrot_2014_around_cupboard_229(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation

behavior wash_vegetables(pot:item):
    body:
        achieve_once clean(pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior stop_stove(stove:item):
    body:
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and clean(pot)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        
        wash_vegetables(pot)
        fill_pot_with_water(pot)
        put_pot_on_stove(pot, stove)
        start_stove(stove)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inhand(vegetable):
                achieve_once inside(vegetable, pot)

        stop_stove(stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_cupboard_229(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_food_potato_2035_around_dishwasher_1001(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_potato,dishwasher_instance)
        else:
            exp(food_potato,dishwasher_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,dishwasher_instance]=True
        close[dishwasher_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables)

behavior fill_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior turn_on_stove_with_pot(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve_once is_on(stove)

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        wash_vegetables(vegetables)

        bind pot: item where:
            is_pot(pot)
        fill_with_water(pot)

        bind stove: item where:
            is_stove(stove)
        turn_on_stove_with_pot(pot, stove)
        put_vegetables_in_pot(vegetables, pot)

        turn_off_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)
        store_pot_in_fridge(pot, fridge)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_cupboard_229(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        wash(vegetables)
        # Wash the vegetables
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once is_off(stove)
        # Turn off the stove after boiling is done

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the boiled pot inside the fridge

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        boil_vegetables_with_pot(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        wash(vegetables)
        # Wash the vegetables
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once is_off(stove)
        # Turn off the stove after boiling is done

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the boiled pot inside the fridge

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        boil_vegetables_with_pot(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_vegetable_2041, cupboard_229)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchoff_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, cupboard_229)
Fail to find food_vegetable_2041 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchoff_executor(stove_2065)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchoff_executor(stove_2065)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(pot_2069, fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is inside fridge_289. pot_2069 is close fridge_289. fridge_289 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_232)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'grab_executor(pot_2069)', 'walk_executor(fridge_289)', 'putin_executor(pot_2069, fridge_289)']
Time info:
Time consume: 294 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 14
goal correct times: 0
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 7 steps
Keystate: k3 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
