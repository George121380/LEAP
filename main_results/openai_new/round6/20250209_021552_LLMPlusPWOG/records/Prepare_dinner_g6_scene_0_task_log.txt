From agent.py
Reset goals: The sub-goals are: 
['Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_dining_room(room:item):
    # Function to check if a room is classified as either a kitchen or a dining room
    symbol is_kitchen_or_dining= is_kitchen(room) or is_dining_room(room)
    return is_kitchen_or_dining

behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior heat_food(microwave:item, plate:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate in the microwave
        achieve_once is_on(microwave) # Turn on the microwave to heat food

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior close_microwave(microwave:item):
    body:
        achieve_once is_off(microwave) # Ensure the microwave is turned off
        achieve_once closed(microwave) # Ensure the microwave is closed

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        put_food_on_plate(pizza, plate) # Put pizza on the plate
        put_food_on_plate(hamburger, plate) # Put hamburger on the plate
        bind microwave: item where:
            is_microwave(microwave)
        heat_food(microwave, plate) # Heat the food in the microwave
        bind table: item where:
            is_table(table) and in_kitchen_dining_room(table)
        place_on_table(plate, table) # Place the plate on a table in dining room
        close_microwave(microwave) # Ensure the microwave is off and closed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_food_in_microwave(food:item, microwave:item):
    body:
        achieve_once inside(food, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior move_food_to_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind the pizza item
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind the hamburger item
        
        bind plate: item where:
            is_plate(plate)
        # Bind a plate item
        
        bind microwave: item where:
            is_microwave(microwave)
        # Bind the microwave item
        
        bind table: item where:
            is_table(table)
            exists room: item : (is_dining_room(room) and inside(table, room))
        # Bind a table inside the dining room
        
        put_food_on_plate(pizza, plate)
        put_food_on_plate(hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        move_food_to_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate) # Place the pizza on the plate
        achieve_once on(hamburger, plate) # Place the hamburger on the plate

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate inside the microwave
        achieve_once is_on(microwave) # Turn on the microwave to heat the food

behavior place_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_food_on_plate(pizza, hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        place_plate_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_dining_table(plate:item, dining_table:item):
    body:
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind dining_table: item where:
            is_table(dining_table) and exists r: item : (is_dining_room(r) and inside(dining_table, r))
        
        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_dining_table(plate, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_plate(pl: item, pizza: item, hamburger: item):
    body:
        achieve_once on(pizza, pl)
        achieve_once on(hamburger, pl)

behavior heat_in_microwave(pl: item, microwave: item):
    body:
        achieve_once inside(pl, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(pl: item, table: item):
    body:
        achieve_once on(pl, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind pl: item where:
            is_plate(pl)
        # Select a plate

        prepare_plate(pl, pizza, hamburger)

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(pl, microwave)

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_on_table(pl, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_plate(pl: item, pizza: item, hamburger: item):
    body:
        achieve_once on(pizza, pl)
        achieve_once on(hamburger, pl)

behavior heat_in_microwave(pl: item, microwave: item):
    body:
        achieve_once inside(pl, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(pl: item, table: item):
    body:
        achieve_once on(pl, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind pl: item where:
            is_plate(pl)
        # Select a plate

        prepare_plate(pl, pizza, hamburger)

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(pl, microwave)

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_on_table(pl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_351)exp(plate_1000, walllamp_351)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(walllamp_351)
Robot find: keyboard_415, chair_356, Robot is close to the walllamp_351. 
##############################
From agent.py
exp(plate_1000, walllamp_351)
Fail to find plate_1000 around walllamp_351. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(plate_1000, table_355)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(plate_1000, table_355)
Fail to find plate_1000 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(plate_1000, oven_295)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. You will find plate_1000 located on top of sink_231. Look for the sink and you'll see plate_1000 placed directly on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. You will find plate_1000 located on top of sink_231. Look for the sink and you'll see plate_1000 placed directly on it.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for plate_1000 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for plate_1000 around kitchen_counter_230.
Action 6: Walk to dishwasher_1001.
Action 7: Open dishwasher_1001.
Action 8: look for plate_1000 around dishwasher_1001.
Action 9: Walk to walllamp_351.
Action 10: look for plate_1000 around walllamp_351.
Action 11: Walk to table_355.
Action 12: look for plate_1000 around table_355.
Action 13: Walk to oven_295.
Action 14: Open oven_295.

##############################
From agent.py
exp(plate_1000, oven_295)
Fail to find plate_1000 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_pizza_2034, fridge_289)
Find food_pizza_2034. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(walllamp_351)', 'walk_executor(table_355)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(sink_231)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 246 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 34

Task complete rate:
1
Scene_id: 0
##############################
