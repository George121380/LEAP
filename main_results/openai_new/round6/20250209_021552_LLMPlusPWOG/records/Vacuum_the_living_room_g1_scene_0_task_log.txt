From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor by push and pull the vacuume clearner.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_table_355(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor_with_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        # Approach the vacuum cleaner before starting the task
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in before using
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner
        achieve clean(floor)
        # Ensure the floor is clean, indicating the task is complete
        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner after the task is complete
        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner after finishing

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Identify the vacuum cleaner in the scene
        bind floor: item where:
            is_floor(floor)
        # Identify the floor that needs to be vacuumed
        vacuum_floor_with_cleaner(vacuum_cleaner, floor)
        # Invoke the behavior to vacuum the floor

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_basket_for_clothes_2006(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(vacuum_cleaner,basket_for_clothes_instance)
        else:
            exp(vacuum_cleaner,basket_for_clothes_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,vacuum_cleaner]=True
    

behavior find_mat_173_around_closetdrawer_382(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior is_vacuum_cleaner_plugged_in(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure that the vacuum cleaner is plugged in

behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure that the vacuum cleaner is turned on

behavior start_vacuuming(vacuum_cleaner:item, floor:item):
    body:
        achieve_once clean(floor)
        # Perform vacuuming by pushing and pulling to clean the floor

behavior turn_off_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)
        # Ensure that the vacuum cleaner is turned off

behavior unplug_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve unplugged(vacuum_cleaner)
        # Ensure that the vacuum cleaner is unplugged

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)

        is_vacuum_cleaner_plugged_in(vacuum_cleaner)
        turn_on_vacuum_cleaner(vacuum_cleaner)
        start_vacuuming(vacuum_cleaner, floor)
        turn_off_vacuum_cleaner(vacuum_cleaner)
        unplug_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_bench_228(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

behavior find_vacuum_cleaner_2070_around_table_355(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Clean the floor using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner
        bind floor: item where:
            is_floor(floor)
        # Select a floor
        vacuum_floor(vacuum_cleaner, floor)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Clean the floor using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select a vacuum cleaner
        bind floor: item where:
            is_floor(floor)
        # Select a floor
        vacuum_floor(vacuum_cleaner, floor)


##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(vacuum_cleaner_2070, table_355)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(vacuum_cleaner_2070, table_355)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. vacuum_cleaner_2070 is plugged in. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. vacuum_cleaner_2070 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to push and pull the vacuum cleaner to clean the floor.
##############################
From agent.py
Human Instruction: You need to push and pull the vacuum cleaner to clean the floor.

The actions you have taken:
Action 1: Walk to table_355.
Action 2: look for vacuum_cleaner_2070 around table_355.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Plug in vacuum_cleaner_2070.
Action 5: Switch on vacuum_cleaner_2070.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior push_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is turned on
        push_vacuum_cleaner(vacuum_cleaner)
        # Push the vacuum cleaner
        pull_vacuum_cleaner(vacuum_cleaner)
        # Pull the vacuum cleaner

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior push_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once close_char(char, vacuum_cleaner)
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is turned on
        push_vacuum_cleaner(vacuum_cleaner)
        # Push the vacuum cleaner
        pull_vacuum_cleaner(vacuum_cleaner)
        # Pull the vacuum cleaner

##############################
From agent.py-> find a plan in act()
push_executor(vacuum_cleaner_2070)pull_executor(vacuum_cleaner_2070)
##############################
From agent.py
push_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py
pull_executor(vacuum_cleaner_2070)
Robot find: Robot is close to the vacuum_cleaner_2070. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Vacuum the floor by push and pull the vacuume clearner.
Action History:
['walk_executor(table_355)', 'walk_executor(vacuum_cleaner_2070)', 'plugin_executor(vacuum_cleaner_2070)', 'switchon_executor(vacuum_cleaner_2070)', 'push_executor(vacuum_cleaner_2070)', 'pull_executor(vacuum_cleaner_2070)']
Time info:
Time consume: 67 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 6

Task complete rate:
Keystate: k1 - Requires: 1 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
