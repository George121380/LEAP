From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior create_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        achieve has_water(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        bind soap: item where:
            is_soap(soap) and close_char(char, soap)
        # Assuming soap is close to you in the bathroom
        create_soapy_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_soapy_water(sink:item, soap:item):
    body:
        achieve_once has_water(sink) # Fill the sink with water
        achieve_once inside(soap, sink) # Add soap into the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Select soap

        prepare_soapy_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_sink_of_soapy_water():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)

        achieve open(sink) 
        # Ensure the sink is open to hold water

        achieve_once is_on(faucet) 
        # Turn on the faucet to fill the sink with water

        bind soap: item where:
            is_soap(soap) and close(soap, sink)

        achieve_once inside(soap, sink)
        # Add soap to the sink of water to make it soapy

        achieve_once clean(sink)
        # Ensure the soap properly mixes with the water to clean the content

behavior __goal__():
    body:
        prepare_sink_of_soapy_water()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve_once open(faucet)
        # Open the faucet to let water flow
        achieve has_water(sink)
        # Ensure the sink is filled with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink item
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet that is close to the sink
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap item

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_soapy_water(sink:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the water in the sink to make it soapy

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom
        bind soap: item where:
            is_soap(soap)
        # Select an item that is soap
        
        prepare_soapy_water(sink)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_soapy_water(sink:item, soap:item):
    body:
        achieve_once has_water(sink)
        # Fill the sink with water
        achieve_once inside(soap, sink)
        # Add soap to the sink to make soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        # Select the sink that is located in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Select the soap

        prepare_soapy_water(sink, soap)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_soapy_water(sink:item, faucet:item, soap:item):
    body:
        achieve_once plugged(sink)
        achieve_once open(faucet)
        achieve_once has_water(sink)
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        bind soap: item where:
            is_soap(soap) and close_char(char, soap)
        prepare_soapy_water(sink, faucet, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_soapy_water(sink:item, faucet:item, soap:item):
    body:
        achieve_once plugged(sink)
        # Plug the sink to hold water
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the sink
        achieve_once open(soap)
        # Open the soap to add it
        observe(soap, "How much soap is left")
        achieve has_water(sink)
        # Ensure the sink is filled with water
        achieve inside(soap, sink)
        # Ensure soap is added to the sink water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink in the bathroom
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet near the character
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        fill_sink_with_soapy_water(sink, faucet, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
bind sink: item where:
    is_sink(sink)

bind soap: item where:
    is_soap(soap)

bind faucet: item where:
    is_faucet(faucet) and close(faucet, sink)

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve_once open(faucet)
        achieve has_water(sink)

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)
        
behavior __goal__():
    body:
        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(soap, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_sink_of_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink) # Add soap to the sink
        achieve has_water(sink) # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink in the bathroom
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        prepare_sink_of_soapy_water(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_sink_of_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink) # Add soap to the sink
        achieve has_water(sink) # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink in the bathroom
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        prepare_sink_of_soapy_water(sink, soap)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(soap_2053, bathroom_cabinet_40)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot find: towel_rack_31, Robot is close to the bathroom_cabinet_40. 
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. bathroom_cabinet_40 is opened. 
##############################
From agent.py
exp(soap_2053, bathroom_cabinet_40)
Fail to find soap_2053 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_41)exp(soap_2053, bathroom_counter_41)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(soap_2053, bathroom_counter_41)
Fail to find soap_2053 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(soap_2053, sink_42)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(soap_2053, sink_42)
Find soap_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(soap_2053)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. 
##############################
From agent.py
grab_executor(soap_2053)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. Grabbing soap_2053 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
putin_executor(soap_2053, sink_42)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. soap_2053 is close sink_42. soap_2053 is inside sink_42. soap_2053 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(bathroom_cabinet_40)', 'open_executor(bathroom_cabinet_40)', 'walk_executor(bathroom_counter_41)', 'walk_executor(sink_42)', 'walk_executor(soap_2053)', 'grab_executor(soap_2053)', 'walk_executor(sink_42)', 'putin_executor(soap_2053, sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)']
Time info:
Time consume: 134 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 10
goal correct times: 0
action_num: 11

Task complete rate:
1
Scene_id: 0
##############################
