From agent.py
Reset goals: The sub-goals are: 
['Turn on the lights in the bedroom. Then turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        if is_off(light):
            switch_on(light)

behavior __goal__():
    body:
        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, room) and is_bedroom(room)
        # Select light in the bedroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, room) and is_bathroom(room)
        # Select light in the bathroom

        turn_on_light(bedroom_light)
        # Turn on the light in the bedroom

        turn_on_light(bathroom_light)
        # Turn on the light in the bathroom

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_nightstand_102(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(remote_control,nightstand_instance)
        else:
            exp(remote_control,nightstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,nightstand_instance]=True
        close[nightstand_instance,remote_control]=True
    

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_lights_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        # Ensure the light is plugged in before turning it on
        if has_plug(light) and not plugged(light):
            plugin(light)
        if is_off(light):
            switch_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom) # Select the bedroom
        bind bathroom: item where:
            is_bathroom(bathroom) # Select the bathroom
        # Turn on the lights in the bedroom
        turn_on_lights_in_room(bedroom)
        # Turn on the lights in the bathroom
        turn_on_lights_in_room(bathroom)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_lights_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        # Ensure the light is plugged in before turning it on
        if has_plug(light) and not plugged(light):
            plugin(light)
        if is_off(light):
            switch_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom) # Select the bedroom
        bind bathroom: item where:
            is_bathroom(bathroom) # Select the bathroom
        # Turn on the lights in the bedroom
        turn_on_lights_in_room(bedroom)
        # Turn on the lights in the bathroom
        turn_on_lights_in_room(bathroom)

##############################
From agent.py-> find a plan in act()
walk_executor(light_169)switchon_executor(light_169)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the lights in the bedroom. Then turn on the lights in the bathroom.
Action History:
['walk_executor(light_169)', 'switchon_executor(light_169)', 'walk_executor(light_64)', 'switchon_executor(light_64)']
Time info:
Time consume: 31 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 4

Task complete rate:
1
Scene_id: 0
##############################
