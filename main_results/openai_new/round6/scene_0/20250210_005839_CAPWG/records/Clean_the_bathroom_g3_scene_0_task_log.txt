From agent.py
Reset goals: The sub-goals are: 
['1. Locate the toilet paper.', '2. Wipe the toilet.', '3. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def has_toilet_paper_location_known():
    # Function to check if the location of the toilet paper is already known
    symbol paper_found=exists toilet_paper: item : (is_toilet_paper(toilet_paper) and visited(toilet_paper))
    return paper_found

behavior locate_toilet_paper(toilet_paper:item):
    body:
        if not visited(toilet_paper):
            observe(toilet_paper, "Verify the location of the toilet paper")
            # Observe to confirm the location

behavior __goal__():
    body:
        if has_toilet_paper_location_known():
            # If toilet papers location is already known, do nothing
            pass
        else:
            # Look for the toilet paper in all unvisited places
            foreach toilet_paper: item:
                if is_toilet_paper(toilet_paper) and not visited(toilet_paper):
                    locate_toilet_paper(toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

behavior locate_toilet_paper():
    body:
        foreach item: item:
            if is_toilet_paper(item) and not visited(item):
                observe(item, "Check if it is toilet paper")
                if is_toilet_paper(item):
                    return

behavior __goal__():
    body:
        locate_toilet_paper()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

behavior locate_toilet_paper(toilet_paper:item):
    body:
        if not visited(toilet_paper):
            observe(toilet_paper, "Locate the toilet paper")

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        locate_toilet_paper(toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior locate_toilet_paper(toilet_paper:item):
    body:
        if not visited(toilet_paper):
            observe(toilet_paper, "Locate the toilet paper")

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        locate_toilet_paper(toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_37)open_executor(toilet_37)exp(toilet_paper_2090, toilet_37)walk_executor(toilet_paper_2090)obs(toilet_paper_2090, Locate the toilet paper)
##############################
From agent.py
walk_executor(toilet_37)
Robot find: toilet_paper_2090, Robot is close to the toilet_37. 
##############################
From agent.py
open_executor(toilet_37)
Robot find: Robot is close to the toilet_37. toilet_37 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, toilet_37)
Find toilet_paper_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2090)obs(toilet_paper_2090, Locate the toilet paper)
##############################
From agent.py
walk_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. 
##############################
From agent.py
obs(toilet_paper_2090, Locate the toilet paper)
Get this information:  toilet_paper_2090 is inside bathroom_1. toilet_paper_2090 is close to toilet_37. toilet_paper_2090 is close to character_65. toilet_paper_2090 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_2057_around_shower_38(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Bind toilet paper with ID 2090 from the information provided
        
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Bind toilet with ID 37 from the information provided
        
        walk_to(toilet_paper)
        # Walk to the location of the toilet paper
        
        grab(toilet_paper)
        # Grab the toilet paper
        
        walk_to(toilet)
        # Walk to the toilet
        
        wipe(toilet)
        # Perform the wiping action on the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Bind toilet paper with ID 2090 from the information provided
        
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Bind toilet with ID 37 from the information provided
        
        walk_to(toilet_paper)
        # Walk to the location of the toilet paper
        
        grab(toilet_paper)
        # Grab the toilet paper
        
        walk_to(toilet)
        # Walk to the toilet
        
        wipe(toilet)
        # Perform the wiping action on the toilet

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)wipe_executor(toilet_37)
##############################
From agent.py
walk_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. 
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
walk_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
wipe_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_in_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        throw_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior throw_in_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        throw_in_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_37)', 'open_executor(toilet_37)', 'walk_executor(toilet_paper_2090)', 'walk_executor(toilet_paper_2090)', 'grab_executor(toilet_paper_2090)', 'walk_executor(toilet_37)', 'wipe_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)']
Time info:
Time consume: 81 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 0
##############################
