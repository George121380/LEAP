From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_soap_2054_around_shower_38(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior rinse_item(item: item):
    body:
        rinse(item)

behavior clean_chicken_and_onion(chicken: item, onion: item):
    body:
        wash_item(chicken)
        rinse_item(chicken)
        wash_item(onion)
        rinse_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_chicken_and_onion(chicken, onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior rinse_item(item: item):
    body:
        rinse(item)

behavior clean_chicken_and_onion(chicken: item, onion: item):
    body:
        wash_item(chicken)
        rinse_item(chicken)
        wash_item(onion)
        rinse_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_chicken_and_onion(chicken, onion)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)rinse_executor(food_chicken_2017)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)rinse_executor(food_onion_2032)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
rinse_executor(food_chicken_2017)rinse_executor(food_onion_2032)
##############################
From agent.py
rinse_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
rinse_executor(food_onion_2032)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wash the chicken and onion in addition to rinsing them to complete the cleaning process.
##############################
From agent.py
Human Instruction: The robot needs to wash the chicken and onion in addition to rinsing them to complete the cleaning process.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_chicken_2017 around fridge_289.
Action 5: Rinse food_chicken_2017.
Action 6: Rinse food_onion_2032.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_rinse(item:item):
    body:
        if dirty(item):
            wash(item)
        rinse(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion instance
        clean_and_rinse(chicken)
        clean_and_rinse(onion)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_and_rinse(item:item):
    body:
        if dirty(item):
            wash(item)
        rinse(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion instance
        clean_and_rinse(chicken)
        clean_and_rinse(onion)

##############################
From agent.py-> find a plan in act()
rinse_executor(food_chicken_2017)rinse_executor(food_onion_2032)
##############################
From agent.py
rinse_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
rinse_executor(food_onion_2032)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the chicken and onion in addition to rinsing them to complete the cleaning process.
##############################
From agent.py
Human Instruction: You need to wash the chicken and onion in addition to rinsing them to complete the cleaning process.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_chicken_2017 around fridge_289.
Action 5: Rinse food_chicken_2017.
Action 6: Rinse food_onion_2032.
Action 7: Rinse food_chicken_2017.
Action 8: Rinse food_onion_2032.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def clean_chicken_and_onion(chicken:item, onion:item):
    # Function to clean both chicken and onion
    if dirty(chicken) and is_food_chicken(chicken):
        rinse(chicken)
        wash(chicken)
    if dirty(onion) and is_food_onion(onion):
        rinse(onion)
        wash(onion)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken as a food item
        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select onion as a food item
        clean_chicken_and_onion(food_chicken, food_onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior clean_onion(onion:item):
    body:
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2017
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032

        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_cupboard_229(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior clean_onion(onion:item):
    body:
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        bind food_onion: item where:
            is_food_onion(food_onion)

        clean_chicken(food_chicken)
        clean_onion(food_onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)
            # Wash the chicken to clean it if its dirty
            
behavior clean_onion(onion:item):
    body:
        if dirty(onion):
            wash(onion)
            # Wash the onion to clean it if its dirty
            
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(obj:item):
    body:
        if dirty(obj):
            wash(obj)
        if not clean(obj):
            scrub(obj)
        if not clean(obj):
            rinse(obj)

behavior clean_chicken_and_onion(chicken:item, onion:item):
    body:
        wash_item(chicken)
        wash_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_chicken_and_onion(chicken, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_cupboard_229(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean(item:item):
    body:
        if dirty(item):
            wash(item)
        if dirty(item):
            scrub(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion
        
        clean(chicken)
        clean(onion)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: Put the chicken and onion in the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def has_been_washed(obj:item):
    symbol washed=exists o: item : (clean(o) and id[o] == id[obj])
    return washed

behavior wash_items(o:item):
    body:
        if not has_been_washed(o):
            wash(o)

behavior grab_for_oven(o:item):
    body:
        if not inhand(o) and has_a_free_hand(char):
            grab(o)

behavior place_in_oven(o:item, oven:item):
    body:
        if not inside(o, oven):
            put_inside(o, oven)

behavior prepare_and_roast(chicken:item, onion:item, oven:item):
    body:
        wash_items(chicken) # Ensure the chicken is washed
        wash_items(onion) # Ensure the onion is washed
        grab_for_oven(chicken)
        grab_for_oven(onion)
        place_in_oven(chicken, oven)
        place_in_oven(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)

        prepare_and_roast(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_been_washed(obj:item):
    symbol washed=exists o: item : (clean(o) and id[o] == id[obj])
    return washed

behavior wash_items(o:item):
    body:
        if not has_been_washed(o):
            wash(o)

behavior grab_for_oven(o:item):
    body:
        if not inhand(o) and has_a_free_hand(char):
            grab(o)

behavior place_in_oven(o:item, oven:item):
    body:
        if not inside(o, oven):
            put_inside(o, oven)

behavior prepare_and_roast(chicken:item, onion:item, oven:item):
    body:
        wash_items(chicken) # Ensure the chicken is washed
        wash_items(onion) # Ensure the onion is washed
        grab_for_oven(chicken)
        grab_for_oven(onion)
        place_in_oven(chicken, oven)
        place_in_oven(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)

        prepare_and_roast(chicken, onion, oven)

##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_chicken_2017, kitchen_counter_230)walk_executor(oven_295)open_executor(oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, kitchen_counter_230)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_chicken_2017. food_chicken_2017 is close kitchen_counter_230. food_chicken_2017 is on kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the kitchen_counter_230. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. food_onion_2032 is inside oven_295. oven_295 is close food_onion_2032. food_onion_2032 is close oven_295. food_onion_2032 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The chicken and onion have been placed into the oven, but they have not been washed as required. You need to wash the chicken and onion in addition to rinsing them to complete the cleaning process before placing them into the oven.
##############################
From agent.py
Human Instruction: The chicken and onion have been placed into the oven, but they have not been washed as required. You need to wash the chicken and onion in addition to rinsing them to complete the cleaning process before placing them into the oven.

Human Guidance: Put the chicken and onion in the oven.
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_chicken_2017 around fridge_289.
Action 5: Rinse food_chicken_2017.
Action 6: Rinse food_onion_2032.
Action 7: Rinse food_chicken_2017.
Action 8: Rinse food_onion_2032.
Action 9: Grab food_chicken_2017.
Action 10: Grab food_onion_2032.
Action 11: Walk to kitchen_counter_230.
Action 12: Put food_chicken_2017 on kitchen_counter_230.
Action 13: Walk to oven_295.
Action 14: Open oven_295.
Action 15: Walk to food_chicken_2017.
Action 16: Grab food_chicken_2017.
Action 17: Walk to oven_295.
Action 18: Put food_chicken_2017 into oven_295.
Action 19: Put food_onion_2032 into oven_295.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_items(item1:item, item2:item):
    body:
        if dirty(item1):
            wash(item1)
        if dirty(item2):
            wash(item2)
            
behavior put_into_oven(item1:item, item2:item, oven:item):
    body:
        if not inside(item1, oven):
            put_inside(item1, oven)
        if not inside(item2, oven):
            put_inside(item2, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        
        wash_items(chicken, onion)
        put_into_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_items(chicken:item, onion:item):
    body:
        if dirty(chicken):
            wash(chicken)
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        wash_items(chicken, onion)
        bind oven: item where:
            is_oven(oven)
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_clean(obj: item):
    body:
        if not clean(obj):
            wash(obj)
            # Clean the item by washing it

behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        ensure_clean(chicken)
        ensure_clean(onion)
        if open(oven):
            put_inside(chicken, oven)
            put_inside(onion, oven)
        
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_clean(obj: item):
    body:
        if not clean(obj):
            wash(obj)
            # Clean the item by washing it

behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        ensure_clean(chicken)
        ensure_clean(onion)
        if open(oven):
            put_inside(chicken, oven)
            put_inside(onion, oven)
        
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)

##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)putin_executor(food_chicken_2017, oven_295)grab_executor(food_onion_2032)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. food_onion_2032 is inside oven_295. food_onion_2032 is close oven_295. food_onion_2032 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the chicken and onion before placing them into the oven as they were only rinsed and not washed.
##############################
From agent.py
Human Instruction: You need to wash the chicken and onion before placing them into the oven as they were only rinsed and not washed.

Human Guidance: Put the chicken and onion in the oven.
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_chicken_2017 around fridge_289.
Action 5: Rinse food_chicken_2017.
Action 6: Rinse food_onion_2032.
Action 7: Rinse food_chicken_2017.
Action 8: Rinse food_onion_2032.
Action 9: Grab food_chicken_2017.
Action 10: Grab food_onion_2032.
Action 11: Walk to kitchen_counter_230.
Action 12: Put food_chicken_2017 on kitchen_counter_230.
Action 13: Walk to oven_295.
Action 14: Open oven_295.
Action 15: Walk to food_chicken_2017.
Action 16: Grab food_chicken_2017.
Action 17: Walk to oven_295.
Action 18: Put food_chicken_2017 into oven_295.
Action 19: Put food_onion_2032 into oven_295.
Action 20: Grab food_chicken_2017.
Action 21: Put food_chicken_2017 into oven_295.
Action 22: Grab food_onion_2032.
Action 23: Put food_onion_2032 into oven_295.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_and_grabbable(obj: item):
    symbol is_clean_grabbable = clean(obj) and grabbable(obj)
    return is_clean_grabbable

behavior wash_until_clean(obj:item):
    body:
        if dirty(obj):
            wash(obj)

behavior grab_items_oven(chicken:item, onion:item, oven:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inhand(onion):
            grab(onion)
        if inside(chicken, oven) or inside(onion, oven):
            empty_a_hand()
        if inhand(chicken) and inhand(onion):
            walk_to(oven)
            put_inside(chicken, oven)
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        if not is_clean_and_grabbable(chicken):
            wash_until_clean(chicken)
        if not is_clean_and_grabbable(onion):
            wash_until_clean(onion)
        walk_to(chicken)
        grab(chicken)
        walk_to(onion)
        grab(onion)
        walk_to(oven)
        grab_items_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_clean_and_grabbable(obj: item):
    symbol is_clean_grabbable = clean(obj) and grabbable(obj)
    return is_clean_grabbable

behavior wash_until_clean(obj:item):
    body:
        if dirty(obj):
            wash(obj)

behavior grab_items_oven(chicken:item, onion:item, oven:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inhand(onion):
            grab(onion)
        if inside(chicken, oven) or inside(onion, oven):
            empty_a_hand()
        if inhand(chicken) and inhand(onion):
            walk_to(oven)
            put_inside(chicken, oven)
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        if not is_clean_and_grabbable(chicken):
            wash_until_clean(chicken)
        if not is_clean_and_grabbable(onion):
            wash_until_clean(onion)
        walk_to(chicken)
        grab(chicken)
        walk_to(onion)
        grab(onion)
        walk_to(oven)
        grab_items_oven(chicken, onion, oven)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. Robot is close to the tray_296. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. Robot is close to the tray_296. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. Robot is close to the tray_296. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. Robot is close to the food_onion_2032. Robot is close to the tray_296. food_onion_2032 is inside oven_295. food_onion_2032 is close oven_295. food_onion_2032 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the chicken and onion properly before placing them into the oven, as they were only rinsed.
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'rinse_executor(food_chicken_2017)', 'rinse_executor(food_onion_2032)', 'rinse_executor(food_chicken_2017)', 'rinse_executor(food_onion_2032)', 'grab_executor(food_chicken_2017)', 'grab_executor(food_onion_2032)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_chicken_2017, kitchen_counter_230)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'putin_executor(food_onion_2032, oven_295)', 'grab_executor(food_chicken_2017)', 'putin_executor(food_chicken_2017, oven_295)', 'grab_executor(food_onion_2032)', 'putin_executor(food_onion_2032, oven_295)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(oven_295)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'putin_executor(food_onion_2032, oven_295)']
Time info:
Time consume: 255 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 13
goal correct times: 0
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
