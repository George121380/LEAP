From agent.py
Reset goals: The sub-goals are: 
['1. Iron the shirt.', '2. Iron the skirt.', '3. Place the shirt and skirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_ironing_board_2074(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        if not clean(shirt):
            put_on(shirt, ironing_board) # Place the shirt on the ironing board
            if is_off(iron):
                switch_on(iron) # Turn on the iron
            if not inhand(iron):
                grab(iron) # Grab the iron to iron the shirt
            if not clean(shirt):
                wipe(shirt) # Iron the shirt by wiping it with the iron
            empty_a_hand() # Release the iron after use
            switch_off(iron) # Turn off the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt to iron
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_unplugged(iron:item):
    # Function to check if an iron is unplugged
    symbol unplugged_status = unplugged(iron)
    return unplugged_status

behavior prepare_iron_for_ironing(iron:item):
    body:
        if is_unplugged(iron):
            plugin(iron)
            # Plug in the iron if it is unplugged
        if is_off(iron):
            switch_on(iron)
            # Turn on the iron if it is off

behavior pick_up_shirt(shirt:item):
    body:
        if not inhand(shirt):
            grab(shirt)
            # Pick up the shirt if not already in hand

behavior iron_clothing(iron:item, clothing:item):
    body:
        pick_up_shirt(clothing)
        # Call behavior to pick up the shirt
        prepare_iron_for_ironing(iron)
        # Ensure iron is ready for ironing
        # Assuming the ironing action
        empty_a_hand()
        # Empty hand after ironing is completed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to iron
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        iron_clothing(iron, shirt)
        # Iron the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_ironing_board_2074(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_iron_ready(iron:item):
    body:
        if has_plug(iron) and unplugged(iron):
            plugin(iron)
        if has_switch(iron) and is_off(iron):
            switch_on(iron)

behavior iron_clothes(clothes:item, board:item):
    body:
        if not on(clothes, board):
            put_on(clothes, board)
        if not clean(clothes):
            observe(clothes,"Check if its necessary to clean or proceed with ironing")

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)

        walk_to(ironing_board)
        get_iron_ready(iron)
        iron_clothes(clothes_shirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior get_iron_ready(iron:item):
    body:
        if has_plug(iron) and unplugged(iron):
            plugin(iron)
        if has_switch(iron) and is_off(iron):
            switch_on(iron)

behavior iron_clothes(clothes:item, board:item):
    body:
        if not on(clothes, board):
            put_on(clothes, board)
        if not clean(clothes):
            observe(clothes,"Check if its necessary to clean or proceed with ironing")

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)

        walk_to(ironing_board)
        get_iron_ready(iron)
        iron_clothes(clothes_shirt, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(clothes_shirt_2086, ironing_board_2074)
Fail to find clothes_shirt_2086 around ironing_board_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. iron_2089 is turned on. 
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)
Get this information:  clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is close to ironing_board_2074. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The shirt is dirty and needs to be cleaned before it can be ironed. Ensure the shirt is clean and then proceed with ironing it.
##############################
From agent.py
Human Instruction: The shirt is dirty and needs to be cleaned before it can be ironed. Ensure the shirt is clean and then proceed with ironing it.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to ironing_board_2074.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Walk to ironing_board_2074.
Action 9: Walk to clothes_shirt_2086.
Action 10: Grab clothes_shirt_2086.
Action 11: Walk to ironing_board_2074.
Action 12: Put clothes_shirt_2086 on ironing_board_2074.
Action 13: Walk to clothes_shirt_2086.
Action 14: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_shirt(shirt: item):
    return clean(shirt)

behavior check_if_clean(shirt: item):
    body:
        if not visited(shirt):
            observe(shirt, "Check if its necessary to clean or proceed with ironing")

behavior clean_shirt(shirt: item):
    body:
        if dirty(shirt):
            wash(shirt)
            scrub(shirt)
            rinse(shirt)

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        if not is_on(iron):
            plugin(iron)
            switch_on(iron)
        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)
        # Additional ironing logic could be added here

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        check_if_clean(shirt)
        
        if not is_clean_shirt(shirt):
            clean_shirt(shirt)
            
        iron_shirt(shirt, iron, ironing_board)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_clean_shirt(shirt: item):
    return clean(shirt)

behavior check_if_clean(shirt: item):
    body:
        if not visited(shirt):
            observe(shirt, "Check if its necessary to clean or proceed with ironing")

behavior clean_shirt(shirt: item):
    body:
        if dirty(shirt):
            wash(shirt)
            scrub(shirt)
            rinse(shirt)

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        if not is_on(iron):
            plugin(iron)
            switch_on(iron)
        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)
        # Additional ironing logic could be added here

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        check_if_clean(shirt)
        
        if not is_clean_shirt(shirt):
            clean_shirt(shirt)
            
        iron_shirt(shirt, iron, ironing_board)


##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)walk_executor(clothes_shirt_2086)scrub_executor(clothes_shirt_2086)rinse_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)
##############################
From agent.py
obs(clothes_shirt_2086, Check if its necessary to clean or proceed with ironing)
Get this information:  clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is close to ironing_board_2074. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 is DIRTY.
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
scrub_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
rinse_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually iron clothes_shirt_2086, as currently, it has only been cleaned and placed on the ironing board.
##############################
From agent.py
Human Instruction: You need to actually iron clothes_shirt_2086, as currently, it has only been cleaned and placed on the ironing board.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to ironing_board_2074.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Walk to ironing_board_2074.
Action 9: Walk to clothes_shirt_2086.
Action 10: Grab clothes_shirt_2086.
Action 11: Walk to ironing_board_2074.
Action 12: Put clothes_shirt_2086 on ironing_board_2074.
Action 13: Walk to clothes_shirt_2086.
Action 14: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 15: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 16: Grab clothes_shirt_2086.
Action 17: Walk to faucet_43.
Action 18: Switch on faucet_43.
Action 19: Wash clothes_shirt_2086.
Action 20: Switch off faucet_43.
Action 21: Walk to clothes_shirt_2086.
Action 22: Scrub clothes_shirt_2086.
Action 23: Rinse clothes_shirt_2086.
Action 24: Walk to ironing_board_2074.
Action 25: Put clothes_shirt_2086 on ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior grab_shirt(shirt:item):
    body:
        if not inhand(shirt):
            grab(shirt)

behavior plug_in_iron(iron:item):
    body:
        if is_iron(iron) and not plugged(iron):
            plugin(iron)

behavior turn_on_iron(iron:item):
    body:
        if is_iron(iron) and is_off(iron):
            switch_on(iron)
            
behavior put_shirt_on_board(shirt:item, ironing_board:item):
    body:
        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)

behavior iron_shirt(shirt:item, iron:item):
    body:
        if not clean(shirt):
            touch(shirt) # Simulates ironing action

behavior __goal__():
    body:    
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        bind iron: item where:
            is_iron(iron) and id[iron]==2089

        walk_to(ironing_board)
        grab_shirt(shirt)
        put_shirt_on_board(shirt, ironing_board)
        plug_in_iron(iron)
        turn_on_iron(iron)
        walk_to(shirt)
        iron_shirt(shirt, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_shirt(shirt:item):
    body:
        if not inhand(shirt):
            grab(shirt)

behavior plug_in_iron(iron:item):
    body:
        if is_iron(iron) and not plugged(iron):
            plugin(iron)

behavior turn_on_iron(iron:item):
    body:
        if is_iron(iron) and is_off(iron):
            switch_on(iron)
            
behavior put_shirt_on_board(shirt:item, ironing_board:item):
    body:
        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)

behavior iron_shirt(shirt:item, iron:item):
    body:
        if not clean(shirt):
            touch(shirt) # Simulates ironing action

behavior __goal__():
    body:    
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        bind iron: item where:
            is_iron(iron) and id[iron]==2089

        walk_to(ironing_board)
        grab_shirt(shirt)
        put_shirt_on_board(shirt, ironing_board)
        plug_in_iron(iron)
        turn_on_iron(iron)
        walk_to(shirt)
        iron_shirt(shirt, iron)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)grab_executor(clothes_shirt_2086)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually iron clothes_shirt_2086, as it has not been ironed yet. Use the iron to perform the ironing action on the shirt.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_377(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not clean(skirt) and close_char(char, ironing_board):
            put_on(skirt, ironing_board)
            # Place the skirt on the ironing board
        if plugged(iron) and is_on(iron) and close_char(char, ironing_board) and on(skirt, ironing_board):
            scrub(skirt)
            # Iron the skirt by scrubbing
        else:
            walk_to(ironing_board)
            # Walk to the ironing board if not close to it

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        iron_skirt(skirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not clean(skirt) and close_char(char, ironing_board):
            put_on(skirt, ironing_board)
            # Place the skirt on the ironing board
        if plugged(iron) and is_on(iron) and close_char(char, ironing_board) and on(skirt, ironing_board):
            scrub(skirt)
            # Iron the skirt by scrubbing
        else:
            walk_to(ironing_board)
            # Walk to the ironing board if not close to it

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        iron_skirt(skirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)walk_executor(clothes_skirt_2088)scrub_executor(clothes_skirt_2088)
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_skirt_2088 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_skirt_2088. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
scrub_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. clothes_skirt_2088 is cleaned. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually iron the skirt. The skirt has been placed on the ironing board and cleaned, but it needs to be ironed with the iron by scrubbing.
##############################
From agent.py
Human Instruction: You need to actually iron the skirt. The skirt has been placed on the ironing board and cleaned, but it needs to be ironed with the iron by scrubbing.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to ironing_board_2074.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Walk to ironing_board_2074.
Action 9: Walk to clothes_shirt_2086.
Action 10: Grab clothes_shirt_2086.
Action 11: Walk to ironing_board_2074.
Action 12: Put clothes_shirt_2086 on ironing_board_2074.
Action 13: Walk to clothes_shirt_2086.
Action 14: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 15: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 16: Grab clothes_shirt_2086.
Action 17: Walk to faucet_43.
Action 18: Switch on faucet_43.
Action 19: Wash clothes_shirt_2086.
Action 20: Switch off faucet_43.
Action 21: Walk to clothes_shirt_2086.
Action 22: Scrub clothes_shirt_2086.
Action 23: Rinse clothes_shirt_2086.
Action 24: Walk to ironing_board_2074.
Action 25: Put clothes_shirt_2086 on ironing_board_2074.
Action 26: Walk to ironing_board_2074.
Action 27: Grab clothes_shirt_2086.
Action 28: Put clothes_shirt_2086 on ironing_board_2074.
Action 29: Walk to clothes_shirt_2086.
Action 30: Walk to clothes_skirt_2088.
Action 31: Grab clothes_skirt_2088.
Action 32: Walk to ironing_board_2074.
Action 33: Put clothes_skirt_2088 on ironing_board_2074.
Action 34: Walk to clothes_skirt_2088.
Action 35: Scrub clothes_skirt_2088.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt:item, ironing_board:item, iron:item):
    body:
        if not clean(skirt):
            if not close_char(char, ironing_board):
                walk_to(ironing_board)
            if not plugged(iron):
                plugin(iron)
            if not is_on(iron):
                switch_on(iron)
            scrub(skirt)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        iron_skirt(skirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior scrub_skirt(skirt:item):
    body:
        if clean(skirt):
            return
        if is_clothes(skirt):
            scrub(skirt)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt that needs to be ironed
        scrub_skirt(skirt)
        # Iron the skirt by scrubbing

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not clean(skirt):
            scrub(skirt)
            # Scrub the skirt to make it clean

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt

        bind iron: item where:
            is_iron(iron) and is_on(iron)
        # Select the iron thats on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_skirt(skirt, iron, ironing_board)
        # Iron the skirt on the ironing board using the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior ensure_iron_is_ready(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior iron_skirt(skirt:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)
        scrub(skirt)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        ensure_iron_is_ready(iron)

        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        iron_skirt(skirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_iron_is_ready(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior iron_skirt(skirt:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)
        scrub(skirt)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        ensure_iron_is_ready(iron)

        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        iron_skirt(skirt, ironing_board)

##############################
From agent.py-> find a plan in act()
scrub_executor(clothes_skirt_2088)
##############################
From agent.py
scrub_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually iron the skirt. The skirt has been placed on the ironing board and cleaned, but it needs to be ironed with the iron by scrubbing. Ensure you use the iron to scrub the skirt as required for ironing.
##############################
From agent.py
Human Instruction: You need to actually iron the skirt. The skirt has been placed on the ironing board and cleaned, but it needs to be ironed with the iron by scrubbing. Ensure you use the iron to scrub the skirt as required for ironing.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to ironing_board_2074.
Action 4: Plug in iron_2089.
Action 5: Switch on iron_2089.
Action 6: Walk to basket_for_clothes_2006.
Action 7: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 8: Walk to ironing_board_2074.
Action 9: Walk to clothes_shirt_2086.
Action 10: Grab clothes_shirt_2086.
Action 11: Walk to ironing_board_2074.
Action 12: Put clothes_shirt_2086 on ironing_board_2074.
Action 13: Walk to clothes_shirt_2086.
Action 14: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 15: Observe around clothes_shirt_2086 with the question of Check if its necessary to clean or proceed with ironing.
Action 16: Grab clothes_shirt_2086.
Action 17: Walk to faucet_43.
Action 18: Switch on faucet_43.
Action 19: Wash clothes_shirt_2086.
Action 20: Switch off faucet_43.
Action 21: Walk to clothes_shirt_2086.
Action 22: Scrub clothes_shirt_2086.
Action 23: Rinse clothes_shirt_2086.
Action 24: Walk to ironing_board_2074.
Action 25: Put clothes_shirt_2086 on ironing_board_2074.
Action 26: Walk to ironing_board_2074.
Action 27: Grab clothes_shirt_2086.
Action 28: Put clothes_shirt_2086 on ironing_board_2074.
Action 29: Walk to clothes_shirt_2086.
Action 30: Walk to clothes_skirt_2088.
Action 31: Grab clothes_skirt_2088.
Action 32: Walk to ironing_board_2074.
Action 33: Put clothes_skirt_2088 on ironing_board_2074.
Action 34: Walk to clothes_skirt_2088.
Action 35: Scrub clothes_skirt_2088.
Action 36: Scrub clothes_skirt_2088.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt:item, iron:item):
    body:
        if not clean(skirt):
            scrub(skirt)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if not is_on(iron):
            # Ensure the iron is turned on before ironing
            switch_on(iron)

        iron_skirt(skirt, iron)
        # Iron the skirt using the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_skirt(skirt: item, iron: item):
    body:
        if not clean(skirt):
            scrub(skirt)
            # Scrub the skirt with the iron

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Select the skirt placed on the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron)
        # Select the iron that is turned on

        iron_skirt(skirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior setup_iron_and_board(iron:item, ironing_board:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        if not close_char(char, ironing_board):
            walk_to(ironing_board)

behavior iron_clothes_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)
        scrub(skirt) # Iron the skirt

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        
        setup_iron_and_board(iron, ironing_board)
        iron_clothes_skirt(clothes_skirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior setup_iron_and_board(iron:item, ironing_board:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        if not close_char(char, ironing_board):
            walk_to(ironing_board)

behavior iron_clothes_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)
        scrub(skirt) # Iron the skirt

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        
        setup_iron_and_board(iron, ironing_board)
        iron_clothes_skirt(clothes_skirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
scrub_executor(clothes_skirt_2088)
##############################
From agent.py
scrub_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to use the iron to scrub the skirt for it to be considered ironed. The actions listed involve scrubbing, but there is no indication that the iron was used for this purpose. Ensure the iron is used to iron the skirt.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_towel_2059_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_bed(inhand_obj: item, bed: item):
    body:
        if not on(inhand_obj, bed):
            put_on(inhand_obj, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select shirt
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select skirt

        bind bed: item where:
            is_bed(bed)
        # Select bed

        if not inhand(shirt):
            grab(shirt)
        if inhand(shirt):
            place_on_bed(shirt, bed)
            empty_a_hand()

        if not inhand(skirt):
            grab(skirt)
        if inhand(skirt):
            place_on_bed(skirt, bed)
            empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_clothes_to_bed(clothes:item, bed:item):
    body:
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind bed: item where:
            is_bed(bed)
        move_clothes_to_bed(shirt, bed)
        move_clothes_to_bed(skirt, bed)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_clothes_to_bed(clothes:item, bed:item):
    body:
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind bed: item where:
            is_bed(bed)
        move_clothes_to_bed(shirt, bed)
        move_clothes_to_bed(skirt, bed)

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(bed_105)put_executor(clothes_shirt_2086, bed_105)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(bed_105)put_executor(clothes_skirt_2088, bed_105)
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the clothes_shirt_2086. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(bed_105)
Robot find: mat_173, drawing_176, pillow_183, clothes_underwear_2049, clothes_dress_2044, pillow_182, chair_106, clothes_scarf_2048, Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. 
##############################
From agent.py
put_executor(clothes_shirt_2086, bed_105)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. bed_105 is close clothes_shirt_2086. clothes_shirt_2086 is close bed_105. clothes_shirt_2086 is on bed_105. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. Grabbing clothes_skirt_2088 by right hand. 
##############################
From agent.py
walk_executor(bed_105)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the bed_105. Robot is close to the mat_173. 
##############################
From agent.py
put_executor(clothes_skirt_2088, bed_105)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the bed_105. Robot is close to the mat_173. bed_105 is close clothes_skirt_2088. clothes_skirt_2088 is close bed_105. clothes_skirt_2088 is on bed_105. clothes_skirt_2088 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt, and place them on the bed.
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(ironing_board_2074)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(basket_for_clothes_2006)', 'walk_executor(ironing_board_2074)', 'walk_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(clothes_shirt_2086)', 'scrub_executor(clothes_shirt_2086)', 'rinse_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(ironing_board_2074)', 'grab_executor(clothes_shirt_2086)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(clothes_shirt_2086)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)', 'walk_executor(clothes_skirt_2088)', 'scrub_executor(clothes_skirt_2088)', 'scrub_executor(clothes_skirt_2088)', 'scrub_executor(clothes_skirt_2088)', 'walk_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(bed_105)', 'put_executor(clothes_shirt_2086, bed_105)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(bed_105)', 'put_executor(clothes_skirt_2088, bed_105)']
Time info:
Time consume: 381 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 15
goal correct times: 0
action_num: 41

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 6 steps
Keystate: k3 - Requires: 0 steps
Keystate: k4 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
