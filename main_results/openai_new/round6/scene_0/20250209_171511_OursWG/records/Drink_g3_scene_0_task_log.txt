From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with water.', '2. Slice a kiwi and add the slices to the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup():
    body:
        foreach item: item:
            if is_cup(item) and not visited(item):
                observe(item, "Determine if this is a cup")

behavior find_faucet():
    body:
        foreach item: item:
            if is_faucet(item) and not visited(item):
                observe(item, "Determine if this is a faucet")

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Ensure character is close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(cup) # Fill the cup with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior __goal__():
    body:
        find_cup() # Find a cup
        bind cup: item where:
            is_cup(cup) and visited(cup)
        # Select a cup that has been found 

        find_faucet() # Find a faucet
        bind faucet: item where:
            is_faucet(faucet) and visited(faucet)
        # Select a faucet that has been found 

        fill_cup_with_water(cup, faucet) # Fill the cup with water

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2023_around_cupboard_229(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_fruit,cupboard_instance)
        else:
            exp(food_fruit,cupboard_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,cupboard_instance]=True
        close[cupboard_instance,food_fruit]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_cup_and_fill_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure character is close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve has_water(cup)
        # Fill the cup with water
        achieve_once is_off(faucet)
        # Turn off the faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        locate_cup_and_fill_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2023_around_kitchen_counter_230(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, cup)
        achieve close_char(char, faucet)
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach item: item:
            if (is_cup(item) or is_faucet(item)) and not visited(item):
                observe(item, "Identify if this is a cup or faucet")

        bind cup: item where:
            is_cup(cup) and visited(cup)

        bind faucet: item where:
            is_faucet(faucet) and visited(faucet)

        find_and_fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find a cup and fill it with water." ?
Answer: Grab a cup and get close to a faucet. Then turn on the faucet to fill the cup with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move character close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(cup) # Fill the cup with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once inhand(cup) # Hold the cup
        achieve close_char(char, faucet) # Move close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve_once has_water(cup) # Fill the cup with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Fail to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(cup_2063, wallshelf_234)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: drawing_243, drawing_241, drawing_240, drawing_238, drawing_239, drawing_242, Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(cup_2063, wallshelf_234)
Fail to find cup_2063 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_clothes_socks_2087_around_closetdrawer_382(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, knife:item, cutting_board:item, cup:item):
    body:
        achieve_once on(kiwi, cutting_board) 
        # Place the kiwi on the cutting board
        achieve_once inhand(knife)
        # Hold the knife to slice the kiwi
        achieve cut(kiwi)
        # Cut the kiwi
        achieve_once inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063
        
        slice_kiwi_and_add_to_cup(kiwi, knife, cutting_board, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, knife:item, cutting_board:item, cup:item):
    body:
        achieve_once on(kiwi, cutting_board) 
        # Place the kiwi on the cutting board
        achieve_once inhand(knife)
        # Hold the knife to slice the kiwi
        achieve cut(kiwi)
        # Cut the kiwi
        achieve_once inside(kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063
        
        slice_kiwi_and_add_to_cup(kiwi, knife, cutting_board, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_kiwi_2027, fridge_289)
Find food_kiwi_2027. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_kiwi_2027, cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_kiwi_2027. food_kiwi_2027 is close cutting_board_2051. food_kiwi_2027 is on cutting_board_2051. food_kiwi_2027 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
cut_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_tvstand_225(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(bowl,tvstand_instance)
        else:
            exp(bowl,tvstand_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tvstand_instance]=True
        close[tvstand_instance,bowl]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, cup:item):
    body:
        achieve_once on(food_kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the kiwi
        achieve cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup)
        # Select the cup with water already in it

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_kiwi_and_add_to_cup(food_kiwi, cup)
        # Slice the kiwi and add the slices to the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [Variable<food_kiwi: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(food_kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the kiwi
        achieve cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup)
        # Select the cup with water already in it

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_kiwi_and_add_to_cup(food_kiwi, cup, knife, cutting_board)
        # Slice the kiwi and add the slices to the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(food_kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the kiwi
        achieve cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup)
        # Select the cup with water already in it

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_kiwi_and_add_to_cup(food_kiwi, cup, knife, cutting_board)
        # Slice the kiwi and add the slices to the cup

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
putin_executor(food_kiwi_2027, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. food_kiwi_2027 is inside cup_2063. cup_2063 is close food_kiwi_2027. food_kiwi_2027 is close cup_2063. food_kiwi_2027 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cutting_board_2051)', 'put_executor(food_kiwi_2027, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_kiwi_2027)', 'cut_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cup_2063)', 'putin_executor(food_kiwi_2027, cup_2063)']
Time info:
Time consume: 153 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 32
goal generate times: 7
goal correct times: 1
action_num: 26

Task complete rate:
1
Scene_id: 0
##############################
