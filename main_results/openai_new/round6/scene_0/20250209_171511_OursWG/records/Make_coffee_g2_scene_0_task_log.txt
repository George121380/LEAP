From agent.py
Reset goals: The sub-goals are: 
['1. Brew a cup of coffee using the coffee maker.  ', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once is_on(coffee_maker)
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        brew_coffee(coffee_maker, cup)
        # Brew coffee using the selected coffee maker and cup

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once is_on(coffee_maker)
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        brew_coffee(coffee_maker, cup)
        # Brew coffee using the selected coffee maker and cup

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)exp(cup_2064, coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
exp(cup_2064, coffe_maker_290)
Find cup_2064. 
##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(cup_2064, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2064. cup_2064 is inside coffe_maker_290. cup_2064 is close coffe_maker_290. cup_2064 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the coffee maker is plugged in and has water before switching it on. These steps are necessary to brew coffee, but they were not completed.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the coffee maker is plugged in and has water before switching it on. These steps are necessary to brew coffee, but they were not completed.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: look for cup_2064 around coffe_maker_290.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.
Action 11: Switch off coffe_maker_290.
Action 12: Open coffe_maker_290.
Action 13: Walk to cup_2064.
Action 14: Grab cup_2064.
Action 15: Walk to coffe_maker_290.
Action 16: Put cup_2064 into coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_and_turn_on(coffeemaker:item):
    body:
        achieve_once plugged(coffeemaker) # Ensure the coffeemaker is plugged in
        achieve_once is_on(coffeemaker) # Turn on the coffeemaker

behavior add_water_to_coffeemaker(coffeemaker:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move character close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(coffeemaker) # Add water to the coffeemaker
        achieve_once is_off(faucet) # Turn off the faucet

behavior brew_coffee(coffeemaker:item):
    body:
        achieve closed(coffeemaker) # Ensure the coffeemaker is closed for brewing

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker) and id[coffeemaker]==290
        # Select the coffeemaker with ID 290

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==232
        # Select the faucet with ID 232

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select the cup with ID 2064

        add_water_to_coffeemaker(coffeemaker, faucet)
        plug_in_and_turn_on(coffeemaker)
        brew_coffee(coffeemaker)
        achieve_once inside(cup, coffeemaker) # Place the cup inside the coffeemaker for brewing

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffe_maker:item):
    body:
        achieve_once plugged(coffe_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_in_coffee_maker(coffe_maker:item, faucet:item):
    body:
        achieve_once has_water(coffe_maker)
        # Ensure the coffee maker has water

behavior brew_coffee(coffe_maker:item):
    body:
        achieve_once closed(coffe_maker) # Ensure the coffee maker is closed before brewing
        achieve_once is_on(coffe_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==232
        # Select the faucet

        plug_in_coffee_maker(coffe_maker)
        fill_water_in_coffee_maker(coffe_maker, faucet)
        brew_coffee(coffe_maker)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior plug_in_coffee_maker(coffe_maker:item):
    body:
        achieve_once plugged(coffe_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_in_coffee_maker(coffe_maker:item, faucet:item):
    body:
        achieve_once has_water(coffe_maker)
        # Ensure the coffee maker has water

behavior brew_coffee(coffe_maker:item):
    body:
        achieve_once closed(coffe_maker) # Ensure the coffee maker is closed before brewing
        achieve_once is_on(coffe_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==232
        # Select the faucet

        plug_in_coffee_maker(coffe_maker)
        fill_water_in_coffee_maker(coffe_maker, faucet)
        brew_coffee(coffe_maker)
 
##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to plug in the coffee maker and ensure that it contains water before switching it on to brew the coffee.
##############################
From agent.py
Human Instruction: The robot needs to plug in the coffee maker and ensure that it contains water before switching it on to brew the coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: look for cup_2064 around coffe_maker_290.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.
Action 11: Switch off coffe_maker_290.
Action 12: Open coffe_maker_290.
Action 13: Walk to cup_2064.
Action 14: Grab cup_2064.
Action 15: Walk to coffe_maker_290.
Action 16: Put cup_2064 into coffe_maker_290.
Action 17: Close coffe_maker_290.
Action 18: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=exists water_container: item : (is_faucet(water_container) and has_water(water_container))
    return has_water

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve_once closed(coffee_maker)
        # Close the coffee maker
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        brew_coffee(coffee_maker, cup)
        # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(coffee_maker:item):
    # Function to check if the coffee maker is on and has water
    return is_on(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_ready(coffee_maker:item):
    body:
        if has_plug(coffee_maker) and not plugged(coffee_maker):
            achieve_once plugged(coffee_maker)
            # Ensure the coffee maker is plugged in

        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
            # Ensure the coffee maker has water

        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on and brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        ensure_coffee_ready(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            achieve close_char(char, faucet)
            achieve_once is_on(faucet)
            achieve has_water(coffee_maker)
            achieve_once is_off(faucet)

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve close(cup, coffee_maker)
        achieve_once inside(cup, coffee_maker) 
        achieve_once closed(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and close_char(char, coffee_maker)
        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. brew a cup of coffee using the coffee maker.  " ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve_once close(cup, coffee_maker) # Ensure the cup is close to the coffee maker
        achieve_once inside(cup, coffee_maker) # Place the cup inside the coffee maker
        achieve has_water(coffee_maker) # Ensure the coffee maker contains water
        achieve_once closed(coffee_maker) # Close the coffee maker
        achieve_once is_on(coffee_maker) # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        brew_coffee(coffee_maker, cup)
        # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffe_maker(coffe_maker:item, powersocket:item):
    body:
        if unplugged(coffe_maker):
            achieve plugged(coffe_maker)
        achieve has_water(coffe_maker)
        # Ensure the coffee maker is plugged in and contains water

behavior brew_coffee(coffe_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffe_maker)
        # Place a cup inside the coffee maker
        achieve_once closed(coffe_maker)
        # Close the coffee maker
        achieve_once is_on(coffe_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select the cup with ID 2064

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket

        prepare_coffe_maker(coffe_maker, powersocket)
        brew_coffee(coffe_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is ready to brew coffee
    return plugged(coffee_maker) and has_water(coffee_maker) and closed(coffee_maker)

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Put the cup inside the coffee maker
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select the cup with ID 2064

        if not coffee_maker_ready(coffee_maker):
            achieve_once plugged(coffee_maker)
            # Ensure the coffee maker is plugged in
            observe(coffee_maker, "Check has water")
            observe(coffee_maker, "Check is closed")

        prepare_coffee(coffee_maker, cup)
        # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Place a suitably sized cup into the coffee maker and start brewing the coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior place_cup_in_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior start_brewing(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        place_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        start_brewing(coffee_maker)
        # Start brewing the coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_and_start_brewing(cup:item, coffe_maker:item):
    body:
        achieve_once inside(cup, coffe_maker)
        # Place the cup inside the coffee maker
        achieve_once is_on(coffe_maker)
        # Start brewing the coffee by turning on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select a suitably sized cup for the coffee maker

        achieve plugged(coffe_maker)
        # Ensure the coffee maker is plugged in
        
        observe(coffe_maker, "Check if the coffee maker contains water")
        # Check if the coffee maker contains water

        place_cup_and_start_brewing(cup, coffe_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_cup_and_start_brewing(cup:item, coffe_maker:item):
    body:
        achieve_once inside(cup, coffe_maker)
        # Place the cup inside the coffee maker
        achieve_once is_on(coffe_maker)
        # Start brewing the coffee by turning on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select a suitably sized cup for the coffee maker

        achieve plugged(coffe_maker)
        # Ensure the coffee maker is plugged in
        
        observe(coffe_maker, "Check if the coffee maker contains water")
        # Check if the coffee maker contains water

        place_cup_and_start_brewing(cup, coffe_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if the coffee maker contains water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker contains water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is close to cup_2064. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2064 is inside coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the coffee maker contains water before switching it on to start brewing. The robot needs to confirm the presence of water in the coffee maker as per human instruction.
##############################
From agent.py
Human Instruction: Ensure that the coffee maker contains water before switching it on to start brewing. The robot needs to confirm the presence of water in the coffee maker as per human instruction.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: look for cup_2064 around coffe_maker_290.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.
Action 11: Switch off coffe_maker_290.
Action 12: Open coffe_maker_290.
Action 13: Walk to cup_2064.
Action 14: Grab cup_2064.
Action 15: Walk to coffe_maker_290.
Action 16: Put cup_2064 into coffe_maker_290.
Action 17: Close coffe_maker_290.
Action 18: Switch on coffe_maker_290.
Action 19: Switch off coffe_maker_290.
Action 20: Open coffe_maker_290.
Action 21: Observe around coffe_maker_290 with the question of Check if the coffee maker contains water.
Action 22: Close coffe_maker_290.
Action 23: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_suitable_size(coffe_maker:item, cup:item):
    # Function to check if a coffee maker has water and the cup is suitably sized
    symbol water_check = exists o: item : (has_water(o) and on(cup, coffe_maker))
    return water_check

behavior start_brewing_coffee(coffe_maker:item):
    body:
        achieve_once closed(coffe_maker)
        # Close the coffee maker
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start brewing the coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker with ID 290

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064]==2064
        # Select the cup with ID 2064

        if has_water_and_suitable_size(coffe_maker, cup_2064):
            achieve_once on(cup_2064, coffe_maker)
            # Place the suitably sized cup inside the coffee maker
            start_brewing_coffee(coffe_maker)
        else:
            observe(coffe_maker, "Check if the coffee maker contains water")
            # If water status is unknown, confirm water presence in the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_and_suitable_size(coffe_maker:item, cup:item):
    # Function to check if a coffee maker has water and the cup is suitably sized
    symbol water_check = exists o: item : (has_water(o) and on(cup, coffe_maker))
    return water_check

behavior start_brewing_coffee(coffe_maker:item):
    body:
        achieve_once closed(coffe_maker)
        # Close the coffee maker
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start brewing the coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker with ID 290

        bind cup_2064: item where:
            is_cup(cup_2064) and id[cup_2064]==2064
        # Select the cup with ID 2064

        if has_water_and_suitable_size(coffe_maker, cup_2064):
            achieve_once on(cup_2064, coffe_maker)
            # Place the suitably sized cup inside the coffee maker
            start_brewing_coffee(coffe_maker)
        else:
            observe(coffe_maker, "Check if the coffee maker contains water")
            # If water status is unknown, confirm water presence in the coffee maker

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if the coffee maker contains water)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker contains water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is close to cup_2064. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2064 is inside coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that there is water in the coffee maker before starting to brew coffee. There is no evidence from the actions taken that the coffee maker was checked or confirmed to contain water.
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water in the coffee maker before starting to brew coffee. There is no evidence from the actions taken that the coffee maker was checked or confirmed to contain water.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: look for cup_2064 around coffe_maker_290.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.
Action 11: Switch off coffe_maker_290.
Action 12: Open coffe_maker_290.
Action 13: Walk to cup_2064.
Action 14: Grab cup_2064.
Action 15: Walk to coffe_maker_290.
Action 16: Put cup_2064 into coffe_maker_290.
Action 17: Close coffe_maker_290.
Action 18: Switch on coffe_maker_290.
Action 19: Switch off coffe_maker_290.
Action 20: Open coffe_maker_290.
Action 21: Observe around coffe_maker_290 with the question of Check if the coffee maker contains water.
Action 22: Close coffe_maker_290.
Action 23: Switch on coffe_maker_290.
Action 24: Switch off coffe_maker_290.
Action 25: Open coffe_maker_290.
Action 26: Observe around coffe_maker_290 with the question of Check if the coffee maker contains water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water in it
    symbol has_water_in_coffee_maker= exists o: item : (is_coffe_maker(o) and has_water(o))
    return has_water_in_coffee_maker

behavior place_cup_and_brew(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve_once closed(coffee_maker)
        # Ensure the coffee maker is closed after placing the cup
        achieve_once is_on(coffee_maker)
        # Start the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select cup with ID 2064

        if not has_water_in_coffee_maker(coffee_maker):
            # If the coffee maker does not have water, check or ensure it has water
            observe(coffee_maker, "Check if the coffee maker contains water")

        place_cup_and_brew(coffee_maker, cup)
        # Place the cup and start brewing coffee

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water in it
    symbol has_water_in_coffee_maker= exists o: item : (is_coffe_maker(o) and has_water(o))
    return has_water_in_coffee_maker

behavior place_cup_and_brew(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve_once closed(coffee_maker)
        # Ensure the coffee maker is closed after placing the cup
        achieve_once is_on(coffee_maker)
        # Start the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select cup with ID 2064

        if not has_water_in_coffee_maker(coffee_maker):
            # If the coffee maker does not have water, check or ensure it has water
            observe(coffee_maker, "Check if the coffee maker contains water")

        place_cup_and_brew(coffee_maker, cup)
        # Place the cup and start brewing coffee

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in the coffee maker before starting to brew the coffee. You should add water to the coffee maker as it is not confirmed in the provided actions that there is water inside.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, cup) # Add milk to the coffee
        achieve_once inside(sugar, cup) # Add sugar to the coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select the cup used for the coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)
        # Add milk and sugar to the coffee in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, cup) # Add milk to the coffee
        achieve_once inside(sugar, cup) # Add sugar to the coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        # Select the cup used for the coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)
        # Add milk and sugar to the coffee in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(milk_2043, cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'putin_executor(cup_2064, coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2064)', 'putin_executor(milk_2043, cup_2064)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2064)', 'putin_executor(food_sugar_2039, cup_2064)']
Time info:
Time consume: 255 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 49
goal generate times: 14
goal correct times: 0
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
