From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2029_around_cupboard_229(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_food_chicken_2017_around_cupboard_229(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_chicken,cupboard_instance)
        else:
            exp(food_chicken,cupboard_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cupboard_instance]=True
        close[cupboard_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_noodles_and_chicken():
    body:
        foreach item: item:
            if (is_food_noodles(item) or is_food_chicken(item)) and not visited(item):
                observe(item, "Determine if this is the noodles or chicken") 

behavior __goal__():
    body:
        find_noodles_and_chicken()

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_noodles_and_chicken():
    body:
        foreach item: item:
            if (is_food_noodles(item) or is_food_chicken(item)) and not visited(item):
                observe(item, "Determine if this is the noodles or chicken") 

behavior __goal__():
    body:
        find_noodles_and_chicken()

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_chicken_2017, cupboard_229)walk_executor(food_chicken_2017)obs(food_chicken_2017, Determine if this is the noodles or chicken)walk_executor(cupboard_229)exp(food_noodles_2029, cupboard_229)walk_executor(food_noodles_2029)obs(food_noodles_2029, Determine if this is the noodles or chicken)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_chicken_2017, cupboard_229)
Fail to find food_chicken_2017 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(food_chicken_2017, wallshelf_234)walk_executor(food_chicken_2017)obs(food_chicken_2017, Determine if this is the noodles or chicken)walk_executor(wallshelf_235)exp(food_noodles_2029, wallshelf_235)walk_executor(food_noodles_2029)obs(food_noodles_2029, Determine if this is the noodles or chicken)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: drawing_243, drawing_241, drawing_240, drawing_238, drawing_239, drawing_242, Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(food_chicken_2017, wallshelf_234)
Fail to find food_chicken_2017 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)obs(food_chicken_2017, Determine if this is the noodles or chicken)walk_executor(wallshelf_235)exp(food_noodles_2029, wallshelf_235)walk_executor(food_noodles_2029)obs(food_noodles_2029, Determine if this is the noodles or chicken)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2017, Determine if this is the noodles or chicken)obs(food_noodles_2029, Determine if this is the noodles or chicken)
##############################
From agent.py
obs(food_chicken_2017, Determine if this is the noodles or chicken)
Get this information:  food_chicken_2017 is inside fridge_289. food_chicken_2017 is inside dining_room_201. food_chicken_2017 is close to fridge_289. food_chicken_2017 is close to character_65. food_chicken_2017 is CLEAN.
##############################
From agent.py
obs(food_noodles_2029, Determine if this is the noodles or chicken)
Get this information:  food_noodles_2029 is close to fridge_289. food_noodles_2029 is close to character_65. food_noodles_2029 is inside fridge_289. food_noodles_2029 is inside dining_room_201. food_noodles_2029 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot) 
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once has_water(pot) 
        # Ensure the pot has water
        achieve_once on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the noodles and chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2029
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2017
        # Select the chicken

        boil_noodles_and_chicken(pot, stove, noodles, chicken)
        # Execute the boiling process for noodles and chicken

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot) 
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once has_water(pot) 
        # Ensure the pot has water
        achieve_once on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the noodles and chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2029
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2017
        # Select the chicken

        boil_noodles_and_chicken(pot, stove, noodles, chicken)
        # Execute the boiling process for noodles and chicken

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_noodles_2029)grab_executor(food_noodles_2029)walk_executor(pot_2069)putin_executor(food_noodles_2029, pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_noodles_2029)grab_executor(food_noodles_2029)walk_executor(pot_2069)putin_executor(food_noodles_2029, pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_noodles_2029)
Robot find: Robot is close to the fridge_289. Robot is close to the food_noodles_2029. 
##############################
From agent.py
grab_executor(food_noodles_2029)
Robot find: Robot is close to the fridge_289. Robot is close to the food_noodles_2029. Grabbing food_noodles_2029 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_noodles_2029, pot_2069)
Robot find: Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_noodles_2029 is close pot_2069. pot_2069 is close food_noodles_2029. food_noodles_2029 is inside pot_2069. food_noodles_2029 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_noodles_2029. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_noodles_2029)', 'grab_executor(food_noodles_2029)', 'walk_executor(pot_2069)', 'putin_executor(food_noodles_2029, pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 100 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 2
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
