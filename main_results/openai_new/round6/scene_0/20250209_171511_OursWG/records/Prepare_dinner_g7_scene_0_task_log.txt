From agent.py
Reset goals: The sub-goals are: 
['1. Clean the fish and any additional ingredients for the soup.', '2. Prepare the ingredients by cutting them if necessary.', '3. Cook the fish and ingredients in a pot with suitable seasonings and water until done.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)
            achieve clean(item)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        clean_item(fish) # Clean the fish
        clean_item(vegetable) # Clean the vegetable

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item):
    body:
        wash(item)
        # Wash the item to clean it

behavior clean_items():
    body:
        foreach item: item:
            if is_food_fish(item) or is_food_vegetable(item) and dirty(item):
                wash_item(item)

behavior __goal__():
    body:
        clean_items()

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_item(item:item):
    body:
        wash(item)
        # Wash the item to clean it

behavior clean_items():
    body:
        foreach item: item:
            if is_food_fish(item) or is_food_vegetable(item) and dirty(item):
                wash_item(item)

behavior __goal__():
    body:
        clean_items()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_fish_2021, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_vegetable_2041)switchoff_executor(faucet_232)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_fish_2021, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. food_fish_2021 is close kitchen_counter_230. kitchen_counter_230 is close food_fish_2021. food_fish_2021 is on kitchen_counter_230. food_fish_2021 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(knife:item, cutting_board:item, fish:item, veggies:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board
        achieve_once inhand(knife)
        # Hold the knife
        achieve cut(fish)
        # Cut the fish
        
        achieve_once on(veggies, cutting_board)
        # Place the vegetables on the cutting board
        achieve cut(veggies)
        # Cut the vegetables

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind veggies: item where:
            is_food_vegetable(veggies)
        # Select vegetables

        prepare_ingredients(knife, cutting_board, fish, veggies)
        # Prepare the ingredients by cutting them

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_ingredients(knife:item, cutting_board:item, fish:item, veggies:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board
        achieve_once inhand(knife)
        # Hold the knife
        achieve cut(fish)
        # Cut the fish
        
        achieve_once on(veggies, cutting_board)
        # Place the vegetables on the cutting board
        achieve cut(veggies)
        # Cut the vegetables

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind veggies: item where:
            is_food_vegetable(veggies)
        # Select vegetables

        prepare_ingredients(knife, cutting_board, fish, veggies)
        # Prepare the ingredients by cutting them

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(cutting_board_2051)put_executor(food_fish_2021, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_fish_2021)cut_executor(food_fish_2021)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_fish_2021, cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. food_fish_2021 is close cutting_board_2051. cutting_board_2051 is close food_fish_2021. food_fish_2021 is on cutting_board_2051. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
cut_executor(food_fish_2021)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_357(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_cd_2075_around_cpuscreen_171(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(cd,cpuscreen_instance)
        else:
            exp(cd,cpuscreen_instance)
    eff:
        unknown[cd]=False
        close[cd,cpuscreen_instance]=True
        close[cpuscreen_instance,cd]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_soup(pot:item, stove:item, fish:item, vegetables:item, seasonings:item, water:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(vegetables, pot)
        # Add vegetables to the pot
        achieve_once inside(seasonings, pot)
        # Add seasonings to the pot
        achieve_once inside(water, pot)
        # Add water to the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is on to cook the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind seasonings: item where:
            is_sauce(seasonings)
        # Select seasonings

        bind water: item where:
            has_water(water)
        # Select water

        cook_soup(pot, stove, fish, vegetables, seasonings, water)
        # Execute the process to cook the soup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_soup(pot:item, stove:item, fish:item, vegetables:item, seasonings:item, water:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(vegetables, pot)
        # Add vegetables to the pot
        achieve_once inside(seasonings, pot)
        # Add seasonings to the pot
        achieve_once inside(water, pot)
        # Add water to the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is on to cook the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind seasonings: item where:
            is_sauce(seasonings)
        # Select seasonings

        bind water: item where:
            has_water(water)
        # Select water

        cook_soup(pot, stove, fish, vegetables, seasonings, water)
        # Execute the process to cook the soup

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(pot_2069)putin_executor(food_fish_2021, pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(pot_2069)putin_executor(sauce_2078, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_fish_2021, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_fish_2021 is inside pot_2069. food_fish_2021 is close pot_2069. pot_2069 is close food_fish_2021. food_fish_2021 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(sauce_2078)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the sauce_2078. 
##############################
From agent.py
grab_executor(sauce_2078)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the sauce_2078. Grabbing sauce_2078 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(sauce_2078, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close sauce_2078. sauce_2078 is inside pot_2069. sauce_2078 is close pot_2069. sauce_2078 released by left hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the sauce_2078. Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to add water to the pot.
##############################
From agent.py
Human Instruction: The robot needs to add water to the pot.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Wash food_fish_2021.
Action 9: Switch off faucet_43.
Action 10: Walk to food_vegetable_2041.
Action 11: Grab food_vegetable_2041.
Action 12: Walk to kitchen_counter_230.
Action 13: Put food_fish_2021 on kitchen_counter_230.
Action 14: Switch on faucet_232.
Action 15: Wash food_vegetable_2041.
Action 16: Switch off faucet_232.
Action 17: Grab food_fish_2021.
Action 18: Walk to cutting_board_2051.
Action 19: Put food_fish_2021 on cutting_board_2051.
Action 20: Walk to knife_2050.
Action 21: Grab knife_2050.
Action 22: Walk to food_fish_2021.
Action 23: Cut food_fish_2021.
Action 24: Walk to cutting_board_2051.
Action 25: Put food_vegetable_2041 on cutting_board_2051.
Action 26: Walk to food_vegetable_2041.
Action 27: Cut food_vegetable_2041.
Action 28: Walk to pot_2069.
Action 29: Open pot_2069.
Action 30: Walk to food_fish_2021.
Action 31: Grab food_fish_2021.
Action 32: Walk to pot_2069.
Action 33: Put food_fish_2021 into pot_2069.
Action 34: Walk to food_vegetable_2041.
Action 35: Grab food_vegetable_2041.
Action 36: Walk to pot_2069.
Action 37: Put food_vegetable_2041 into pot_2069.
Action 38: Walk to sauce_2078.
Action 39: Grab sauce_2078.
Action 40: Walk to pot_2069.
Action 41: Put sauce_2078 into pot_2069.
Action 42: Grab pot_2069.
Action 43: Walk to stove_2065.
Action 44: Put pot_2069 on stove_2065.
Action 45: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_pencil_2001_around_closetdrawer_382(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_clothes_socks_2087_around_closetdrawer_380(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_socks,closetdrawer_instance)
        else:
            exp(clothes_socks,closetdrawer_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_soup(pot:item, stove:item, sauce:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve inside(sauce, pot) # Add sauce into the pot
        achieve is_on(stove) # Keep the stove on during cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind sauce: item where:
            is_sauce(sauce) and id[sauce]==2078
        # Select the sauce with ID 2078

        cook_soup(pot, stove, sauce)
        # Execute the cooking process for fish soup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_soup(pot:item, stove:item, sauce:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve inside(sauce, pot) # Add sauce into the pot
        achieve is_on(stove) # Keep the stove on during cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind sauce: item where:
            is_sauce(sauce) and id[sauce]==2078
        # Select the sauce with ID 2078

        cook_soup(pot, stove, sauce)
        # Execute the cooking process for fish soup

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the pot to fulfill the requirement of ensuring the pot has water before cooking the fish soup.
##############################
From agent.py
Human Instruction: You need to add water to the pot to fulfill the requirement of ensuring the pot has water before cooking the fish soup.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Wash food_fish_2021.
Action 9: Switch off faucet_43.
Action 10: Walk to food_vegetable_2041.
Action 11: Grab food_vegetable_2041.
Action 12: Walk to kitchen_counter_230.
Action 13: Put food_fish_2021 on kitchen_counter_230.
Action 14: Switch on faucet_232.
Action 15: Wash food_vegetable_2041.
Action 16: Switch off faucet_232.
Action 17: Grab food_fish_2021.
Action 18: Walk to cutting_board_2051.
Action 19: Put food_fish_2021 on cutting_board_2051.
Action 20: Walk to knife_2050.
Action 21: Grab knife_2050.
Action 22: Walk to food_fish_2021.
Action 23: Cut food_fish_2021.
Action 24: Walk to cutting_board_2051.
Action 25: Put food_vegetable_2041 on cutting_board_2051.
Action 26: Walk to food_vegetable_2041.
Action 27: Cut food_vegetable_2041.
Action 28: Walk to pot_2069.
Action 29: Open pot_2069.
Action 30: Walk to food_fish_2021.
Action 31: Grab food_fish_2021.
Action 32: Walk to pot_2069.
Action 33: Put food_fish_2021 into pot_2069.
Action 34: Walk to food_vegetable_2041.
Action 35: Grab food_vegetable_2041.
Action 36: Walk to pot_2069.
Action 37: Put food_vegetable_2041 into pot_2069.
Action 38: Walk to sauce_2078.
Action 39: Grab sauce_2078.
Action 40: Walk to pot_2069.
Action 41: Put sauce_2078 into pot_2069.
Action 42: Grab pot_2069.
Action 43: Walk to stove_2065.
Action 44: Put pot_2069 on stove_2065.
Action 45: Switch on stove_2065.
Action 46: Grab pot_2069.
Action 47: Walk to faucet_43.
Action 48: Switch on faucet_43.
Action 49: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish]==2021
        # Select fish with ID 2021

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable]==2041
        # Select vegetables with ID 2041

        bind sauce: item where:
            is_sauce(sauce) and id[sauce]==2078
        # Select sauce with ID 2078

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        achieve_once inside(food_fish, pot)
        # Place fish inside the pot

        achieve_once inside(food_vegetable, pot)
        # Place vegetables inside the pot

        achieve_once inside(sauce, pot)
        # Add sauce into the pot

        achieve_once has_water(pot)
        # Ensure the pot has water

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Ensure the stove is on to cook the fish soup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish]==2021
        # Select fish with ID 2021

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable]==2041
        # Select vegetables with ID 2041

        bind sauce: item where:
            is_sauce(sauce) and id[sauce]==2078
        # Select sauce with ID 2078

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        achieve_once inside(food_fish, pot)
        # Place fish inside the pot

        achieve_once inside(food_vegetable, pot)
        # Place vegetables inside the pot

        achieve_once inside(sauce, pot)
        # Add sauce into the pot

        achieve_once has_water(pot)
        # Ensure the pot has water

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Ensure the stove is on to cook the fish soup

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. pot_2069 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to add water to the pot. Ensure the pot has water before considering the task complete.
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_fish_2021, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_232)', 'grab_executor(food_fish_2021)', 'walk_executor(cutting_board_2051)', 'put_executor(food_fish_2021, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_fish_2021)', 'cut_executor(food_fish_2021)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(pot_2069)', 'putin_executor(food_fish_2021, pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(sauce_2078)', 'grab_executor(sauce_2078)', 'walk_executor(pot_2069)', 'putin_executor(sauce_2078, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 29
goal generate times: 6
goal correct times: 0
action_num: 50

Task complete rate:
1
Scene_id: 0
##############################
