From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the potatoes into sticks.', '2. Fry the potato sticks in oil until golden brown.', '3. Drain the French fries and season them to taste.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve_once inhand(knife) # Hold the knife to peel and slice the potato
        achieve cut(potato) # Peel and slice the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and not cut(potato)
        # Select a potato that is not yet peeled or sliced

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_and_slice_potato(potato, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_slice_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve_once inhand(knife) # Hold the knife to peel and slice the potato
        achieve cut(potato) # Peel and slice the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and not cut(potato)
        # Select a potato that is not yet peeled or sliced

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_and_slice_potato(potato, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_357(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_spectacles_2082_around_fryingpan_2083(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(spectacles,fryingpan_instance)
        else:
            exp(spectacles,fryingpan_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,fryingpan_instance]=True
        close[fryingpan_instance,spectacles]=True
    

behavior find_mat_22_around_oil_2079(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(mat,oil_instance)
        else:
            exp(mat,oil_instance)
    eff:
        unknown[mat]=False
        close[mat,oil_instance]=True
        close[oil_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_sticks(stove:item, fryingpan:item, potato_sticks:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(potato_sticks, fryingpan)
        # Place the potato sticks inside the frying pan
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind potato_sticks: item where:
            is_food_potato(potato_sticks) and cut(potato_sticks)
        # Select the cut potato sticks

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_potato_sticks(stove, fryingpan, potato_sticks, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_potato_sticks(stove:item, fryingpan:item, potato_sticks:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(potato_sticks, fryingpan)
        # Place the potato sticks inside the frying pan
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind potato_sticks: item where:
            is_food_potato(potato_sticks) and cut(potato_sticks)
        # Select the cut potato sticks

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_potato_sticks(stove, fryingpan, potato_sticks, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_cat_2055_around_bed_105(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_french_fries(french_fries:item, strainer:item):
    body:
        achieve_once inside(french_fries, strainer)
        # Drain the French fries by placing them in a strainer

behavior season_french_fries(french_fries:item, seasoning:item):
    body:
        achieve_once on(seasoning, french_fries)
        # Season the French fries to taste

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the French fries that are already prepared

        bind strainer: item where:
            is_bowl(strainer) or is_pot(strainer)
        # Select a suitable strainer or similar item to drain the fries

        bind seasoning: item where:
            is_sauce(seasoning) or is_food_salt(seasoning)
        # Select a suitable seasoning for the fries, such as salt or sauce

        drain_french_fries(french_fries, strainer)
        season_french_fries(french_fries, seasoning)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior drain_french_fries(french_fries:item, strainer:item):
    body:
        achieve_once inside(french_fries, strainer)
        # Drain the French fries by placing them in a strainer

behavior season_french_fries(french_fries:item, seasoning:item):
    body:
        achieve_once on(seasoning, french_fries)
        # Season the French fries to taste

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the French fries that are already prepared

        bind strainer: item where:
            is_bowl(strainer) or is_pot(strainer)
        # Select a suitable strainer or similar item to drain the fries

        bind seasoning: item where:
            is_sauce(seasoning) or is_food_salt(seasoning)
        # Select a suitable seasoning for the fries, such as salt or sauce

        drain_french_fries(french_fries, strainer)
        season_french_fries(french_fries, seasoning)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2071, sink_42)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(bowl_2071)putin_executor(food_potato_2035, bowl_2071)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(food_potato_2035)put_executor(food_salt_2037, food_potato_2035)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(bowl_2071, sink_42)
Fail to find bowl_2071 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(pot_2069)putin_executor(food_potato_2035, pot_2069)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(food_potato_2035)put_executor(food_salt_2037, food_potato_2035)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_potato_2035, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_potato_2035 is inside pot_2069. pot_2069 is close food_potato_2035. food_potato_2035 is close pot_2069. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_salt_2037)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_salt_2037. 
##############################
From agent.py
grab_executor(food_salt_2037)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_salt_2037. Grabbing food_salt_2037 by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_salt_2037. Robot is close to the food_potato_2035. Robot is close to the pot_2069. 
##############################
From agent.py
put_executor(food_salt_2037, food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_salt_2037. Robot is close to the food_potato_2035. Robot is close to the pot_2069. food_salt_2037 is close food_potato_2035. food_potato_2035 is close food_salt_2037. food_salt_2037 is on food_potato_2035. food_salt_2037 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(sink_42)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(pot_2069)', 'putin_executor(food_potato_2035, pot_2069)', 'walk_executor(food_salt_2037)', 'grab_executor(food_salt_2037)', 'walk_executor(food_potato_2035)', 'put_executor(food_salt_2037, food_potato_2035)']
Time info:
Time consume: 117 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 41
goal generate times: 3
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
