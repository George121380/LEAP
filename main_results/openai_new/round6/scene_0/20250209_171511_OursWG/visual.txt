############################################################
When the sub-task is: 1. Find a table in the dining room.
A successful representation:
 
def is_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol is_in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return is_in_dining_room

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and is_table_in_dining_room(table)):
            # If we have already found the table in the dining room, we can directly approach it
            bind table: item where:
                is_table(table) and is_table_in_dining_room(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check if the table is in the dining room and is empty for placement")

############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on the table.
A successful representation:

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==226
        # Select table with ID 226

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

############################################################
When the sub-task is: 1. Find the basket with clothes.
A successful representation:

behavior find_basket_for_clothes():
    body:
        foreach basket: item:
            if is_basket_for_clothes(basket) and not visited(basket):
                observe(basket, "Determine if this is the basket for clothes") 

behavior __goal__():
    body:
        find_basket_for_clothes()
 
############################################################
When the sub-task is: 2. Load the clothes into the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes(clothes:item, washing_machine:item):
    body:
        achieve_once inside(clothes, washing_machine)
        # Load the clothes into the washing machine

behavior start_wash_cycle(washing_machine:item):
    body:
        achieve_once plugged(washing_machine)
        achieve_once closed(washing_machine)
        achieve_once is_on(washing_machine)
        # Ensure the washing machine is plugged in, closed, and turned on to start the wash cycle

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)
        # Select the basket for clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        foreach c: item:
            if is_clothes(c) and inside(c, basket_for_clothes):
                load_clothes(c, washing_machine)
                # Load each clothing item from the basket into the washing machine

        start_wash_cycle(washing_machine)
        # Start the wash cycle of the washing machine

############################################################
When the sub-task is: Turn on the TV by touching the remote control.
A successful representation:
 
behavior turn_on_tv(remote_control:item, television:item):
    body:
        achieve_once close_char(char, remote_control)
        # Move character close to the remote control
        touch(remote_control)
        # Touch the remote control to turn on the TV

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        bind television: item where:
            is_television(television)
        # Select a television

        turn_on_tv(remote_control, television)
        # Turn on the television using the remote control

############################################################
When the sub-task is: 1. Locate the basket containing the clothes.
A successful representation:

behavior locate_basket_for_clothes():
    body:
        foreach basket: item:
            if is_basket_for_clothes(basket) and not visited(basket):
                observe(basket, "Determine if this is the basket for clothes")

behavior __goal__():
    body:
        locate_basket_for_clothes()

############################################################
When the sub-task is: 2. Put the clothes from the basket into the washing machine.
A successful representation:

behavior put_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve_once inside(clothes, washing_machine)
        # Place clothes inside the washing machine

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)
        # Select the basket containing clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        foreach c: item:
            if is_clothes(c) and inside(c, basket_for_clothes):
                put_clothes_in_washing_machine(c, washing_machine)
                # Place each clothing item from the basket into the washing machine

############################################################
When the sub-task is: 3. Add soap to the washing machine.
A successful representation:
 
behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve_once inside(soap, washing_machine)

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select soap

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        add_soap_to_washing_machine(soap, washing_machine)
        # Add soap to the washing machine

############################################################
When the sub-task is: 4. Run the washing machine to wash the clothes.
A successful representation:

behavior start_washing_machine(washing_machine:item):
    body:
        achieve_once plugged(washing_machine)
        # Ensure the washing machine is plugged in
        achieve_once closed(washing_machine)
        # Ensure that the washing machine door is closed
        achieve_once is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        start_washing_machine(washing_machine)
        # Perform actions to run the washing machine

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
 
behavior scrub_sink(sink:item):
    body:
        scrub(sink)

behavior rinse_sink(sink:item):
    body:
        rinse(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42

        scrub_sink(sink) # Scrub the sink

        rinse_sink(sink) # Rinse the sink

############################################################
When the sub-task is: 1. Identify all rooms in the household.
A successful representation:
 
behavior identify_rooms():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if not visited(room):
                    observe(room, "Identify the room and record its type")

behavior __goal__():
    body:
        identify_rooms()

############################################################
When the sub-task is: 2. Ensure at least one light is on in each identified room.
A successful representation:
 
def is_light_on_in_room(room:item):
    # Function to check if there is at least one light on in the specified room
    symbol light_on=exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return light_on

behavior ensure_light_in_room(room:item):
    body:
        foreach light: item:
            if is_light(light) and inside(light, room) and not is_on(light):
                achieve_once is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if not is_light_on_in_room(room):
                ensure_light_in_room(room)

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
def is_a_window(x:item):
    # Function to determine if an item is a window
    return is_window(x)

behavior identify_windows():
    body:
        foreach window: item:
            if is_a_window(window) and not visited(window):
                observe(window, "Identify and confirm this is a window")

behavior __goal__():
    body:
        identify_windows()

############################################################
When the sub-task is: 2. Wipe each window with a towel.
A successful representation:

behavior wipe_window(window:item, towel:item):
    body:
        achieve_once inhand(towel) # Hold the towel to wipe the window
        achieve clean(window) # Ensure the window is clean

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select the towel

        foreach window: item:
            if is_window(window):
                achieve open(window) # Ensure each window is open
                wipe_window(window, towel) # Wipe each window with the towel

############################################################
When the sub-task is: 1. Fry the steak.
A successful representation:
 
behavior fry_steak(stove:item, fryingpan:item, steak:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan
        achieve is_on(stove) 
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_steak(stove, fryingpan, steak, oil)

############################################################
When the sub-task is: 2. Cut the steak.
A successful representation:

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board) 
        # Place the steak on the cutting board
        achieve_once inhand(knife)
        # Hold the knife to cut the steak
        achieve cut(steak)
        # Cut the steak

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak)
        # Select the steak

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_steak(food_steak, knife, cutting_board)
        # Cut the steak using the knife on the cutting board

############################################################
When the sub-task is: 3. Put the steak on a plate.
A successful representation:
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate to put the steak onto

        place_steak_on_plate(steak, plate)

############################################################
When the sub-task is: Wipe the toilet with toilet paper, then throw the toilet paper into the toilet.
A successful representation:
 
behavior clean_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper) # Hold the toilet paper to wipe the toilet
        wipe(toilet) # Wipe the toilet
        achieve_once inside(toilet_paper, toilet) # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper]==2090
        # Select toilet paper with ID 2090

        clean_toilet_with_paper(toilet, toilet_paper)
        # Clean the toilet with toilet paper and then throw the toilet paper into the toilet

############################################################
When the sub-task is: Insert the CD into the CD player and play music.
A successful representation:
 
behavior insert_cd_and_play_music(cd:item, cd_player:item):
    body:
        achieve_once inside(cd, cd_player)
        # Insert the CD into the CD player
        achieve_once is_on(cd_player)
        # Ensure the CD player is on for playing music

behavior __goal__():
    body:
        bind cd: item where:
            is_cd(cd)
        # Select a CD

        bind cd_player: item where:
            is_cd_player(cd_player)
        # Select a CD player

        insert_cd_and_play_music(cd, cd_player)

############################################################
When the sub-task is: Slice the bread and toast it.
A successful representation:
 
behavior slice_bread(bread:item, knife:item, cutting_board:item):
    body:
        achieve_once on(bread, cutting_board) # Place the bread on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the bread
        achieve cut(bread) # Slice the bread

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve_once inside(bread, toaster) # Place the sliced bread inside the toaster
        achieve_once is_on(toaster) # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, knife, cutting_board) # Slice the bread using the knife on the cutting board
        toast_bread(bread, toaster) # Toast the sliced bread in the toaster

############################################################
When the sub-task is: Turn on the dvd player.
A successful representation:
 
behavior turn_on_dvd_player(dvd_player:item):
    body:
        achieve_once is_on(dvd_player)

behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)

        turn_on_dvd_player(dvd_player)

############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_lights_in_room(light:item):
    body:
        achieve_once is_on(light) # Turn on the light

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, bedroom)
        # Select light in the bedroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select light in the bathroom

        turn_on_lights_in_room(bedroom_light)
        # Turn on the lights in the bedroom

        turn_on_lights_in_room(bathroom_light)
        # Turn on the lights in the bathroom

############################################################
When the sub-task is: Boil the egg.
A successful representation:
 
behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot) 
        # Put the egg inside the pot
        achieve_once has_water(pot) 
        # Ensure the pot has water
        achieve_once on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        boil_egg(pot, stove, egg)
        # Execute the boiling process for the egg

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Ensure character is close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(cup) # Fill the cup with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_cup_with_water(cup, faucet)

############################################################
When the sub-task is: 1. Find a cup and some milk.
A successful representation:
 
behavior locate_cup_and_milk(): 
    body:
        foreach item: item:
            if (is_cup(item) or is_milk(item)) and not visited(item):
                observe(item, "Determine if this is the cup or milk") 

behavior __goal__():
    body:
        locate_cup_and_milk()

############################################################
When the sub-task is: 2. Pour the milk into the cup.
A successful representation:
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        achieve_once inside(milk, cup)
        # Pour the milk into the cup

############################################################
When the sub-task is: 3. Heat the cup of milk using the microwave.
A successful representation:
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave) # Put the cup of milk inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with milk

        bind microwave: item where:
            is_microwave(microwave) and id[microwave]==297
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave

############################################################
When the sub-task is: 1. Clean the fish and any additional ingredients for the soup.
A successful representation:
 
behavior wash_item(item:item):
    body:
        wash(item)
        # Wash the item to clean it

behavior clean_items():
    body:
        foreach item: item:
            if is_food_fish(item) or is_food_vegetable(item) and dirty(item):
                wash_item(item)

behavior __goal__():
    body:
        clean_items()

############################################################
When the sub-task is: 2. Prepare the ingredients by cutting them if necessary.
A successful representation:
 
behavior prepare_ingredients(knife:item, cutting_board:item, fish:item, veggies:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board
        achieve_once inhand(knife)
        # Hold the knife
        achieve cut(fish)
        # Cut the fish
        
        achieve_once on(veggies, cutting_board)
        # Place the vegetables on the cutting board
        achieve cut(veggies)
        # Cut the vegetables

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind veggies: item where:
            is_food_vegetable(veggies)
        # Select vegetables

        prepare_ingredients(knife, cutting_board, fish, veggies)
        # Prepare the ingredients by cutting them

############################################################
When the sub-task is: Find your cat and touch it.
A successful representation:
 
behavior find_and_touch_cat(cat:item):
    body:
        achieve close_char(char, cat) # Move the character to the cats location
        touch(cat) # Touch the cat

behavior __goal__():
    body:
        foreach item: item:
            if is_cat(item) and not visited(item):
                observe(item, "Find the cat and determine its location")
        bind cat: item where:
            is_cat(cat) and visited(cat)
        # Select the cat that has been found
        find_and_touch_cat(cat)

############################################################
When the sub-task is: 1. Find a cup and fill it with water.
A successful representation:
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once inhand(cup) # Hold the cup
        achieve close_char(char, faucet) # Move close to the faucet
        achieve_once is_on(faucet) # Turn on the faucet
        achieve_once has_water(cup) # Fill the cup with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

############################################################
When the sub-task is: 2. Slice a kiwi and add the slices to the cup.
A successful representation:
 
behavior slice_kiwi_and_add_to_cup(food_kiwi:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(food_kiwi, cutting_board) # Place the kiwi on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the kiwi
        achieve cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Select the kiwi

        bind cup: item where:
            is_cup(cup)
        # Select the cup with water already in it

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_kiwi_and_add_to_cup(food_kiwi, cup, knife, cutting_board)
        # Slice the kiwi and add the slices to the cup

############################################################
When the sub-task is: 1. Put the pizza and hamburger on a plate.  
A successful representation:
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(pizza, hamburger, plate)
        # Place the pizza and hamburger on the plate

############################################################
When the sub-task is: 2. Heat the plate in the microwave.  
A successful representation:
 
behavior heat_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select the plate with ID 1000

        bind microwave: item where:
            is_microwave(microwave) and id[microwave]==297
        # Select the microwave

        heat_plate_in_microwave(plate, microwave)
        # Heat the plate in the microwave

############################################################
When the sub-task is: 3. Put the plate on a table in the dining room.
A successful representation:
 
def is_dining_room(room:item):
    # Function to check if an item is a dining room
    return is_dining_room(room)

def is_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol is_in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return is_in_dining_room

behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select plate with ID 1000

        put_on_table(plate, table)
        # Put the plate on the dining room table

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start the washing cycle.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Close the dishwasher door
        achieve_once is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_dishwasher(o, dishwasher)
                
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:

behavior wash_forks():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash(fork)
                # Wash each fork by hand

behavior __goal__():
    body:
        wash_forks()

############################################################
When the sub-task is: Scramble the egg using the frying pan.
A successful representation:
 
behavior scramble_egg(fryingpan:item, egg:item, stove:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(egg, fryingpan)
        # Place the egg inside the frying pan
        achieve is_on(stove) 
        # Ensure the stove is on for cooking

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        scramble_egg(fryingpan, egg, stove, oil)

############################################################
When the sub-task is: Slice the chicken and give it to the cat.
A successful representation:
 
behavior slice_chicken(chicken:item, knife:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve_once inhand(knife) # Hold the knife to slice the chicken
        achieve cut(chicken) # Slice the chicken

behavior place_chicken_near_cat(chicken:item, cat:item):
    body:
        achieve_once close(chicken, cat) # Place the sliced chicken close to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        slice_chicken(chicken, knife, cutting_board)
        # Slice the chicken using the knife on the cutting board

        place_chicken_near_cat(chicken, cat)
        # Place the sliced chicken close to the cat

############################################################
When the sub-task is: 1. Find the book and put it on the table in the home office.
A successful representation:
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select the bookshelf

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select a book

        place_book_on_table(book, table)

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:
 
behavior turn_on_light_in_room(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light in the home office

        turn_on_light_in_room(light)
        # Turn on the light in the home office
 
############################################################
When the sub-task is: Cut the chicken into pieces, then put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item, knife:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        # Place the chicken on the cutting board
        achieve_once inhand(knife)
        # Hold the knife to cut the chicken
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve_once inside(chicken, fridge)
        # Place the cut chicken inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        cut_chicken(chicken, knife, cutting_board)
        # Cut the chicken using the knife on the cutting board

        store_in_fridge(chicken, fridge)
        # Store the cut chicken in the fridge

        close_the_fridge_door(fridge)
        # Close the fridge door

############################################################
When the sub-task is: 1. Find all the bowls and plates.
A successful representation:
 
def has_bowls_and_plates(obj:item):
    # Function to check if the specified item is either a bowl or a plate
    symbol has_bowls_and_plates= exists o: item : (is_bowl(o) or is_plate(o))
    return has_bowls_and_plates

behavior __goal__():
    body:
        foreach obj: item:
            if (is_bowl(obj) or is_plate(obj)) and not visited(obj):
                observe(obj, "Find all bowls and plates")

############################################################
When the sub-task is: 2. Wash the bowls and plates using the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Close the dishwasher door
        achieve_once is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select dishwasher with ID 1001
        
        bind bowl_2071: item where:
            id[bowl_2071]==2071
        # Select bowl with ID 2071

        bind bowl_2072: item where:
            id[bowl_2072]==2072
        # Select bowl with ID 2072

        load_dishwasher(bowl_2071, dishwasher)
        load_dishwasher(bowl_2072, dishwasher)
        
        start_dishwasher(dishwasher)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light_in_bathroom(light:item):
    body:
        achieve_once is_on(light) # Turn on the light

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Select the light in the bathroom

        turn_on_light_in_bathroom(light)
        # Turn on the light in the bathroom

############################################################
When the sub-task is: 1. Find milk and eggs, and place them on a table in the dining room.
A successful representation:
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                place_on_table(milk, table)
                place_on_table(eggs, table)

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve_once inside(item, trashcan)

behavior close_fidge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289

        bind trashcan: item where:
            is_trashcan(trashcan)
        
        throw_items_in_trash(fridge, trashcan)
        close_fidge_door(fridge)

############################################################
When the sub-task is: 3. Put milk and eggs back in the fridge.
A successful representation:
 
behavior place_items_back_in_fridge(milk:item, egg:item, fridge:item):
    body:
        achieve_once inside(milk, fridge)
        achieve_once inside(egg, fridge)

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk]==2043
        # Select milk with ID 2043

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        # Select egg with ID 2020

        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select fridge with ID 289

        place_items_back_in_fridge(milk, egg, fridge)
        close_the_fridge(fridge)

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, knife:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        # Place the chicken on the cutting board
        achieve_once inhand(knife)
        # Hold the knife to slice the chicken
        achieve cut(chicken)
        # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_chicken(chicken, knife, cutting_board)
        # Slice the chicken using the knife on the cutting board

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:

behavior open_windows_in_bathroom(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        foreach window: item:
            if is_window(window) and inside(window, bathroom):
                open_windows_in_bathroom(window)
                # Open each window in the bathroom

############################################################
When the sub-task is: 1. Find a lemon and sugar.
A successful representation:
 
behavior find_lemon_and_sugar():
    body:
        foreach item: item:
            if (is_food_lemon(item) or is_food_sugar(item)) and not visited(item):
                observe(item, "Check if this is the lemon or sugar you need")

behavior __goal__():
    body:
        find_lemon_and_sugar()

############################################################
When the sub-task is: 2. Cut the lemon and squeeze it into a cup.
A successful representation:
 
behavior cut_and_squeeze_lemon(lemon:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(lemon, cutting_board) # Place the lemon on the cutting board
        achieve_once inhand(knife) # Hold the knife to cut the lemon
        achieve cut(lemon) # Cut the lemon
        achieve_once inside(lemon, cup) # Squeeze the lemon juice into the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        cut_and_squeeze_lemon(lemon, cup, knife, cutting_board)
        # Cut the lemon and squeeze it into the cup

############################################################
When the sub-task is: 1. Find the sink in the bathroom.
A successful representation:
 
def is_bathroom_sink(sink:item):
    # Function to check if the specified item is a sink in the bathroom
    symbol is_in_bathroom=exists room: item : (is_bathroom(room) and inside(sink, room))
    return is_in_bathroom

behavior __goal__():
    body:
        if exists sink: item : (is_sink(sink) and is_bathroom_sink(sink)):
            # If we have already found the sink in the bathroom, we can directly approach it
            bind sink: item where:
                is_sink(sink) and is_bathroom_sink(sink)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")

############################################################
When the sub-task is: 2. Fill the sink with water.
A successful representation:

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Move close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve has_water(sink)
        # Fill the sink with water
        achieve_once is_off(faucet)
        # Turn off the faucet

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42

        bind faucet: item where:
            is_faucet(faucet) and close_char(char, sink)
        # Select the faucet close to the sink

        fill_sink_with_water(sink, faucet)

############################################################
When the sub-task is: 3. Add soap to the water to make it soapy.
A successful representation:
 
behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the water in the sink to make it soapy

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select soap

        bind sink: item where:
            is_sink(sink) and has_water(sink)
        # Select sink that has water

        add_soap_to_sink(soap, sink)

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
behavior add_cleaning_solution(dishwasher:item, cleaning_solution:item): 
    body:
        achieve_once inside(cleaning_solution, dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)

        add_cleaning_solution(dishwasher, cleaning_solution)
############################################################
When the sub-task is: 2. Wash the bowls and plates using the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Close the dishwasher door
        achieve_once is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select dishwasher with ID 1001
        
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_dishwasher(o, dishwasher)
                
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Find the fridge containing items.
A successful representation:
 
def has_items(fridge:item):
    # Function to check if there are items inside the specified fridge
    symbol has_items=exists o: item : (inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_items(fridge)):
            # Check if there is a fridge with items based on available information
            bind fridge: item where:
                is_fridge(fridge) and has_items(fridge)
            achieve close_char(char, fridge)

        else: 
           # If no fridge with items is found, initiate exploration to locate one
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if there are any items in the fridge")

############################################################
When the sub-task is: 2. Throw all the items from the fridge into the trashcan.
A successful representation:
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve_once inside(item, trashcan)

behavior close_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289

        bind trashcan: item where:
            is_trashcan(trashcan)
        
        throw_items_in_trash(fridge, trashcan)
        close_fridge_door(fridge)
############################################################
When the sub-task is: Use the pot to boil some water.
A successful representation:
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_water(pot, stove)
        # Execute the process to boil water with the pot on the stove

############################################################
When the sub-task is: Make a cup of coffee using the coffee maker.
A successful representation:
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item, coffee_filter:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)
        # Put the coffee filter into the coffee maker
        achieve_once inside(cup, coffee_maker)
        # Place the cup in the coffee makers designated area
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        make_coffee_with_coffee_maker(coffee_maker, cup, coffee_filter)
############################################################
When the sub-task is: Boil some rice in a pot.
A successful representation:
 
behavior boil_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        boil_rice_in_pot(pot, stove, rice)
        # Execute the boiling process for the rice in the pot

