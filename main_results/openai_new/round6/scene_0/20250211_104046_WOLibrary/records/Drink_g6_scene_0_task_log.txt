From agent.py
Reset goals: The sub-goals are: 
['1. Find a lemon and a sugar container.', '2. Squeeze the lemon into a cup and add sugar.', '3. Add water to the cup and stir.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation

def located_in_room(item: item, room_type: item):
    symbol located=exists room: item: (is_room_type(room) and inside(item, room))
    return located

behavior find_item(item_type: item):
    body:
        foreach item: item:
            if is_item_type(item) and not visited(item):
                observe(item, "Check if this is the item I am looking for")

behavior move_close_to_item(item: item):
    body:
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists lemon: item : (is_food_lemon(lemon)):
            bind lemon: item where:
                is_food_lemon(lemon)
            move_close_to_item(lemon)

        else:
            find_item(food_lemon)

        if exists sugar_container: item : (is_food_sugar(sugar_container)):
            bind sugar_container: item where:
                is_food_sugar(sugar_container)
            move_close_to_item(sugar_container)

        else:
            find_item(food_sugar)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_room_type not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#goal_representation
 
behavior find_item(item_type: item):
    body:
        foreach item: item:
            if is_item_type(item) and not visited(item):
                observe(item, "Check if this is the item I am looking for")

behavior move_close_to_item(item: item):
    body:
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists lemon: item : (is_food_lemon(lemon)):
            bind lemon: item where:
                is_food_lemon(lemon)
            move_close_to_item(lemon)

        else:
            find_item(is_food_lemon)

        if exists sugar_container: item : (is_food_sugar(sugar_container)):
            bind sugar_container: item where:
                is_food_sugar(sugar_container)
            move_close_to_item(sugar_container)

        else:
            find_item(is_food_sugar)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_item_type not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#goal_representation
 
behavior find_item(item_type: item):
    body:
        foreach item: item:
            if item_type(item) and not visited(item):
                observe(item, "Check if this is the item I am looking for")

behavior move_close_to_item(item: item):
    body:
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists lemon: item : (is_food_lemon(lemon)):
            bind lemon: item where:
                is_food_lemon(lemon)
            move_close_to_item(lemon)

        else:
            find_item(is_food_lemon)

        if exists sugar_container: item : (is_food_sugar(sugar_container)):
            bind sugar_container: item where:
                is_food_sugar(sugar_container)
            move_close_to_item(sugar_container)

        else:
            find_item(is_food_sugar)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
def is_lemon(item: item):
    symbol lemon_item = is_food_lemon(item)
    return lemon_item

def is_sugar_container(item: item):
    symbol sugar_container_item = is_food_sugar(item)
    return sugar_container_item

behavior __goal__():
    body:
        if exists lemon: item : is_lemon(lemon):
            bind lemon: item where:
                is_lemon(lemon)
            achieve close_char(char, lemon)

        else:
            foreach item: item:
                if is_lookable(item) and not visited(item):
                    observe(item, "Check if this item is a lemon")

        if exists sugar_container: item : is_sugar_container(sugar_container):
            bind sugar_container: item where:
                is_sugar_container(sugar_container)
            achieve close_char(char, sugar_container)

        else:
            foreach item: item:
                if is_lookable(item) and not visited(item):
                    observe(item, "Check if this item is a sugar container")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_lookable not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#goal_representation
 
def is_lemon(item: item):
    symbol lemon_item = is_food_lemon(item)
    return lemon_item

def is_sugar_container(item: item):
    symbol sugar_container_item = is_food_sugar(item)
    return sugar_container_item

behavior __goal__():
    body:
        if exists lemon: item : is_lemon(lemon):
            bind lemon: item where:
                is_lemon(lemon)
            achieve close_char(char, lemon)

        else:
            foreach item: item:
                if lookable(item) and not visited(item):  # Correcting is_lookable to lookable
                    observe(item, "Check if this item is a lemon")

        if exists sugar_container: item : is_sugar_container(sugar_container):
            bind sugar_container: item where:
                is_sugar_container(sugar_container)
            achieve close_char(char, sugar_container)

        else:
            foreach item: item:
                if lookable(item) and not visited(item):  # Correcting is_lookable to lookable
                    observe(item, "Check if this item is a sugar container")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_lemon(lemon:item):
    body:
        if not visited(lemon):
            observe(lemon,"Where is the lemon")

behavior find_sugar_container(sugar_container:item):
    body:
        if not visited(sugar_container):
            observe(sugar_container,"Where is the sugar container")

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select an item classified as a lemon

        bind sugar_container: item where:
            is_food_sugar(sugar_container)
        # Select an item classified as a sugar container

        find_lemon(lemon)
        find_sugar_container(sugar_container)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_lemon(lemon:item):
    body:
        if not visited(lemon):
            observe(lemon,"Where is the lemon")

behavior find_sugar_container(sugar_container:item):
    body:
        if not visited(sugar_container):
            observe(sugar_container,"Where is the sugar container")

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select an item classified as a lemon

        bind sugar_container: item where:
            is_food_sugar(sugar_container)
        # Select an item classified as a sugar container

        find_lemon(lemon)
        find_sugar_container(sugar_container)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_lemon_2028, fridge_289)walk_executor(food_lemon_2028)obs(food_lemon_2028, Where is the lemon)walk_executor(fridge_289)exp(food_sugar_2039, fridge_289)walk_executor(food_sugar_2039)obs(food_sugar_2039, Where is the sugar container)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_lemon_2028, fridge_289)
Find food_lemon_2028. 
##############################
From agent.py-> find a plan in act()
obs(food_lemon_2028, Where is the lemon)obs(food_sugar_2039, Where is the sugar container)
##############################
From agent.py
obs(food_lemon_2028, Where is the lemon)
Get this information:  food_lemon_2028 is close to fridge_289. food_lemon_2028 is close to character_65. food_lemon_2028 is inside fridge_289. food_lemon_2028 is inside dining_room_201. food_lemon_2028 is CLEAN.
##############################
From agent.py
obs(food_sugar_2039, Where is the sugar container)
Get this information:  food_sugar_2039 is close to fridge_289. food_sugar_2039 is close to character_65. food_sugar_2039 is inside fridge_289. food_sugar_2039 is inside dining_room_201. food_sugar_2039 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar container
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        achieve_once inhand(lemon)
        # Hold the lemon in hand
        
        squeeze(lemon)
        # Squeeze the lemon into the cup
        
        achieve_once inside(sugar, cup)
        # Add sugar into the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar container
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        achieve_once inhand(lemon)
        # Hold the lemon in hand
        
        squeeze(lemon)
        # Squeeze the lemon into the cup
        
        achieve_once inside(sugar, cup)
        # Add sugar into the cup

##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2028)walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the lemon into the cup to complete this sub-task.
##############################
From agent.py
Human Instruction: You need to squeeze the lemon into the cup to complete this sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Where is the lemon.
Action 6: Observe around food_sugar_2039 with the question of Where is the sugar container.
Action 7: Grab food_lemon_2028.
Action 8: Walk to kitchen_counter_230.
Action 9: look for cup_2063 around kitchen_counter_230.
Action 10: Walk to food_sugar_2039.
Action 11: Grab food_sugar_2039.
Action 12: Walk to cup_2063.
Action 13: Put food_sugar_2039 into cup_2063.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        achieve_once cut(lemon) # Cut the lemon before squeezing
        squeeze(lemon) # Squeeze the lemon

behavior add_sugar_to_cup(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup) # Add the sugar to the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar
        squeeze_lemon_into_cup(lemon, cup)
        add_sugar_to_cup(sugar, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        achieve_once cut(lemon) # Cut the lemon before squeezing
        squeeze(lemon) # Squeeze the lemon

behavior add_sugar_to_cup(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup) # Add the sugar to the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar
        squeeze_lemon_into_cup(lemon, cup)
        add_sugar_to_cup(sugar, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the lemon into the cup to complete this sub-task. The actions taken so far include cutting the lemon and adding sugar to the cup, but squeezing the lemon into the cup has not been completed.
##############################
From agent.py
Human Instruction: You need to squeeze the lemon into the cup to complete this sub-task. The actions taken so far include cutting the lemon and adding sugar to the cup, but squeezing the lemon into the cup has not been completed.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Where is the lemon.
Action 6: Observe around food_sugar_2039 with the question of Where is the sugar container.
Action 7: Grab food_lemon_2028.
Action 8: Walk to kitchen_counter_230.
Action 9: look for cup_2063 around kitchen_counter_230.
Action 10: Walk to food_sugar_2039.
Action 11: Grab food_sugar_2039.
Action 12: Walk to cup_2063.
Action 13: Put food_sugar_2039 into cup_2063.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_lemon_2028 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_lemon_2028.
Action 19: Cut food_lemon_2028.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)
        # Squeeze the lemon into a container

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to squeeze
        
        bind cup: item where:
            is_cup(cup)
        # Select the cup to squeeze lemon into
        
        squeeze_lemon(lemon)
        # Squeeze the lemon into the selected cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to squeeze

        bind cup: item where:
            is_cup(cup)
        # Select the cup to squeeze lemon into

        squeeze(lemon)
        # Squeeze the lemon into the selected cup
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        achieve cut(lemon)
        # Ensure the lemon is cut
        squeeze(lemon)
        # Squeeze the lemon

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        squeeze_lemon_into_cup(lemon, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
plain
behavior squeeze_lemon_and_add_sugar(lemon:item, cup:item):
    body:
        achieve cut(lemon) # Ensure the lemon is cut before squeezing
        achieve_once inhand(lemon) # Temporary state to hold the lemon while squeezing
        achieve_once close_char(char, cup) # Ensure proximity to the cup
        squeeze(lemon) # Squeeze the lemon into the cup
        # Sugar is already added as per the known actions

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to be used
        bind cup: item where:
            is_cup(cup)
        # Select the cup to be used
        squeeze_lemon_and_add_sugar(lemon, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'plain') at line 5776, column 1.
Expected one of: 
	* UNDIRECTED_GENERATOR
	* INIT
	* GOAL
	* TYPEDEF
	* _NEWLINE
	* FEATURE
	* DEF
	* CONTROLLER
	* IMPORT
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* DOMAIN
	* GENERATOR
	* OBJECTS
	* INCLUDE
	* $END

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior squeeze_lemon_and_add_sugar(lemon:item, cup:item):
    body:
        achieve cut(lemon) # Ensure the lemon is cut before squeezing
        achieve_once inhand(lemon) # Temporary state to hold the lemon while squeezing
        achieve_once close_char(char, cup) # Ensure proximity to the cup
        squeeze(lemon) # Squeeze the lemon into the cup
        # Sugar is already added as per the known actions

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to be used
        bind cup: item where:
            is_cup(cup)
        # Select the cup to be used
        squeeze_lemon_and_add_sugar(lemon, cup)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior squeeze_lemon_and_add_sugar(lemon:item, cup:item):
    body:
        achieve cut(lemon) # Ensure the lemon is cut before squeezing
        achieve_once inhand(lemon) # Temporary state to hold the lemon while squeezing
        achieve_once close_char(char, cup) # Ensure proximity to the cup
        squeeze(lemon) # Squeeze the lemon into the cup
        # Sugar is already added as per the known actions

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to be used
        bind cup: item where:
            is_cup(cup)
        # Select the cup to be used
        squeeze_lemon_and_add_sugar(lemon, cup)
##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2028)walk_executor(cup_2063)walk_executor(food_lemon_2028)
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the lemon into the cup to complete the sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_stir(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure you are close to the faucet before interacting
        achieve_once open(faucet)
        # Open the faucet to access water for the cup
        achieve has_water(cup)
        # Fill the cup with water from the faucet
        achieve_once closed(faucet)
        # Close the faucet after obtaining water to conserve water

behavior stir_lemon_water(cup:item):
    body:
        achieve_once inhand(spoon)
        # Take a spoon for stirring the lemon water
        achieve_once on(spoon, cup)
        # Stir the contents of the cup to mix the lemon, sugar, and water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind spoon: item where:
            is_cutlery(spoon)
        # Select a spoon for stirring
        
        add_water_and_stir(cup, faucet)
        stir_lemon_water(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: spoon; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#goal_representation
 
behavior add_water_and_stir(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure you are close to the faucet before interacting
        achieve_once open(faucet)
        # Open the faucet to access water for the cup
        achieve has_water(cup)
        # Fill the cup with water from the faucet
        achieve_once closed(faucet)
        # Close the faucet after obtaining water to conserve water

behavior stir_lemon_water(cup:item, spoon:item):
    body:
        achieve_once inhand(spoon)
        # Take a spoon for stirring the lemon water
        achieve_once on(spoon, cup)
        # Stir the contents of the cup to mix the lemon, sugar, and water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind spoon: item where:
            is_cutlery(spoon)
        # Select a spoon for stirring
        
        add_water_and_stir(cup, faucet)
        stir_lemon_water(cup, spoon)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_cutlery not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#goal_representation
 
behavior add_water_and_stir(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure you are close to the faucet before interacting
        achieve_once open(faucet)
        # Open the faucet to access water for the cup
        achieve has_water(cup)
        # Fill the cup with water from the faucet
        achieve_once closed(faucet)
        # Close the faucet after obtaining water to conserve water

behavior stir_lemon_water(cup:item, spoon:item):
    body:
        achieve_once inhand(spoon)
        # Take a spoon for stirring the lemon water
        achieve_once on(spoon, cup)
        # Stir the contents of the cup to mix the lemon, sugar, and water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind spoon: item where:
            is_fork(spoon)
        # Select a fork for stirring
        
        add_water_and_stir(cup, faucet)
        stir_lemon_water(cup, spoon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_stir(cup:item, source:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select an appropriate water source
        
        add_water_and_stir(cup, water_source)
        # Add water to the cup and stir

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_and_stir(cup:item, source:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select an appropriate water source
        
        add_water_and_stir(cup, water_source)
        # Add water to the cup and stir

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(food_lemon_2028, kitchen_counter_230)grab_executor(cup_2063)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. food_lemon_2028 is close kitchen_counter_230. kitchen_counter_230 is close food_lemon_2028. food_lemon_2028 is on kitchen_counter_230. food_lemon_2028 released by left hand. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by left hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure water is added to the cup, and the content inside the cup has been stirred. Also, squeeze the lemon into the cup as instructed.
##############################
From agent.py
Human Instruction: You need to ensure water is added to the cup, and the content inside the cup has been stirred. Also, squeeze the lemon into the cup as instructed.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Where is the lemon.
Action 6: Observe around food_sugar_2039 with the question of Where is the sugar container.
Action 7: Grab food_lemon_2028.
Action 8: Walk to kitchen_counter_230.
Action 9: look for cup_2063 around kitchen_counter_230.
Action 10: Walk to food_sugar_2039.
Action 11: Grab food_sugar_2039.
Action 12: Walk to cup_2063.
Action 13: Put food_sugar_2039 into cup_2063.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_lemon_2028 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_lemon_2028.
Action 19: Cut food_lemon_2028.
Action 20: Grab food_lemon_2028.
Action 21: Walk to cup_2063.
Action 22: Walk to food_lemon_2028.
Action 23: Walk to kitchen_counter_230.
Action 24: Put food_lemon_2028 on kitchen_counter_230.
Action 25: Grab cup_2063.
Action 26: Switch on faucet_232.
Action 27: Switch off faucet_232.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_stove_2065(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_water_and_stir(cup:item, water_source:item):
    body:
        achieve_once has_water(cup)
        # Pour water into the cup from the water source
        achieve_once clean(cup)  # Ensure the contents are stirred

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup for the task
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source
        pour_water_and_stir(cup, water_source)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_water_and_stir(cup:item, water_source:item):
    body:
        achieve_once has_water(cup)
        # Pour water into the cup from the water source
        achieve_once clean(cup)  # Ensure the contents are stirred

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup for the task
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source
        pour_water_and_stir(cup, water_source)

##############################
From agent.py-> find a plan in act()
put_executor(knife_2050, kitchen_counter_230)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(cup_2063)switchoff_executor(faucet_43)
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that water is added to the cup, as there is no explicit action indicating water was poured into the cup. Additionally, ensure the content inside the cup is stirred after adding water.
##############################
From agent.py
Human Instruction: You need to ensure that water is added to the cup, as there is no explicit action indicating water was poured into the cup. Additionally, ensure the content inside the cup is stirred after adding water.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Where is the lemon.
Action 6: Observe around food_sugar_2039 with the question of Where is the sugar container.
Action 7: Grab food_lemon_2028.
Action 8: Walk to kitchen_counter_230.
Action 9: look for cup_2063 around kitchen_counter_230.
Action 10: Walk to food_sugar_2039.
Action 11: Grab food_sugar_2039.
Action 12: Walk to cup_2063.
Action 13: Put food_sugar_2039 into cup_2063.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_lemon_2028 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_lemon_2028.
Action 19: Cut food_lemon_2028.
Action 20: Grab food_lemon_2028.
Action 21: Walk to cup_2063.
Action 22: Walk to food_lemon_2028.
Action 23: Walk to kitchen_counter_230.
Action 24: Put food_lemon_2028 on kitchen_counter_230.
Action 25: Grab cup_2063.
Action 26: Switch on faucet_232.
Action 27: Switch off faucet_232.
Action 28: Put knife_2050 on kitchen_counter_230.
Action 29: Walk to faucet_43.
Action 30: Switch on faucet_43.
Action 31: Wash cup_2063.
Action 32: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_bowl_2071_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_stir(cup:item, water_source:item):
    body:
        achieve_once has_water(cup)
        # Add water to the cup
        achieve_once close_char(char, cup)
        # Bring the character close to the cup to stir
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet as the water source
        add_water_and_stir(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_stir(cup:item, faucet:item):
    body:
        achieve_once has_water(cup)
        # Fill the cup with water

behavior stir_content(cup:item):
    body:
        # There is no need to maintain a state here,
        # as the task is to restore the state by stirring the contents
        pass

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that is capable of receiving substances

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        add_water_and_stir(cup, faucet)
        stir_content(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_stir(cup:item):
    body:
        achieve has_water(cup)
        # Ensure water is added to the cup
        achieve_once inhand(stirrer)
        # Keep the stirrer in hand for stirring


 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stirrer: item where:
            grabbable(stirrer) and is_knife(stirrer)
        add_water_and_stir(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stirrer; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_296_around_microwave_297(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tray,microwave_instance)
        else:
            exp(tray,microwave_instance)
    eff:
        unknown[tray]=False
        close[tray,microwave_instance]=True
        close[microwave_instance,tray]=True
    

#goal_representation
 
behavior add_water_and_stir(cup:item, stirrer:item):
    body:
        achieve has_water(cup)
        achieve_once inhand(stirrer)
        # Keep the stirrer in hand for stirring

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stirrer: item where:
            grabbable(stirrer) and is_knife(stirrer)
        add_water_and_stir(cup, stirrer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_and_stir(cup:item, stirrer:item):
    body:
        achieve has_water(cup)
        achieve_once inhand(stirrer)
        # Keep the stirrer in hand for stirring

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stirrer: item where:
            grabbable(stirrer) and is_knife(stirrer)
        add_water_and_stir(cup, stirrer)

##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the cup, as there is no action indicating water was poured into the cup. Additionally, you need to ensure that the contents of the cup are stirred after adding water.
##############################
Task Summary:
Task Goal:
Make a cup of lemon water with additional sugar.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_lemon_2028)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cup_2063)', 'walk_executor(food_lemon_2028)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_lemon_2028, kitchen_counter_230)', 'grab_executor(cup_2063)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(cup_2063)', 'switchoff_executor(faucet_43)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)']
Time info:
Time consume: 323 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 14
goal correct times: 2
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 5 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
