From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the shirt.', '2. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_closetdrawer_143(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        # Ensure the shirt is washed
        
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and dirty(shirt)
        # Select a dirty shirt
        
        wash_shirt(shirt)
        # Wash the selected dirty shirt by hand

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_closetdrawer_122(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash(obj: item):
    body:
        wash(obj)
        rinse(obj)
        scrub(obj)
        squeeze(obj)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and dirty(shirt)
        hand_wash(shirt)
        achieve clean(shirt)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

behavior wash_shirt(shirt: item):
    body:
        wash(shirt)
        # Hand wash the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt to wash
        wash_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior wash_shirt(shirt: item):
    body:
        wash(shirt)
        # Hand wash the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt to wash
        wash_shirt(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironed(item: item):
    # Checks if the item is ironed by seeing if its wrinkled and needs ironing
    return not dirty(item)

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board temporarily
        achieve_once is_on(iron)
        # Ensure that the iron is turned on
        achieve is_ironed(shirt)
        # Iron the shirt to remove wrinkles

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select a clean shirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        
        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt, completing the subtask

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ironed(item: item):
    # Checks if the item is ironed by seeing if its wrinkled and needs ironing
    return not dirty(item)

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board temporarily
        achieve_once is_on(iron)
        # Ensure that the iron is turned on
        achieve is_ironed(shirt)
        # Iron the shirt to remove wrinkles

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select a clean shirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        
        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt, completing the subtask

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You still need to perform the ironing action on the shirt. Although you've placed the shirt on the ironing board and turned on the iron, the ironing process itself has not been executed yet.
##############################
From agent.py
Human Instruction: You still need to perform the ironing action on the shirt. Although you've placed the shirt on the ironing board and turned on the iron, the ironing process itself has not been executed yet.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Grab clothes_shirt_2086.
Action 4: Walk to faucet_43.
Action 5: Switch on faucet_43.
Action 6: Wash clothes_shirt_2086.
Action 7: Switch off faucet_43.
Action 8: Walk to ironing_board_2074.
Action 9: Put clothes_shirt_2086 on ironing_board_2074.
Action 10: look for iron_2089 around ironing_board_2074.
Action 11: Walk to iron_2089.
Action 12: Plug in iron_2089.
Action 13: Switch on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_154(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_hanger_142_around_closetdrawer_143(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board item

        bind iron: item where:
            is_iron(iron)
        # Select the iron item

        # Ensure that the shirt is on the ironing board
        achieve on(shirt, ironing_board)

        # Ensure that the iron is plugged in and switched on
        achieve plugged(iron)
        achieve is_on(iron)

        # Start the ironing process
        achieve_once inhand(iron)

        # After ironing, place the iron back on the board
        achieve_once on(iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board item

        bind iron: item where:
            is_iron(iron)
        # Select the iron item

        # Ensure that the shirt is on the ironing board
        achieve on(shirt, ironing_board)

        # Ensure that the iron is plugged in and switched on
        achieve plugged(iron)
        achieve is_on(iron)

        # Start the ironing process
        achieve_once inhand(iron)

        # After ironing, place the iron back on the board
        achieve_once on(iron, ironing_board)

##############################
From agent.py-> find a plan in act()
grab_executor(iron_2089)put_executor(iron_2089, ironing_board_2074)
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py
put_executor(iron_2089, ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is close ironing_board_2074. iron_2089 is on ironing_board_2074. iron_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the actual ironing action on the shirt. Although the shirt is on the ironing board and the iron is plugged in and turned on, the ironing process has not been executed yet.
##############################
From agent.py
Human Instruction: You need to perform the actual ironing action on the shirt. Although the shirt is on the ironing board and the iron is plugged in and turned on, the ironing process has not been executed yet.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Grab clothes_shirt_2086.
Action 4: Walk to faucet_43.
Action 5: Switch on faucet_43.
Action 6: Wash clothes_shirt_2086.
Action 7: Switch off faucet_43.
Action 8: Walk to ironing_board_2074.
Action 9: Put clothes_shirt_2086 on ironing_board_2074.
Action 10: look for iron_2089 around ironing_board_2074.
Action 11: Walk to iron_2089.
Action 12: Plug in iron_2089.
Action 13: Switch on iron_2089.
Action 14: Grab iron_2089.
Action 15: Put iron_2089 on ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_376_around_closetdrawer_377(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation

behavior iron_shirt(iron:item, shirt:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve_once is_on(iron)
        achieve_once on(shirt, board)
        # Iron the shirt on the board until it is wrinklefree

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and turned on
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board_2074)
        # Select the shirt on ironing board

        bind board: item where:
            is_ironing_board(board) and on(shirt, board)
        # Select the ironing board on which the shirt is placed

        iron_shirt(iron, shirt, board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_361_around_closetdrawer_122(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve_once on(shirt, board)
        # Iron the shirt on the board until it is wrinklefree

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and turned on
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, board)
        # Select the shirt

        bind board: item where:
            is_ironing_board(board) and on(shirt, board)
        # Select the ironing board on which the shirt is placed

        iron_shirt(iron, shirt, board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: board; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve_once on(shirt, board)
        # Iron the shirt on the board until it is wrinklefree

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and turned on
        
        bind board: item where:
            is_ironing_board(board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, board)
        # Select the shirt on the ironing board

        iron_shirt(iron, shirt, board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(iron:item, shirt:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve_once on(shirt, board)
        # Iron the shirt on the board until it is wrinklefree

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and turned on
        
        bind board: item where:
            is_ironing_board(board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, board)
        # Select the shirt on the ironing board

        iron_shirt(iron, shirt, board)

##############################
From agent.py-> find a plan in act()
grab_executor(iron_2089)
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the actual ironing action on the shirt. While the shirt is on the ironing board and the iron is plugged in and turned on, you have not yet executed the ironing process.
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'grab_executor(iron_2089)', 'put_executor(iron_2089, ironing_board_2074)', 'grab_executor(iron_2089)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 2
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
