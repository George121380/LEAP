From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        if achieve_once is_off(computer):
            # Ensure the computer is off before attempting to turn it on
            achieve is_on(computer)
            # Turn on the computer

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_off') at line 5678, column 25.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_168_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        if is_off(computer):
            # Ensure the computer is off before attempting to turn it on
            achieve is_on(computer)
            # Turn on the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        if is_off(computer):
            # Ensure the computer is off before attempting to turn it on
            achieve is_on(computer)
            # Turn on the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Robot find: chair_356, keyboard_415, mouse_413, Robot is close to the computer_417. 
##############################
From agent.py
switchon_executor(computer_417)
Robot find: Robot is close to the computer_417. computer_417 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(computer_417)', 'switchon_executor(computer_417)']
Time info:
Time consume: 32 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 1
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
