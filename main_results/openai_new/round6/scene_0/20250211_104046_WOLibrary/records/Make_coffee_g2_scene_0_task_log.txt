From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to make a cup of coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_sink_42(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start the process

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        observe(coffe_maker, "Check if it is plugged and has water")
        # Check if the coffee maker is plugged in and has water

        if not plugged(coffe_maker):
            achieve_once plugged(coffe_maker)
        # If the coffee maker is not plugged in, plug it in

        if not has_water(coffe_maker):
            observe(coffe_maker, "Check what type of water container is suitable")
            # If the coffee maker does not have water, determine the appropriate method to add water

        make_coffee(coffe_maker) 
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start the process

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        observe(coffe_maker, "Check if it is plugged and has water")
        # Check if the coffee maker is plugged in and has water

        if not plugged(coffe_maker):
            achieve_once plugged(coffe_maker)
        # If the coffee maker is not plugged in, plug it in

        if not has_water(coffe_maker):
            observe(coffe_maker, "Check what type of water container is suitable")
            # If the coffee maker does not have water, determine the appropriate method to add water

        make_coffee(coffe_maker) 
        # Make a cup of coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if it is plugged and has water)obs(coffe_maker_290, Check what type of water container is suitable)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if it is plugged and has water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN.
##############################
From agent.py
obs(coffe_maker_290, Check what type of water container is suitable)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot did not perform any actions to ensure that the coffee maker had water. You need to observe if there is water present and, if not, add it before making coffee.
##############################
From agent.py
Human Instruction: The robot did not perform any actions to ensure that the coffee maker had water. You need to observe if there is water present and, if not, add it before making coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check if it is plugged and has water.
Action 4: Observe around coffe_maker_290 with the question of Check what type of water container is suitable.
Action 5: Close coffe_maker_290.
Action 6: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_377(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior make_coffee_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            # Ensure the coffee maker is identified
        if not has_water(coffee_maker):
            # Check if the coffee maker has water
            observe(coffee_maker,"Check what type of water container is suitable")
        make_coffee_with_water(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior make_coffee_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            # Ensure the coffee maker is identified
        if not has_water(coffee_maker):
            # Check if the coffee maker has water
            observe(coffee_maker,"Check what type of water container is suitable")
        make_coffee_with_water(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check what type of water container is suitable)walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check what type of water container is suitable)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN.
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker has water before proceeding. Observe if there is water present and, if not, add it to the coffee maker.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker has water before proceeding. Observe if there is water present and, if not, add it to the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check if it is plugged and has water.
Action 4: Observe around coffe_maker_290 with the question of Check what type of water container is suitable.
Action 5: Close coffe_maker_290.
Action 6: Switch on coffe_maker_290.
Action 7: Switch off coffe_maker_290.
Action 8: Open coffe_maker_290.
Action 9: Observe around coffe_maker_290 with the question of Check what type of water container is suitable.
Action 10: Walk to faucet_232.
Action 11: Switch on faucet_232.
Action 12: Switch off faucet_232.
Action 13: Walk to coffe_maker_290.
Action 14: Close coffe_maker_290.
Action 15: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_wallshelf_235(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_coffee_maker_status(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if it is plugged and has water")
        # Observe if the coffee maker is plugged in and has water

behavior fill_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior close_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker

behavior start_coffee_making(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Switch on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        check_coffee_maker_status(coffee_maker)

        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet
            observe(faucet, "Check if the faucet is accessible and can be used to fill water")
            fill_water(coffee_maker)

        close_coffee_maker(coffee_maker)
        start_coffee_making(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_coffee_maker_status(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if it is plugged and has water")
        # Observe if the coffee maker is plugged in and has water

behavior fill_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior close_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker

behavior start_coffee_making(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Switch on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        check_coffee_maker_status(coffee_maker)

        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet
            observe(faucet, "Check if the faucet is accessible and can be used to fill water")
            fill_water(coffee_maker)

        close_coffee_maker(coffee_maker)
        start_coffee_making(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if it is plugged and has water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if it is plugged and has water)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water, as this step has not been confirmed as completed. Ensure that there is water in the coffee maker before closing and turning it on to make coffee.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_wallshelf_235(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_sugar,wallshelf_instance)
        else:
            exp(food_sugar,wallshelf_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,wallshelf_instance]=True
        close[wallshelf_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_milk_and_sugar():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        # Bind a grabbable instance of milk
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        # Bind a grabbable instance of sugar
        achieve_once inhand(milk)
        achieve_once inhand(sugar)

behavior add_ingredients_to_coffee(milk: item, sugar: item, coffee: item):
    body:
        achieve_once inside(milk, coffee) # Add milk to the coffee
        achieve_once inside(sugar, coffee) # Add sugar to the coffee

behavior __goal__():
    body:
        find_and_grab_milk_and_sugar()
        bind coffee: item where:
            is_cup(coffee) # A cup of coffee
        add_ingredients_to_coffee(milk, sugar, coffee)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_wallshelf_234(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_sugar,wallshelf_instance)
        else:
            exp(food_sugar,wallshelf_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,wallshelf_instance]=True
        close[wallshelf_instance,food_sugar]=True
    

#goal_representation
 
behavior find_and_grab_milk_and_sugar():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        # Bind a grabbable instance of milk
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        # Bind a grabbable instance of sugar
        achieve_once inhand(milk)
        achieve_once inhand(sugar)

behavior add_ingredients_to_coffee(milk: item, sugar: item, coffee: item):
    body:
        achieve_once inside(milk, coffee) # Add milk to the coffee
        achieve_once inside(sugar, coffee) # Add sugar to the coffee

behavior __goal__():
    body:
        find_and_grab_milk_and_sugar()
        bind coffee: item where:
            is_cup(coffee) # A cup of coffee
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        add_ingredients_to_coffee(milk, sugar, coffee)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_grab_milk_and_sugar():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        # Bind a grabbable instance of milk
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        # Bind a grabbable instance of sugar
        achieve_once inhand(milk)
        achieve_once inhand(sugar)

behavior add_ingredients_to_coffee(milk: item, sugar: item, coffee: item):
    body:
        achieve_once inside(milk, coffee) # Add milk to the coffee
        achieve_once inside(sugar, coffee) # Add sugar to the coffee

behavior __goal__():
    body:
        find_and_grab_milk_and_sugar()
        bind coffee: item where:
            is_cup(coffee) # A cup of coffee
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        bind sugar: item where:
            is_food_sugar(sugar) and grabbable(sugar)
        add_ingredients_to_coffee(milk, sugar, coffee)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(wallshelf_234)exp(food_sugar_2039, wallshelf_234)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_sugar_2039 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 120 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 1
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
