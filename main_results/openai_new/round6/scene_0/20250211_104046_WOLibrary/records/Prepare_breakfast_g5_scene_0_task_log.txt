From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal.', "2. Pour milk into a cup and heat it up until it's hot.", '3. Add cereal to the hot milk in the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal(item:item):
    # Function to check if an item is either milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior __goal__():
    body:
        # Check if weve already identified both milk and cereal
        if exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal)):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            bind cereal: item where:
                is_food_cereal(cereal)
            # Select the cereal
            achieve close_char(char, milk)
            # Move character closer to the milk
            achieve close_char(char, cereal)
            # Move character closer to the cereal

        else:
            # If milk and cereal have not been identified, initiate a search
            foreach item: item:
                if is_milk_or_cereal(item) and not visited(item):
                    observe(item, "Identify if it is milk or cereal")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5675, column 59.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def is_milk_or_cereal(item: item):
    # Function to check if an item is either milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior __goal__():
    body:
        # Check if weve already identified both milk and cereal
        if exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal)):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            bind cereal: item where:
                is_food_cereal(cereal)
            # Select the cereal
            achieve close_char(char, milk)
            # Move character closer to the milk
            achieve close_char(char, cereal)
            # Move character closer to the cereal

        else:
            # If milk and cereal have not been identified, initiate a search
            foreach item: item:
                if is_milk_or_cereal(item) and not visited(item):
                    observe(item, "Identify if it is milk or cereal")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5675, column 59.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def is_milk_or_cereal(item: item):
    # Function to check if an item is either milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior __goal__():
    body:
        # Check if weve already identified both milk and cereal
        if (exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            bind cereal: item where:
                is_food_cereal(cereal)
            # Select the cereal
            achieve close_char(char, milk)
            # Move character closer to the milk
            achieve close_char(char, cereal)
            # Move character closer to the cereal

        else:
            # If milk and cereal have not been identified, initiate a search
            foreach item: item:
                if is_milk_or_cereal(item) and not visited(item):
                    observe(item, "Identify if it is milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                observe(item, "Check if it is milk or cereal")

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                observe(item, "Check if it is milk or cereal")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_cereal_2015, kitchen_counter_230)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, Check if it is milk or cereal)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Check if it is milk or cereal)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_cereal_2015, kitchen_counter_230)
Fail to find food_cereal_2015 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_cereal_2015, cupboard_229)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, Check if it is milk or cereal)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Check if it is milk or cereal)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_cereal_2015, cupboard_229)
Fail to find food_cereal_2015 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_cereal_2015, fridge_289)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, Check if it is milk or cereal)walk_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Check if it is milk or cereal)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_cereal_2015, fridge_289)
Find food_cereal_2015. 
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, Check if it is milk or cereal)obs(milk_2043, Check if it is milk or cereal)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_in_fridge(milk:item, fridge:item):
    body:
        achieve_once inside(milk, fridge)

behavior __goal__():
    body:
        # Bind cereal item
        bind food_cereal: item where:
            is_food_cereal(food_cereal) 

        # Bind fridge item and milk item
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            inside(milk, fridge) and is_milk(milk)

        # Check the cereal for availability
        if not visited(food_cereal):
            observe(food_cereal, "Is food_cereal_2015 present")
        
        # Check that milk is available and inside the fridge
        if not visited(milk):
            check_in_fridge(milk, fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_in_fridge(milk:item, fridge:item):
    body:
        achieve_once inside(milk, fridge)

behavior __goal__():
    body:
        # Bind cereal item
        bind food_cereal: item where:
            is_food_cereal(food_cereal) 

        # Bind fridge item and milk item
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            inside(milk, fridge) and is_milk(milk)

        # Check the cereal for availability
        if not visited(food_cereal):
            observe(food_cereal, "Is food_cereal_2015 present")
        
        # Check that milk is available and inside the fridge
        if not visited(milk):
            check_in_fridge(milk, fridge)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, Is food_cereal_2015 present)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(neighborhood:item):
    # Function to check if milk or cereal is in the specified neighborhood
    symbol has_items = exists o: item : ((is_milk(o) or is_food_cereal(o)) and close_char(char, o))
    return has_items

behavior __goal__():
    body:
        if exists neighborhood: item : (has_milk_or_cereal(neighborhood)):
            # If milk or cereal is close to the character based on known information
            foreach neighborhood: item:
                if has_milk_or_cereal(neighborhood):
                    observe(neighborhood, "Check the milk and food cereal around")
                    
        else:
            # Check all areas around that havent been examined closely for milk and cereal
            foreach area: item:
                if is_kitchen_counter(area) or is_cupboard(area) or is_fridge(area):
                    if not visited(area):
                        observe(area, "Check for milk and food cereal here")

#goal_representation_end

##############################
Error is:
Failed to rename the derived function application.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_milk_or_cereal(fridge:item, cupboard:item, counter:item):
    # Check if milk or cereal is located in either the fridge, cupboard, or on the counter
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and (inside(o, fridge) or inside(o, cupboard) or on(o, counter)))
    return has_milk_or_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Bind to fridge item with ID 289
        
        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard] == 229
        # Bind to cupboard item with ID 229
        
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter] == 230
        # Bind to kitchen counter item with ID 230
        
        if find_milk_or_cereal(fridge, cupboard, counter):
            if exists item: item : ((is_milk(item) or is_food_cereal(item)) and (inside(item, fridge))):
                achieve close_char(char, fridge)
                # Approach the fridge

            elif exists item: item : ((is_milk(item) or is_food_cereal(item)) and (inside(item, cupboard))):
                achieve close_char(char, cupboard)
                # Approach the cupboard

            elif exists item: item : ((is_milk(item) or is_food_cereal(item)) and (on(item, counter))):
                achieve close_char(char, counter)
                # Approach the kitchen counter

        else:
            foreach o: item:
                if ((is_milk(o) or is_food_cereal(o)) and not visited(o)):
                    observe(o, "Check if its milk or cereal")


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5835, column 18.
Expected one of: 
	* FLOORDIV
	* PLUS
	* LSHIFT
	* OR
	* VBAR
	* LESSTHAN
	* __ANON_3
	* __ANON_6
	* STAR
	* __ANON_2
	* LESS_EQ
	* AND
	* __ANON_5
	* MORETHAN
	* GREATER_EQ
	* __ANON_7
	* __ANON_0
	* MINUS
	* AT
	* __ANON_1
	* AMPERSAND
	* IF
	* EQUAL
	* CIRCUMFLEX
	* RSHIFT
	* NOT_EQ
	* _NEWLINE
	* __ANON_8
	* SEMICOLON
	* SLASH
	* DOUBLE_EQUAL
	* __ANON_4
	* COMMA
	* PERCENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def find_milk_or_cereal(fridge:item, cupboard:item, counter:item):
    # Check if milk or cereal is located in either the fridge, cupboard, or on the counter
    symbol has_milk_or_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and (inside(o, fridge) or inside(o, cupboard) or on(o, counter)))
    return has_milk_or_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Bind to fridge item with ID 289
        
        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard] == 229
        # Bind to cupboard item with ID 229
        
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter] == 230
        # Bind to kitchen counter item with ID 230
        
        if find_milk_or_cereal(fridge, cupboard, counter):
            if exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, fridge)):
                achieve close_char(char, fridge)
                # Approach the fridge

            elif exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, cupboard)):
                achieve close_char(char, cupboard)
                # Approach the cupboard

            elif exists o: item : ((is_milk(o) or is_food_cereal(o)) and on(o, counter)):
                achieve close_char(char, counter)
                # Approach the kitchen counter

        else:
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Check if its milk or cereal")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5835, column 18.
Expected one of: 
	* FLOORDIV
	* PLUS
	* LSHIFT
	* OR
	* VBAR
	* LESSTHAN
	* __ANON_3
	* __ANON_6
	* STAR
	* __ANON_2
	* LESS_EQ
	* AND
	* __ANON_5
	* MORETHAN
	* GREATER_EQ
	* __ANON_7
	* __ANON_0
	* MINUS
	* AT
	* __ANON_1
	* AMPERSAND
	* IF
	* EQUAL
	* CIRCUMFLEX
	* RSHIFT
	* NOT_EQ
	* _NEWLINE
	* __ANON_8
	* SEMICOLON
	* SLASH
	* DOUBLE_EQUAL
	* __ANON_4
	* COMMA
	* PERCENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#goal_representation
 
def find_milk_or_cereal(fridge:item, cupboard:item, counter:item):
    # Check if milk or cereal is located in either the fridge, cupboard, or on the counter
    symbol has_milk_or_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and (inside(o, fridge) or inside(o, cupboard) or on(o, counter)))
    return has_milk_or_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Bind to fridge item with ID 289
        
        bind cupboard: item where:
            is_cupboard(cupboard) and id[cupboard] == 229
        # Bind to cupboard item with ID 229
        
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter] == 230
        # Bind to kitchen counter item with ID 230
        
        if find_milk_or_cereal(fridge, cupboard, counter):
            if exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, fridge)):
                achieve close_char(char, fridge)
                # Approach the fridge

            elif exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, cupboard)):
                achieve close_char(char, cupboard)
                # Approach the cupboard

            elif exists o: item : ((is_milk(o) or is_food_cereal(o)) and on(o, counter)):
                achieve close_char(char, counter)
                # Approach the kitchen counter

        else:
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Check if its milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal_found():
    # Function to check if milk or cereal has been found
    symbol found= exists x: item : ((is_milk(x) or is_food_cereal(x)) and visited(x))
    return found

behavior __goal__():
    body:
        if is_milk_or_cereal_found():
            # If milk or cereal has already been found, we dont need to continue looking
            return

        else:
            # Check all relevant locations for milk or cereal that have not been visited
            foreach location: item:
                if (is_cupboard(location) or is_fridge(location) or is_kitchen_counter(location)) and not visited(location):
                    observe(location, "Check for milk or cereal")
                    # Observe each unvisited location to find milk or cereal

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        ') at line 5838, column 19.
Expected one of: 
	* PLUS
	* NONE
	* TRUE
	* OCT_NUMBER
	* LSQB
	* VARNAME
	* DEC_NUMBER
	* LPAR
	* DO
	* BIN_NUMBER
	* FINDALL
	* COLON
	* FALSE
	* EXISTS
	* MINUS
	* HEX_NUMBER
	* STRING
	* ELLIPSIS
	* FINDONE
	* FORALL
	* IMAG_NUMBER
	* LONG_STRING
	* FLOAT_NUMBER
	* TILDE
	* NOT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#goal_representation
 
def is_milk_or_cereal_found():
    # Function to check if milk or cereal has been found
    symbol found= exists x: item : ((is_milk(x) or is_food_cereal(x)) and visited(x))
    return found

behavior __goal__():
    body:
        if is_milk_or_cereal_found():
            # If milk or cereal has already been found, we dont need to continue looking
            return
        else:
            # Check all relevant locations for milk or cereal that have not been visited
            foreach location: item:
                if (is_cupboard(location) or is_fridge(location) or is_kitchen_counter(location)) and not visited(location):
                    observe(location, "Check for milk or cereal")
                    # Observe each unvisited location to find milk or cereal

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n        ') at line 5856, column 19.
Expected one of: 
	* PLUS
	* NONE
	* TRUE
	* OCT_NUMBER
	* LSQB
	* VARNAME
	* DEC_NUMBER
	* LPAR
	* DO
	* BIN_NUMBER
	* FINDALL
	* COLON
	* FALSE
	* EXISTS
	* MINUS
	* HEX_NUMBER
	* STRING
	* ELLIPSIS
	* FINDONE
	* FORALL
	* IMAG_NUMBER
	* LONG_STRING
	* FLOAT_NUMBER
	* TILDE
	* NOT

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
def is_milk_or_cereal_found():
    # Function to check if milk or cereal has been found
    symbol found = exists x: item : ((is_milk(x) or is_food_cereal(x)) and visited(x))
    return found

behavior __goal__():
    body:
        if is_milk_or_cereal_found():
            # If milk or cereal has already been found, we dont need to continue looking
            return
        else:
            # Check all relevant locations for milk or cereal that have not been visited
            foreach location: item:
                if (is_cupboard(location) or is_fridge(location) or is_kitchen_counter(location)) and not visited(location):
                    observe(location, "Check for milk or cereal")
                    # Observe each unvisited location to find milk or cereal
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the milk and cereal." ?
Answer: Locate where the milk and cereal are stored within the kitchen.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk_cereal_found(obj: item):
    # Function to check if the specified item is either milk or cereal
    return is_milk(obj) or is_food_cereal(obj)

def is_in_kitchen(obj: item):
    # Function to check if the item is located in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(obj, room))
    return in_kitchen

behavior __goal__():
    body:
        # Check for milk and cereal around known locations starting from the fridge, cupboard, and kitchen counter
        if not exists o: item : (is_milk_cereal_found(o) and is_in_kitchen(o)):
            # If milk or cereal is not found in known settings, inspect unvisited containers in the kitchen
            foreach loc: item:
                if is_fridge(loc) or is_cupboard(loc) or is_kitchen_counter(loc):
                    if not visited(loc):
                        observe(loc,"Locate milk and cereal in the kitchen")

        else:
            # If milk or cereal is found
            foreach o: item:
                if is_milk_cereal_found(o) and is_in_kitchen(o):
                    achieve_once visited(o)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5823, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#goal_representation
 
def is_milk_cereal_found(obj: item):
    # Function to check if the specified item is either milk or cereal
    return is_milk(obj) or is_food_cereal(obj)

def is_in_kitchen(obj: item):
    # Function to check if the item is located in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(obj, room))
    return in_kitchen

behavior __goal__():
    body:
        # Check for milk and cereal around known locations starting from the fridge, cupboard, and kitchen counter
        if not exists o: item : (is_milk_cereal_found(o) and is_in_kitchen(o)):
            # If milk or cereal is not found in known settings, inspect unvisited containers in the kitchen
            foreach loc: item:
                if is_fridge(loc) or is_cupboard(loc) or is_kitchen_counter(loc):
                    if not visited(loc):
                        observe(loc, "Locate milk and cereal in the kitchen")

        else:
            # If milk or cereal is found
            foreach loc: item:
                if is_fridge(loc) or is_cupboard(loc) or is_kitchen_counter(loc):
                    if visited(loc):
                        achieve visited(loc)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5859, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cup_2063(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(bowl,cup_instance)
        else:
            exp(bowl,cup_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cup_instance]=True
        close[cup_instance,bowl]=True
    

#goal_representation
 
def is_milk_cereal_found(obj: item):
    # Function to check if the specified item is either milk or cereal
    return is_milk(obj) or is_food_cereal(obj)

def is_in_kitchen(obj: item):
    # Function to check if the item is located in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(obj, room))
    return in_kitchen

behavior __goal__():
    body:
        # Check for milk and cereal around known locations starting from the fridge, cupboard, and kitchen counter
        if not exists o: item : (is_milk_cereal_found(o) and is_in_kitchen(o)):
            # If milk or cereal is not found in known settings, inspect unvisited containers in the kitchen
            foreach loc: item:
                if is_fridge(loc) or is_cupboard(loc) or is_kitchen_counter(loc):
                    if not visited(loc):
                        observe(loc, "Locate milk and cereal in the kitchen")
        else:
            # If milk or cereal is found
            foreach loc: item:
                if is_fridge(loc) or is_cupboard(loc) or is_kitchen_counter(loc):
                    if visited(loc):
                        achieve visited(loc)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
behavior __goal__():
    body:
        find_milk_and_cereal()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal(item:item):
    # Function to check if there is milk or cereal in a specified location
    symbol has_milk_or_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, item))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists storage: item : (is_fridge(storage) or is_cupboard(storage)) and has_milk_and_cereal(storage):
            # If the milk or cereal is in the known storage locations, approach one of those locations
            bind storage: item where:
                (is_fridge(storage) or is_cupboard(storage)) and has_milk_and_cereal(storage)
            achieve close_char(char, storage)

        else:
            # Otherwise, observe the kitchen for possible storage locations with milk or cereal
            foreach storage: item:
                if (is_fridge(storage) or is_cupboard(storage)) and not visited(storage):
                    observe(storage, "Check for milk or cereal inside")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal in the kitchen.', '2. Pour the milk into a cup and add the cereal.', '3. Heat the cup in the microwave until the milk is hot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal_in_kitchen(milk: item, cereal: item):
    body:
        if not (visited(milk) and visited(cereal)):
            # Check if milk and cereal have already been observed
            if not visited(milk):
                observe(milk, "Check if this is milk and locate it in the kitchen") 
                # Observe the item to check if it is milk and find its location
            if not visited(cereal):
                observe(cereal, "Check if this is cereal and locate it in the kitchen") 
                # Observe the item to check if it is cereal and find its location

behavior locate_milk_and_cereal(milk: item, cereal: item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        # Move close to both milk and cereal

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
            # Bind the milk item
        bind food_cereal: item where:
            is_food_cereal(food_cereal)
            # Bind the cereal item
        
        find_milk_and_cereal_in_kitchen(milk, food_cereal)
        
        locate_milk_and_cereal(milk, food_cereal)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_milk_and_cereal_in_kitchen(milk: item, cereal: item):
    body:
        if not (visited(milk) and visited(cereal)):
            # Check if milk and cereal have already been observed
            if not visited(milk):
                observe(milk, "Check if this is milk and locate it in the kitchen") 
                # Observe the item to check if it is milk and find its location
            if not visited(cereal):
                observe(cereal, "Check if this is cereal and locate it in the kitchen") 
                # Observe the item to check if it is cereal and find its location

behavior locate_milk_and_cereal(milk: item, cereal: item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        # Move close to both milk and cereal

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
            # Bind the milk item
        bind food_cereal: item where:
            is_food_cereal(food_cereal)
            # Bind the cereal item
        
        find_milk_and_cereal_in_kitchen(milk, food_cereal)
        
        locate_milk_and_cereal(milk, food_cereal)


##############################
From agent.py-> find a plan in act()
obs(milk_2043, Check if this is milk and locate it in the kitchen)open_executor(food_cereal_2015)obs(food_cereal_2015, Check if this is cereal and locate it in the kitchen)
##############################
From agent.py
obs(milk_2043, Check if this is milk and locate it in the kitchen)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_item_found():
    # Check if both milk and cereal are found
    symbol found_both_items = exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))
    return found_both_items

behavior __goal__():
    body:
        if is_needed_item_found():
            # If both milk and cereal are already known to be found, no need to search further
            bind milk: item where:
                is_milk(milk)
            # Bind to the milk item
            bind cereal: item where:
                is_food_cereal(cereal)
            # Bind to the cereal item
            achieve close_char(char, milk)
            # Ensure the character is close to the milk
            achieve close_char(char, cereal)
            # Ensure the character is close to the cereal

        else:
            # If milk or cereal is not found, search in all possible locations
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    if not visited(location):
                        observe(location,"Locate where the milk and cereal are stored within the kitchen")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5832, column 78.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#goal_representation
 
def is_needed_item_found():
    # Check if both milk and cereal are found
    symbol found_both_items = exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))
    return found_both_items

behavior __goal__():
    body:
        if is_needed_item_found():
            # If both milk and cereal are already known to be found, no need to search further
            bind milk: item where:
                is_milk(milk)
            # Bind to the milk item
            bind cereal: item where:
                is_food_cereal(cereal)
            # Bind to the cereal item
            achieve close_char(char, milk)
            # Ensure the character is close to the milk
            achieve close_char(char, cereal)
            # Ensure the character is close to the cereal

        else:
            # If milk or cereal is not found, search in all possible locations
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    if not visited(location):
                        observe(location,"Locate where the milk and cereal are stored within the kitchen")


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5832, column 78.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#goal_representation
 
def is_needed_item_found():
    # Check if both milk and cereal are found
    symbol found_both_items = exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))
    return found_both_items

behavior __goal__():
    body:
        if is_needed_item_found():
            # If both milk and cereal are already known to be found, no need to search further
            bind milk: item where:
                is_milk(milk)
            # Bind to the milk item
            bind cereal: item where:
                is_food_cereal(cereal)
            # Bind to the cereal item
            achieve close_char(char, milk)
            # Ensure the character is close to the milk
            achieve close_char(char, cereal)
            # Ensure the character is close to the cereal

        else:
            # If milk or cereal is not found, search in all possible locations
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location):
                    if not visited(location):
                        observe(location, "Locate where the milk and cereal are stored within the kitchen")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2015
        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2015
        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal(item:item):
    # Function to check if there is milk or cereal at a specified location
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and on(o, item) or inside(o, item))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists item: item : (has_milk_and_cereal(item)):
            # If we already have the milk and cereal information, move closer
            bind item: item where:
                has_milk_and_cereal(item)
            achieve close_char(char, item)
        else:
            # Check all unvisited potential storage areas in the kitchen
            foreach item: item:
                if (is_fridge(item) or is_cupboard(item) or is_kitchen_counter(item)) and not visited(item):
                    observe(item,"Check for presence of milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal():
    body:
        foreach o: item:
            if is_food_cereal(o) and not visited(o):
                observe(o, "Locate the cereal in the kitchen")
            if is_milk(o) and not visited(o):
                observe(o, "Locate the milk in the kitchen")

behavior __goal__():
    body:
        find_milk_and_cereal()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk_and_cereal():
    body:
        foreach o: item:
            if is_food_cereal(o) and not visited(o):
                observe(o, "Locate the cereal in the kitchen")
            if is_milk(o) and not visited(o):
                observe(o, "Locate the milk in the kitchen")

behavior __goal__():
    body:
        find_milk_and_cereal()

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, Locate the cereal in the kitchen)obs(milk_2043, Locate the milk in the kitchen)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk(milk:item):
    body:
        if is_milk(milk) and not visited(milk):
            observe(milk, "Check if this is milk and locate it in the kitchen")

behavior find_cereal(cereal:item):
    body:
        if is_food_cereal(cereal) and not visited(cereal):
            observe(cereal, "Locate cereal in the kitchen")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cereal: item where:
            is_food_cereal(cereal)
        find_milk(milk)
        find_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk(milk:item):
    body:
        if is_milk(milk) and not visited(milk):
            observe(milk, "Check if this is milk and locate it in the kitchen")

behavior find_cereal(cereal:item):
    body:
        if is_food_cereal(cereal) and not visited(cereal):
            observe(cereal, "Locate cereal in the kitchen")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cereal: item where:
            is_food_cereal(cereal)
        find_milk(milk)
        find_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, Check if this is milk and locate it in the kitchen)open_executor(food_cereal_2015)obs(food_cereal_2015, Locate cereal in the kitchen)
##############################
From agent.py
obs(milk_2043, Check if this is milk and locate it in the kitchen)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal_in_kitchen():
    # Function to check if milk and cereal are in the kitchen
    symbol has_milk_and_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, kitchen))
    return has_milk_and_cereal

behavior __goal__():
    body:
        if has_milk_and_cereal_in_kitchen():
            # If the locations of milk and cereal in the kitchen are known, approach them directly
            bind milk: item where:
                is_milk(milk) and inside(milk, kitchen)
            bind cereal: item where:
                is_food_cereal(cereal) and inside(cereal, kitchen)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)

        else:
            # Otherwise, explore the kitchen to locate the milk and cereal
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Locate milk and cereal in the kitchen")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_and_cereal_in_kitchen(kitchen:item):
    # Function to check if milk and cereal are in the kitchen
    symbol has_milk_and_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, kitchen))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
            
        if has_milk_and_cereal_in_kitchen(kitchen):
            # If the locations of milk and cereal in the kitchen are known, approach them directly
            bind milk: item where:
                is_milk(milk) and inside(milk, kitchen)
            bind cereal: item where:
                is_food_cereal(cereal) and inside(cereal, kitchen)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)

        else:
            # Otherwise, explore the kitchen to locate the milk and cereal
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Locate milk and cereal in the kitchen")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        observe(milk, "Locate where the milk is stored within the kitchen")
        # Find out where the milk is located

        observe(cereal, "Locate where the cereal is stored within the kitchen")
        # Find out where the cereal is located

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        observe(milk, "Locate where the milk is stored within the kitchen")
        # Find out where the milk is located

        observe(cereal, "Locate where the cereal is stored within the kitchen")
        # Find out where the cereal is located

##############################
From agent.py-> find a plan in act()
obs(milk_2043, Locate where the milk is stored within the kitchen)open_executor(food_cereal_2015)obs(food_cereal_2015, Locate where the cereal is stored within the kitchen)
##############################
From agent.py
obs(milk_2043, Locate where the milk is stored within the kitchen)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def milk(location: item):
    # Function to check if milk is located in the specified location
    symbol milk_found = exists m: item : (is_milk(m) and inside(m, location))
    return milk_found

def cereal(location: item):
    # Function to check if cereal is located in the specified location
    symbol cereal_found = exists c: item : (is_food_cereal(c) and inside(c, location))
    return cereal_found

behavior __goal__():
    body:
        # Check if milk and cereal are already known to be in specific locations
        if exists location: item : (milk(location) and cereal(location)):
            # Bind the first location containing both milk and cereal
            bind location: item where:
                milk(location) and cereal(location)
            achieve close_char(char, location)

        else:
            # Inspect all unvisited locations to find milk and cereal
            foreach location: item:
                if not visited(location):
                    observe(location, "Locate milk and cereal in the kitchen")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk(item:item):
    # Function to check if the item is milk
    return is_milk(item)

def is_cereal(item:item):
    # Function to check if the item is cereal
    return is_food_cereal(item)

behavior find_milk():
    body:
        foreach item: item:
            if is_milk(item) and not visited(item):
                observe(item, "Check if this is milk and locate it in the kitchen")

behavior find_cereal():
    body:
        foreach item: item:
            if is_cereal(item) and not visited(item):
                observe(item, "Locate where the cereal is stored within the kitchen")

behavior __goal__():
    body:
        find_milk()
        find_cereal()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_inside(fridge:item):
    # Function to check if there is milk inside the fridge
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    return has_milk

def has_cereal_inside(cupboard:item):
    # Function to check if there is cereal inside the cupboard
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cupboard))
    return has_cereal

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_milk_inside(fridge)):
            # Check existing information to see if milk is in a known fridge
            bind fridge: item where:
                is_fridge(fridge) and has_milk_inside(fridge)
            achieve close_char(char, fridge)
            observe(fridge, "Locate where the milk is stored within the kitchen")
        else:
            # If milk is not found, observe the fridges
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate where the milk is stored within the kitchen")

        if exists cupboard: item : (is_cupboard(cupboard) and has_cereal_inside(cupboard)):
            # Check existing information to see if cereal is in a known cupboard
            bind cupboard: item where:
                is_cupboard(cupboard) and has_cereal_inside(cupboard)
            achieve close_char(char, cupboard)
            observe(cupboard, "Locate where the cereal is stored within the kitchen")
        else:
            # If cereal is not found, observe the cupboards
            foreach cupboard: item:
                if is_cupboard(cupboard) and not visited(cupboard):
                    observe(cupboard, "Locate where the cereal is stored within the kitchen")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the milk and cereal in the kitchen." ?
Answer: Find the milk and cereal in the kitchen.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the milk and cereal in the kitchen.', '2. Pour the milk into a cup and heat it in the microwave.', '3. Add the cereal to the hot milk in the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def locate_milk_and_cereal():
    symbol found = exists m: item : (is_milk(m)) or exists c: item : (is_food_cereal(c))
    return found

behavior check_location(a:item, question:string):
    body:
        observe(a, "question")
        achieve visited(a)

behavior __goal__():
    body:
        if locate_milk_and_cereal():
            bind m: item where:
                is_milk(m)
            if not visited(m):
                observe(m,"Check if this is milk and locate it in the kitchen")
                
            bind c: item where:
                is_food_cereal(c)
            if not visited(c):
                observe(c,"Check if this is cereal and locate it in the kitchen")
        else:
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            check_location(kitchen_counter, Check for milk and cereal around this area)
            
            bind cupboard: item where:
                is_cupboard(cupboard)
            check_location(cupboard, Check for milk and cereal around this area)
            
            bind fridge: item where:
                is_fridge(fridge)
            check_location(fridge, Check for milk and cereal around this area)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'c') at line 5849, column 60.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

#goal_representation
 
def has_milk_or_cereal(kitchen_area:item):
    # Function to check if there is milk or cereal in the specified kitchen area
    symbol has_milk_or_cereal=exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, kitchen_area))
    return has_milk_or_cereal

behavior check_location(a:item, question:string):
    body:
        observe(a, "question")
        achieve visited(a)

behavior __goal__():
    body:
        if exists item: item : (is_milk(item) or is_food_cereal(item)):
            bind m: item where:
                is_milk(m)
            if not visited(m):
                observe(m, "Check if this is milk and locate it in the kitchen")

            bind c: item where:
                is_food_cereal(c)
            if not visited(c):
                observe(c, "Check if this is cereal and locate it in the kitchen")
        else:
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            check_location(kitchen_counter, Check for milk and cereal around this area)
            
            bind cupboard: item where:
                is_cupboard(cupboard)
            check_location(cupboard, Check for milk and cereal around this area)
            
            bind fridge: item where:
                is_fridge(fridge)
            check_location(fridge, Check for milk and cereal around this area)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'for') at line 5891, column 51.
Expected one of: 
	* RPAR
	* COMMA
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#goal_representation
 
def has_milk_or_cereal(kitchen_area:item):
    # Function to check if there is milk or cereal in the specified kitchen area
    symbol has_milk_or_cereal=exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, kitchen_area))
    return has_milk_or_cereal

behavior check_location(a:item, question:string):
    body:
        observe(a, "question")
        achieve visited(a)

behavior __goal__():
    body:
        if exists item: item : (is_milk(item) or is_food_cereal(item)):
            bind m: item where:
                is_milk(m)
            if not visited(m):
                observe(m, "Check if this is milk and locate it in the kitchen")

            bind c: item where:
                is_food_cereal(c)
            if not visited(c):
                observe(c, "Check if this is cereal and locate it in the kitchen")
        else:
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            check_location(kitchen_counter, Check for milk and cereal around this area)
            
            bind cupboard: item where:
                is_cupboard(cupboard)
            check_location(cupboard, Check for milk and cereal around this area)
            
            bind fridge: item where:
                is_fridge(fridge)
            check_location(fridge, Check for milk and cereal around this area)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_1000_around_dresser_108(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==108
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(plate,dresser_instance)
        else:
            exp(plate,dresser_instance)
    eff:
        unknown[plate]=False
        close[plate,dresser_instance]=True
        close[dresser_instance,plate]=True
    

#exp_behavior_end

#goal_representation

def locate_milk_and_cereal(kitchen:item):
    # Function to locate both milk and cereal within the kitchen
    symbol found_milk=exists o: item : (is_milk(o) and inside(o, kitchen))
    symbol found_cereal=exists o: item : (is_food_cereal(o) and inside(o, kitchen))
    return found_milk and found_cereal

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen) or is_cupboard(kitchen) or is_fridge(kitchen)
        # Select the kitchen areas like counters, cupboards, or fridge

        if locate_milk_and_cereal(kitchen):
            # If both milk and cereal are found
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and inside(o, kitchen):
                    achieve close_char(char, o) # Get close to the milk and cereal
        else:
            foreach location: item:
                if (is_kitchen_counter(location) or is_fridge(location) or is_cupboard(location)) and not visited(location):
                    observe(location, "Look for milk and cereal in the kitchen")
                    # Observe location to find milk or cereal

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk and cereal in the scene
    symbol found_milk=exists m: item : (is_milk(m))
    symbol found_cereal=exists c: item : (is_food_cereal(c))
    return found_milk and found_cereal

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # If we have already found both milk and cereal
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve close_char(char, milk) # Approach milk
            achieve close_char(char, cereal) # Approach cereal

        else:
            # If not both are found, check all relevant places in the kitchen
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                    observe(location,"Check if milk or cereal is here")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal in the kitchen.', "2. Heat the milk until it's hot.", '3. Pour the hot milk into a cup and add the cereal.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal_in_kitchen():
    # Function to check if milk or cereal is found in the kitchen
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside_char(char, kitchen))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists location: item : (is_kitchen(location) and has_milk_or_cereal_in_kitchen()):
            # If milk or cereal is located in the kitchen, approach it
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and inside_char(char, location):
                    achieve close_char(char, o)

        else:
            # If neither milk nor cereal is detected, search all potential areas in sequence
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Locate the milk and cereal in the kitchen")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_or_cereal_in_kitchen(kitchen: item):
    # Function to check if milk or cereal is found in the kitchen
    symbol has_milk_or_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, kitchen))
    return has_milk_or_cereal

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
        if has_milk_or_cereal_in_kitchen(kitchen):
            # If milk or cereal is located in the kitchen, approach it
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and inside_char(char, kitchen):
                    achieve close_char(char, o)
        else:
            # If neither milk nor cereal is detected, search all potential areas in sequence
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Locate the milk and cereal in the kitchen")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_in_kitchen(o:item):
    # Determine if an object is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(o, room))
    return in_kitchen

behavior find_milk_cereal_in_kitchen(milk:item, cereal:item):
    # Behavior to find milk and cereal in the kitchen
    body:
        if not visited(milk):
            observe(milk, "Check if this is milk and locate it in the kitchen")
        if not visited(cereal):
            observe(cereal, "Check if this is cereal and locate it in the kitchen")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and is_in_kitchen(milk)
        # Select milk located in the kitchen
        
        bind cereal: item where:
            is_food_cereal(cereal) and is_in_kitchen(cereal)
        # Select cereal located in the kitchen
        
        find_milk_cereal_in_kitchen(milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk(x: item):
    return is_milk(x)

def is_food_cereal(x: item):
    return is_food_cereal(x)

def kitchen_location(item: item):
    return exists loc: item : (is_kitchen(loc) and inside(item, loc))

behavior search_cereal_location():
    body:
        foreach location: item:
            if is_cupboard(location) or is_kitchen_counter(location):
                observe(location, "Check for food_cereal_2015 around this location")
        
behavior search_milk(fridge: item):
    body:
        observe(fridge, "Locate milk_2043 and see its kitchen location")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
            
        # Look for milk in the fridge
        search_milk(fridge)
        
        # Look for cereal around known kitchen areas
        search_cereal_location()


#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk(x: item):
    return is_milk(x)

def is_food_cereal(x: item):
    return is_food_cereal(x)

def kitchen_location(item: item):
    return exists loc: item : (is_kitchen(loc) and inside(item, loc))

behavior search_cereal_location():
    body:
        foreach location: item:
            if is_cupboard(location) or is_kitchen_counter(location):
                observe(location, "Check for food_cereal_2015 around this location")
        
behavior search_milk(fridge: item):
    body:
        observe(fridge, "Locate milk_2043 and see its kitchen location")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
            
        # Look for milk in the fridge
        search_milk(fridge)
        
        # Look for cereal around known kitchen areas
        search_cereal_location()


##############################
From agent.py-> find a plan in act()
obs(fridge_289, Locate milk_2043 and see its kitchen location)walk_executor(cupboard_229)obs(cupboard_229, Check for food_cereal_2015 around this location)walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check for food_cereal_2015 around this location)
##############################
From agent.py
obs(fridge_289, Locate milk_2043 and see its kitchen location)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is CLEAN. fridge_289 is OPEN. fridge_289 is PLUGGED_IN. fridge_289 is OFF.
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
obs(cupboard_229, Check for food_cereal_2015 around this location)
Get this information:  cupboard_229 is on wall_211. cupboard_229 is inside dining_room_201. cupboard_229 is close to stovefan_288. cupboard_229 is close to fridge_289. cupboard_229 is close to coffe_maker_290. cupboard_229 is close to toaster_292. cupboard_229 is close to shower_36. cupboard_229 is close to kitchen_counter_230. cupboard_229 is close to sink_231. cupboard_229 is close to faucet_232. cupboard_229 is close to microwave_297. cupboard_229 is close to tray_296. cupboard_229 is close to wall_11. cupboard_229 is close to oven_295. cupboard_229 is close to wall_15. cupboard_229 is close to ceiling_18. cupboard_229 is close to wall_211. cupboard_229 is close to wall_212. cupboard_229 is close to ceiling_216. cupboard_229 is close to ceiling_221. cupboard_229 is close to character_65. cupboard_229 is CLEAN. cupboard_229 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(kitchen_counter_230, Check for food_cereal_2015 around this location)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLOSED. kitchen_counter_230 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_the_milk(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Place the milk inside the stove
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

def is_milk_located(milk:item):
    # Check if the milk is located in the current known information
    symbol located=exists loc: item: (inside(milk, loc) or on(milk, loc))
    return located

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk instance
        
        if not is_milk_located(milk):
            observe(milk, "Locate where the milk is stored within the kitchen")
            # Observe the kitchen to find the milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        heat_the_milk(milk, stove)
        # Heat the milk using the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_the_milk(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Place the milk inside the stove
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

def is_milk_located(milk:item):
    # Check if the milk is located in the current known information
    symbol located=exists loc: item: (inside(milk, loc) or on(milk, loc))
    return located

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk instance
        
        if not is_milk_located(milk):
            observe(milk, "Locate where the milk is stored within the kitchen")
            # Observe the kitchen to find the milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        heat_the_milk(milk, stove)
        # Heat the milk using the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(stove_2065)putin_executor(milk_2043, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. milk_2043 is inside stove_2065. milk_2043 is close stove_2065. stove_2065 is close milk_2043. milk_2043 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cup_2063(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(bowl,cup_instance)
        else:
            exp(bowl,cup_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cup_instance]=True
        close[cup_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_add_cereal(hot_milk: item, cereal: item, cup: item):
    body:
        achieve_once inside(hot_milk, cup) # Pour hot milk into the cup
        achieve_once inside(cereal, cup) # Add cereal into the cup

behavior __goal__():
    body:
        bind hot_milk: item where:
            is_milk(hot_milk) and is_food(hot_milk) # Assume hot milk is identified and categorized correctly
        bind cereal: item where:
            is_food_cereal(cereal)
        bind cup: item where:
            is_cup(cup)
        pour_milk_and_add_cereal(hot_milk, cereal, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_table_226(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_add_cereal(milk: item, cereal: item, cup: item):
    body:
        achieve_once inside(milk, cup) # Pour the hot milk into the cup
        achieve_once inside(cereal, cup) # Add the cereal to the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal item

        bind cup: item where:
            is_cup(cup)
        # Select cup item

        pour_milk_and_add_cereal(milk, cereal, cup)
        # Pour the hot milk into the cup and add the cereal

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_and_add_cereal(milk: item, cereal: item, cup: item):
    body:
        achieve_once inside(milk, cup) # Pour the hot milk into the cup
        achieve_once inside(cereal, cup) # Add the cereal to the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal item

        bind cup: item where:
            is_cup(cup)
        # Select cup item

        pour_milk_and_add_cereal(milk, cereal, cup)
        # Pour the hot milk into the cup and add the cereal

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'walk_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(stove_2065)', 'putin_executor(milk_2043, stove_2065)', 'switchon_executor(stove_2065)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 635 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 29
goal correct times: 2
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
