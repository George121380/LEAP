From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_or_onion(x:item):
    # Function to check if an item is chicken or onion
    return is_food_chicken(x) or is_food_onion(x)
    
behavior clean_food_item(food:item):
    body:
        if dirty(food):
            wash(food)
        if dirty(food):  # Check again if still dirty
            scrub(food)
        if has_water(food):
            rinse(food)

behavior __goal__():
    body:
        foreach food: item:
            if is_chicken_or_onion(food) and dirty(food):
                clean_food_item(food)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken: item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior clean_onion(onion: item):
    body:
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

behavior rinse_item(o:item):
    body:
        rinse(o)

behavior clean_item(o:item):
    body:
        if dirty(o):
            wash(o)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        
        rinse_item(chicken)
        clean_item(chicken)
        
        rinse_item(onion)
        clean_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior rinse_item(o:item):
    body:
        rinse(o)

behavior clean_item(o:item):
    body:
        if dirty(o):
            wash(o)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        
        rinse_item(chicken)
        clean_item(chicken)
        
        rinse_item(onion)
        clean_item(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_chicken_2017, kitchen_counter_230)walk_executor(food_chicken_2017)rinse_executor(food_chicken_2017)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)rinse_executor(food_onion_2032)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_chicken_2017, kitchen_counter_230)
Fail to find food_chicken_2017 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)rinse_executor(food_chicken_2017)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)rinse_executor(food_onion_2032)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
rinse_executor(food_chicken_2017)rinse_executor(food_onion_2032)
##############################
From agent.py
rinse_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
rinse_executor(food_onion_2032)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_oven_295(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cat,oven_instance)
        else:
            exp(cat,oven_instance)
    eff:
        unknown[cat]=False
        close[cat,oven_instance]=True
        close[oven_instance,cat]=True
    

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_oven_available():
    # Function to check if there is an available oven in the scene
    symbol oven_exists=exists o: item : (is_oven(o))
    return oven_exists

behavior prepare_for_roasting(chicken:item, onion:item, oven:item):
    body:
        observe(oven, "Check if the oven is open")
        # Make observations to see if the oven is open
        if exists door: item : (is_door(door) and open(door)):
            closes(door)
            # If a door is open, close it to proceed safely
        
        if closed(oven):
            opens(oven)
            # Open the oven if it is closed
        
        # Place the chicken and onion inside the oven for roasting
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        if is_oven_available():
            bind chicken: item where:
                is_food_chicken(chicken)
            # Select the chicken item that needs to be roasted
            
            bind onion: item where:
                is_food_onion(onion)
            # Select the onion item that needs to be roasted
            
            bind oven: item where:
                is_oven(oven)
            # Select an available oven
            
            prepare_for_roasting(chicken, onion, oven)
            # Prepare the chicken and onion by putting them inside the oven for roasting
        else:
            # If no oven is found, observe everything in the kitchen to locate an oven
            foreach o: item:
                if is_kitchen_counter(o) and not visited(o):
                    observe(o, "Locate any available oven")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_plate_1000_around_microwave_297(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(plate,microwave_instance)
        else:
            exp(plate,microwave_instance)
    eff:
        unknown[plate]=False
        close[plate,microwave_instance]=True
        close[microwave_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(obj:item, oven:item):
    body:
        if not inside(obj, oven):
            put_inside(obj, oven)
            # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken ready for roasting
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion ready for roasting
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        place_in_oven(chicken, oven)
        # Place chicken in the oven for roasting
        place_in_oven(onion, oven)
        # Place onion in the oven for roasting

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(obj:item, oven:item):
    body:
        if not inside(obj, oven):
            put_inside(obj, oven)
            # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken ready for roasting
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion ready for roasting
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        place_in_oven(chicken, oven)
        # Place chicken in the oven for roasting
        place_in_oven(onion, oven)
        # Place onion in the oven for roasting

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. food_onion_2032 is inside oven_295. oven_295 is close food_onion_2032. food_onion_2032 is close oven_295. food_onion_2032 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'rinse_executor(food_chicken_2017)', 'rinse_executor(food_onion_2032)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(oven_295)', 'putin_executor(food_onion_2032, oven_295)']
Time info:
Time consume: 96 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
