From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and skirt that need to be ironed.', '2. Iron the shirt and skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior find_clothes_to_iron():
    body:
        foreach item: item:
            if is_clothes(item) and (is_clothes_shirt(item) or is_clothes_skirt(item)) and not visited(item):
                observe(item,"Check if this is the shirt or skirt to be ironed")

behavior __goal__():
    body:
        find_clothes_to_iron()

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_clothes_to_iron():
    body:
        foreach item: item:
            if is_clothes(item) and (is_clothes_shirt(item) or is_clothes_skirt(item)) and not visited(item):
                observe(item,"Check if this is the shirt or skirt to be ironed")

behavior __goal__():
    body:
        find_clothes_to_iron()

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if this is the shirt or skirt to be ironed)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if this is the shirt or skirt to be ironed)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if this is the shirt or skirt to be ironed)obs(clothes_skirt_2088, Check if this is the shirt or skirt to be ironed)
##############################
From agent.py
obs(clothes_shirt_2086, Check if this is the shirt or skirt to be ironed)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2088, Check if this is the shirt or skirt to be ironed)
Get this information:  clothes_skirt_2088 is close to basket_for_clothes_2006. clothes_skirt_2088 is close to character_65. clothes_skirt_2088 is inside bathroom_1. clothes_skirt_2088 is inside basket_for_clothes_2006. clothes_skirt_2088 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_377(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_117(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothes:item, ironing_board:item, iron:item):
    body:
        if not inhand(iron):
            grab(iron)
        if is_off(iron):
            switch_on(iron)
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        # Assuming ironing can be done by a contact action wipe or similar since iron action is not defined
        wipe(clothes)

behavior prepare_ironing_board(ironing_board:item):
    body:
        if not surfaces(ironing_board):
            open(ironing_board) # Open the ironing board to ensure it is ready for use

behavior prepare_iron(iron:item):
    body:
        if unplugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)

        prepare_ironing_board(ironing_board)
        prepare_iron(iron)
        iron_clothes(shirt, ironing_board, iron)
        iron_clothes(skirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_377(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_mat_401_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_384(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_377(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior plug_in_iron(iron:item):
    body:
        if unplugged(iron):
            plugin(iron)

behavior switch_on_iron(iron:item):
    body:
        if is_off(iron):
            switch_on(iron)

behavior iron_clothes(clothes:item, iron:item):
    body:
        if is_clothes(clothes) and not inhand(clothes):
            grab(clothes)
        if inhand(clothes):
            if is_on(iron):
                touch(iron) # Assuming touch represents the action to iron
                empty_a_hand()

behavior find_ironing_board_and_iron():
    body:
        walk_to(item for item in item where is_ironing_board(item) and not visited(item))
        observe(item, "Check if ironing board has the iron")

behavior prepare_and_iron_shirt_skirt(iron:item):
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        
        plug_in_iron(iron)
        switch_on_iron(iron)

        iron_clothes(clothes_shirt, iron)
        iron_clothes(clothes_skirt, iron)

behavior __goal__():
    body:
        if exists iron: item : is_iron(iron):
            bind iron: item where:
                is_iron(iron)
            prepare_and_iron_shirt_skirt(iron)

        else:
            find_ironing_board_and_iron()
            bind iron: item where:
                is_iron(iron) and visited(iron)
            prepare_and_iron_shirt_skirt(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_or_skirt(c:item):
    symbol shirt_or_skirt= is_clothes_shirt(c) or is_clothes_skirt(c)
    return shirt_or_skirt

def has_items_on_ironing_board(ironing_board:item):
    symbol items_on_board=exists o: item : (is_shirt_or_skirt(o) and on(o, ironing_board))
    return items_on_board

def has_items_near_ironing_board(ironing_board:item):
    symbol items_near_board=exists o: item : (is_shirt_or_skirt(o) and close(o, ironing_board))
    return items_near_board

behavior grab_items(o:item):
    body:
        if not inhand(o):
            grab(o)

behavior move_items_to_ironing_board(o:item, ironing_board:item):
    body:
        if not on(o, ironing_board):
            put_on(o, ironing_board)

behavior start_ironing(ironing_board:item):
    body:
        bind iron: item where:
            is_iron(iron)
        if is_off(iron):
            plugin(iron)
            switch_on(iron)

behavior iron_clothes(ironing_board:item):
    body:
        bind iron: item where:
            is_iron(iron)
        start_ironing(ironing_board)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        if not has_items_on_ironing_board(ironing_board):
            if has_items_near_ironing_board(ironing_board):
                foreach c: item:
                    if is_shirt_or_skirt(c) and close(c, ironing_board):
                        grab_items(c)
                        move_items_to_ironing_board(c, ironing_board)
            iron_clothes(ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior iron_clothes(clothes:item, iron:item, board:item):
    body:
        if not on(clothes, board):
            put_on(clothes, board) 
        if unplugged(iron):
            plugin(iron) 
        if is_off(iron):
            switch_on(iron)
        if plugged(iron) and is_on(iron):
            if not inhand(iron):
                grab(iron)
            # Proceed to iron the clothes
            touch(clothes)
        if inhand(iron):
            empty_a_hand()

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) 
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron)
        bind board: item where:
            is_ironing_board(board)
        iron_clothes(shirt, iron, board)
        iron_clothes(skirt, iron, board)


#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior iron_clothes(clothes:item, iron:item, board:item):
    body:
        if not on(clothes, board):
            put_on(clothes, board) 
        if unplugged(iron):
            plugin(iron) 
        if is_off(iron):
            switch_on(iron)
        if plugged(iron) and is_on(iron):
            if not inhand(iron):
                grab(iron)
            # Proceed to iron the clothes
            touch(clothes)
        if inhand(iron):
            empty_a_hand()

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) 
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind iron: item where:
            is_iron(iron)
        bind board: item where:
            is_ironing_board(board)
        iron_clothes(shirt, iron, board)
        iron_clothes(skirt, iron, board)


##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_skirt_2088 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_skirt_2088. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to switch on and grab the iron, and then proceed to touch (iron) the clothes by following the outlined steps associated with using the iron on the garments.
##############################
From agent.py
Human Instruction: The robot needs to switch on and grab the iron, and then proceed to touch (iron) the clothes by following the outlined steps associated with using the iron on the garments.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Check if this is the shirt or skirt to be ironed.
Action 4: Observe around clothes_skirt_2088 with the question of Check if this is the shirt or skirt to be ironed.
Action 5: Grab clothes_shirt_2086.
Action 6: Walk to ironing_board_2074.
Action 7: Put clothes_shirt_2086 on ironing_board_2074.
Action 8: Walk to clothes_skirt_2088.
Action 9: Grab clothes_skirt_2088.
Action 10: Walk to ironing_board_2074.
Action 11: Put clothes_skirt_2088 on ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def grab_iron_and_switch_on(iron:item):
    body:
        if not inhand(iron):
            grab(iron)
        if not is_on(iron):
            switch_on(iron)

behavior iron_clothes_on_board(iron:item, clothes:item, board:item):
    body:
        if close_char(char, board) and inhand(iron):
            touch(clothes)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board_2074)
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        grab_iron_and_switch_on(iron)
        walk_to(ironing_board_2074)
        iron_clothes_on_board(iron, shirt, ironing_board_2074)
        iron_clothes_on_board(iron, skirt, ironing_board_2074)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_ironing_board_with_clothes(ironing_board:item):
    symbol has_clothes=exists o: item : is_clothes(o) and on(o, ironing_board)
    return has_clothes

behavior grab_iron_and_turn_on(iron:item):
    body:
        if not is_on(iron):
            grab(iron)
            switch_on(iron)

behavior iron_clothes(clothes:item, iron:item):
    body:
        if not clean(clothes):
            touch(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and is_ironing_board_with_clothes(ironing_board)
        # Select an ironing board with clothes on it

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        grab_iron_and_turn_on(iron)
        
        foreach clothes: item:
            if is_clothes(clothes) and on(clothes, ironing_board):
                # Iron each clothing item on the ironing board
                iron_clothes(clothes, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ironing_board_with_clothes(ironing_board:item):
    symbol has_clothes=exists o: item : is_clothes(o) and on(o, ironing_board)
    return has_clothes

behavior grab_iron_and_turn_on(iron:item):
    body:
        if not is_on(iron):
            grab(iron)
            switch_on(iron)

behavior iron_clothes(clothes:item, iron:item):
    body:
        if not clean(clothes):
            touch(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and is_ironing_board_with_clothes(ironing_board)
        # Select an ironing board with clothes on it

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        grab_iron_and_turn_on(iron)
        
        foreach clothes: item:
            if is_clothes(clothes) and on(clothes, ironing_board):
                # Iron each clothing item on the ironing board
                iron_clothes(clothes, iron)

##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)grab_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)touch_executor(iron_2089)touch_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py
touch_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
touch_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt.
Action History:
['walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)', 'walk_executor(iron_2089)', 'grab_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'touch_executor(iron_2089)', 'touch_executor(iron_2089)']
Time info:
Time consume: 181 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 2 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
