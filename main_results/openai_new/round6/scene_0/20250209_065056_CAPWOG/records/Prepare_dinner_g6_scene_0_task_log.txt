From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat the pizza and hamburger in the microwave.', '4. Place the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_found(item: item):
    # Check if the item is a pizza or hamburger
    return is_food_pizza(item) or is_food_hamburger(item)

behavior search_for_food_items():
    body:
        foreach item: item:
            if not visited(item):
                observe(item, "Check if this item is a pizza or hamburger")

behavior __goal__():
    body:
        if not exists item: item : (is_food_item_found(item)):
            search_for_food_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_food_item(food_type: String):
    body:
        bind food: item where:
            is_food(food) and food_type == hamburger and not visited(food)
        observe(food, "Check this food item")

behavior __goal__():
    body:
        # Find the pizza
        find_food_item(pizza)
        
        # Find the hamburger
        find_food_item(hamburger)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
def is_pizza_or_hamburger_found():
    # Function to check if a pizza or a hamburger is found in the scene
    symbol found_food=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))
    return found_food

behavior find_pizza_or_hamburger():
    body:
        foreach food: item:
            if (is_food_pizza(food) or is_food_hamburger(food)) and not visited(food):
                observe(food,"Determine if this is the pizza or hamburger were looking for")

behavior __goal__():
    body:
        if is_pizza_or_hamburger_found():
            # Check if a pizza or hamburger is already found
            bind food: item where:
                is_food_pizza(food) or is_food_hamburger(food)
            walk_to(food) 
            # Move the character closer to the found food item

        else:
           # If no pizza or hamburger is found, initiate observation to locate them
            find_pizza_or_hamburger()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pizza_or_hamburger_found():
    # Function to check if a pizza or a hamburger is found in the scene
    symbol found_food=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))
    return found_food

behavior find_pizza_or_hamburger():
    body:
        foreach food: item:
            if (is_food_pizza(food) or is_food_hamburger(food)) and not visited(food):
                observe(food,"Determine if this is the pizza or hamburger were looking for")

behavior __goal__():
    body:
        if is_pizza_or_hamburger_found():
            # Check if a pizza or hamburger is already found
            bind food: item where:
                is_food_pizza(food) or is_food_hamburger(food)
            walk_to(food) 
            # Move the character closer to the found food item

        else:
           # If no pizza or hamburger is found, initiate observation to locate them
            find_pizza_or_hamburger()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, fridge_289)
Find food_hamburger_2024. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_hamburger_2024)
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the fridge_289. Robot is close to the food_hamburger_2024. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has found the hamburger but needs to locate the pizza as well to complete the sub-task of finding both the pizza and the hamburger.
##############################
From agent.py
Human Instruction: The robot has found the hamburger but needs to locate the pizza as well to complete the sub-task of finding both the pizza and the hamburger.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_hamburger_2024 around fridge_289.
Action 5: Walk to food_hamburger_2024.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_found_both_pizza_hamburger(pizza:item, hamburger:item):
    # Function to check if both pizza and hamburger are found
    symbol found_pizza_hamburger=exists p: item : (is_food_pizza(pizza)) and exists h: item : (is_food_hamburger(hamburger))
    return found_pizza_hamburger

behavior find_pizza(pizza:item):
    body:
        if not visited(pizza):
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check for pizza")
                    if is_food_pizza(pizza) and close_char(char, fridge):
                        return

behavior __goal__():
    body:
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger that has already been found

        if not exists pizza: item : (is_food_pizza(pizza) and has_found_both_pizza_hamburger(pizza, hamburger)):
            # If the pizza is not found, we need to look for it
            foreach pizza: item:
                if is_food_pizza(pizza):
                    find_pizza(pizza)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_food_hamburger_or_pizza(item: item):
    # Check whether the item is a hamburger or pizza
    return is_food_hamburger(item) or is_food_pizza(item)

def is_hamburger_or_pizza_close(target: item):
    # Check if there are hamburger or pizza close to the target item
    symbol is_close = exists food: item : (is_food_hamburger_or_pizza(food) and close(food, target))
    return is_close

behavior find_food(target: item):
    body:
        if not is_hamburger_or_pizza_close(target):
            observe(target, "Check for hamburger or pizza nearby")

behavior __goal__():
    body:
        if not close_char(char, food_hamburger_2024):
            walk_to(food_hamburger_2024)

        find_food(food_hamburger_2024)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_hamburger_or_pizza(item: item):
    # Check whether the item is a hamburger or pizza
    return is_food_hamburger(item) or is_food_pizza(item)

def is_hamburger_or_pizza_close(target: item):
    # Check if there are hamburger or pizza close to the target item
    symbol is_close = exists food: item : (is_food_hamburger_or_pizza(food) and close(food, target))
    return is_close

behavior find_food(target: item):
    body:
        if not is_hamburger_or_pizza_close(target):
            observe(target, "Check for hamburger or pizza nearby")

behavior __goal__():
    body:
        if not close_char(char, food_hamburger_2024):
            walk_to(food_hamburger_2024)

        find_food(food_hamburger_2024)

##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2024, Check for hamburger or pizza nearby)
##############################
From agent.py
obs(food_hamburger_2024, Check for hamburger or pizza nearby)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has found the hamburger but still needs to locate the pizza to complete the current sub-task.
##############################
From agent.py
Human Instruction: The robot has found the hamburger but still needs to locate the pizza to complete the current sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_hamburger_2024 around fridge_289.
Action 5: Walk to food_hamburger_2024.
Action 6: Observe around food_hamburger_2024 with the question of Check for hamburger or pizza nearby.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_hamburger_and_pizza():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        walk_to(fridge)
        switch_off(fridge)
        opens(fridge)
        
        bind hamburger: item where:
            is_food_hamburger(hamburger) and close(hamburger, fridge)
        observe(hamburger, "Check for hamburger nearby")
        
        foreach f: item:
            if is_food(f) and close(f, fridge) and not visited(f):
                observe(f, "Check for pizza nearby")
          
behavior __goal__():
    body:
        find_hamburger_and_pizza()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_hamburger_and_pizza():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        walk_to(fridge)
        switch_off(fridge)
        opens(fridge)
        
        bind hamburger: item where:
            is_food_hamburger(hamburger) and close(hamburger, fridge)
        observe(hamburger, "Check for hamburger nearby")
        
        foreach f: item:
            if is_food(f) and close(f, fridge) and not visited(f):
                observe(f, "Check for pizza nearby")
          
behavior __goal__():
    body:
        find_hamburger_and_pizza()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, Check for hamburger nearby)walk_executor(food_steak_2008)obs(food_steak_2008, Check for pizza nearby)walk_executor(food_apple_2009)obs(food_apple_2009, Check for pizza nearby)walk_executor(food_bacon_2010)obs(food_bacon_2010, Check for pizza nearby)walk_executor(food_banana_2011)obs(food_banana_2011, Check for pizza nearby)walk_executor(food_bread_2012)obs(food_bread_2012, Check for pizza nearby)walk_executor(food_cake_2013)obs(food_cake_2013, Check for pizza nearby)walk_executor(food_carrot_2014)obs(food_carrot_2014, Check for pizza nearby)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, Check for pizza nearby)walk_executor(food_cheese_2016)obs(food_cheese_2016, Check for pizza nearby)walk_executor(food_chicken_2017)obs(food_chicken_2017, Check for pizza nearby)walk_executor(food_dessert_2018)obs(food_dessert_2018, Check for pizza nearby)walk_executor(food_donut_2019)obs(food_donut_2019, Check for pizza nearby)walk_executor(food_egg_2020)obs(food_egg_2020, Check for pizza nearby)walk_executor(food_fish_2021)obs(food_fish_2021, Check for pizza nearby)walk_executor(food_food_2022)obs(food_food_2022, Check for pizza nearby)walk_executor(food_fruit_2023)obs(food_fruit_2023, Check for pizza nearby)walk_executor(food_ice_cream_2025)obs(food_ice_cream_2025, Check for pizza nearby)walk_executor(food_jam_2026)open_executor(food_jam_2026)obs(food_jam_2026, Check for pizza nearby)walk_executor(food_kiwi_2027)obs(food_kiwi_2027, Check for pizza nearby)walk_executor(food_lemon_2028)obs(food_lemon_2028, Check for pizza nearby)walk_executor(food_noodles_2029)obs(food_noodles_2029, Check for pizza nearby)walk_executor(food_oatmeal_2030)obs(food_oatmeal_2030, Check for pizza nearby)walk_executor(food_orange_2031)obs(food_orange_2031, Check for pizza nearby)walk_executor(food_onion_2032)obs(food_onion_2032, Check for pizza nearby)walk_executor(food_peanut_butter_2033)obs(food_peanut_butter_2033, Check for pizza nearby)walk_executor(food_pizza_2034)obs(food_pizza_2034, Check for pizza nearby)walk_executor(food_potato_2035)obs(food_potato_2035, Check for pizza nearby)walk_executor(food_rice_2036)obs(food_rice_2036, Check for pizza nearby)walk_executor(food_salt_2037)obs(food_salt_2037, Check for pizza nearby)walk_executor(food_snack_2038)obs(food_snack_2038, Check for pizza nearby)walk_executor(food_sugar_2039)obs(food_sugar_2039, Check for pizza nearby)walk_executor(food_turkey_2040)obs(food_turkey_2040, Check for pizza nearby)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check for pizza nearby)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. Robot is close to the food_hamburger_2024. Robot is close to the sauce_2078. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_pizza(fridge:item):
    body:
        if can_open(fridge):
            opens(fridge) # Open the fridge if it is not already open
        if not exists item: item : (is_food_pizza(item) and inside(item, fridge)):
            observe(fridge, "Check for pizza inside fridge_289") # Observe the fridge for pizza

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select fridge with ID 289
        find_pizza(fridge) # Call find_pizza behavior to locate pizza

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_pizza(fridge:item):
    body:
        observe(fridge, "Check for pizza inside the fridge")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # The fridge has been identified Now, find the pizza
        find_pizza(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_pizza(fridge:item):
    body:
        observe(fridge, "Check for pizza inside the fridge")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # The fridge has been identified Now, find the pizza
        find_pizza(fridge)

##############################
From agent.py-> find a plan in act()
obs(fridge_289, Check for pizza inside the fridge)
##############################
From agent.py
obs(fridge_289, Check for pizza inside the fridge)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OPEN. fridge_289 is OFF. fridge_289 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation

def need_to_find_pizza():
    symbol pizza_found=exists o: item : (is_food_pizza(o))
    return not pizza_found

behavior put_food_on_plate(food:item, plate:item):
    body:
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        if need_to_find_pizza():
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check for pizza inside the fridge")
        
        if exists pizza: item : is_food_pizza(pizza):
            bind pizza: item where:
                is_food_pizza(pizza)
            # After finding the pizza, select it
            
            put_food_on_plate(pizza, plate)
            put_food_on_plate(hamburger, plate)
        else:
            # The task of finding the pizza is still incomplete
            walk_to(char) # Stay in the current location


#goal_representation_end

##############################
From agent.py->reset_sub_goal

def need_to_find_pizza():
    symbol pizza_found=exists o: item : (is_food_pizza(o))
    return not pizza_found

behavior put_food_on_plate(food:item, plate:item):
    body:
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        if need_to_find_pizza():
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check for pizza inside the fridge")
        
        if exists pizza: item : is_food_pizza(pizza):
            bind pizza: item where:
                is_food_pizza(pizza)
            # After finding the pizza, select it
            
            put_food_on_plate(pizza, plate)
            put_food_on_plate(hamburger, plate)
        else:
            # The task of finding the pizza is still incomplete
            walk_to(char) # Stay in the current location


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_29)exp(plate_1000, walllamp_29)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(walllamp_29)
Robot find: Robot is close to the walllamp_29. 
##############################
From agent.py
exp(plate_1000, walllamp_29)
Fail to find plate_1000 around walllamp_29. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(plate_1000, coffee_table_2068)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(plate_1000, coffee_table_2068)
Fail to find plate_1000 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_170)exp(plate_1000, computer_170)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(computer_170)
Robot find: mouse_166, chair_103, keyboard_168, Robot is close to the computer_170. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Locate sink_231 and you will find plate_1000 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot has found the hamburger but still needs to locate the pizza to complete the current sub-task.
Go to dining_room_201. Locate sink_231 and you will find plate_1000 on top of it.

Trial and Error: You can not switchoff fridge_289
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_hamburger_2024 around fridge_289.
Action 5: Walk to food_hamburger_2024.
Action 6: Observe around food_hamburger_2024 with the question of Check for hamburger or pizza nearby.
Action 7: Walk to fridge_289.
Action 8: Observe around fridge_289 with the question of Check for pizza inside the fridge.
Action 9: Walk to kitchen_counter_230.
Action 10: look for plate_1000 around kitchen_counter_230.
Action 11: Walk to cupboard_229.
Action 12: Open cupboard_229.
Action 13: look for plate_1000 around cupboard_229.
Action 14: Walk to table_226.
Action 15: look for plate_1000 around table_226.
Action 16: Walk to walllamp_29.
Action 17: look for plate_1000 around walllamp_29.
Action 18: Walk to coffee_table_2068.
Action 19: look for plate_1000 around coffee_table_2068.
Action 20: Walk to computer_170.

##############################
From agent.py
exp(plate_1000, computer_170)
Fail to find plate_1000 around computer_170. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def heat_in_microwave(food:item, microwave:item):
    body:
        if open(microwave):
            closes(microwave) # Close the microwave door
        if is_off(microwave):
            switch_on(microwave) # Turn on the microwave
        # Assume a wait time or any logic for heating process
        if is_on(microwave):
            switch_off(microwave) # Turn off the microwave after heating

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
        # Select the plate with the pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        # Move the plate close to the microwave for heating
        put_close(plate, microwave)
        
        # Heat the pizza and hamburger in the microwave
        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(food:item, microwave:item):
    body:
        if not inside(food, microwave):
            put_inside(food, microwave)
        if open(microwave):
            closes(microwave)
        if is_off(microwave):
            switch_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)

        bind microwave: item where:
            is_microwave(microwave)

        grab(food_pizza_2034)
        grab(food_hamburger_2024)
        heat_in_microwave(food_pizza_2034, microwave)
        heat_in_microwave(food_hamburger_2024, microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_in_microwave(food:item, microwave:item):
    body:
        if not inside(food, microwave):
            put_inside(food, microwave)
        if open(microwave):
            closes(microwave)
        if is_off(microwave):
            switch_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)

        bind microwave: item where:
            is_microwave(microwave)

        grab(food_pizza_2034)
        grab(food_hamburger_2024)
        heat_in_microwave(food_pizza_2034, microwave)
        heat_in_microwave(food_hamburger_2024, microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(kitchen_counter_230)put_executor(food_hamburger_2024, kitchen_counter_230)open_executor(microwave_297)putin_executor(food_pizza_2034, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(microwave_297)putin_executor(food_hamburger_2024, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the plate_1000. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the plate_1000. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the plate_1000. Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the plate_1000. Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Grabbing food_hamburger_2024 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_hamburger_2024, kitchen_counter_230)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_hamburger_2024. food_hamburger_2024 is close kitchen_counter_230. food_hamburger_2024 is on kitchen_counter_230. food_hamburger_2024 released by left hand. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
putin_executor(food_pizza_2034, microwave_297)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is close food_pizza_2034. food_pizza_2034 is inside microwave_297. food_pizza_2034 is close microwave_297. food_pizza_2034 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is opened. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. Robot is close to the food_pizza_2034. 
##############################
From agent.py
putin_executor(food_hamburger_2024, microwave_297)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. Robot is close to the food_pizza_2034. microwave_297 is close food_hamburger_2024. food_hamburger_2024 is inside microwave_297. food_hamburger_2024 is close microwave_297. food_hamburger_2024 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_toaster_292(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(tray,toaster_instance)
        else:
            exp(tray,toaster_instance)
    eff:
        unknown[tray]=False
        close[tray,toaster_instance]=True
        close[toaster_instance,tray]=True
    

behavior find_chair_2004_around_chair_103(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==103
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(inhand_obj: item, table: item):
    body:
        if not on(inhand_obj, table):
            put_on(inhand_obj, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        walk_to(table)
        place_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_table(inhand_obj: item, table: item):
    body:
        if not on(inhand_obj, table):
            put_on(inhand_obj, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        walk_to(table)
        place_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the table_226. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(food_hamburger_2024)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289) (Failed)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(table_226)', 'walk_executor(walllamp_29)', 'walk_executor(coffee_table_2068)', 'walk_executor(computer_170)', 'walk_executor(sink_231)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_hamburger_2024, kitchen_counter_230)', 'open_executor(microwave_297)', 'putin_executor(food_pizza_2034, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(microwave_297)', 'putin_executor(food_hamburger_2024, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'walk_executor(table_226)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 296 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 45

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
