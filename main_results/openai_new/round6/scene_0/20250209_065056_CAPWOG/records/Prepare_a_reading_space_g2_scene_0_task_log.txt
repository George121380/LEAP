From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table(table:item):
    # Function to check if there is a book on a specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        if exists book: item : is_book(book) and has_a_free_hand(char):
            walk_to(book)
            grab(book)

            walk_to(table)
            put_on(book, table)
        
        else:
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book,"Check if this book is the target book")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_103_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(item: item):
    # Check if the item is inside the home office
    symbol inside_home_office = exists room: item : (is_home_office(room) and inside(item, room))
    return inside_home_office

behavior put_book_on_table(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book currently in hand
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table that is inside the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office area

        if not inside_char(char, home_office):
            walk_to(home_office)
            # Walk to the home office area

        if not close_char(char, table):
            walk_to(table)
            # Walk close to the table if not already there

        put_book_on_table(book, table)
        # Put the book on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_106_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(x: item):
    # Function to check if an item is a home office
    return is_home_office(x)

behavior find_and_place_book(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        find_and_place_book(book, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office(x: item):
    # Function to check if an item is a home office
    return is_home_office(x)

behavior find_and_place_book(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        find_and_place_book(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior switch_on_light(light:item):
    body:
        if not is_on(light):
            switch_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        switch_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior switch_on_light(light:item):
    body:
        if not is_on(light):
            switch_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        switch_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 68 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 0
##############################
