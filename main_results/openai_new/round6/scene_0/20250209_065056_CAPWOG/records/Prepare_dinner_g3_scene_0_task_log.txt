From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_desk_104(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd_player,desk_instance)
        else:
            exp(cd_player,desk_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,desk_instance]=True
        close[desk_instance,cd_player]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_on_fryingpan(fryingpan:item):
    # Function to check if the frying pan has food (in this case, bacon) on it
    symbol has_bacon=exists o: item : (is_food_bacon(o) and on(o, fryingpan))
    return has_bacon

behavior prep_food_on_fryingpan(fryingpan:item):
    # Ensure the frying pan has bacon on it before cooking
    body:
        if not is_food_on_fryingpan(fryingpan):
            foreach o: item:
                if is_food_bacon(o) and not on(o, fryingpan):
                    put_on(o, fryingpan)

behavior cook_on_stove(fryingpan:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if is_food_on_fryingpan(fryingpan):
            # Simulate cooking process (actions related to actual cooking can be abstracted)
            pass

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        prep_food_on_fryingpan(fryingpan)
        cook_on_stove(fryingpan, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2010_around_kitchen_counter_230(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_frying_pan(frying_pan: item):
    # Function to check if the frying pan is clean
    symbol is_clean=clean(frying_pan) and not has_water(frying_pan)
    return is_clean

behavior prepare_to_cook(frying_pan: item, stove:item):
    body:
        if not is_clean_frying_pan(frying_pan):
            wash(frying_pan) # Wash the frying pan to make it clean
        if not on(frying_pan, stove):
            put_on(frying_pan, stove) # Put the frying pan on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior cook_bacon(bacon:item, frying_pan:item):
    body:
        if not inhand(bacon):
            grab(bacon) # Grab the bacon if not already in hand
        put_on(bacon, frying_pan) # Put bacon in the frying pan
        observe(bacon, "Is the bacon cooked") # Observe until the bacon is cooked

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        prepare_to_cook(frying_pan, stove)
        cook_bacon(bacon, frying_pan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_clean_frying_pan(frying_pan: item):
    # Function to check if the frying pan is clean
    symbol is_clean=clean(frying_pan) and not has_water(frying_pan)
    return is_clean

behavior prepare_to_cook(frying_pan: item, stove:item):
    body:
        if not is_clean_frying_pan(frying_pan):
            wash(frying_pan) # Wash the frying pan to make it clean
        if not on(frying_pan, stove):
            put_on(frying_pan, stove) # Put the frying pan on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior cook_bacon(bacon:item, frying_pan:item):
    body:
        if not inhand(bacon):
            grab(bacon) # Grab the bacon if not already in hand
        put_on(bacon, frying_pan) # Put bacon in the frying pan
        observe(bacon, "Is the bacon cooked") # Observe until the bacon is cooked

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        prepare_to_cook(frying_pan, stove)
        cook_bacon(bacon, frying_pan)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(fryingpan_2083)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(food_bacon_2010, kitchen_counter_230)walk_executor(food_bacon_2010)grab_executor(food_bacon_2010)walk_executor(fryingpan_2083)put_executor(food_bacon_2010, fryingpan_2083)walk_executor(food_bacon_2010)obs(food_bacon_2010, Is the bacon cooked)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(food_bacon_2010, kitchen_counter_230)walk_executor(food_bacon_2010)grab_executor(food_bacon_2010)walk_executor(fryingpan_2083)put_executor(food_bacon_2010, fryingpan_2083)walk_executor(food_bacon_2010)obs(food_bacon_2010, Is the bacon cooked)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_bacon_2010, kitchen_counter_230)
Fail to find food_bacon_2010 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_bacon_2010, fridge_289)walk_executor(food_bacon_2010)grab_executor(food_bacon_2010)walk_executor(fryingpan_2083)put_executor(food_bacon_2010, fryingpan_2083)walk_executor(food_bacon_2010)obs(food_bacon_2010, Is the bacon cooked)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_bacon_2010, fridge_289)
Find food_bacon_2010. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2010)walk_executor(fryingpan_2083)put_executor(food_bacon_2010, fryingpan_2083)walk_executor(food_bacon_2010)obs(food_bacon_2010, Is the bacon cooked)
##############################
From agent.py
grab_executor(food_bacon_2010)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_bacon_2010 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_bacon_2010. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(food_bacon_2010, fryingpan_2083)
Robot find: Robot is close to the food_bacon_2010. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_bacon_2010 is close fryingpan_2083. fryingpan_2083 is close food_bacon_2010. food_bacon_2010 is on fryingpan_2083. food_bacon_2010 released by right hand. 
##############################
From agent.py
walk_executor(food_bacon_2010)
Robot find: Robot is close to the food_bacon_2010. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(food_bacon_2010, Is the bacon cooked)
Get this information:  food_bacon_2010 is close to character_65. food_bacon_2010 is close to fryingpan_2083. food_bacon_2010 is inside dining_room_201. food_bacon_2010 is on fryingpan_2083. food_bacon_2010 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bacon on the frying pan is not cooked yet. Ensure the bacon is cooked by observing until a confirmation of it being cooked is indicated.
##############################
From agent.py
Human Instruction: The bacon on the frying pan is not cooked yet. Ensure the bacon is cooked by observing until a confirmation of it being cooked is indicated.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fryingpan_2083.
Action 4: Grab fryingpan_2083.
Action 5: Walk to stove_2065.
Action 6: Put fryingpan_2083 on stove_2065.
Action 7: Switch on stove_2065.
Action 8: Walk to kitchen_counter_230.
Action 9: look for food_bacon_2010 around kitchen_counter_230.
Action 10: Walk to fridge_289.
Action 11: Switch off fridge_289.
Action 12: Open fridge_289.
Action 13: look for food_bacon_2010 around fridge_289.
Action 14: Grab food_bacon_2010.
Action 15: Walk to fryingpan_2083.
Action 16: Put food_bacon_2010 on fryingpan_2083.
Action 17: Walk to food_bacon_2010.
Action 18: Observe around food_bacon_2010 with the question of Is the bacon cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if the bacon is cooked
    symbol cooked=exists nothing: item : (visited(bacon) and observed_answer(bacon, Is the bacon cooked)==yes)
    return cooked

behavior cook_bacon(fryingpan:item, stove:item, bacon:item):
    body:
        if not is_bacon_cooked(bacon):
            switch_on(stove)  # Ensure the stove is on
            put_on(bacon, fryingpan)  # Place the bacon on the frying pan
            observe(bacon, "Is the bacon cooked")
            # Observe the bacon to confirm if its cooked

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon
        cook_bacon(fryingpan, stove, bacon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if the bacon is cooked
    symbol cooked=exists o: item : (is_food_bacon(o) and visited(o))
    return cooked

behavior cook_bacon_in_fryingpan(bacon:item, fryingpan:item, stove:item):
    body:
        if not is_bacon_cooked(bacon):
            switch_on(stove)
            put_on(bacon, fryingpan)
            observe(bacon, "Is the bacon cooked")

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        cook_bacon_in_fryingpan(bacon, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_bowl_2072_around_oven_295(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_377(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if the bacon is cooked
    symbol cooked=exists indication: item : (visited(indication) and indication == bacon is cooked)
    return cooked

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select frying pan on stove
        bind bacon: item where:
            is_food_bacon(bacon) and on(bacon, fryingpan)
        # Select bacon on the frying pan

        if not is_bacon_cooked(bacon):
            observe(bacon, "Is the bacon cooked")
            # Look to confirm if the bacon is cooked
            if is_bacon_cooked(bacon):
                walk_to(fryingpan) 
                # Move closer to the frying pan if cooked


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_130_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if bacon is cooked
    symbol cooked_bacon=exists o: item : (is_food_bacon(o) and o == bacon and visited(o))
    return cooked_bacon

behavior cook_bacon(fryingpan:item, bacon:item, stove:item):
    body:
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)
        if not is_on(stove):
            switch_on(stove)
        if not is_bacon_cooked(bacon):
            observe(bacon, "Is the bacon cooked")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind bacon: item where:
            is_food_bacon(bacon)
        bind stove: item where:
            is_stove(stove)
        cook_bacon(fryingpan, bacon, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if bacon is cooked
    symbol cooked=exists o: item : (is_food_bacon(o) and visited(o) and id[o] == id[bacon] and not dirty(bacon))
    return cooked

behavior cook_bacon(fryingpan:item, bacon:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
        if not on(bacon, fryingpan):
            put_on(bacon, fryingpan)
        if not visited(bacon):
            observe(bacon, "Is the bacon cooked")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select the fryingpan you have visited

        bind stove: item where:
            is_stove(stove) and on(fryingpan, stove)
        # Select the stove under the fryingpan

        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        cook_bacon(fryingpan, bacon, stove)
        # Cook the bacon in the fryingpan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_365_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bacon_cooked(bacon:item):
    # Function to check if the bacon is cooked
    symbol cooked=exists b: item : (b == bacon and visited(b))
    return cooked

behavior cook_bacon(bacon:item, pan:item, stove:item):
    body:
        if not on(bacon, pan):
            if not inhand(bacon):
                grab(bacon)
            put_on(bacon, pan)
        if is_off(stove):
            switch_on(stove)
        watch(bacon)
        observe(bacon,"Check if the bacon is cooked")
        if not is_bacon_cooked(bacon):
            cook_bacon(bacon, pan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind bacon: item where:
            is_food_bacon(bacon)
        cook_bacon(bacon, fryingpan, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_bacon_2010)', 'walk_executor(fryingpan_2083)', 'put_executor(food_bacon_2010, fryingpan_2083)', 'walk_executor(food_bacon_2010)']
Time info:
Time consume: 123 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
