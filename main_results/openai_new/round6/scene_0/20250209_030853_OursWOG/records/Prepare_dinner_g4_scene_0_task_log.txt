From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare all necessary ingredients needed for fried rice with egg.  ', '2. Cook the rice if it has not been cooked yet.  ', '3. Fry the rice with egg, seasoning it as desired.  ']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter: item):
    # Function to check if there is an available kitchen counter with surfaces and no items
    symbol has_surfaces_and_no_items = surfaces(kitchen_counter) and not exists o: item: (inside(o, kitchen_counter))
    return has_surfaces_and_no_items

behavior __goal__():
    body:
        # First find a suitable location to prepare ingredients
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter)
        # Confirm that there is a kitchen counter available with a surface and no items

        # Locate the necessary ingredients for fried rice with egg
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        observe(kitchen_counter, "Ensure kitchen counter is clear and available for preparation")
        observe(rice, "Identify location of rice")
        observe(egg, "Identify location of egg")
        observe(oil, "Identify location of oil")
        observe(frying_pan, "Identify location of frying pan")
        observe(stove, "Identify type of stove")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5706, column 81.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#goal_representation
 
def is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter: item):
    # Function to check if there is an available kitchen counter with surfaces and no items
    symbol has_surfaces_and_no_items = surfaces(kitchen_counter) and not exists item1: item: (inside(item1, kitchen_counter))
    return has_surfaces_and_no_items

behavior __goal__():
    body:
        # First find a suitable location to prepare ingredients
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter)

        # Locate the necessary ingredients for fried rice with egg
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind frying_pan: item where:
            is_fryingpan(frying_pan)

        bind stove: item where:
            is_stove(stove)

        observe(kitchen_counter, "Ensure kitchen counter is clear and available for preparation")
        observe(rice, "Identify location of rice")
        observe(egg, "Identify location of egg")
        observe(oil, "Identify location of oil")
        observe(frying_pan, "Identify location of frying pan")
        observe(stove, "Identify type of stove")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'item1') at line 5724, column 81.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter: item):
    # Function to check if there is an available kitchen counter with surfaces and no items
    symbol has_surfaces_and_no_items = surfaces(kitchen_counter) and not exists item1: item: (inside(item1, kitchen_counter))
    return has_surfaces_and_no_items

behavior __goal__():
    body:
        # First find a suitable location to prepare ingredients
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and is_kitchen_counter_with_surfaces_and_no_items(kitchen_counter)

        # Locate the necessary ingredients for fried rice with egg
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind frying_pan: item where:
            is_fryingpan(frying_pan)

        bind stove: item where:
            is_stove(stove)

        observe(kitchen_counter, "Ensure kitchen counter is clear and available for preparation")
        observe(rice, "Identify location of rice")
        observe(egg, "Identify location of egg")
        observe(oil, "Identify location of oil")
        observe(frying_pan, "Identify location of frying pan")
        observe(stove, "Identify type of stove")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

def is_ingredient(item: item):
    # Function to check if the item is a required ingredient for fried rice with egg
    symbol is_required_ingredient= is_food_rice(item) or is_food_egg(item) or is_food_vegetable(item) or is_food_onion(item)
    return is_required_ingredient

behavior prepare_ingredient(ingredient: item, counter: item):
    body:
        achieve_once on(ingredient, counter)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_ingredient(ingredient):
                bind counter: item where:
                    is_kitchen_counter(counter)
                # Place the ingredient on a kitchen counter
                prepare_ingredient(ingredient, counter)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_ingredient(item: item):
    # Function to check if the item is a required ingredient for fried rice with egg
    symbol is_required_ingredient= is_food_rice(item) or is_food_egg(item) or is_food_vegetable(item) or is_food_onion(item)
    return is_required_ingredient

behavior prepare_ingredient(ingredient: item, counter: item):
    body:
        achieve_once on(ingredient, counter)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_ingredient(ingredient):
                bind counter: item where:
                    is_kitchen_counter(counter)
                # Place the ingredient on a kitchen counter
                prepare_ingredient(ingredient, counter)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_onion_2032, kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_onion_2032, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, kitchen_counter_230)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_egg_2020. food_egg_2020 is close kitchen_counter_230. food_egg_2020 is on kitchen_counter_230. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_onion_2032, kitchen_counter_230)
Robot find: Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_onion_2032. food_onion_2032 is close kitchen_counter_230. food_onion_2032 is on kitchen_counter_230. food_onion_2032 released by right hand. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_rice_2036, kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_rice_2036. food_rice_2036 is close kitchen_counter_230. food_rice_2036 is on kitchen_counter_230. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_basket_for_clothes_2006(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_cooked_rice(rice:item):
    # Function to check if the rice is already cooked
    symbol cooked= exists o: item : (inside(o, rice) and not is_food_rice(o))
    return cooked

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        if not has_cooked_rice(rice):
            achieve_once inside(rice, pot) # Place rice inside the pot
            achieve_once has_water(pot) # Ensure theres water in the pot
            achieve_once inside(pot, stove) # Place the pot on the stove
            achieve_once is_on(stove) # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cooked_rice(rice:item):
    # Function to check if the rice is already cooked
    symbol cooked= exists o: item : (inside(o, rice) and not is_food_rice(o))
    return cooked

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        if not has_cooked_rice(rice):
            achieve_once inside(rice, pot) # Place rice inside the pot
            achieve_once has_water(pot) # Ensure theres water in the pot
            achieve_once inside(pot, stove) # Place the pot on the stove
            achieve_once is_on(stove) # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)putin_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the pot_2069. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
putin_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is inside stove_2065. pot_2069 is close stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_150(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_egg(rice:item, egg:item, frying_pan:item, stove:item, seasoning:item):
    body:
        achieve_once inside(rice, frying_pan)
        # Put the rice into the frying pan
        achieve_once inside(egg, frying_pan)
        # Crack the egg into the frying pan
        achieve_once inside(seasoning, frying_pan)
        # Add desired seasoning to the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind seasoning: item where:
            is_sauce(seasoning)
        # Select the desired seasoning

        fry_rice_with_egg(rice, egg, frying_pan, stove, seasoning)
        # Fry the rice with egg and seasoning

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_rice_with_egg(rice:item, egg:item, frying_pan:item, stove:item, seasoning:item):
    body:
        achieve_once inside(rice, frying_pan)
        # Put the rice into the frying pan
        achieve_once inside(egg, frying_pan)
        # Crack the egg into the frying pan
        achieve_once inside(seasoning, frying_pan)
        # Add desired seasoning to the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind seasoning: item where:
            is_sauce(seasoning)
        # Select the desired seasoning

        fry_rice_with_egg(rice, egg, frying_pan, stove, seasoning)
        # Fry the rice with egg and seasoning

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(fryingpan_2083)putin_executor(sauce_2078, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(sauce_2078)
Robot find: Robot is close to the fridge_289. Robot is close to the sauce_2078. 
##############################
From agent.py
grab_executor(sauce_2078)
Robot find: Robot is close to the fridge_289. Robot is close to the sauce_2078. Grabbing sauce_2078 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the sauce_2078. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(sauce_2078, fryingpan_2083)
Robot find: Robot is close to the sauce_2078. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. fryingpan_2083 is close sauce_2078. sauce_2078 is inside fryingpan_2083. sauce_2078 is close fryingpan_2083. sauce_2078 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the sauce_2078. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is close to the pot_2069. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_egg_2020, kitchen_counter_230)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_onion_2032, kitchen_counter_230)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_rice_2036, kitchen_counter_230)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'putin_executor(food_rice_2036, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'putin_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(sauce_2078)', 'grab_executor(sauce_2078)', 'walk_executor(fryingpan_2083)', 'putin_executor(sauce_2078, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)']
Time info:
Time consume: 255 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 19
goal generate times: 4
goal correct times: 0
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
