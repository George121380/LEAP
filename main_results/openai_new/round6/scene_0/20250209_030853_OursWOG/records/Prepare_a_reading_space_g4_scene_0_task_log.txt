From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and place it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_bookshelf_101(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(chair,bookshelf_instance)
        else:
            exp(chair,bookshelf_instance)
    eff:
        unknown[chair]=False
        close[chair,bookshelf_instance]=True
        close[bookshelf_instance,chair]=True
    

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table located in the home office

        find_book_and_place_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table located in the home office

        find_book_and_place_on_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_cup_of_milk(cup:item, milk:item, kitchen_counter:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, cup)  # Pour milk into the cup
        achieve_once close_char(char, kitchen_counter)  # Move close to the kitchen counter
        achieve_once inside(milk, pot)  # Pour milk into the pot
        achieve_once placed(char, cup)  # Withdraw the cup after pouring milk into the pot
        achieve_once inside(pot, stove)  # Place the pot on the stove
        achieve_once is_on(stove)  # Turn on the stove to heat the milk
        achieve_once close_char(char, pot)  # Move close to the pot
        achieve_once inside(milk, cup)  # Pour hot milk into the cup when milk is properly heated

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)  # Place the cup on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Define the kitchen counter

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind table: item where:
            is_coffee_table(table) and id[table] == 355
        # Select the coffee table with ID 355 in the home office

        prepare_cup_of_milk(cup, milk, kitchen_counter, stove, pot)
        place_cup_on_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function placed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
behavior prepare_cup_of_hot_milk(cup:item, milk:item, kitchen_counter:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, cup)  # Pour milk into the cup
        achieve_once close_char(char, kitchen_counter)  # Move close to the kitchen counter
        achieve_once inside(milk, pot)  # Pour milk into the pot
        achieve_once close_char(char, pot)  # Move close to the pot
        achieve_once inside(pot, stove)  # Place the pot on the stove
        achieve_once is_on(stove)  # Turn on the stove to heat the milk
        achieve_once inside(milk, cup)  # Pour hot milk into the cup when milk is properly heated

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)  # Place the cup on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Define the kitchen counter

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind table: item where:
            is_coffee_table(table) and id[table] == 355
        # Select the coffee table with ID 355 in the home office

        prepare_cup_of_hot_milk(cup, milk, kitchen_counter, stove, pot)
        place_cup_on_table(cup, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(cup: item, milk: item, stove: item):
    body:
        achieve_once has_water(cup) # Make sure the cup has milk first
        achieve_once close_char(char, stove) # Ensure proximity to the stove
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once is_on(stove) # Turn on the stove to heat the milk
        # Note: You could turn off the stove if finished heating, or glasses not require this step

behavior place_cup_on_table(cup: item, table: item):
    body:
        achieve_once on(cup, table) # Place the cup of milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table in the home office with ID 355

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove for heating

        prepare_hot_milk(cup, milk, stove) # Heat the milk
        place_cup_on_table(cup, table) # Place the cup of hot milk on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_hot_milk(cup: item, milk: item, stove: item):
    body:
        achieve_once has_water(cup) # Make sure the cup has milk first
        achieve_once close_char(char, stove) # Ensure proximity to the stove
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once is_on(stove) # Turn on the stove to heat the milk
        # Note: You could turn off the stove if finished heating, or glasses not require this step

behavior place_cup_on_table(cup: item, table: item):
    body:
        achieve_once on(cup, table) # Place the cup of milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table in the home office with ID 355

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove for heating

        prepare_hot_milk(cup, milk, stove) # Heat the milk
        place_cup_on_table(cup, table) # Place the cup of hot milk on the table

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(table_355)put_executor(cup_2063, table_355)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(table_355)put_executor(cup_2063, table_355)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the cup_2063. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(table_355)put_executor(cup_2063, table_355)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the milk_2043. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(table_355)
Robot find: Robot is close to the cup_2063. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(cup_2063, table_355)
Robot find: Robot is close to the cup_2063. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close cup_2063. cup_2063 is close table_355. cup_2063 is on table_355. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the milk inside the cup is heated. This involves pouring water into the cup while at the faucet and ensuring the cup with milk is on the stove when it is turned on, so the milk can be heated. The actions don't explicitly list the hot milk preparation.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the milk inside the cup is heated. This involves pouring water into the cup while at the faucet and ensuring the cup with milk is on the stove when it is turned on, so the milk can be heated. The actions don't explicitly list the hot milk preparation.

The actions you have taken:
Action 1: Walk to bookshelf_101.
Action 2: Open bookshelf_101.
Action 3: look for book_2066 around bookshelf_101.
Action 4: Walk to bookshelf_354.
Action 5: Open bookshelf_354.
Action 6: look for book_2066 around bookshelf_354.
Action 7: Walk to book_2066.
Action 8: Grab book_2066.
Action 9: Walk to table_355.
Action 10: Put book_2066 on table_355.
Action 11: Walk to kitchen_counter_230.
Action 12: look for cup_2063 around kitchen_counter_230.
Action 13: Walk to cup_2063.
Action 14: Grab cup_2063.
Action 15: Walk to faucet_43.
Action 16: Switch on faucet_43.
Action 17: Switch off faucet_43.
Action 18: Walk to stove_2065.
Action 19: Walk to fridge_289.
Action 20: Switch off fridge_289.
Action 21: Open fridge_289.
Action 22: look for milk_2043 around fridge_289.
Action 23: Walk to stove_2065.
Action 24: Walk to milk_2043.
Action 25: Grab milk_2043.
Action 26: Walk to cup_2063.
Action 27: Put milk_2043 into cup_2063.
Action 28: Walk to stove_2065.
Action 29: Switch on stove_2065.
Action 30: Walk to table_355.
Action 31: Put cup_2063 on table_355.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_coffee_table_2068(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(mat,coffee_table_instance)
        else:
            exp(mat,coffee_table_instance)
    eff:
        unknown[mat]=False
        close[mat,coffee_table_instance]=True
        close[coffee_table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

def has_milk(cup: item):
    # Function to check if a cup has milk
    symbol has_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return has_milk

behavior heat_milk(cup: item, stove: item):
    body:
        achieve_once inside(cup, stove) # Place the cup on the stove
        achieve_once is_on(stove) # Ensure the stove is turned on

behavior place_cup_on_table(cup: item, table: item):
    body:
        achieve_once on(cup, table) # Place the cup on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk inside

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the coffee table in the home office

        heat_milk(cup, stove)
        place_cup_on_table(cup, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

def has_milk(cup: item):
    # Function to check if a cup has milk
    symbol has_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return has_milk

behavior heat_milk(cup: item, stove: item):
    body:
        achieve_once inside(cup, stove) # Place the cup on the stove
        achieve_once is_on(stove) # Ensure the stove is turned on

behavior place_cup_on_table(cup: item, table: item):
    body:
        achieve_once on(cup, table) # Place the cup on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk inside

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the coffee table in the home office

        heat_milk(cup, stove)
        place_cup_on_table(cup, table)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchoff_executor(stove_2065)open_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(stove_2065)putin_executor(cup_2063, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(table_355)put_executor(cup_2063, table_355)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the table_355. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the table_355. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(cup_2063, stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. cup_2063 is close stove_2065. cup_2063 is inside stove_2065. stove_2065 is close cup_2063. cup_2063 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: Robot is close to the cup_2063. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(cup_2063, table_355)
Robot find: Robot is close to the cup_2063. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. cup_2063 is close table_355. cup_2063 is on table_355. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The milk should be heated on the stove, but the sequence does not confirm the milk inside the cup is heated. The robot must ensure the cup with milk is on the stove when it is turned on to adequately complete heating. Ensure this step is performed correctly.
##############################
From agent.py
Human Instruction: The milk should be heated on the stove, but the sequence does not confirm the milk inside the cup is heated. The robot must ensure the cup with milk is on the stove when it is turned on to adequately complete heating. Ensure this step is performed correctly.

The actions you have taken:
Action 1: Walk to bookshelf_101.
Action 2: Open bookshelf_101.
Action 3: look for book_2066 around bookshelf_101.
Action 4: Walk to bookshelf_354.
Action 5: Open bookshelf_354.
Action 6: look for book_2066 around bookshelf_354.
Action 7: Walk to book_2066.
Action 8: Grab book_2066.
Action 9: Walk to table_355.
Action 10: Put book_2066 on table_355.
Action 11: Walk to kitchen_counter_230.
Action 12: look for cup_2063 around kitchen_counter_230.
Action 13: Walk to cup_2063.
Action 14: Grab cup_2063.
Action 15: Walk to faucet_43.
Action 16: Switch on faucet_43.
Action 17: Switch off faucet_43.
Action 18: Walk to stove_2065.
Action 19: Walk to fridge_289.
Action 20: Switch off fridge_289.
Action 21: Open fridge_289.
Action 22: look for milk_2043 around fridge_289.
Action 23: Walk to stove_2065.
Action 24: Walk to milk_2043.
Action 25: Grab milk_2043.
Action 26: Walk to cup_2063.
Action 27: Put milk_2043 into cup_2063.
Action 28: Walk to stove_2065.
Action 29: Switch on stove_2065.
Action 30: Walk to table_355.
Action 31: Put cup_2063 on table_355.
Action 32: Walk to stove_2065.
Action 33: Switch off stove_2065.
Action 34: Open stove_2065.
Action 35: Walk to cup_2063.
Action 36: Grab cup_2063.
Action 37: Walk to stove_2065.
Action 38: Put cup_2063 into stove_2065.
Action 39: Switch on stove_2065.
Action 40: Walk to cup_2063.
Action 41: Grab cup_2063.
Action 42: Walk to table_355.
Action 43: Put cup_2063 on table_355.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mousepad_414(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_in_cup(cup: item):
    # Function to check if there is milk inside the specified cup
    symbol milk_in_cup = exists o: item : (is_milk(o) and inside(o, cup))
    return milk_in_cup

behavior prepare_hot_milk(cup: item, stove: item):
    body:
        achieve_once inside(cup, stove) # Place the cup with milk inside the stove
        achieve_once closed(stove) # Ensure the stove is closed before turning it on
        achieve_once is_on(stove) # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk_in_cup(cup)
        # Select the cup with milk

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        prepare_hot_milk(cup, stove) # Prepare the hot milk

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_in_cup(cup: item):
    # Function to check if there is milk inside the specified cup
    symbol milk_in_cup = exists o: item : (is_milk(o) and inside(o, cup))
    return milk_in_cup

behavior prepare_hot_milk(cup: item, stove: item):
    body:
        achieve_once inside(cup, stove) # Place the cup with milk inside the stove
        achieve_once closed(stove) # Ensure the stove is closed before turning it on
        achieve_once is_on(stove) # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk_in_cup(cup)
        # Select the cup with milk

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        prepare_hot_milk(cup, stove) # Prepare the hot milk

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2063)walk_executor(stove_2065)putin_executor(cup_2063, stove_2065)close_executor(stove_2065)
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(cup_2063, stove_2065)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. cup_2063 is close stove_2065. cup_2063 is inside stove_2065. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the stove is turned on with the cup containing milk inside. The current sequence does not confirm that the stove was on when the milk was inside the cup within it, and therefore, the milk may not have been heated. You should switch on the stove while the milk is inside to complete the task.
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(table_355)', 'put_executor(cup_2063, table_355)', 'walk_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(stove_2065)', 'putin_executor(cup_2063, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(table_355)', 'put_executor(cup_2063, table_355)', 'grab_executor(cup_2063)', 'walk_executor(stove_2065)', 'putin_executor(cup_2063, stove_2065)', 'close_executor(stove_2065)']
Time info:
Time consume: 253 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 56
goal generate times: 5
goal correct times: 0
action_num: 43

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 5 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
