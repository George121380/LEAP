From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once plugged(coffee_maker) # Plug in the coffee maker
        achieve_once is_on(coffee_maker) # Turn on the coffee maker
        achieve_once has_water(cup) # Fill the cup with coffee from the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind a coffee maker item

        bind cup: item where:
            is_cup(cup)
        # Bind a cup item

        make_coffee(coffee_maker, cup) # Invoke behavior to make coffee

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once plugged(coffee_maker) # Plug in the coffee maker
        achieve_once is_on(coffee_maker) # Turn on the coffee maker
        achieve_once has_water(cup) # Fill the cup with coffee from the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind a coffee maker item

        bind cup: item where:
            is_cup(cup)
        # Bind a cup item

        make_coffee(coffee_maker, cup) # Invoke behavior to make coffee

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the coffee maker has water. Additionally, the robot must plug in the coffee maker and fill the cup with coffee from the coffee maker.
##############################
From agent.py
Human Instruction: The robot needs to ensure the coffee maker has water. Additionally, the robot must plug in the coffee maker and fill the cup with coffee from the coffee maker.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to kitchen_counter_230.
Action 7: look for cup_2063 around kitchen_counter_230.
Action 8: Walk to cup_2063.
Action 9: Grab cup_2063.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior plug_in(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)

behavior fill_cup_with_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker) # Temporarily consider that filling the cup requires placing it on the coffee maker
        achieve_once has_water(cup) # Assuming this as a result of coffee being poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        fill_water(coffee_maker)
        plug_in(coffee_maker)
        fill_cup_with_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior plug_in(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)

behavior fill_cup_with_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker) # Temporarily consider that filling the cup requires placing it on the coffee maker
        achieve_once has_water(cup) # Assuming this as a result of coffee being poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        fill_water(coffee_maker)
        plug_in(coffee_maker)
        fill_cup_with_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker is plugged in and has water. Additionally, the cup should be filled with coffee, which means confirming that the coffee maker dispenses coffee into the cup.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker is plugged in and has water. Additionally, the cup should be filled with coffee, which means confirming that the coffee maker dispenses coffee into the cup.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to kitchen_counter_230.
Action 7: look for cup_2063 around kitchen_counter_230.
Action 8: Walk to cup_2063.
Action 9: Grab cup_2063.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to coffe_maker_290.
Action 14: Put cup_2063 on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def plugged_and_has_water(coffee_maker:item):
    symbol has_plug_and_water = plugged(coffee_maker) and has_water(coffee_maker)
    return has_plug_and_water

behavior ensure_plugged_and_water(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            achieve_once plugged(coffee_maker)
        if not has_water(coffee_maker):
            achieve_once has_water(coffee_maker)       

behavior dispense_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker to receive coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        ensure_plugged_and_water(coffee_maker)

        if plugged_and_has_water(coffee_maker):
            dispense_coffee(cup, coffee_maker)
        else:
            observe(coffee_maker, "Check if it is plugged in and has water")
            ensure_plugged_and_water(coffee_maker)
            dispense_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_coffee_maker_status(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in")
            # Ensure the coffee maker is plugged in

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Ensure the coffee maker has water

behavior position_cup(coffee_maker:item, cup:item):
    body:
        observe(coffee_maker, "Check if the cup is in place to receive coffee")
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker to catch coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        check_coffee_maker_status(coffee_maker)
        position_cup(coffee_maker, cup)
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_coffee_maker_status(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in")
            # Ensure the coffee maker is plugged in

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Ensure the coffee maker has water

behavior position_cup(coffee_maker:item, cup:item):
    body:
        observe(coffee_maker, "Check if the cup is in place to receive coffee")
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker to catch coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        check_coffee_maker_status(coffee_maker)
        position_cup(coffee_maker, cup)
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if the cup is in place to receive coffee)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if the cup is in place to receive coffee)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is close to cup_2063. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2063 is on coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN. coffe_maker_290 is OFF.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the coffee maker has water. It should check if any action to fill the water reservoir was taken or if water was already available in the coffee maker, as actions to provide water to the coffee maker have not been observed.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 89 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
