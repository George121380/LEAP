############################################################
When the sub-task is: 1. Find a cup and pour milk into it.
A successful representation:
 
behavior find_cup_and_milk(cup:item, milk:item):
    body:
        achieve_once close_char(char, cup)
        achieve_once inhand(cup) 
        # Pick the cup up to pour milk

behavior pour_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)
        # Pour milk into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        find_cup_and_milk(cup, milk)
        pour_milk(cup, milk)

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def is_milk(x: item):
    return True # Assume it is milk when is_milk(x) is called, indicating the item is milk

def is_cup(x: item):
    return True # Assume it is a cup when is_cup(x) is called, indicating the item is a cup

def has_milk(x: item):
    # Function to check if a cup has milk
    symbol contains_milk= exists o: item: (is_milk(o) and inside(o, x))
    return contains_milk

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave) # Place the cup inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        heat_milk_in_microwave(cup, microwave) # Heat the milk in the microwave

############################################################
When the sub-task is: Cut the chicken into pieces and put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve_once cut(chicken) # Cut the chicken

behavior put_in_fridge(chicken:item, fridge:item):
    body:
        achieve_once inside(chicken, fridge) # Place the chicken inside the fridge
        achieve_once closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        cut_chicken(chicken, cutting_board)
        put_in_fridge(chicken, fridge)

############################################################
When the sub-task is: 1. Identify the fridge with items inside.
A successful representation:

def has_items_inside(fridge: item):
    # Check if the fridge has any items inside
    symbol has_items= exists o: item : (inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_items_inside(fridge)):
            # If theres a known fridge with items, approach it
            bind fridge: item where:
                is_fridge(fridge) and has_items_inside(fridge)
            achieve close_char(char, fridge)
        
        else:
            # Explore unvisited items to locate a fridge with items
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if there are items inside the fridge")

############################################################
When the sub-task is: 2. Move all items from the fridge to the trashcan.
A successful representation:
 
def is_item_in_fridge(item: item, fridge: item):
    # Function to check if an item is inside the specified fridge
    symbol in_fridge = exists i: item : (inside(i, fridge) and i == item)
    return in_fridge

behavior move_item_to_trash(item: item, trashcan: item):
    body:
        achieve_once inside(item, trashcan)
        # Place the specified item into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge, assumed to be fridge_289

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        foreach item: item:
            if not inhand(item) and inside(item, fridge):
                # Get items from fridge and move them to the trashcan
                move_item_to_trash(item, trashcan)

############################################################
When the sub-task is: Insert the CD into the CD player and play the music.
A successful representation:
 
behavior insert_cd_and_play(cd:item, cd_player:item):
    body:
        achieve_once inside(cd, cd_player)
        # Insert the CD into the CD player
        achieve_once closed(cd_player)
        # Ensure the CD player is closed
        achieve_once is_on(cd_player)
        # Turn on the CD player to play music

behavior __goal__():
    body:
        bind cd: item where:
            is_cd(cd)
        # Select a CD
        
        bind cd_player: item where:
            is_cd_player(cd_player)
        # Select a CD player
        
        insert_cd_and_play(cd, cd_player)
        # Insert the CD into the CD player and play the music

############################################################
When the sub-task is: 2. Gently wet the cat with lukewarm water, using a cup or a gentle stream.
A successful representation:
 
def is_lukewarm_water(water: item):
    # Check if the water is lukewarm
    return True  # Assume the water is lukewarm for the purpose of this task

behavior gently_wet_cat(cat: item, water_source: item, cup: item):
    body:
        if has_water(cup) and is_lukewarm_water(cup):
            # Use the cup with lukewarm water to wet the cat gently
            achieve_once has_water(cat)
        else:
            # If the cup doesnt have lukewarm water, switch on faucet for a gentle stream
            achieve_once is_on(water_source)
            achieve_once has_water(cat)

behavior __goal__():
    body:
        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 43
        # Select the water source, the faucet with ID 43

        bind cat: item where:
            is_cat(cat) and close(cat, water_source)
        # Select the cat, assuming its close to the specified water source

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        gently_wet_cat(cat, water_source, cup)

############################################################
When the sub-task is: 4. Rinse off the shampoo completely with lukewarm water.
A successful representation:
 
behavior rinse_cat(cat:item, faucet:item):
    body:
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(cat) # Ensure water rinses the cat to remove shampoo
        achieve clean(cat) # Ensure the shampoo is fully rinsed off and the cat is clean

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        rinse_cat(cat, faucet) # Rinse the cat with the faucet

############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_bedroom_light(bedroom_light:item):
    body:
        achieve is_on(bedroom_light)

behavior turn_on_bathroom_light(bathroom_light:item):
    body:
        achieve is_on(bathroom_light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Define bedroom

        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, bedroom)
        # Select the light in the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Define bathroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select the light in the bathroom

        turn_on_bedroom_light(bedroom_light)
        turn_on_bathroom_light(bathroom_light)

############################################################
When the sub-task is: 1. Identify the basket that contains clothes.
A successful representation:
 
def is_basket_for_clothes_with_clothes(basket: item):
    # Function to check if the basket contains clothes
    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : (is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)):
            # Check if there is a basket for clothes containing clothes based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)
            # Select the basket with clothes
            achieve close_char(char, basket)
            # Move the character closer to the basket with clothes

        else:
            # If no basket with clothes is found, initiate exploration to locate one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket,"Check if there are clothes inside this basket")

############################################################
When the sub-task is: 2. Add clothes from the basket into the washing machine.
A successful representation:
 
def has_clothes_in_basket(basket: item):
    # Function to check if there are clothes in the specified basket
    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):
    body:
        achieve_once inside(clothes, washing_machine)
        # Place the clothes inside the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and has_clothes_in_basket(basket)
        # Select the basket for clothes that contains clothes
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine
        
        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine

############################################################
When the sub-task is: 3. Add soap to the washing machine.
A successful representation:
 
behavior add_soap_to_machine(soap:item, washing_machine:item):
    body:
        achieve_once inside(soap, washing_machine)
        # Place the soap inside the washing machine

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select the soap

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2007
        # Select the washing machine with ID 2007

        add_soap_to_machine(soap, washing_machine)

############################################################
When the sub-task is: 4. Run the washing machine.
A successful representation:
 
behavior run_washing_machine(washing_machine:item):
    body:
        achieve_once closed(washing_machine)
        # Close the washing machine door before starting it
        achieve is_on(washing_machine)
        # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        run_washing_machine(washing_machine)

############################################################
When the sub-task is: 1. Prepare a bowl of water.
A successful representation:
 
behavior prepare_bowl_of_water(bowl:item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        prepare_bowl_of_water(bowl)

############################################################
When the sub-task is: 2. Put the bowl on the table in the home office.
A successful representation:
 
behavior put_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl of water on the designated table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table located in the home office

        put_bowl_on_table(bowl, table)

############################################################
When the sub-task is: 3. Find the cat.
A successful representation:
 
def is_cat_nearby(cat:item):
    # Function to check if the cat is near
    symbol cat_near=exists room: item : (inside(cat, room))
    return cat_near

behavior __goal__():
    body:
        # Check if the cat has already been observed in any known room
        if exists cat: item : (is_cat(cat) and is_cat_nearby(cat)):
            bind cat: item where:
                is_cat(cat) and is_cat_nearby(cat)
            # Approach the location of the cat
            achieve close_char(char, cat)

        else:
            # If the cat has not been found yet, inspect all unvisited rooms
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the location of the cat")

############################################################
When the sub-task is: 4. Put the cat on the table in the home office.
A successful representation:
behavior put_cat_on_table(cat: item, table: item):
    body:
        achieve_once on(cat, table)  # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat to be placed on the table

        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table in the home office with ID 355

        put_cat_on_table(cat, table)
############################################################
When the sub-task is: 1. Find the book and put it on the table in the home office.
A successful representation:
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table located in the home office

        find_book_and_place_on_table(book, table)

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:
 
behavior turn_on_office_light(office_light:item):
    body:
        achieve is_on(office_light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind office_light: item where:
            is_light(office_light) and inside(office_light, home_office)
        # Select the light in the home office

        turn_on_office_light(office_light)

############################################################
When the sub-task is: 1. Locate the bathroom sink.
A successful representation:
 
behavior locate_bathroom_sink(sink:item, bathroom:item):
    body:
        achieve close_char(char, sink) 

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        
        locate_bathroom_sink(sink, bathroom)

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to create soapy water.
A successful representation:
 
behavior fill_sink_and_add_soap(sink:item, soap:item, faucet:item):
    body:
        achieve_once has_water(sink) # Fill the sink with water
        achieve_once inside(soap, sink) # Add soap to the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_sink_and_add_soap(sink, soap, faucet)

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior add_cleaning_solution(dishwasher:item, cleaning_solution:item):
    body:
        achieve_once inside(cleaning_solution, dishwasher)
        # Place the cleaning solution inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select cleaning solution

        add_cleaning_solution(dishwasher, cleaning_solution)

############################################################
When the sub-task is: 2. Place the bowls and plates in the dishwasher and start the wash cycle.
A successful representation:
 
behavior load_dishwasher(item: item, dishwasher: item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher: item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 1001
        # Select the dishwasher with ID 1001

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                # Load all bowls and plates into the dishwasher
                load_dishwasher(item, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Find the basket with clothes in it.
A successful representation:
 
def is_basket_for_clothes_with_clothes(basket: item):
    # Function to check if the basket contains clothes
    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : (is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)):
            # Check if there is a basket for clothes containing clothes based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)
            # Select the basket with clothes
            achieve close_char(char, basket)
            # Move the character closer to the basket with clothes

        else:
            # If no basket with clothes is found, initiate exploration to locate one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket,"Check if there are clothes inside this basket")

############################################################
When the sub-task is: 2. Put all the clothes in the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):
    body:
        achieve_once inside(clothes, washing_machine)
        # Place the clothes inside the washing machine

behavior start_washing_machine(washing_machine: item):
    body:
        achieve_once closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve_once is_on(washing_machine)
        # Start the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket containing clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine

        start_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: 1. Find the pizza and hamburger and place them on a plate.
A successful representation:
 
behavior find_food_items_and_place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        find_food_items_and_place_on_plate(pizza, hamburger, plate)
        # Place the pizza and hamburger on the plate

############################################################
When the sub-task is: 2. Heat the plate with pizza and hamburger in the microwave.
A successful representation:
 
behavior heat_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select the plate containing the food

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_plate_in_microwave(plate, microwave) # Heat the food in the microwave

############################################################
When the sub-task is: 3. Put the plate on the table in the dining room.
A successful representation:

def in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior put_plate_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)  # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000 containing the pizza and hamburger

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table located in the dining room

        put_plate_on_table(plate, table)
        # Put plate_1000 on the selected table in the dining room

############################################################
When the sub-task is: 1. Identify the coffee table in the home office.
A successful representation:
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table located in the home office

        achieve visited(table)
        # Identify the coffee table in the home office

############################################################
When the sub-task is: 2. Find the book and place it on the coffee table.
A successful representation:
 
def is_home_office_table(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table located in the home office

        find_book_and_place_on_table(book, table)

############################################################
When the sub-task is: 3. Open the window in the home office.
A successful representation:
 
behavior open_window(window:item):
    body:
        achieve open(window) # Open the window in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office

        open_window(window)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:

behavior turn_on_bathroom_light(bathroom_light:item):
    body:
        achieve is_on(bathroom_light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Define bathroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select the light in the bathroom

        turn_on_bathroom_light(bathroom_light)

############################################################
When the sub-task is: 1. Find a table in the dining room and put the milk and egg on it.
A successful representation:
 
behavior place_milk_and_egg(table: item, milk: item, egg: item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(egg, table)
        # Place the egg on the table

def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        place_milk_and_egg(table, milk, egg)

############################################################
When the sub-task is: 2. Remove all the items from the fridge and throw them into the trashcan.
A successful representation:
behavior move_items_to_trash(item: item, trashcan: item):
    body:
        achieve_once inside(item, trashcan)
        # Move items to the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        foreach item: item:
            if inside(item, fridge):
                move_items_to_trash(item, trashcan)
        # Move all items from the fridge to the trashcan
############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:
 
behavior put_milk_and_egg_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve_once inside(milk, fridge) 
        # Place the milk inside the fridge
        achieve_once inside(egg, fridge)
        # Place the egg inside the fridge

behavior close_the_fridge(fridge: item):
    body:
        achieve_once closed(fridge)
        # Close the fridge

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        put_milk_and_egg_in_fridge(milk, egg, fridge)
        close_the_fridge(fridge)

############################################################
When the sub-task is: Slice the bread and toast it.
A successful representation:
behavior slice_and_toast_bread(bread:item, toaster:item, cutting_board:item, knife:item):
    body:
        achieve_once on(bread, cutting_board)  # Place the bread on the cutting board
        achieve_once cut(bread)  # Slice the bread using the knife
        achieve_once inside(bread, toaster)  # Put sliced bread in the toaster
        achieve_once closed(toaster)  # Close the toaster
        achieve_once is_on(toaster)  # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        slice_and_toast_bread(bread, toaster, cutting_board, knife)  # Slice and toast the bread
############################################################
When the sub-task is: 1. Find a lemon, sugar, and a glass or cup.
A successful representation:
behavior find_lemon_sugar_glass(lemon:item, sugar:item, glass:item):
    body:
        achieve_once visited(lemon) # Find a lemon
        achieve_once visited(sugar) # Find sugar
        achieve_once visited(glass) # Find a glass or cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        bind glass: item where:
            is_cup(glass)
        # Select a glass or cup

        find_lemon_sugar_glass(lemon, sugar, glass)
        # Find the lemon, sugar, and glass or cup
############################################################
When the sub-task is: 2. Cut the lemon and squeeze its juice into the cup.
A successful representation:
behavior cut_lemon_and_squeeze(lemon:item, cutting_board:item, cup:item):
    body:
        achieve_once on(lemon, cutting_board) # Place the lemon on the cutting board
        achieve_once cut(lemon) # Cut the lemon
        achieve_once inside(lemon, cup) # Squeeze the lemon juice into the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        cut_lemon_and_squeeze(lemon, cutting_board, cup) # Cut the lemon and squeeze its juice into the cup
############################################################
When the sub-task is: 3. Add sugar to the lemon juice.
A successful representation:
 
behavior add_sugar_to_lemon_juice(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup)
        # Add sugar to the lemon juice in the cup

behavior __goal__():
    body:
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup, ensuring its the one with lemon juice

        add_sugar_to_lemon_juice(sugar, cup)

############################################################
When the sub-task is: 1. Identify all the bowls and plates needing washing.
A successful representation:
 
def has_bowls_and_plates_dirty():
    # Checks if there are any bowls or plates that are dirty
    symbol has_dirty = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty

behavior __goal__():
    body:
        if exists item: item : ((is_bowl(item) or is_plate(item)) and dirty(item)):
            # If there are known dirty bowls or plates, no need to search further
            foreach item: item:
                if (is_bowl(item) or is_plate(item)) and dirty(item):
                    achieve visited(item)
            # Mark each dirty bowl or plate as visited

        else:
            # Search for dirty bowls and plates that have not been visited
            foreach item: item:
                if (is_bowl(item) or is_plate(item)) and not visited(item):
                    observe(item, "Check if this item is a dirty bowl or plate")

############################################################
When the sub-task is: 2. Load the identified bowls and plates into the dishwasher.
A successful representation:

behavior load_dishwasher(item: item, dishwasher: item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                # Load all identified bowls and plates into the dishwasher
                load_dishwasher(item, dishwasher)

############################################################
When the sub-task is: 3. Start the dishwasher to clean the bowls and plates.
A successful representation:
 
behavior start_dishwasher(dishwasher: item):
    body:
        achieve_once closed(dishwasher) # Close the dishwasher door
        achieve_once is_on(dishwasher) # Turn on the dishwasher to start the wash cycle

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 1001
        # Select the dishwasher with ID 1001

        start_dishwasher(dishwasher) # Start the dishwasher to clean the bowls and plates

############################################################
When the sub-task is: Turn on the DVD player.
A successful representation:
 
behavior turn_on_dvd_player(dvd_player:item):
    body:
        achieve is_on(dvd_player)

behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select a DVD player

        turn_on_dvd_player(dvd_player)
        # Turn on the DVD player

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Identify the bathroom

        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Select the window inside the bathroom

        open_bathroom_window(window)
        # Open the window in the bathroom
############################################################
When the sub-task is: Turn on the TV by touching the remote control.
A successful representation:
behavior turn_on_tv_with_remote(tv: item, remote_control: item):
    body:
        achieve_once close_char(char, remote_control) # Move close to the remote control
        achieve_once close(remote_control, tv) # Ensure the remote control is close to the TV
        touch(remote_control) # Touch the remote control to turn on the TV

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_tv_with_remote(tv, remote_control)
############################################################
When the sub-task is: Wipe the toilet with toilet paper and then throw it into the toilet.
A successful representation:
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper) # Hold the toilet paper
        wipe(toilet) # Wipe the toilet with the toilet paper

behavior throw_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet) # Dispose of the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        wipe_toilet_with_paper(toilet, toilet_paper)
        throw_into_toilet(toilet, toilet_paper)

############################################################
When the sub-task is: Get a cup of water and freeze it.
A successful representation:
 
behavior get_water_and_freeze(cup: item, fridge: item, water_source: item):
    body:
        achieve_once has_water(cup) # Fill the cup with water from the water source
        achieve_once inside(cup, fridge) # Place the cup of water inside the fridge
        
behavior close_the_fridge_door(fridge: item):
    body:
        achieve_once closed(fridge) # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source

        get_water_and_freeze(cup, fridge, water_source)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: 1. Find your cat.
A successful representation:
 
def is_cat_nearby(cat:item):
    # Function to check if the cat is near
    symbol cat_near=exists room: item : (inside(cat, room))
    return cat_near

behavior __goal__():
    body:
        # Check if the cat has already been observed in any known room
        if exists cat: item : (is_cat(cat) and is_cat_nearby(cat)):
            bind cat: item where:
                is_cat(cat) and is_cat_nearby(cat)
            # Approach the location of the cat
            achieve close_char(char, cat)

        else:
            # If the cat has not been found yet, inspect all unvisited rooms
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the location of the cat")

############################################################
When the sub-task is: 2. Touch your cat.
A successful representation:
 
behavior touch_cat(cat: item):
    body:
        achieve_once close_char(char, cat) # Ensure char is close to the cat to touch it
        touch(cat) # Touch the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055

        touch_cat(cat) # Touch the selected cat

############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior observe_jacket(jacket: item):
    body:
        observe(jacket, "Check if it is the clothes jacket we are looking for")

behavior hand_wash_jacket(jacket: item):
    body:
        wash(jacket) # Hand wash the jacket

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        observe_jacket(jacket)
        hand_wash_jacket(jacket)

############################################################
When the sub-task is: 2. Wash the jacket by washing machine.
A successful representation:
 
behavior load_jacket_into_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve_once inside(jacket, washing_machine)
        # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve_once closed(washing_machine)
        # Close the washing machine door
        achieve_once is_on(washing_machine) 
        # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2047 
        # Select the jacket with ID 2047

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        load_jacket_into_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
def is_window_unvisited(window: item):
    # Function to check if the window has not been visited
    symbol unvisited= not visited(window)
    return unvisited

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and is_window_unvisited(window):
                observe(window, "Identify the window")

############################################################
When the sub-task is: 2. Use a towel to wipe each window clean.
A successful representation:
 
behavior wipe_window_with_towel(window:item, towel:item):
    body:
        achieve_once inhand(towel) # Hold the towel
        wipe(window) # Wipe the window with the towel

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not clean(window):
                # For each window that is not clean
                bind towel: item where:
                    is_towel(towel)
                # Select a towel
                wipe_window_with_towel(window, towel)
                # Wipe the window with the towel

############################################################
When the sub-task is: 1. Locate the dining room and identify a table within it.
A successful representation:
 
def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior locate_dining_room_table(table: item):
    body:
        achieve visited(table)
        # Locate and mark the table in the dining room as visited

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table located in the dining room

        locate_dining_room_table(table)
        # Locate the table in the dining room

############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on the identified table.
A successful representation:
 
behavior place_items_on_table(table: item, milk: item, turkey: item, egg: item, fish: item, chicken: item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(turkey, table)
        # Place the turkey on the table
        achieve_once on(egg, table)
        # Place the egg on the table
        achieve_once on(fish, table)
        # Place the fish on the table
        achieve_once on(chicken, table)
        # Place the chicken on the table

def is_table_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and is_table_in_dining_room(table)
        # Select a table in the dining room

        place_items_on_table(table, milk, turkey, egg, fish, chicken)

############################################################
When the sub-task is: Slice some chicken and give it to your cat.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve_once cut(chicken) # Slice the chicken

behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve_once close_char(char, cat) # Move close to the cat
        achieve_once on(chicken, cat) # Give the chicken to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        slice_chicken(chicken, cutting_board)
        give_chicken_to_cat(chicken, cat)

############################################################
When the sub-task is: 1. Identify all rooms in the household.
A successful representation:
 
def is_room_unvisited(room: item):
    # Function to check if the room has not been visited
    symbol unvisited= not visited(room)
    return unvisited

behavior __goal__():
    body:
        foreach room: item:
            if is_room(room) and is_room_unvisited(room):
                observe(room, "Identify the room")

############################################################
When the sub-task is: 2. Turn on at least one light in each room.
A successful representation:
 
behavior turn_on_light(room_light:item):
    body:
        achieve is_on(room_light)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                foreach light: item:
                    if is_light(light) and inside(light, room):
                        turn_on_light(light)

############################################################
When the sub-task is: Slice the chicken.
A successful representation:

behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board
        achieve_once cut(chicken) # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_chicken(chicken, cutting_board)

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start it.
A successful representation:
 
behavior load_bowls_and_plates(dishwasher: item, item: item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher
        
behavior start_dishwasher(dishwasher: item):
    body:
        achieve_once closed(dishwasher)
        # Close the dishwasher door
        achieve_once is_on(dishwasher)
        # Turn on the dishwasher to start the wash cycle

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                load_bowls_and_plates(dishwasher, item)
                # Load all bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand in the sink.
A successful representation:

behavior wash_forks_by_hand(fork:item, sink:item):
    body:
        achieve_once inside(fork, sink) # Place the fork in the sink
        wash(fork) # Wash the fork by hand

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select a fork

        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select sink with ID 231 in the kitchen

        wash_forks_by_hand(fork, sink)

