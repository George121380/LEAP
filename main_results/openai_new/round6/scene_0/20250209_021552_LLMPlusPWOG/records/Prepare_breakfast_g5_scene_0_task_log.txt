From agent.py
Reset goals: The sub-goals are: 
['Prepare a cup of hot milk with cereal inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        achieve_once is_on(microwave)
        # Assume microwave is used to heat the milk, make sure its on

behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal to the cup with milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        bind cup: item where:
            is_cup(cup)
        # Select cup
        bind microwave: item where:
            is_microwave(microwave)
        # Select microwave
        
        heat_milk(milk, cup)
        add_cereal_to_milk(cereal, cup)
        # Heat milk and add cereal

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once inside(milk, pot) 
        # Pour milk into a pot
        achieve_once is_on(stove) 
        # Turn on the stove to heat the milk
        
behavior mix_cereal_with_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(milk, cup) 
        # Pour heated milk into a cup
        achieve_once inside(cereal, cup) 
        # Add cereal to the cup with milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        heat_milk(milk, stove)
        
        bind heated_milk: item where:
            is_milk(heated_milk)
        # Rebind the milk after its heated to clarify usage in next behavior
        
        mix_cereal_with_milk(cereal, heated_milk, cup)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(cup:item, stove:item):
    body:
        achieve_once inside(cup, stove)
        # Place the cup of milk on the stove
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior add_cereal(cup:item, cereal:item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup with hot milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, stove) # Assuming the cup is on the stove
        # Select a cup for the hot milk
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to be added to the hot milk
        
        heat_milk(cup, stove)
        # Heat up the milk using the stove
        
        add_cereal(cup, cereal)
        # Add cereal to the hot milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_sauce_2078_around_cupboard_229(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(sauce,cupboard_instance)
        else:
            exp(sauce,cupboard_instance)
    eff:
        unknown[sauce]=False
        close[sauce,cupboard_instance]=True
        close[cupboard_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_with_cereal(cup:item, milk:item, cereal:item, stove:item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once inside(cereal, cup) # Add cereal into the cup
        achieve plugged(stove) # Plug in the stove for heating
        achieve is_on(stove) # Turn on the stove to heat the milk

behavior close_stove(stove:item):
    body:
        achieve is_off(stove) # Turn off the stove
        achieve unplugged(stove) # Unplug the stove after use

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive items
        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select suitable milk
        bind cereal: item where:
            is_food_cereal(cereal) and eatable(cereal)
        # Select cereal
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Use stove for heating
        prepare_hot_milk_with_cereal(cup, milk, cereal, stove)
        close_stove(stove) # Ensure stove is turned off and unplugged

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_sauce_2078_around_kitchen_counter_230(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(sauce,kitchen_counter_instance)
        else:
            exp(sauce,kitchen_counter_instance)
    eff:
        unknown[sauce]=False
        close[sauce,kitchen_counter_instance]=True
        close[kitchen_counter_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior mix_cereal(milk:item, cereal:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)
        # Mix cereal into the cup with milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup)

        bind stove: item where:
            is_stove(stove)

        heat_milk(milk, stove)
        mix_cereal(milk, cereal, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior mix_cereal(milk:item, cereal:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)
        # Mix cereal into the cup with milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup)

        bind stove: item where:
            is_stove(stove)

        heat_milk(milk, stove)
        mix_cereal(milk, cereal, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(table_355)exp(cup_2063, table_355)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(kitchen_counter_230)exp(food_cereal_2015, kitchen_counter_230)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(cup_2063, table_355)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(kitchen_counter_230)exp(food_cereal_2015, kitchen_counter_230)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the milk is heated on the stove before putting it into the cup.
##############################
From agent.py
Human Instruction: You need to ensure the milk is heated on the stove before putting it into the cup.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Switch on stove_2065.
Action 3: Walk to table_355.
Action 4: look for cup_2063 around table_355.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for milk_2043 around fridge_289.
Action 9: Grab milk_2043.
Action 10: Walk to cup_2063.
Action 11: Put milk_2043 into cup_2063.
Action 12: Walk to food_cereal_2015.
Action 13: Grab food_cereal_2015.
Action 14: Walk to cup_2063.
Action 15: Put food_cereal_2015 into cup_2063.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(milk:item, stove:item, cup:item, cereal:item):
    body:
        achieve_once inside(milk, cup)
        # Place milk inside the cup

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup

behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is on to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select a stove with ID 2065
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select a cup with ID 2063
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2015
        # Select the cereal
        heat_milk_on_stove(milk, stove)
        prepare_hot_milk(milk, stove, cup, cereal)
        add_cereal(cereal, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_into_pan(milk:item, pan:item):
    body:
        achieve_once inside(milk, pan)
        # Pour milk into the pan

behavior heat_milk_on_stove(pan:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on to heat the milk
        achieve inside(milk_2043, pan)

behavior pour_milk_into_cup(pan:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour milk into the cup from the pan

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Bind to the stove with ID 2065
        bind table: item where:
            is_table(table) and id[table]==355
        # Bind to the table with ID 355
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Bind to the fridge with ID 289
        bind milk: item where:
            is_milk(milk) and id[milk]==2043
        # Bind to the milk with ID 2043
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Bind to the cup with ID 2063
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2015
        # Bind to the cereal with ID 2015
        bind pan: item where:
            is_pot(pan)
        # Bind to a pot to heat the milk

        pour_milk_into_pan(milk, pan)
        # Pour the milk into the pan
        heat_milk_on_stove(pan, stove)
        # Heat the milk on the stove
        pour_milk_into_cup(pan, cup)
        # Pour the hot milk into the cup
        add_cereal_to_cup(cereal, cup)
        # Add the cereal into the cup of hot milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Heat the milk on the stove

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour heated milk into the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve_once inhand(cereal)
        achieve_once inside(cereal, cup)
        # Add cereal into the cup with milk

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select stove
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cup: item where:
            is_cup(cup)
        # Select cup
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        heat_milk_on_stove(milk, stove) # Heat the milk on the stove
        pour_milk_into_cup(milk, cup) # Pour the heated milk into the cup
        add_cereal_to_cup(cereal, cup) # Add cereal into the cup
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_milk_on_stove(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Heat the milk on the stove

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour heated milk into the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve_once inhand(cereal)
        achieve_once inside(cereal, cup)
        # Add cereal into the cup with milk

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select stove
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cup: item where:
            is_cup(cup)
        # Select cup
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        heat_milk_on_stove(milk, stove) # Heat the milk on the stove
        pour_milk_into_cup(milk, cup) # Pour the heated milk into the cup
        add_cereal_to_cup(cereal, cup) # Add cereal into the cup
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchoff_executor(stove_2065)open_executor(stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(stove_2065)putin_executor(milk_2043, stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2063. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. milk_2043 is inside stove_2065. milk_2043 is close stove_2065. stove_2065 is close milk_2043. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the cup_2063. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the cup_2063. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(table_355)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)', 'walk_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(stove_2065)', 'putin_executor(milk_2043, stove_2065)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 167 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
