From agent.py
Reset goals: The sub-goals are: 
['Make oil fried banana.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_sauce_2078_around_kitchen_counter_230(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(sauce,kitchen_counter_instance)
        else:
            exp(sauce,kitchen_counter_instance)
    eff:
        unknown[sauce]=False
        close[sauce,kitchen_counter_instance]=True
        close[kitchen_counter_instance,sauce]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_fry_banana(oil: item, banana: item, fryingpan: item):
    body:
        achieve_once inside(oil, fryingpan)
        achieve cut(banana)
        # Add oil to the frying pan and cut the banana

behavior fry_banana(fryingpan: item, stove: item):
    body:
        achieve plugged(stove)
        achieve_once is_on(stove)
        # Turn on the stove and fry the banana in the frying pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil
        
        bind banana: item where:
            is_food_banana(banana)
        # Select banana
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select stove

        prepare_fry_banana(oil, banana, fryingpan)
        fry_banana(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_for_frying(stove:item, fryingpan:item, oil:item):
    body:
        achieve plugged(stove)
        # Plug the stove to use for frying
        achieve open(fryingpan)
        # Open or prepare the frying pan for frying
        achieve inside(oil, fryingpan)
        # Add oil to the frying pan

behavior cut_banana(banana:item):
    body:
        achieve cut(banana)
        # Cut the banana before frying

behavior start_frying(stove:item, fryingpan:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for frying

        bind oil: item where:
            is_oil(oil)
        # Select oil to fry the banana

        bind banana: item where:
            is_food_banana(banana)
        # Select a banana to be fried

        prepare_for_frying(stove, fryingpan, oil)
        cut_banana(banana)
        start_frying(stove, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_frying(items_in_pan:item, frying_pan:item):
    body:
        achieve_once inside(items_in_pan, frying_pan)

behavior fry_in_oil(frying_pan:item):
    body:
        achieve is_on(stove) 
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind oil: item where:
            is_oil(oil)
        bind frying_pan: item where:
            is_fryingpan(frying_pan) 
        bind stove: item where:
            is_stove(stove)
        
        prepare_frying(banana, frying_pan)
        prepare_frying(oil, frying_pan)
        fry_in_oil(frying_pan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_kitchen_counter_230(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_frying_pan_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        # Place the frying pan on the stove
        achieve_once plugged(stove)
        # Plug in the stove
        achieve is_on(stove)
        # Turn on the stove

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the frying pan

behavior prepare_banana_for_frying(banana:item, board:item):
    body:
        achieve_once cut(banana)
        # Cut the banana
        achieve_once on(banana, board)
        # Place cut banana on the cutting board

behavior fry_banana(pan:item, banana:item):
    body:
        achieve_once on(banana, pan)
        # Place the banana in the frying pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind banana: item where:
            is_food_banana(banana)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        prepare_frying_pan_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        prepare_banana_for_frying(banana, cutting_board)
        fry_banana(pan, banana)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once cut(banana) # Cut the banana using the knife

behavior heat_oil(oil:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn on the stove to heat the oil

behavior fry_banana(cutting_board:item, fryingpan:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and cut(slice) and on(slice, cutting_board):
                achieve_once inside(slice, fryingpan) # Place banana slices into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind oil: item where:
            is_oil(oil)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)

        prepare_ingredients(banana, knife, cutting_board)
        # Prepare and cut the banana using a knife on the cutting board
        
        heat_oil(oil, fryingpan, stove) 
        # Heat the oil in the pan using the stove
        
        fry_banana(cutting_board, fryingpan)
        # Fry the banana slices in the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_ingredients(banana:item, knife:item, cutting_board:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once cut(banana) # Cut the banana using the knife

behavior heat_oil(oil:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn on the stove to heat the oil

behavior fry_banana(cutting_board:item, fryingpan:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and cut(slice) and on(slice, cutting_board):
                achieve_once inside(slice, fryingpan) # Place banana slices into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind oil: item where:
            is_oil(oil)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)

        prepare_ingredients(banana, knife, cutting_board)
        # Prepare and cut the banana using a knife on the cutting board
        
        heat_oil(oil, fryingpan, stove) 
        # Heat the oil in the pan using the stove
        
        fry_banana(cutting_board, fryingpan)
        # Fry the banana slices in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)']
Time info:
Time consume: 116 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 23

Task complete rate:
1
Scene_id: 0
##############################
