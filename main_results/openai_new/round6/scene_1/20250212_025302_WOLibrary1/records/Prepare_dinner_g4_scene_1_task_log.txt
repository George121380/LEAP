From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients for fried rice with egg, including rice and eggs.', '2. Cook the rice and scramble the eggs.', '3. Mix and fry the cooked rice with the scrambled eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients_for_fried_rice():
    # Function to check if there are rice and eggs available
    symbol has_ingredients= exists o: item : ((is_food_rice(o) or is_food_egg(o)))
    return has_ingredients

behavior __goal__():
    body:
        if exists o: item : (has_ingredients_for_fried_rice()):
            # If we already have rice and eggs, no further action is needed
            return

        else:
            # If rice and eggs have not been found, proceed to search for them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if it is either rice or eggs")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        ') at line 5215, column 19.
Expected one of: 
	* NOT
	* DO
	* IMAG_NUMBER
	* MINUS
	* FORALL
	* HEX_NUMBER
	* TILDE
	* FLOAT_NUMBER
	* VARNAME
	* PLUS
	* STRING
	* ELLIPSIS
	* OCT_NUMBER
	* DEC_NUMBER
	* LSQB
	* FALSE
	* LONG_STRING
	* BIN_NUMBER
	* COLON
	* TRUE
	* LPAR
	* FINDONE
	* NONE
	* FINDALL
	* EXISTS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def has_ingredients_for_fried_rice():
    # Function to check if there are rice and eggs available
    symbol has_ingredients = exists o: item : (is_food_rice(o) or is_food_egg(o))
    return has_ingredients

behavior __goal__():
    body:
        if has_ingredients_for_fried_rice():
            # If we already have rice and eggs, no further action is needed
            return

        else:
            # If rice and eggs have not been found, proceed to search for them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if it is either rice or eggs")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        ') at line 5215, column 19.
Expected one of: 
	* NOT
	* DO
	* IMAG_NUMBER
	* MINUS
	* FORALL
	* HEX_NUMBER
	* TILDE
	* FLOAT_NUMBER
	* VARNAME
	* PLUS
	* STRING
	* ELLIPSIS
	* OCT_NUMBER
	* DEC_NUMBER
	* LSQB
	* FALSE
	* LONG_STRING
	* BIN_NUMBER
	* COLON
	* TRUE
	* LPAR
	* FINDONE
	* NONE
	* FINDALL
	* EXISTS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def has_ingredients_for_fried_rice():
    # Function to check if there are rice and eggs available
    symbol has_ingredients = exists o: item : (is_food_rice(o) or is_food_egg(o))
    return has_ingredients

behavior __goal__():
    body:
        if has_ingredients_for_fried_rice():
            # If we already have rice and eggs, no further action is needed
            return

        else:
            # If rice and eggs have not been found, proceed to search for them
            foreach item: item:
                if not visited(item) and (is_food_rice(item) or is_food_egg(item)):
                    observe(item, "Check if it is either rice or eggs")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg(item: item):
    # Function to check if an item is an egg
    return is_food_egg(item)

def is_rice(item: item):
    # Function to check if an item is rice
    return is_food_rice(item)

behavior __goal__():
    body:
        # First, check if you can find eggs
        if not exists egg: item: (is_egg(egg)):
            foreach egg: item:
                if not visited(egg) and is_food(egg):
                    observe(egg, "Check is this an egg")

        # Next, check if you can find rice
        if not exists rice: item: (is_rice(rice)):
            foreach rice: item:
                if not visited(rice) and is_food(rice):
                    observe(rice, "Check is this rice")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5217, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def is_egg(item: item):
    # Function to check if an item is an egg
    return is_food_egg(item)

def is_rice(item: item):
    # Function to check if an item is rice
    return is_food_rice(item)

behavior __goal__():
    body:
        # First, check if you can find eggs
        if not exists egg: item : (is_egg(egg)):
            foreach egg: item:
                if not visited(egg) and is_food(egg):
                    observe(egg, "Check is this an egg")

        # Next, check if you can find rice
        if not exists rice: item : (is_rice(rice)):
            foreach rice: item:
                if not visited(rice) and is_food(rice):
                    observe(rice, "Check is this rice")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5217, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def is_egg(item: item):
    # Function to check if an item is an egg
    return is_food_egg(item)

def is_rice(item: item):
    # Function to check if an item is rice
    return is_food_rice(item)

behavior __goal__():
    body:
        # First, check if you can find eggs
        if not exists egg: item : (is_egg(egg)):
            foreach egg: item:
                if not visited(egg) and is_food(egg):
                    observe(egg, "Check is this an egg")

        # Next, check if you can find rice
        if not exists rice: item : (is_rice(rice)):
            foreach rice: item:
                if not visited(rice) and is_food(rice):
                    observe(rice, "Check is this rice")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients_for_fried_rice():
    # Function to check if there are rice or eggs in the scene
    symbol has_rice_or_egg = exists o: item : ((is_food_rice(o) or is_food_egg(o)))
    return has_rice_or_egg

behavior __goal__():
    body:
        if has_ingredients_for_fried_rice():
            # If we have already identified rice or eggs, find a way to observe them
            foreach o: item:
                if is_food_rice(o) or is_food_egg(o):
                    observe(o, "Check if the rice or egg is present")
        
        else:
            # Check all items in the scene to locate rice or eggs
            foreach o: item:
                if not visited(o):
                    observe(o, "Check if this item is rice or egg")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ingredients_for_fried_rice():
    # Function to check if there are rice or eggs in the scene
    symbol has_rice_or_egg = exists o: item : ((is_food_rice(o) or is_food_egg(o)))
    return has_rice_or_egg

behavior __goal__():
    body:
        if has_ingredients_for_fried_rice():
            # If we have already identified rice or eggs, find a way to observe them
            foreach o: item:
                if is_food_rice(o) or is_food_egg(o):
                    observe(o, "Check if the rice or egg is present")
        
        else:
            # Check all items in the scene to locate rice or eggs
            foreach o: item:
                if not visited(o):
                    observe(o, "Check if this item is rice or egg")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)obs(food_egg_2092, Check if the rice or egg is present)walk_executor(kitchen_counter_122)exp(food_rice_2108, kitchen_counter_122)walk_executor(food_rice_2108)obs(food_rice_2108, Check if the rice or egg is present)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2092, Check if the rice or egg is present)obs(food_rice_2108, Check if the rice or egg is present)
##############################
From agent.py
obs(food_egg_2092, Check if the rice or egg is present)
Get this information:  food_egg_2092 is inside dining_room_41. food_egg_2092 is inside fridge_126. food_egg_2092 is close to fridge_126. food_egg_2092 is close to character_240. food_egg_2092 is CLEAN.
##############################
From agent.py
obs(food_rice_2108, Check if the rice or egg is present)
Get this information:  food_rice_2108 is inside dining_room_41. food_rice_2108 is inside fridge_126. food_rice_2108 is close to fridge_126. food_rice_2108 is close to character_240. food_rice_2108 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice:item, stove:item):
    body:
        achieve_once inside(rice, stove)
        # Place the rice inside the stove

behavior scramble_eggs(eggs:item, fryingpan:item):
    body:
        achieve_once inside(eggs, fryingpan)
        # Place the eggs inside the frying pan for scrambling

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind stove: item where:
            is_stove(stove)
        # Select stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        cook_rice(rice, stove)
        # Cook the rice on the stove

        scramble_eggs(eggs, fryingpan)
        # Scramble the eggs in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice(rice:item, stove:item):
    body:
        achieve_once inside(rice, stove)
        # Place the rice inside the stove

behavior scramble_eggs(eggs:item, fryingpan:item):
    body:
        achieve_once inside(eggs, fryingpan)
        # Place the eggs inside the frying pan for scrambling

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind stove: item where:
            is_stove(stove)
        # Select stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        cook_rice(rice, stove)
        # Cook the rice on the stove

        scramble_eggs(eggs, fryingpan)
        # Scramble the eggs in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(stove_2135)putin_executor(food_rice_2108, stove_2135)walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the food_rice_2108. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_rice_2108, stove_2135)
Robot find: Robot is close to the food_rice_2108. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. food_rice_2108 is inside stove_2135. stove_2135 is close food_rice_2108. food_rice_2108 is close stove_2135. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior mix_fry_rice_eggs(rice:item, eggs:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(eggs, fryingpan)
        # Mix and fry the rice with the scrambled eggs together inside the frying pan

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan to use

        mix_fry_rice_eggs(rice, eggs, fryingpan)
        # Perform the mixing and frying action on the rice and eggs inside the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior mix_fry_rice_eggs(rice:item, eggs:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(eggs, fryingpan)
        # Mix and fry the rice with the scrambled eggs together inside the frying pan

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan to use

        mix_fry_rice_eggs(rice, eggs, fryingpan)
        # Perform the mixing and frying action on the rice and eggs inside the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the stove_2135. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the stove_2135. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_rice_2108 is inside fryingpan_2154. fryingpan_2154 is close food_rice_2108. food_rice_2108 is close fryingpan_2154. food_rice_2108 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(stove_2135)', 'putin_executor(food_rice_2108, stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_rice_2108, fryingpan_2154)']
Time info:
Time consume: 191 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
