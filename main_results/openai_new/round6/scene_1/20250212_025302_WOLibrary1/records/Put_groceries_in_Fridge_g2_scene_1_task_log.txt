From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish) # Wash the fish so it becomes clean

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        wash_fish(fish) # Wash the selected fish
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish) # Wash the fish so it becomes clean

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        wash_fish(fish) # Wash the selected fish
 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_cupboard_118(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(milk,cupboard_instance)
        else:
            exp(milk,cupboard_instance)
    eff:
        unknown[milk]=False
        close[milk,cupboard_instance]=True
        close[cupboard_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(milk_2115, cupboard_118)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the food_fish_2093. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the food_fish_2093. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(milk_2115, cupboard_118)
Fail to find milk_2115 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the food_fish_2093. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(milk_2115, kitchen_counter_119)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_119)
Fail to find milk_2115 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(milk_2115, oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the food_fish_2093. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the food_fish_2093. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(milk_2115, oven_127)
Fail to find milk_2115 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(milk_2115, microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the food_fish_2093. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Navigate to dining_room_41. Look for table_114 within this room. milk_2115 is located on table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to dining_room_41. Look for table_114 within this room. milk_2115 is located on table_114.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Grab food_fish_2093.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Wash food_fish_2093.
Action 9: Switch off faucet_20.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for milk_2115 around cupboard_118.
Action 13: Walk to kitchen_counter_122.
Action 14: look for milk_2115 around kitchen_counter_122.
Action 15: Walk to cupboard_117.
Action 16: look for milk_2115 around cupboard_117.
Action 17: Walk to kitchen_counter_119.
Action 18: look for milk_2115 around kitchen_counter_119.
Action 19: Walk to oven_127.
Action 20: Open oven_127.
Action 21: look for milk_2115 around oven_127.
Action 22: Walk to microwave_135.
Action 23: Open microwave_135.

##############################
From agent.py
exp(milk_2115, microwave_135)
Fail to find milk_2115 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place milk on the table in the dining room. Milk has been located on table_114, but there is no action listed for moving or placing it properly as required in the sub-task.
##############################
From agent.py
Human Instruction: You need to place milk on the table in the dining room. Milk has been located on table_114, but there is no action listed for moving or placing it properly as required in the sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Grab food_fish_2093.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Wash food_fish_2093.
Action 9: Switch off faucet_20.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for milk_2115 around cupboard_118.
Action 13: Walk to kitchen_counter_122.
Action 14: look for milk_2115 around kitchen_counter_122.
Action 15: Walk to cupboard_117.
Action 16: look for milk_2115 around cupboard_117.
Action 17: Walk to kitchen_counter_119.
Action 18: look for milk_2115 around kitchen_counter_119.
Action 19: Walk to oven_127.
Action 20: Open oven_127.
Action 21: look for milk_2115 around oven_127.
Action 22: Walk to microwave_135.
Action 23: Open microwave_135.
Action 24: look for milk_2115 around microwave_135.
Action 25: Walk to table_114.
Action 26: look for milk_2115 around table_114.
Action 27: Walk to food_turkey_2112.
Action 28: Grab food_turkey_2112.
Action 29: Walk to table_114.
Action 30: Put food_turkey_2112 on table_114.
Action 31: Walk to food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to table_114.
Action 34: Put food_egg_2092 on table_114.
Action 35: Put food_fish_2093 on table_114.
Action 36: Walk to food_chicken_2089.
Action 37: Grab food_chicken_2089.
Action 38: Walk to table_114.
Action 39: Put food_chicken_2089 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, item) and is_dining_room(item)
        # Select a table in the dining room
        
        put_items_on_table(milk, turkey, eggs, fish, chicken, dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [Variable<dining_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind dining_table: item where:
            is_table(dining_table) and inside_char(char, dining_table) and is_dining_room(item)
        # Select a table in the dining room
        
        put_items_on_table(milk, turkey, eggs, fish, chicken, dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [Variable<dining_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tea_bag_2023_around_tablelamp_238(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==238
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(tea_bag,tablelamp_instance)
        else:
            exp(tea_bag,tablelamp_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,tablelamp_instance]=True
        close[tablelamp_instance,tea_bag]=True
    

behavior find_food_food_2094_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_food_onion_2048_around_bowl_2141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

behavior find_envelope_2018_around_filing_cabinet_200(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(envelope,filing_cabinet_instance)
        else:
            exp(envelope,filing_cabinet_instance)
    eff:
        unknown[envelope]=False
        close[envelope,filing_cabinet_instance]=True
        close[filing_cabinet_instance,envelope]=True
    

#goal_representation

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind dining_table: item where:
            is_table(dining_table) and inside_char(char, dining_table) and is_dining_room(dining_table)
        # Select a table in the dining room
        
        put_items_on_table(milk, turkey, eggs, fish, chicken, dining_table)

behavior put_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_pillow_104(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==104
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(measuring_cup,pillow_instance)
        else:
            exp(measuring_cup,pillow_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,pillow_instance]=True
        close[pillow_instance,measuring_cup]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_to_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        observe(milk, "Locate and pick up the milk")
        move_to_table(milk, table)
        move_to_table(turkey, table)
        move_to_table(egg, table)
        move_to_table(fish, table)
        move_to_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_shower_16(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(food_butter,shower_instance)
        else:
            exp(food_butter,shower_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,shower_instance]=True
        close[shower_instance,food_butter]=True
    

#goal_representation
 
behavior move_to_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
            
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        observe(milk, "Locate and pick up the milk")
        move_to_table(milk, table)
        move_to_table(turkey, table)
        move_to_table(egg, table)
        move_to_table(fish, table)
        move_to_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_to_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
            
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        observe(milk, "Locate and pick up the milk")
        move_to_table(milk, table)
        move_to_table(turkey, table)
        move_to_table(egg, table)
        move_to_table(fish, table)
        move_to_table(chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Locate and pick up the milk)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Locate and pick up the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the milk to the table in the dining room, as it hasn't been placed on the table yet.
##############################
From agent.py
Human Instruction: You need to move the milk to the table in the dining room, as it hasn't been placed on the table yet.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Grab food_fish_2093.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Wash food_fish_2093.
Action 9: Switch off faucet_20.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for milk_2115 around cupboard_118.
Action 13: Walk to kitchen_counter_122.
Action 14: look for milk_2115 around kitchen_counter_122.
Action 15: Walk to cupboard_117.
Action 16: look for milk_2115 around cupboard_117.
Action 17: Walk to kitchen_counter_119.
Action 18: look for milk_2115 around kitchen_counter_119.
Action 19: Walk to oven_127.
Action 20: Open oven_127.
Action 21: look for milk_2115 around oven_127.
Action 22: Walk to microwave_135.
Action 23: Open microwave_135.
Action 24: look for milk_2115 around microwave_135.
Action 25: Walk to table_114.
Action 26: look for milk_2115 around table_114.
Action 27: Walk to food_turkey_2112.
Action 28: Grab food_turkey_2112.
Action 29: Walk to table_114.
Action 30: Put food_turkey_2112 on table_114.
Action 31: Walk to food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to table_114.
Action 34: Put food_egg_2092 on table_114.
Action 35: Put food_fish_2093 on table_114.
Action 36: Walk to food_chicken_2089.
Action 37: Grab food_chicken_2089.
Action 38: Walk to table_114.
Action 39: Put food_chicken_2089 on table_114.
Action 40: Walk to milk_2115.
Action 41: Observe around milk_2115 with the question of Locate and pick up the milk.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shampoo_2019_around_shower_16(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(shampoo,shower_instance)
        else:
            exp(shampoo,shower_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,shower_instance]=True
        close[shower_instance,shampoo]=True
    

behavior find_diary_2008_around_filing_cabinet_200(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(diary,filing_cabinet_instance)
        else:
            exp(diary,filing_cabinet_instance)
    eff:
        unknown[diary]=False
        close[diary,filing_cabinet_instance]=True
        close[filing_cabinet_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
def has_all_items_on_table(dining_table:item):
    # Check if milk, turkey, eggs, fish, and chicken are on the specified dining table
    symbol has_all_items = exists o: item : (
        (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o))
        and on(o, dining_table)
    )
    return has_all_items

behavior place_items_on_table(dining_table: item, item_list: list of item):
    body:
        foreach i: item:
            if i in item_list:
                achieve_once on(i, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table)
        # Find a dining table to place the items

        if not has_all_items_on_table(dining_table):
            # If not all items are on the dining table, observe the necessary items and place them

            bind milk: item where:
                is_milk(milk)
            # Select milk

            bind turkey: item where:
                is_food_turkey(turkey)
            # Select turkey

            bind eggs: item where:
                is_food_egg(eggs)
            # Select eggs

            bind fish: item where:
                is_food_fish(fish)
            # Select fish

            bind chicken: item where:
                is_food_chicken(chicken)
            # Select chicken

            # Create a list of items to place on the table
            symbol item_list = [milk, turkey, eggs, fish, chicken]

            place_items_on_table(dining_table, item_list)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'of') at line 5534, column 67.
Expected one of: 
	* RPAR
	* LSQB
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'list')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2001_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
 
def has_all_items_on_table(dining_table:item):
    # Check if milk, turkey, eggs, fish, and chicken are on the specified dining table
    symbol has_all_items = exists o: item : (
        (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o))
        and on(o, dining_table)
    )
    return has_all_items

behavior place_items_on_table(dining_table: item, item_list: list):
    body:
        foreach i: item:
            if i in item_list:
                achieve_once on(i, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table)
        # Find a dining table to place the items

        if not has_all_items_on_table(dining_table):
            # If not all items are on the dining table, observe the necessary items and place them

            bind milk: item where:
                is_milk(milk)
            # Select milk

            bind turkey: item where:
                is_food_turkey(turkey)
            # Select turkey

            bind eggs: item where:
                is_food_egg(eggs)
            # Select eggs

            bind fish: item where:
                is_food_fish(fish)
            # Select fish

            bind chicken: item where:
                is_food_chicken(chicken)
            # Select chicken

            # Create a list of items to place on the table
            symbol item_list = [milk, turkey, eggs, fish, chicken]

            place_items_on_table(dining_table, item_list)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5519, column 18.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_shampoo_2019_around_shower_16(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(shampoo,shower_instance)
        else:
            exp(shampoo,shower_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,shower_instance]=True
        close[shower_instance,shampoo]=True
    

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
 
behavior place_items_on_table(dining_table: item, item_list: list):
    body:
        foreach item: item:
            if item in item_list:
                achieve_once on(item, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table)
        # Find a dining table to place the items

        if not has_all_items_on_table(dining_table):
            # If not all items are on the dining table, observe the necessary items and place them

            bind milk: item where:
                is_milk(milk)
            # Select milk

            bind turkey: item where:
                is_food_turkey(turkey)
            # Select turkey

            bind eggs: item where:
                is_food_egg(eggs)
            # Select eggs

            bind fish: item where:
                is_food_fish(fish)
            # Select fish

            bind chicken: item where:
                is_food_chicken(chicken)
            # Select chicken

            # Create a list of items to place on the table
            symbol item_list = [milk, turkey, eggs, fish, chicken]

            place_items_on_table(dining_table, item_list)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_sink_120(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_butter,sink_instance)
        else:
            exp(food_butter,sink_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,sink_instance]=True
        close[sink_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(foods:list, table:item):
    body:
        foreach food: item:
            if food in foods:
                achieve_once on(food, table) # Place each food item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room) # Find a table in the dining room

        # Bind each food item
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        # List of all the foods to place on the table
        symbol foods = [milk, turkey, eggs, fish, chicken]

        place_on_table(foods, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5511, column 21.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2046_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
behavior place_on_table(foods:list, table:item):
    body:
        foreach food: item:
            achieve_once on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        symbol foods = [milk, turkey, eggs, fish, chicken]

        place_on_table(foods, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior place_on_table(foods:list, table:item):
    body:
        foreach food: item:
            achieve_once on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        symbol foods = [milk, turkey, eggs, fish, chicken]

        place_on_table(foods, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) 

behavior locate_and_pickup(item:item):
    body:
        achieve_once inhand(item) 

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        locate_and_pickup(milk)
        # Locate and pick up the milk

        put_item_on_table(milk, table)
        # Place the milk on the table

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        put_item_on_table(turkey, table)
        put_item_on_table(egg, table)
        put_item_on_table(fish, table)
        put_item_on_table(chicken, table)
        # Place turkey, egg, fish, and chicken on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior locate_and_pickup(item:item):
    body:
        achieve_once inhand(item)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table in the dining room

        locate_and_pickup(milk)
        # Locate and pick up the milk

        put_item_on_table(milk, table)
        # Place the milk on the table

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        put_item_on_table(turkey, table)
        put_item_on_table(egg, table)
        put_item_on_table(fish, table)
        put_item_on_table(chicken, table)
        # Place turkey, egg, fish, and chicken on the table
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5504, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tea_bag_2023_around_kitchen_counter_123(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tea_bag,kitchen_counter_instance)
        else:
            exp(tea_bag,kitchen_counter_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tea_bag]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#goal_representation

behavior put_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior locate_and_pickup(item:item):
    body:
        achieve_once inhand(item)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table in the dining room

        locate_and_pickup(milk)
        # Locate and pick up the milk

        put_item_on_table(milk, table)
        # Place the milk on the table

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        put_item_on_table(turkey, table)
        put_item_on_table(egg, table)
        put_item_on_table(fish, table)
        put_item_on_table(chicken, table)
        # Place turkey, egg, fish, and chicken on the table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

#exp_behavior_end

#goal_representation

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        
        bind milk: item where:
            is_milk(milk)
        place_on_table(milk, table)

        bind turkey: item where:
            is_food_turkey(turkey)
        place_on_table(turkey, table)

        bind egg: item where:
            is_food_egg(egg)
        place_on_table(egg, table)

        bind fish: item where:
            is_food_fish(fish)
        place_on_table(fish, table)

        bind chicken: item where:
            is_food_chicken(chicken)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        put_on_table(milk, table)
        put_on_table(turkey, table)
        put_on_table(eggs, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_curtain_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_food,curtain_instance)
        else:
            exp(food_food,curtain_instance)
    eff:
        unknown[food_food]=False
        close[food_food,curtain_instance]=True
        close[curtain_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_orange_2103_around_bowl_2141(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_orange,bowl_instance)
        else:
            exp(food_orange,bowl_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,bowl_instance]=True
        close[bowl_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_table_for_items(dining_table:item):
    symbol has_items=exists o: item : ((is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and on(o, dining_table))
    return has_items

behavior put_on_table(o:item, dining_table:item):
    body:
        achieve_once on(o, dining_table)

behavior __goal__():
    body:
        if exists dining_table: item : (is_table(dining_table) and find_dining_table_for_items(dining_table)):
            bind dining_table: item where:
                is_table(dining_table) and find_dining_table_for_items(dining_table)
            
            # Place milk, turkey, eggs, fish, and chicken on the dining table
            bind milk: item where:
                is_milk(milk)
            put_on_table(milk, dining_table)
            
            bind turkey: item where:
                is_food_turkey(turkey)
            put_on_table(turkey, dining_table)
            
            bind egg: item where:
                is_food_egg(egg)
            put_on_table(egg, dining_table)

            bind fish: item where:
                is_food_fish(fish)
            put_on_table(fish, dining_table)

            bind chicken: item where:
                is_food_chicken(chicken)
            put_on_table(chicken, dining_table)
        
        else:
            foreach dining_table: item:
                if is_table(dining_table) and not visited(dining_table):
                    observe(dining_table, "Check if the table is suitable for placing items like milk, turkey, eggs, fish, and chicken")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_bed_197(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(food_food,bed_instance)
        else:
            exp(food_food,bed_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bed_instance]=True
        close[bed_instance,food_food]=True
    

behavior find_ice_2024_around_sink_120(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(ice,sink_instance)
        else:
            exp(ice,sink_instance)
    eff:
        unknown[ice]=False
        close[ice,sink_instance]=True
        close[sink_instance,ice]=True
    

#exp_behavior_end

#goal_representation
behavior observe_milk(milk:item):
    body:
        observe(milk, "Locate and pick up the milk")
        # Locate and observe milk

behavior place_items_on_table(items:list, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
            # Place each item on the table

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
            # Select fish with ID 2093

        bind turkey: item where:
            is_food_turkey(turkey) and id[turkey]==2112
            # Select turkey with ID 2112

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
            # Select egg with ID 2092

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2089
            # Select chicken with ID 2089

        observe_milk(milk) # Observe milk
        
        symbol items_to_place = [milk, turkey, egg, fish, chicken]
        
        place_items_on_table(items_to_place, dining_table) # Place all items on the table
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5532, column 28.
Expected one of: 
	* COLON
	* LSQB
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
behavior observe_milk(milk:item):
    body:
        observe(milk, "Locate and pick up the milk")
        # Locate and observe milk

behavior place_items_on_table(items:list, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
            # Place each item on the table

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
            # Select fish with ID 2093

        bind turkey: item where:
            is_food_turkey(turkey) and id[turkey]==2112
            # Select turkey with ID 2112

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
            # Select egg with ID 2092

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2089
            # Select chicken with ID 2089

        observe_milk(milk) # Observe milk
        
        symbol items_to_place = [milk, turkey, egg, fish, chicken]
        
        place_items_on_table(items_to_place, dining_table) # Place all items on the table
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5514, column 28.
Expected one of: 
	* COLON
	* LSQB
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
 
behavior observe_milk(milk:item):
    body:
        observe(milk, "Locate and pick up the milk")
        # Locate and observe milk

behavior place_items_on_table(items:list, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
            # Place each item on the table

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
            # Select fish with ID 2093

        bind turkey: item where:
            is_food_turkey(turkey) and id[turkey]==2112
            # Select turkey with ID 2112

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
            # Select egg with ID 2092

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2089
            # Select chicken with ID 2089

        observe_milk(milk) # Observe milk
        
        symbol items_to_place = [milk, turkey, egg, fish, chicken]
        
        place_items_on_table(items_to_place, dining_table) # Place all items on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select one of the tables in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk item
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg item
        
        bind fish: item where:
            is_food_fish(fish)
        # Select fish item
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item

        foreach o: item:
            if o == milk or o == turkey or o == egg or o == fish or o == chicken:
                put_on_table(o, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the items to be placed on the table

        put_on_table(milk, table)
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tea_bag_2023_around_bowl_2141(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(tea_bag,bowl_instance)
        else:
            exp(tea_bag,bowl_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,bowl_instance]=True
        close[bowl_instance,tea_bag]=True
    

behavior find_clothes_skirt_2160_around_basket_for_clothes_2078(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table) # Assume there is a table in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(eggs, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol is_in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return is_in_dining_room

def has_food_fish_on_table(table:item):
    # Function to check if the fish is on a specified table
    symbol has_fish=exists fish: item : (is_food_fish(fish) and on(fish, table))
    return has_fish

behavior put_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table) # Place the food item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room_table(table)
        # Select a table in the dining room
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        if exists fish: item : (is_food_fish(fish) and not has_food_fish_on_table(table)):
            # If fish is not on the table, observe to locate fish
            observe(fish, "Locate fish")
        
        put_food_on_table(milk, table)
        put_food_on_table(turkey, table)
        put_food_on_table(eggs, table)
        put_food_on_table(fish, table)
        put_food_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fish; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
 
def is_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol is_in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return is_in_dining_room

def has_food_fish_on_table(table:item):
    # Function to check if the fish is on a specified table
    symbol has_fish=exists fish: item : (is_food_fish(fish) and on(fish, table))
    return has_fish

behavior put_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table) # Place the food item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room_table(table)
        # Select a table in the dining room
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        if not has_food_fish_on_table(table):
            # If fish is not on the table, observe to locate fish
            observe(fish, "Locate fish")
        
        put_food_on_table(milk, table)
        put_food_on_table(turkey, table)
        put_food_on_table(eggs, table)
        put_food_on_table(fish, table)
        put_food_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_onion_2009_around_sink_120(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_diary_2008_around_filing_cabinet_200(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(diary,filing_cabinet_instance)
        else:
            exp(diary,filing_cabinet_instance)
    eff:
        unknown[diary]=False
        close[diary,filing_cabinet_instance]=True
        close[filing_cabinet_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind table_dining: item where:
            is_table(table_dining) and is_dining_room(table_dining) and surfaces(table_dining)
        # Select one of the tables located in the dining room with a surface
        
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        place_food_on_table(milk, table_dining)
        place_food_on_table(turkey, table_dining)
        place_food_on_table(egg, table_dining)
        place_food_on_table(fish, table_dining)
        place_food_on_table(chicken, table_dining)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_pencil_2020_around_desk_272(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_knife_2122_around_knife_2122(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2122
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

def locate_and_pickup(item:item):
    observe(item, "Locate and pick up the item")

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)

        locate_and_pickup(milk)
        put_on_table(milk, table)

        locate_and_pickup(turkey)
        put_on_table(turkey, table)

        locate_and_pickup(egg)
        put_on_table(egg, table)

        locate_and_pickup(fish)
        put_on_table(fish, table)

        locate_and_pickup(chicken)
        put_on_table(chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_tea_bag_2023_around_bowl_2141(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(tea_bag,bowl_instance)
        else:
            exp(tea_bag,bowl_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,bowl_instance]=True
        close[bowl_instance,tea_bag]=True
    

behavior find_mouse_280_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#goal_representation
 
behavior put_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)

        locate_and_pickup(milk)
        put_on_table(milk, table)

        locate_and_pickup(turkey)
        put_on_table(turkey, table)

        locate_and_pickup(egg)
        put_on_table(egg, table)

        locate_and_pickup(fish)
        put_on_table(fish, table)

        locate_and_pickup(chicken)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function locate_and_pickup not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_food_2046_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

#goal_representation
behavior pickup(item: item):
    body:
        achieve_once inhand(item) # Ensure the item is temporarily held

behavior put_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)

        pickup(milk)
        put_on_table(milk, table)

        pickup(turkey)
        put_on_table(turkey, table)

        pickup(egg)
        put_on_table(egg, table)

        pickup(fish)
        put_on_table(fish, table)

        pickup(chicken)
        put_on_table(chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind dining_room_table: item where:
            is_table(dining_room_table) and is_dining_room(dining_room_table)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        achieve_once on(milk, dining_room_table)
        achieve_once on(turkey, dining_room_table)
        achieve_once on(egg, dining_room_table)
        achieve_once on(fish, dining_room_table)
        achieve_once on(chicken, dining_room_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def milk_located_and_unplaced():
    # Function to check if the milk is observed but not yet placed on the table
    symbol located_and_unplaced= exists m: item : (is_milk(m) and visited(m) and not (inside(m, table_114)))
    return located_and_unplaced

behavior place_items_on_table(dining_table:item):
    body:
        # Place the turkey, eggs, washed fish, and chicken on the table
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, table_114)
        # Select the turkey
        achieve on(turkey, dining_table)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, table_114)
        # Select the egg
        achieve on(egg, dining_table)

        bind fish: item where:
            is_food_fish(fish) and on(fish, table_114)
        # Select the fish
        achieve on(fish, dining_table)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, table_114)
        # Select the chicken
        achieve on(chicken, dining_table)

behavior move_milk_to_table(milk:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Find a table in the dining room

        place_items_on_table(dining_table)
        # Place turkey, eggs, washed fish, and chicken on the dining table

        if not milk_located_and_unplaced():
            foreach m: item:
                if is_milk(m) and not visited(m):
                    observe(m, "Locate and pick up the milk")
                    # Locate milk and determine if it needs to be moved
        
        if milk_located_and_unplaced():
            bind milk: item where:
                is_milk(milk) and visited(milk)
            # Move the located milk to the table
            move_milk_to_table(milk, dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table_114; available variables: [Variable<m: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2073_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
 
def milk_located_and_unplaced():
    # Function to check if the milk is observed but not yet placed on the table
    symbol located_and_unplaced= exists m: item : (is_milk(m) and visited(m) and not (inside(m, table)))
    return located_and_unplaced

behavior place_items_on_table(dining_table:item):
    body:
        # Place the turkey, eggs, washed fish, and chicken on the table
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, table)
        # Select the turkey
        achieve on(turkey, dining_table)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, table)
        # Select the egg
        achieve on(egg, dining_table)

        bind fish: item where:
            is_food_fish(fish) and on(fish, table)
        # Select the fish
        achieve on(fish, dining_table)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, table)
        # Select the chicken
        achieve on(chicken, dining_table)

behavior move_milk_to_table(milk:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Find a table in the dining room

        bind table: item where:
            is_table(table)
        # Select a general table in the environment

        place_items_on_table(dining_table)
        # Place turkey, eggs, washed fish, and chicken on the dining table

        if not milk_located_and_unplaced():
            foreach m: item:
                if is_milk(m) and not visited(m):
                    observe(m, "Locate and pick up the milk")
                    # Locate milk and determine if it needs to be moved
        
        if milk_located_and_unplaced():
            bind milk: item where:
                is_milk(milk) and visited(milk)
            # Move the located milk to the table
            move_milk_to_table(milk, dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table; available variables: [Variable<m: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tea_bag_2023_around_box_2038(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(tea_bag,box_instance)
        else:
            exp(tea_bag,box_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,box_instance]=True
        close[box_instance,tea_bag]=True
    

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
 
def milk_located_and_unplaced():
    # Function to check if the milk is observed but not yet placed on the table
    symbol located_and_unplaced= exists m: item : (is_milk(m) and visited(m) and not (inside(m, table)))
    return located_and_unplaced

behavior place_items_on_table(turkey:item, egg:item, fish:item, chicken:item, dining_table:item):
    body:
        # Place the turkey, eggs, washed fish, and chicken on the table
        achieve on(turkey, dining_table)

        # Select the egg
        achieve on(egg, dining_table)

        # Select the fish
        achieve on(fish, dining_table)

        # Select the chicken
        achieve on(chicken, dining_table)

behavior move_milk_to_table(milk:item, dining_table:item):
    body:
        achieve_once on(milk, dining_table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Find a table in the dining room

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, table)

        bind egg: item where:
            is_food_egg(egg) and inside(egg, table)

        bind fish: item where:
            is_food_fish(fish) and on(fish, table)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, table)

        place_items_on_table(turkey, egg, fish, chicken, dining_table)
        # Place turkey, eggs, washed fish, and chicken on the dining table

        if not milk_located_and_unplaced():
            foreach m: item:
                if is_milk(m) and not visited(m):
                    observe(m, "Locate and pick up the milk")
                    # Locate milk and determine if it needs to be moved
        
        if milk_located_and_unplaced():
            bind milk: item where:
                is_milk(milk) and visited(milk)
            # Move the located milk to the table
            move_milk_to_table(milk, dining_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room." ?
Answer: Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        foreach o: item:
        # Place all items on the table
            if o == milk or o == turkey or o == egg or o == fish or o == chicken:
                achieve_once on(o, table)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shampoo_2019_around_shower_16(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(shampoo,shower_instance)
        else:
            exp(shampoo,shower_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,shower_instance]=True
        close[shower_instance,shampoo]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(eggs, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(eggs, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2046_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_food_bread_2084(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_butter,food_bread_instance)
        else:
            exp(food_butter,food_bread_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,food_bread_instance]=True
        close[food_bread_instance,food_butter]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(eggs, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_items_on_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#goal_representation
 
behavior put_item_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        put_item_table(milk, table)
        put_item_table(turkey, table)
        put_item_table(eggs, table)
        put_item_table(fish, table)
        put_item_table(chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

behavior find_wooden_spoon_2000_around_cutting_board_2123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(wooden_spoon,cutting_board_instance)
        else:
            exp(wooden_spoon,cutting_board_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cutting_board_instance]=True
        close[cutting_board_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(eggs, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_food_salt_2041(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_food,food_salt_instance)
        else:
            exp(food_food,food_salt_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_salt_instance]=True
        close[food_salt_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior place_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)
        foreach food: item:
            if (is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                place_on_table(food, table)
        
        place_on_table(milk, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2001_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind dining_table: item where:
            is_table(dining_table)
        # Select a table in the dining room
        
        place_items_on_table(milk, turkey, eggs, fish, chicken, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation

behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior find_and_place_items(table:item):
    body:
        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not on(food, table):
                place_food_on_table(food, table)

behavior locate_and_pick_milk(milk:item):
    body:
        observe(milk, "Locate and pick up the milk")

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        bind milk: item where:
            is_milk(milk)
        find_and_place_items(table)
        locate_and_pick_milk(milk)


#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior find_and_place_items(table:item):
    body:
        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not on(food, table):
                place_food_on_table(food, table)

behavior locate_and_pick_milk(milk:item):
    body:
        observe(milk, "Locate and pick up the milk")

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        bind milk: item where:
            is_milk(milk)
        find_and_place_items(table)
        locate_and_pick_milk(milk)


##############################
From agent.py-> find a plan in act()
obs(milk_2115, Locate and pick up the milk)
##############################
From agent.py
obs(milk_2115, Locate and pick up the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The milk needs to be picked up and placed on the table in the dining room.
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_119)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(table_114)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)', 'walk_executor(milk_2115)']
Time info:
Time consume: 798 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 0
goal generate times: 28
goal correct times: 8
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
