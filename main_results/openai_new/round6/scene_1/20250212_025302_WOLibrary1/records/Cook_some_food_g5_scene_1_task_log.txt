From agent.py
Reset goals: The sub-goals are: 
['1. Peel the bananas.', '2. Heat oil in a pan.', '3. Fry the bananas in the heated oil until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_kitchen_counter_122(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation

behavior observe_and_peel(banana:item):
    body:
        observe(banana, "Check if the banana is visited and peelable")
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        observe_and_peel(banana)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_kitchen_counter_122(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        achieve_once cut(banana) # Peeling involves preparing the banana, akin to cutting it

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        peel_banana(banana)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        achieve_once cut(banana) # Peeling involves preparing the banana, akin to cutting it

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        peel_banana(banana)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_banana_2083, kitchen_counter_122)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_banana_2083, kitchen_counter_122)
Fail to find food_banana_2083 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_banana_2083, cupboard_118)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_banana_2083, cupboard_118)
Fail to find food_banana_2083 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        heat_oil_in_pan(oil, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
        heat_oil_in_pan(oil, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(oil_2149, oven_127)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the knife_2037. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the knife_2037. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(oil_2149, oven_127)
Fail to find oil_2149 around oven_127. 
##############################
From agent.py-> find a plan in act()
grab_executor(oil_2013)walk_executor(fryingpan_2154)putin_executor(oil_2013, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(oil_2013)
Robot find: Robot is close to the knife_2037. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. Grabbing oil_2013 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2013, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2013 is inside fryingpan_2154. fryingpan_2154 is close oil_2013. oil_2013 is close fryingpan_2154. oil_2013 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_curtain_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(oil,curtain_instance)
        else:
            exp(oil,curtain_instance)
    eff:
        unknown[oil]=False
        close[oil,curtain_instance]=True
        close[curtain_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(banana:item, oil:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        # Place the bananas in the frying pan with oil
        
def is_golden_brown(banana:item):
    # Function to check if the fried bananas are golden brown
    symbol is_ready = exists o: item : (is_food_banana(o) and cut(o)) # Example check, further check might be done based on context
    return is_ready

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the banana that is cut
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil to be used

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_bananas(banana, oil, fryingpan)
        # Fry the bananas in the oil in a frying pan

        while not is_golden_brown(banana):
            observe(banana, "Check if the fried bananas are golden brown")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_walllamp_305(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==305
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(milk,walllamp_instance)
        else:
            exp(milk,walllamp_instance)
    eff:
        unknown[milk]=False
        close[milk,walllamp_instance]=True
        close[walllamp_instance,milk]=True
    

behavior find_oil_2013_around_curtain_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(oil,curtain_instance)
        else:
            exp(oil,curtain_instance)
    eff:
        unknown[oil]=False
        close[oil,curtain_instance]=True
        close[curtain_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Put the bananas into the frying pan
        achieve is_on(stove)
        # Ensure the stove remains on to fry the bananas
        achieve_once inside(oil, fryingpan)
        # Ensure oil remains inside the frying pan
        achieve_once golden(bananas)
        # Fry the bananas until they are golden brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select cut bananas
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(oil, fryingpan)
        # Select the frying pan with oil inside

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on
        
        fry_bananas(bananas, fryingpan, stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil; available variables: [Variable<bananas: item>, Variable<fryingpan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_dishwasher_129(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Put the bananas into the frying pan
        achieve is_on(stove)
        # Ensure the stove remains on to fry the bananas
        achieve_once inside(oil, fryingpan)
        # Ensure oil remains inside the frying pan
        achieve_once golden(bananas)
        # Fry the bananas until they are golden brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select cut bananas
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(oil, fryingpan)
        # Select the frying pan with oil inside

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil
        
        fry_bananas(bananas, fryingpan, stove, oil)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#goal_representation
behavior fry_bananas(bananas:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Put the bananas into the frying pan
        achieve is_on(stove)
        # Ensure the stove remains on to fry the bananas
        achieve_once inside(oil, fryingpan)
        # Ensure oil remains inside the frying pan
        # Use inside to imply cooking status, instead of golden
        achieve inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select cut bananas
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(oil, fryingpan)
        # Select the frying pan with oil inside

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil
        
        fry_bananas(bananas, fryingpan, stove, oil)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_curtain_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(oil,curtain_instance)
        else:
            exp(oil,curtain_instance)
    eff:
        unknown[oil]=False
        close[oil,curtain_instance]=True
        close[curtain_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(fryingpan:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

        foreach piece: item:
            if is_food_banana(piece) and cut(piece):
                achieve inside(piece, fryingpan)
                # Place each cut banana piece into the frying pan

        achieve inside(oil, fryingpan)
        # Ensure the frying pan has oil inside

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        fry_bananas(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#goal_representation
 
behavior fry_bananas(fryingpan:item, stove:item, oil:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

        achieve inside(oil, fryingpan)
        # Ensure the frying pan has oil inside

        foreach piece: item:
            if is_food_banana(piece) and cut(piece):
                achieve inside(piece, fryingpan)
                # Place each cut banana piece into the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        fry_bananas(fryingpan, stove, oil)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the bananas in the heated oil until golden brown." ?
Answer: Follow these steps to fry the bananas: Find a frying pan, put it on the stove, and add oil. Put the peeled banana in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the peeled bananas in the preheated frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_toaster_132(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(milk,toaster_instance)
        else:
            exp(milk,toaster_instance)
    eff:
        unknown[milk]=False
        close[milk,toaster_instance]=True
        close[toaster_instance,milk]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once on(banana, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind banana: item where:
            is_food_banana(banana)
        # Ensure the stove is on before placing the banana in the fryingpan
        bind stove: item where:
            is_stove(stove)
        achieve is_on(stove)
        place_banana_in_fryingpan(banana, fryingpan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once on(banana, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind banana: item where:
            is_food_banana(banana)
        # Ensure the stove is on before placing the banana in the fryingpan
        bind stove: item where:
            is_stove(stove)
        achieve is_on(stove)
        place_banana_in_fryingpan(banana, fryingpan)
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 is on fryingpan_2154. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'grab_executor(oil_2013)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2013, fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'put_executor(food_banana_2083, fryingpan_2154)']
Time info:
Time consume: 192 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 1
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
