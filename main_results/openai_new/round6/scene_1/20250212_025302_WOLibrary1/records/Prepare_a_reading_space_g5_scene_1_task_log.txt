From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2153_around_computer_209(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(spectacles,computer_instance)
        else:
            exp(spectacles,computer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,computer_instance]=True
        close[computer_instance,spectacles]=True
    

behavior find_chair_194_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table)
        # Select the coffee table
        
        place_spectacles_on_table(spectacles, coffee_table)
        # Place the spectacles on the coffee table

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table)
        # Select the coffee table
        
        place_spectacles_on_table(spectacles, coffee_table)
        # Place the spectacles on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(computer_209)exp(spectacles_2153, computer_209)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(computer_209)
Robot find: chair_194, keyboard_211, mouse_213, Robot is close to the computer_209. 
##############################
From agent.py
exp(spectacles_2153, computer_209)
Fail to find spectacles_2153 around computer_209. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_211)exp(spectacles_2153, keyboard_211)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(keyboard_211)
Robot find: check_2026, laser_pointer_2034, drawing_201, Robot is close to the desk_193. Robot is close to the keyboard_211. 
##############################
From agent.py
exp(spectacles_2153, keyboard_211)
Fail to find spectacles_2153 around keyboard_211. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_276)exp(spectacles_2153, computer_276)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(computer_276)
Robot find: mat_284, chair_271, keyboard_278, mouse_280, Robot is close to the computer_276. 
##############################
From agent.py
exp(spectacles_2153, computer_276)
Fail to find spectacles_2153 around computer_276. 
##############################
From agent.py-> find a plan in act()
walk_executor(mousepad_214)exp(spectacles_2153, mousepad_214)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(mousepad_214)
Robot find: Robot is close to the desk_193. Robot is close to the mousepad_214. 
##############################
From agent.py
exp(spectacles_2153, mousepad_214)
Fail to find spectacles_2153 around mousepad_214. 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_213)exp(spectacles_2153, mouse_213)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(mouse_213)
Robot find: Robot is close to the desk_193. Robot is close to the mousepad_214. Robot is close to the mouse_213. 
##############################
From agent.py
exp(spectacles_2153, mouse_213)
Fail to find spectacles_2153 around mouse_213. 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_280)exp(spectacles_2153, mouse_280)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(mouse_280)
Robot find: stamp_2022, phone_2147, headset_2146, stamp_2043, Robot is close to the mouse_280. Robot is close to the desk_272. Robot is close to the mousepad_279. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2153 ?
Answer: The spectacles_2153 are located on the kitchen_counter_122 inside dining_room_41. Look for the kitchen counter in the dining room, and you will find the spectacles resting on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2153 are located on the kitchen_counter_122 inside dining_room_41. Look for the kitchen counter in the dining room, and you will find the spectacles resting on top of it.

The actions you have taken:
Action 1: Walk to computer_209.
Action 2: look for spectacles_2153 around computer_209.
Action 3: Walk to keyboard_211.
Action 4: look for spectacles_2153 around keyboard_211.
Action 5: Walk to computer_276.
Action 6: look for spectacles_2153 around computer_276.
Action 7: Walk to mousepad_214.
Action 8: look for spectacles_2153 around mousepad_214.
Action 9: Walk to mouse_213.
Action 10: look for spectacles_2153 around mouse_213.
Action 11: Walk to mouse_280.

##############################
From agent.py
exp(spectacles_2153, mouse_280)
Fail to find spectacles_2153 around mouse_280. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(spectacles_2153, kitchen_counter_122)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(spectacles_2153, kitchen_counter_122)
Find spectacles_2153. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_114)put_executor(spectacles_2153, table_114)
##############################
From agent.py
walk_executor(spectacles_2153)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the spectacles_2153. 
##############################
From agent.py
grab_executor(spectacles_2153)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the spectacles_2153. Grabbing spectacles_2153 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the spectacles_2153. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(spectacles_2153, table_114)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_114. Robot is close to the mat_102. spectacles_2153 is close table_114. spectacles_2153 is on table_114. table_114 is close spectacles_2153. spectacles_2153 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the spectacles on the coffee table in the home office, not on table_114.
##############################
From agent.py
Human Instruction: You need to put the spectacles on the coffee table in the home office, not on table_114.

The actions you have taken:
Action 1: Walk to computer_209.
Action 2: look for spectacles_2153 around computer_209.
Action 3: Walk to keyboard_211.
Action 4: look for spectacles_2153 around keyboard_211.
Action 5: Walk to computer_276.
Action 6: look for spectacles_2153 around computer_276.
Action 7: Walk to mousepad_214.
Action 8: look for spectacles_2153 around mousepad_214.
Action 9: Walk to mouse_213.
Action 10: look for spectacles_2153 around mouse_213.
Action 11: Walk to mouse_280.
Action 12: look for spectacles_2153 around mouse_280.
Action 13: Walk to kitchen_counter_122.
Action 14: look for spectacles_2153 around kitchen_counter_122.
Action 15: Walk to spectacles_2153.
Action 16: Grab spectacles_2153.
Action 17: Walk to table_114.
Action 18: Put spectacles_2153 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2153
        # Select the spectacles with ID 2153
        
        bind table: item where:
            is_table(table) and id[table]=114 and inside(table, home_office)
        # Select a table that is not table_114 and is inside the home office

        put_spectacles_on_table(spectacles, table) 
        # Put the spectacles on the correct table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5419, column 42.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2153
        # Select the spectacles with ID 2153
        
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office) and id[table]=114
        # Select a table that is inside the home office and is not table_114

        put_spectacles_on_table(spectacles, table) 
        # Put the spectacles on the correct table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5400, column 93.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_194_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
 
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2153
        # Select the spectacles with ID 2153
        
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office) and id[table]=114
        # Select a table that is inside the home office and is not table_114

        put_spectacles_on_table(spectacles, table) 
        # Put the spectacles on the correct table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2017_around_home_office_241(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior correct_action_for_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)
        # Ensure the spectacles are correctly placed on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Assumed coffee_table is within the list of available categories adjust accordingly
        
        if not on(spectacles, coffee_table):
            correct_action_for_spectacles(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_271_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
behavior correct_action_for_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)
        # Ensure the spectacles are correctly placed on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        
        if not on(spectacles, coffee_table):
            correct_action_for_spectacles(spectacles, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior correct_action_for_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)
        # Ensure the spectacles are correctly placed on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)

        if not on(spectacles, coffee_table):
            correct_action_for_spectacles(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_homework_2047_around_home_office_241(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(homework,home_office_instance)
        else:
            exp(homework,home_office_instance)
    eff:
        unknown[homework]=False
        close[homework,home_office_instance]=True
        close[home_office_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
def has_spectacles_at_location(location:item):
    # Function to check if spectacles are at a specific location
    symbol has_spectacles=exists s: item : (is_spectacles(s) and close(s, location))
    return has_spectacles

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior correct_spectacles_placement(spectacles:item, location:item, coffee_table:item):
    body:
        if not has_spectacles_at_location(location):
            # Ensure spectacles are not mistakenly placed elsewhere
            place_spectacles_on_coffee_table(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with surfaces property

        bind incorrect_location: item where:
            id[incorrect_location] == 114
        # Identify the incorrect table by ID

        correct_spectacles_placement(spectacles, incorrect_location, coffee_table)
        # Ensure spectacles are correctly placed on the coffee table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find your spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2153
        # Select spectacles with the given ID
        bind table: item where:
            is_table(table) and surfaces(table) and close_char(char, table)
        # Select the coffee table that can have items placed on it and is close to the character
        move_spectacles_to_coffee_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_chair_271_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 114
        # Select the coffee table in the home office

        put_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5455, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
behavior put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 114
        # Select the correct coffee table in the home office

        put_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5419, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior find_and_place_spectacles(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 114
        # Select the correct coffee table in the home office

        find_and_place_spectacles(spectacles, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_glue_2045_around_cupboard_118(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(glue,cupboard_instance)
        else:
            exp(glue,cupboard_instance)
    eff:
        unknown[glue]=False
        close[glue,cupboard_instance]=True
        close[cupboard_instance,glue]=True
    

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the specified table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Bind the spectacles item

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind the coffee table inside the home office

        place_spectacles_on_table(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the specified table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Bind the spectacles item

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind the coffee table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        place_spectacles_on_table(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_table(spectacles, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
grab_executor(spectacles_2153)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_114. Robot is close to the mat_102. Grabbing spectacles_2153 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the spectacles_2153. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(spectacles_2153, table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the couch_269. Robot is close to the table_270. spectacles_2153 is close table_270. spectacles_2153 is on table_270. table_270 is close spectacles_2153. spectacles_2153 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the spectacles on the coffee table in the home office, not on table_270 or any other table.
##############################
From agent.py
Human Instruction: You need to put the spectacles on the coffee table in the home office, not on table_270 or any other table.

Human Guidance: Find the spectacles and put them on the coffee table in the home office.
The actions you have taken:
Action 1: Walk to computer_209.
Action 2: look for spectacles_2153 around computer_209.
Action 3: Walk to keyboard_211.
Action 4: look for spectacles_2153 around keyboard_211.
Action 5: Walk to computer_276.
Action 6: look for spectacles_2153 around computer_276.
Action 7: Walk to mousepad_214.
Action 8: look for spectacles_2153 around mousepad_214.
Action 9: Walk to mouse_213.
Action 10: look for spectacles_2153 around mouse_213.
Action 11: Walk to mouse_280.
Action 12: look for spectacles_2153 around mouse_280.
Action 13: Walk to kitchen_counter_122.
Action 14: look for spectacles_2153 around kitchen_counter_122.
Action 15: Walk to spectacles_2153.
Action 16: Grab spectacles_2153.
Action 17: Walk to table_114.
Action 18: Put spectacles_2153 on table_114.
Action 19: Grab spectacles_2153.
Action 20: Walk to table_270.
Action 21: Put spectacles_2153 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_home_office(table: item):
    # Function to check if a table is the coffee table in the home office
    symbol is_coffee_table=exists room: item : (is_home_office(room) and inside(table, room) and is_table(table))
    return is_coffee_table

def has_spectacles_on_table(table: item):
    # Function to check if spectacles are on the specified table
    symbol spectacles_on_table=exists o: item : (is_spectacles(o) and on(o, table))
    return spectacles_on_table

behavior place_on_coffee_table(item: item, table: item):
    body:
        achieve_once on(item, table) # Place the item on the coffee table

behavior find_and_place_spectacles(table: item):
    body:
        if not has_spectacles_on_table(table):
            # Check all unvisited locations for spectacles if not already on the coffee table
            foreach location: item:
                if is_spectacles(location) and not visited(location):
                    observe(location, "Check if spectacles are at location")
                    if inside(location, table):
                        # If found, place them on the coffee table
                        place_on_coffee_table(location, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_home_office(coffee_table)
        # Select the coffee table in the home office
        
        find_and_place_spectacles(coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_table(item:item):
    # Function to determine if the item is the target coffee table in the home office
    symbol is_coffee_table= exists room: item : (is_home_office(room) and surfaces(item) and inside(item, room))
    return is_coffee_table

behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles to be found

        bind table: item where:
            is_table(table) and is_target_table(table)
        # Select the correct coffee table in the home office

        put_spectacles_on_table(spectacles, table)
        # Place the spectacles on the identified table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2130_around_tvstand_273(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select the coffee table based on instruction that it should not be table_270

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        # Move the spectacles to the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5469, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#goal_representation

behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select the coffee table ensuring it should not be table_270

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        # Move the spectacles to the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5451, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select the coffee table ensuring it should not be table_270

        move_spectacles_to_coffee_table(spectacles, coffee_table)
        # Move the spectacles to the coffee table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find your spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2014_around_pencil_2014(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind pencil_instance:item where:
            is_pencil(pencil_instance) and id[pencil_instance]==2014
        achieve close_char(char,pencil_instance)
        if can_open(pencil_instance):
            achieve_once open(pencil_instance)
            exp(pencil,pencil_instance)
        else:
            exp(pencil,pencil_instance)
    eff:
        unknown[pencil]=False
        close[pencil,pencil_instance]=True
        close[pencil_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Bind the spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Determine the home office space
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Find the coffee table in the home office
        put_spectacles_on_table(spectacles, table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2058_around_check_2058(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind check_instance:item where:
            is_check(check_instance) and id[check_instance]==2058
        achieve close_char(char,check_instance)
        if can_open(check_instance):
            achieve_once open(check_instance)
            exp(check,check_instance)
        else:
            exp(check,check_instance)
    eff:
        unknown[check]=False
        close[check,check_instance]=True
        close[check_instance,check]=True
    

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_coffee_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Execute the behavior to place spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2095_around_fridge_126(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_chair_194_around_chair_194(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==194
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select a coffee table that is not table_270

        put_spectacles_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5487, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior put_spectacles_on_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select a coffee table that is not table_270

        put_spectacles_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5433, column 57.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_spectacles_on_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 270
        # Select a coffee table that is not table_270

        put_spectacles_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(computer_209)', 'walk_executor(keyboard_211)', 'walk_executor(computer_276)', 'walk_executor(mousepad_214)', 'walk_executor(mouse_213)', 'walk_executor(mouse_280)', 'walk_executor(kitchen_counter_122)', 'walk_executor(spectacles_2153)', 'grab_executor(spectacles_2153)', 'walk_executor(table_114)', 'put_executor(spectacles_2153, table_114)', 'grab_executor(spectacles_2153)', 'walk_executor(table_270)', 'put_executor(spectacles_2153, table_270)']
Time info:
Time consume: 479 seconds
Exp_helper query times: 1
Guidance query times: 2
library scale: 0
goal generate times: 13
goal correct times: 6
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
