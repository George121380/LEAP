From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Wash and chop the vegetables.', '3. Mix the boiled eggs, lemon, and vegetables in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2151_around_kitchen_counter_122(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

behavior boil_eggs(pot:item, stove:item):
    body:
        achieve_once has_water(pot) # Ensure pot has water
        if not is_on(stove):
            achieve_once is_on(stove) # Turn on the stove
        achieve_once inside_char(char, pot) # Approach the pot
        achieve_once on(pot, stove) # Place pot on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) # Select a stove
        bind pot: item where:
            is_pot(pot) # Select a pot
        boil_eggs(pot, stove) # Initiate the egg boiling process

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2150_around_kitchen_counter_122(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiled_egg_ready(pot:item):
    # Function to check if there are boiled eggs in a specified pot
    symbol has_boiled_egg = exists o: item : (is_food_egg(o) and inside(o, pot) and has_water(pot))
    return has_boiled_egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot) and close(pot, stove)
        # Select a pot close to the stove

        if not is_boiled_egg_ready(pot):
            achieve plugged(stove)       
            achieve is_on(stove)
            achieve has_water(pot)
            achieve inside(food_egg, pot)
        
        # Ensure the stove is on, the pot has water, and the eggs are inside the pot
        # Boil the eggs, achieving boiled eggs in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
def is_boiled_egg_ready(pot:item):
    # Function to check if there are boiled eggs in a specified pot
    symbol has_boiled_egg = exists o: item : (is_food_egg(o) and inside(o, pot) and has_water(pot))
    return has_boiled_egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot) and close(pot, stove)
        # Select a pot close to the stove

        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select a food item that is an egg

        if not is_boiled_egg_ready(pot):
            achieve plugged(stove)       
            achieve is_on(stove)
            achieve has_water(pot)
            achieve inside(food_egg, pot)
        
        # Ensure the stove is on, the pot has water, and the eggs are inside the pot
        # Boil the eggs, achieving boiled eggs in the pot

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_fork_2151_around_kitchen_counter_122(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

behavior boil_eggs(pot:item, stove:item, eggs:set[item]):
    body:
        achieve_once has_water(pot)
        # Add water to the pot first
        foreach egg: item:
            if egg in eggs and is_food_egg(egg):
                achieve_once inside(egg, pot)
                # Place each egg into the pot
        achieve_once inside(pot, stove)
        # Place the pot onto the stove
        achieve is_on(stove)
        # Turn the stove on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use
        symbol egg_set = []
        foreach egg: item:
            if is_food_egg(egg):
                egg_setappend(egg)
                # Collect all items identified as eggs
        boil_eggs(pot, stove, egg_set)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5229, column 20.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior boil_eggs(pot:item, stove:item, eggs:set[item]):
    body:
        achieve_once has_water(pot)
        # Add water to the pot first
        foreach egg: item:
            if egg in eggs and is_food_egg(egg):
                achieve_once inside(egg, pot)
                # Place each egg into the pot
        achieve_once on(pot, stove)
        # Place the pot onto the stove
        achieve is_on(stove)
        # Turn the stove on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use
        symbol egg_set = []
        foreach egg: item:
            if is_food_egg(egg):
                egg_setappend(egg)
                # Collect all items identified as eggs
        boil_eggs(pot, stove, egg_set)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5229, column 20.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2150_around_kitchen_counter_122(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation

behavior boil_eggs(pot:item, stove:item, eggs:set[item]):
    body:
        achieve_once has_water(pot)
        # Add water to the pot first
        foreach egg: item:
            if egg in eggs and is_food_egg(egg):
                achieve_once inside(egg, pot)
                # Place each egg into the pot
        achieve_once on(pot, stove)
        # Place the pot onto the stove
        achieve is_on(stove)
        # Turn the stove on to boil the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use
        symbol egg_set = []
        foreach egg: item:
            if is_food_egg(egg):
                egg_setappend(egg)
                # Collect all items identified as eggs
        boil_eggs(pot, stove, egg_set)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the eggs." ?
Answer: Find a pot and fill it with water. Put the pot on a stove and turn on the stove. Put the egg in the pot. After boiling, place the egg on a cutting board.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_fork_2151_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior bring_water_to_boil(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior remove_egg_from_pot(egg:item, pot:item, cutting_board:item):
    body:
        achieve cut(egg)
        achieve_once on(egg, cutting_board)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bring_water_to_boil(pot, stove)
        
        bind egg: item where:
            is_food_egg(egg)
        add_egg_to_pot(egg, pot)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        remove_egg_from_pot(egg, pot, cutting_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(pot:item, stove:item, egg:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(egg, pot) # Place the egg inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior transfer_egg(cutting_board:item, egg:item):
    body:
        achieve_once on(egg, cutting_board) # Move the boiled egg to the cutting board

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_eggs(pot, stove, egg) # Perform egg boiling
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        transfer_egg(cutting_board, egg) # Transfer egg to cutting board

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_egg_2092. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_bowl_2141(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vegetables(vegetable:item, cutting_board:item, knife:item):
    body:
        achieve_once on(vegetable, cutting_board)
        # Place the vegetable on the cutting board for preparation
        wash(vegetable)
        # Wash the vegetable before chopping
        achieve_once cut(vegetable)
        # Chop the vegetable with the knife
        
behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board for chopping vegetables
        
        bind knife: item where:
            is_knife(knife)
        # Choose the knife to chop vegetables

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not dirty(vegetable):
                # Handle all vegetables that are clean and ready to be prepared
                prepare_vegetables(vegetable, cutting_board, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables():
    # Function to check if there are vegetables available
    symbol has_vegetables= exists o: item : (is_food_vegetable(o))
    return has_vegetables

behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable

behavior chop_vegetables(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board
        achieve cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        if has_vegetables():
            # Check if there are vegetables available
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Bind a cutting board to work on
            
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and not cut(vegetable):
                    wash_vegetables(vegetable)
                    chop_vegetables(vegetable, cutting_board)
                    # Wash and chop each vegetable

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables():
    # Function to check if there are vegetables available
    symbol has_vegetables= exists o: item : (is_food_vegetable(o))
    return has_vegetables

behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable

behavior chop_vegetables(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board
        achieve cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        if has_vegetables():
            # Check if there are vegetables available
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Bind a cutting board to work on
            
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and not cut(vegetable):
                    wash_vegetables(vegetable)
                    chop_vegetables(vegetable, cutting_board)
                    # Wash and chop each vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)put_executor(food_vegetable_2113, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, cutting_board_2123)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_vegetable_2113. food_vegetable_2113 is close cutting_board_2123. food_vegetable_2113 is on cutting_board_2123. food_vegetable_2113 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_bowl_2141(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_cup_2132_around_bowl_2141(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior mix_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        achieve_once inside(egg, bowl) # Place the boiled eggs into the bowl
        achieve_once inside(lemon, bowl) # Add lemon into the bowl
        achieve_once inside(vegetables, bowl) # Add vegetables into the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the chopped vegetables
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl for mixing ingredients
        mix_ingredients(egg, lemon, vegetables, bowl)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_orange_2061_around_bowl_2141(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_orange,bowl_instance)
        else:
            exp(food_orange,bowl_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,bowl_instance]=True
        close[bowl_instance,food_orange]=True
    

behavior find_food_onion_2104_around_bowl_2141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_salad(bowl:item, egg:item, lemon:item, vegetable:item):
    body:
        achieve_once inside(egg, bowl)
        # Place the boiled egg in the bowl
        achieve_once inside(lemon, bowl)
        # Place the lemon in the bowl
        achieve_once inside(vegetable, bowl)
        # Place the chopped vegetables in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select a boiled, cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select a cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables

        mix_salad(bowl, boiled_egg, lemon, vegetables)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_bowl_2141(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_food_orange_2027_around_bowl_2141(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_orange,bowl_instance)
        else:
            exp(food_orange,bowl_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,bowl_instance]=True
        close[bowl_instance,food_orange]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_salad(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Place the boiled egg in the bowl
        achieve_once inside(lemon, bowl)
        # Place the lemon in the bowl
        achieve_once inside(vegetable, bowl)
        # Place the chopped vegetables in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the chopped vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_salad(egg, lemon, vegetable, bowl)
        # Mix the ingredients in the bowl to make the salad

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_salad(egg:item, lemon:item, vegetable:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Place the boiled egg in the bowl
        achieve_once inside(lemon, bowl)
        # Place the lemon in the bowl
        achieve_once inside(vegetable, bowl)
        # Place the chopped vegetables in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the chopped vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_salad(egg, lemon, vegetable, bowl)
        # Mix the ingredients in the bowl to make the salad

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2141)putin_executor(food_egg_2092, bowl_2141)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(bowl_2141)putin_executor(food_lemon_2100, bowl_2141)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_egg_2092, bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_egg_2092 is inside bowl_2141. bowl_2141 is close food_egg_2092. food_egg_2092 is close bowl_2141. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. Grabbing food_lemon_2100 by left hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_lemon_2100, bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_lemon_2100 is inside bowl_2141. food_lemon_2100 is close bowl_2141. bowl_2141 is close food_lemon_2100. food_lemon_2100 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_vegetable_2113, bowl_2141)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_vegetable_2113 is inside bowl_2141. food_vegetable_2113 is close bowl_2141. bowl_2141 is close food_vegetable_2113. food_vegetable_2113 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(cutting_board_2123)', 'put_executor(food_vegetable_2113, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_vegetable_2113)', 'cut_executor(food_vegetable_2113)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(bowl_2141)', 'putin_executor(food_egg_2092, bowl_2141)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100)', 'walk_executor(bowl_2141)', 'putin_executor(food_lemon_2100, bowl_2141)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(bowl_2141)', 'putin_executor(food_vegetable_2113, bowl_2141)']
Time info:
Time consume: 593 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 10
goal correct times: 2
action_num: 43

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
