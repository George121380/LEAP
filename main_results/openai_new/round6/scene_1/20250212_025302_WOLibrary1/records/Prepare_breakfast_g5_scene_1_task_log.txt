From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk.', '2. Pour the cereal into the hot milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk_container: item, stove: item):
    body:
        achieve_once inside(milk_container, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind milk_container: item where:
            is_milk(milk_container) and containers(milk_container)
        # Select the milk container
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        heat_milk(milk_container, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, oven:item):
    body:
        achieve_once inside(milk, oven) # Place the milk inside the oven
        achieve_once is_on(oven) # Turn on the oven to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) # Select a milk item
        
        bind oven: item where:
            is_oven(oven) # Select an oven to heat the milk
        
        heat_milk(milk, oven) # Execute the behavior to heat the milk in the oven

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior heat_milk(milk:item, oven:item):
    body:
        achieve_once inside(milk, oven) # Place the milk inside the oven
        achieve_once is_on(oven) # Turn on the oven to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) # Select a milk item
        
        bind oven: item where:
            is_oven(oven) # Select an oven to heat the milk
        
        heat_milk(milk, oven) # Execute the behavior to heat the milk in the oven

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(milk_2115, cupboard_118)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(milk_2115, cupboard_118)
Fail to find milk_2115 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_212)exp(milk_2115, light_212)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(light_212)
Robot find: drawing_202, Robot is close to the light_212. 
##############################
From agent.py
exp(milk_2115, light_212)
Fail to find milk_2115 around light_212. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_238)exp(milk_2115, tablelamp_238)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(tablelamp_238)
Robot find: pillow_208, drawing_201, Robot is close to the nightstand_192. Robot is close to the tablelamp_238. 
##############################
From agent.py
exp(milk_2115, tablelamp_238)
Fail to find milk_2115 around tablelamp_238. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Go to dining_room_41 and locate table_114. You will find milk_2115 placed on table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41 and locate table_114. You will find milk_2115 placed on table_114.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for milk_2115 around cupboard_118.
Action 8: Walk to light_212.
Action 9: look for milk_2115 around light_212.
Action 10: Walk to kitchen_counter_122.
Action 11: look for milk_2115 around kitchen_counter_122.
Action 12: Walk to tablelamp_238.
Action 13: look for milk_2115 around tablelamp_238.
Action 14: Walk to cupboard_117.

##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(oven_127)putin_executor(milk_2115, oven_127)close_executor(oven_127)switchon_executor(oven_127)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the milk_2115. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. 
##############################
From agent.py
putin_executor(milk_2115, oven_127)
Robot find: Robot is close to the milk_2115. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. milk_2115 is close oven_127. oven_127 is close milk_2115. milk_2115 is inside oven_127. milk_2115 released by right hand. 
##############################
From agent.py
close_executor(oven_127)
Robot find: Robot is close to the oven_127. oven_127 is closed. 
##############################
From agent.py
switchon_executor(oven_127)
Robot find: Robot is close to the oven_127. oven_127 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_cereal(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, oven_127)
        # Select milk heated in the oven
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal
        
        pour_cereal(cereal, milk)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oven_127; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2142_around_bench_115(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

behavior find_food_salt_2041_around_sink_120(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_salt,sink_instance)
        else:
            exp(food_salt,sink_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,sink_instance]=True
        close[sink_instance,food_salt]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, oven_127)

        bind oven_127: item where:
            is_oven(oven_127)

        bind cereal: item where:
            is_food_cereal(cereal)

        pour_cereal(cereal, milk)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oven_127; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2141_around_sink_120(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind oven_127: item where:
            is_oven(oven_127)

        bind milk: item where:
            is_milk(milk) and inside(milk, oven_127)

        bind cereal: item where:
            is_food_cereal(cereal)

        pour_cereal(cereal, milk)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and inside(milk, oven)
        # Bind the heated milk, which is now in the oven

        bind cereal: item where:
            is_food_cereal(cereal)
        # Bind the cereal item

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind the kitchen counter where the task will be performed

        achieve_once on(milk, kitchen_counter)
        # Position the milk on the kitchen counter

        achieve_once inside(cereal, milk)
        # Pour the cereal into the milk
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oven; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Bind to an oven where the milk is currently heated

        bind milk: item where:
            is_milk(milk) and inside(milk, oven)
        # Bind the heated milk, which is now in the oven

        bind cereal: item where:
            is_food_cereal(cereal)
        # Bind the cereal item

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind the kitchen counter where the task will be performed

        achieve_once on(milk, kitchen_counter)
        # Position the milk on the kitchen counter

        achieve_once inside(cereal, milk)
        # Pour the cereal into the milk

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_food_2094_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_cereal(cereal:item, milk:item, bowl:item):
    body:
        achieve_once inside(milk, bowl)
        # Place the hot milk inside the bowl
        achieve_once inside(cereal, bowl)
        # Pour the cereal into the bowl with the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the specific milk with ID 2115
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to pour the milk and cereal into
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to be poured into the milk
        
        pour_cereal(cereal, milk, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_cereal(cereal:item, milk:item, bowl:item):
    body:
        achieve_once inside(milk, bowl)
        # Place the hot milk inside the bowl
        achieve_once inside(cereal, bowl)
        # Pour the cereal into the bowl with the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the specific milk with ID 2115
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to pour the milk and cereal into
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to be poured into the milk
        
        pour_cereal(cereal, milk, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(oven_127)switchoff_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(bowl_2140)putin_executor(milk_2115, bowl_2140)walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(bowl_2140)putin_executor(food_cereal_2087, bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)switchoff_executor(oven_127)open_executor(oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(bowl_2140)putin_executor(milk_2115, bowl_2140)walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(bowl_2140)putin_executor(food_cereal_2087, bowl_2140)
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the oven_127. 
##############################
From agent.py
switchoff_executor(oven_127)
Robot find: Robot is close to the oven_127. oven_127 is turned off. 
##############################
From agent.py
open_executor(oven_127)
Robot find: Robot is close to the tray_128. Robot is close to the milk_2115. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the oven_127. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the milk_2115. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(milk_2115, bowl_2140)
Robot find: Robot is close to the milk_2115. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. milk_2115 is close bowl_2140. bowl_2140 is close milk_2115. milk_2115 is inside bowl_2140. milk_2115 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_cereal_2087, bowl_2140)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. bowl_2140 is close food_cereal_2087. food_cereal_2087 is inside bowl_2140. food_cereal_2087 is close bowl_2140. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(light_212)', 'walk_executor(kitchen_counter_122)', 'walk_executor(tablelamp_238)', 'walk_executor(cupboard_117)', 'walk_executor(table_114)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(oven_127)', 'putin_executor(milk_2115, oven_127)', 'close_executor(oven_127)', 'switchon_executor(oven_127)', 'walk_executor(kitchen_counter_119)', 'walk_executor(oven_127)', 'switchoff_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(bowl_2140)', 'putin_executor(milk_2115, bowl_2140)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(bowl_2140)', 'putin_executor(food_cereal_2087, bowl_2140)']
Time info:
Time consume: 183 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
