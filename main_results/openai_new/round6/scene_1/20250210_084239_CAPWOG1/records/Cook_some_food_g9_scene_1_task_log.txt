From agent.py
Reset goals: The sub-goals are: 
['1. Peel and cut the potatoes into fries.', '2. Fry the potatoes until golden and crispy.', '3. Drain and serve the French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_potato_2107_around_photoframe_219(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(food_potato,photoframe_instance)
        else:
            exp(food_potato,photoframe_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,photoframe_instance]=True
        close[photoframe_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board_on(x: item):
    # Check if there is a cutting board on the specified item
    symbol has_cutting_board=exists o: item : (is_cutting_board(o) and on(o, x))
    return has_cutting_board

def is_in_kitchen(item: item):
    # Determine if the item is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(item, room))
    return in_kitchen

behavior prepare_potatoes(potato: item, knife: item, cutting_board: item):
    body:
        if grabbable(potato) and has_a_free_hand(char):
            grab(potato)
            # Grab the potato if it can be grasped and theres a free hand
        if grabbable(knife) and has_a_free_hand(char):
            grab(knife)
            # Grab the knife if it can be grasped and theres a free hand
        if not on(potato, cutting_board):
            put_on(potato, cutting_board)
            # Place the potato on the cutting board
        if not dirty(potato):
            cuts(potato)
            # Cut the potato if it is not dirty

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and is_in_kitchen(kitchen_counter)
        # Select a kitchen counter in the kitchen

        # Check if theres a cutting board in the kitchen
        if has_cutting_board_on(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            # Select the cutting board on the kitchen counter

            # Look for a potato to cut
            if exists potato: item : is_food_potato(potato) and grabbable(potato):
                bind potato: item where:
                    is_food_potato(potato) and grabbable(potato)
                # Select a potato

                if exists knife: item : is_knife(knife) and grabbable(knife):
                    bind knife: item where:
                        is_knife(knife) and grabbable(knife)
                    # Select a knife that can be grasped

                    # Proceed to prepare the potatoes
                    prepare_potatoes(potato, knife, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_potato(potato: item):
    body:
        if dirty(potato):
            wash(potato)
        # Assuming this is the step to peel the potato
        scrub(potato)

behavior cut_potato(potato: item, cutting_board: item, knife: item):
    body:
        if not cut(potato):
            grab(potato)
            put_on(potato, cutting_board)
            grab(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and grabbable(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and surfaces(cutting_board)
        bind knife: item where:
            is_knife(knife) and grabbable(knife)
        
        peel_potato(potato)
        cut_potato(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_potato(potato: item):
    body:
        if dirty(potato):
            wash(potato)
        # Assuming this is the step to peel the potato
        scrub(potato)

behavior cut_potato(potato: item, cutting_board: item, knife: item):
    body:
        if not cut(potato):
            grab(potato)
            put_on(potato, cutting_board)
            grab(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and grabbable(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and surfaces(cutting_board)
        bind knife: item where:
            is_knife(knife) and grabbable(knife)
        
        peel_potato(potato)
        cut_potato(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(microwave_135)open_executor(microwave_135)exp(knife_2122, microwave_135)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(knife_2122, microwave_135)
Fail to find knife_2122 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(knife_2122, dishwasher_129)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(knife_2122, dishwasher_129)
Fail to find knife_2122 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(cupboard_117)exp(knife_2122, cupboard_117)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(knife_2122, cupboard_117)
Fail to find knife_2122 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(kitchen_counter_123)exp(knife_2122, kitchen_counter_123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(knife_2122, kitchen_counter_123)
Fail to find knife_2122 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)scrub_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
scrub_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_33_around_bookshelf_196(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(drawing,bookshelf_instance)
        else:
            exp(drawing,bookshelf_instance)
    eff:
        unknown[drawing]=False
        close[drawing,bookshelf_instance]=True
        close[bookshelf_instance,drawing]=True
    

behavior find_lighter_2004_around_fryingpan_2154(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(lighter,fryingpan_instance)
        else:
            exp(lighter,fryingpan_instance)
    eff:
        unknown[lighter]=False
        close[lighter,fryingpan_instance]=True
        close[fryingpan_instance,lighter]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol fryingpan_on_stove=on(fryingpan, stove)
    return fryingpan_on_stove

behavior fry_potatoes(fryingpan:item, stove:item, fries:item):
    body:
        if not inside(fries, fryingpan):
            put_inside(fries, fryingpan)
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove before frying
        # Assume time is passing and cooking is occurring
        if inside(fries, fryingpan):
            # Check if fries are inside the frying pan
            observe(fryingpan, "Are the fries golden and crispy")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind fries: item where:
            cut(fries) and is_food_potato(fries)
        if not is_fryingpan_on_stove(fryingpan, stove):
            put_on(fryingpan, stove)
        fry_potatoes(fryingpan, stove, fries)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_knife_2122_around_fryingpan_2154(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(knife,fryingpan_instance)
        else:
            exp(knife,fryingpan_instance)
    eff:
        unknown[knife]=False
        close[knife,fryingpan_instance]=True
        close[fryingpan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potatoes: item, fryingpan: item):
    body:
        if not on(potatoes, fryingpan):
            put_on(potatoes, fryingpan) # Place the potatoes in the frying pan
        if is_food_potato(potatoes) and not is_on(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan to start frying the potatoes

behavior check_potatoes_fried(potatoes: item):
    body:
        observe(potatoes, "Check if potatoes are golden and crispy")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        fry_potatoes(potatoes, fryingpan)
        check_potatoes_fried(potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_pot_78(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_near_stove(fryingpan:item, stove:item):
    # Function to check if a frying pan is close to a stove
    return close(fryingpan, stove)

behavior heat_oil(fryingpan:item):
    # Heat oil in the frying pan before frying
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)

behavior add_ingredients(food:item, fryingpan:item):
    # Add ingredients to the frying pan
    body:
        if not inside(food, fryingpan):
            put_inside(food, fryingpan)

behavior fry_until_golden(food:item, fryingpan:item):
    # Fry the potatoes until golden and crispy
    body:
        watch(food) # Simulate watching the frying process

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind potatoes: item where:
            is_food_potato(potatoes)
        
        if not is_fryingpan_near_stove(fryingpan, stove):
            walk_to(stove)
            put_close(fryingpan, stove)
        
        heat_oil(fryingpan)
        add_ingredients(potatoes, fryingpan)
        fry_until_golden(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

behavior find_knife_2122_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_oil_nearby(oil:item):
    # Function to check if oil is nearby, making it accessible for use in frying
    symbol oil_near=exists o: item : (is_oil(o) and close(o, cutting_board_2123))
    return oil_near

behavior add_oil_to_pan(pan:item, oil:item):
    body:
        if not inside(oil, pan):
            grab(oil)
            walk_to(pan)
            put_inside(oil, pan)
            empty_a_hand()  # Drop the oil after adding it to the pan

behavior heat_oil(pan:item):
    body:
        if is_off(pan):
            switch_on(pan)

behavior fry_potatoes(potatoes:item, pan:item):
    body:
        if not cut(potatoes):
            walk_to(potatoes)
            scrub(potatoes)  # Ensure they are clean even after cut
            grab(potatoes)
            walk_to(pan)
            put_inside(potatoes, pan)

behavior monitor_frying(potatoes:item):
    # The frying process involves monitoring the potatoes until they are golden and crispy
    body:
        watch(potatoes)  # Implicit action to watch until they fry

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        
        bind pan: item where:
            is_fryingpan(pan)
        
        if not is_oil_nearby(pan):
            foreach oil: item:
                if is_oil(oil):
                    observe(oil, "Check if oil is available around cutting board")

        if is_oil_nearby(pan):
            bind oil: item where:
                is_oil(oil) and close(oil, cutting_board_2123)
        
            add_oil_to_pan(pan, oil)
            heat_oil(pan)
            fry_potatoes(potatoes, pan)
            monitor_frying(potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_pot_78(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil(pan:item):
    body:
        if is_off(pan):
            switch_on(pan) # Turn on the pan to heat the oil

behavior ensure_pan_has_oil(pan:item):
    body:
        symbol has_oil=exists o: item : is_oil(o) and inside(o, pan)
        if not has_oil:
            observe(pan, "Check if there is oil in the pan")
            # Ensure the pan has oil, if not observe to find oil

behavior fry_potatoes(pan:item, potatoes:item):
    body:
        if not on(potatoes, pan):
            put_on(potatoes, pan) # Put the potatoes in the pan for frying

behavior fry_until_golden_and_crispy(pan:item, potatoes:item):
    body:
        # Assume an automated process takes care of it, or substitute by time simulation
        watch(potatoes) # Watch until they are golden and crispy

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes
        ensure_pan_has_oil(pan)
        heat_oil(pan)
        fry_potatoes(pan, potatoes)
        fry_until_golden_and_crispy(pan, potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

behavior find_knife_2037_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cut_fries(fries: item):
    # Function to check if the fries are already cut
    symbol are_cut=exists o: item : (is_food_potato(o) and cut(o))
    return are_cut

behavior heat_oil(oil:item, fryingpan:item):
    body:
        if not has_water(oil):
            put_on(oil, fryingpan) 
            # Heat the oil in the frying pan

behavior fry_potatoes(potatoes:item, fryingpan:item):
    body:
        if not cut(potatoes):
            cuts(potatoes) # Ensure the potatoes are cut into fries before frying
        if not inside(potatoes, fryingpan):
            put_inside(potatoes, fryingpan)
            # Fry the potatoes in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil

        heat_oil(oil, fryingpan) # Heat the oil in the frying pan

        foreach fries: item:
            if is_food_potato(fries) and has_cut_fries(fries):
                fry_potatoes(fries, fryingpan) # Fry the fries in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cut_fries(fries: item):
    # Function to check if the fries are already cut
    symbol are_cut=exists o: item : (is_food_potato(o) and cut(o))
    return are_cut

behavior heat_oil(oil:item, fryingpan:item):
    body:
        if not has_water(oil):
            put_on(oil, fryingpan) 
            # Heat the oil in the frying pan

behavior fry_potatoes(potatoes:item, fryingpan:item):
    body:
        if not cut(potatoes):
            cuts(potatoes) # Ensure the potatoes are cut into fries before frying
        if not inside(potatoes, fryingpan):
            put_inside(potatoes, fryingpan)
            # Fry the potatoes in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil

        heat_oil(oil, fryingpan) # Heat the oil in the frying pan

        foreach fries: item:
            if is_food_potato(fries) and has_cut_fries(fries):
                fry_potatoes(fries, fryingpan) # Fry the fries in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 is on fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place the cut potatoes inside the frying pan to fry them. The frying process of the potatoes has not been completed.
##############################
From agent.py
Human Instruction: The robot needs to place the cut potatoes inside the frying pan to fry them. The frying process of the potatoes has not been completed.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_potato_2107 around fridge_126.
Action 5: Scrub food_potato_2107.
Action 6: Grab food_potato_2107.
Action 7: Walk to cutting_board_2123.
Action 8: Put food_potato_2107 on cutting_board_2123.
Action 9: Walk to knifeblock_76.
Action 10: look for knife_2122 around knifeblock_76.
Action 11: Walk to food_potato_2107.
Action 12: Scrub food_potato_2107.
Action 13: Grab food_potato_2107.
Action 14: Walk to cutting_board_2123.
Action 15: Put food_potato_2107 on cutting_board_2123.
Action 16: Walk to microwave_135.
Action 17: Open microwave_135.
Action 18: look for knife_2122 around microwave_135.
Action 19: Walk to food_potato_2107.
Action 20: Scrub food_potato_2107.
Action 21: Grab food_potato_2107.
Action 22: Walk to cutting_board_2123.
Action 23: Put food_potato_2107 on cutting_board_2123.
Action 24: Walk to dishwasher_129.
Action 25: Open dishwasher_129.
Action 26: look for knife_2122 around dishwasher_129.
Action 27: Walk to food_potato_2107.
Action 28: Scrub food_potato_2107.
Action 29: Grab food_potato_2107.
Action 30: Walk to cutting_board_2123.
Action 31: Put food_potato_2107 on cutting_board_2123.
Action 32: Walk to cupboard_117.
Action 33: look for knife_2122 around cupboard_117.
Action 34: Walk to food_potato_2107.
Action 35: Scrub food_potato_2107.
Action 36: Grab food_potato_2107.
Action 37: Walk to cutting_board_2123.
Action 38: Put food_potato_2107 on cutting_board_2123.
Action 39: Walk to kitchen_counter_123.
Action 40: look for knife_2122 around kitchen_counter_123.
Action 41: Walk to food_potato_2107.
Action 42: Scrub food_potato_2107.
Action 43: Grab food_potato_2107.
Action 44: Walk to cutting_board_2123.
Action 45: Put food_potato_2107 on cutting_board_2123.
Action 46: Walk to knife_2035.
Action 47: Grab knife_2035.
Action 48: Walk to food_potato_2107.
Action 49: Cut food_potato_2107.
Action 50: Walk to oil_2149.
Action 51: Grab oil_2149.
Action 52: Walk to fryingpan_2154.
Action 53: Put oil_2149 on fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2122_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_cut(fries:item):
    # Checking if the fries are cut
    symbol is_cut=exists o: item : (is_food_potato(o) and cut(o))
    return is_cut

def has_oil(fryingpan:item):
    # Checking if the frying pan has oil
    symbol oil_present=exists o: item : (is_oil(o) and on(o, fryingpan))
    return oil_present

behavior fry_potatoes(fries:item, fryingpan:item):
    body:
        if not on(fries, fryingpan):
            put_on(fries, fryingpan)  # Place fries in the frying pan
        # Additional frying actions would go here if allowed in behavior

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and is_potato_cut(fries)
        # Binding cut fries

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_oil(fryingpan)
        # Binding frying pan that has oil

        fry_potatoes(fries, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2037_around_toaster_132(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(knife,toaster_instance)
        else:
            exp(knife,toaster_instance)
    eff:
        unknown[knife]=False
        close[knife,toaster_instance]=True
        close[toaster_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
# Check if the frying pan has oil inside
def has_oil(fryingpan: item):
    symbol has_oil = exists oil: item : (is_oil(oil) and inside(oil, fryingpan))
    return has_oil

# Put the cut potatoes into the frying pan
behavior fry_potatoes(potatoes: item, fryingpan: item):
    body:
        if not inside(potatoes, fryingpan):
            put_inside(potatoes, fryingpan)

# Start heating the frying pan for frying
behavior heat_frying_pan(fryingpan: item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Bind the cut potatoes

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan

        if not has_oil(fryingpan):
            # Make sure the frying pan has oil
            bind oil: item where:
                is_oil(oil)
            # Bind the oil

            if not inhand(oil):
                grab(oil)
            
            put_inside(oil, fryingpan)

        fry_potatoes(potatoes, fryingpan)
        heat_frying_pan(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2035_around_stove_2135(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(knife,stove_instance)
        else:
            exp(knife,stove_instance)
    eff:
        unknown[knife]=False
        close[knife,stove_instance]=True
        close[stove_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potatoes:item, fryingpan:item):
    body:
        if not on(potatoes, fryingpan):
            put_on(potatoes, fryingpan)
            # Place the potatoes on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes
        fry_potatoes(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2035_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def fry_until_golden_and_crispy(fryingpan: item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)

behavior place_potatoes_in_fryingpan(cut_potatoes: item, fryingpan: item):
    body:
        if not inside(cut_potatoes, fryingpan):
            put_inside(cut_potatoes, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and grabbable(fryingpan)

        bind cut_potatoes: item where:
            is_food_potato(cut_potatoes) and cut(cut_potatoes)

        place_potatoes_in_fryingpan(cut_potatoes, fryingpan)
        fry_until_golden_and_crispy(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_knife_2035_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_oil_into_pot(oil:item, pot:item):
    body:
        if not inside(oil, pot):
            put_on(oil, pot)

behavior add_potatoes_to_frying_pan(potato:item, fryingpan:item):
    body:
        if not inside(potato, fryingpan):
            put_on(potato, fryingpan)

behavior fry_potatoes(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
        # Wait until the potatoes are golden and crispy
        # Since wait operation is assumed, no explicit action is needed for waiting

behavior __goal__(): 
    body:
        bind oil: item where:
            is_oil(oil)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind potato: item where:
            is_food_potato(potato) and cut(potato)

        pour_oil_into_pot(oil, fryingpan)
        add_potatoes_to_frying_pan(potato, fryingpan)
        fry_potatoes(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_knife_2037_around_sink_19(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def fryer_on(fryingpan: item):
    symbol fryer_status = is_on(fryingpan)
    return fryer_status

behavior fry_potatoes(potatoes: item, fryingpan: item):
    body:
        if not on(potatoes, fryingpan):
            put_on(potatoes, fryingpan)
        # Place the potatoes on the frying pan
        if not fryer_on(fryingpan):
            switch_on(fryingpan)
        # Turn on the frying pan

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        fry_potatoes(potatoes, fryingpan)
        # Fry the potatoes on the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(food_potato_2107)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(food_potato_2107)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(food_potato_2107)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(cupboard_117)', 'walk_executor(food_potato_2107)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(kitchen_counter_123)', 'walk_executor(food_potato_2107)', 'scrub_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'put_executor(oil_2149, fryingpan_2154)']
Time info:
Time consume: 296 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 14
goal correct times: 0
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
