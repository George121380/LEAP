From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in the pot.  ', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on(stove: item):
    # Function to check if the stove is on
    symbol stove_on = is_on(stove)
    return stove_on

def is_pot_on_stove(pot: item, stove: item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove = on(pot, stove)
    return pot_on_stove

def is_vegetable_in_pot(pot: item):
    # Function to check if there are vegetables in the pot
    symbol vegetable_in_pot = exists v: item : (is_food_vegetable(v) and inside(v, pot))
    return vegetable_in_pot

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not is_vegetable_in_pot(pot):
            # Observe what is inside the pot if not already known
            observe(pot, "Check is there any vegetable inside the pot")
        if not is_pot_on_stove(pot, stove):
            put_on(pot, stove)
        if not is_stove_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_stove_on(stove: item):
    # Function to check if the stove is on
    symbol stove_on = is_on(stove)
    return stove_on

def is_pot_on_stove(pot: item, stove: item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove = on(pot, stove)
    return pot_on_stove

def is_vegetable_in_pot(pot: item):
    # Function to check if there are vegetables in the pot
    symbol vegetable_in_pot = exists v: item : (is_food_vegetable(v) and inside(v, pot))
    return vegetable_in_pot

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not is_vegetable_in_pot(pot):
            # Observe what is inside the pot if not already known
            observe(pot, "Check is there any vegetable inside the pot")
        if not is_pot_on_stove(pot, stove):
            put_on(pot, stove)
        if not is_stove_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check is there any vegetable inside the pot)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)obs(pot_78, Check is there any vegetable inside the pot)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
obs(pot_78, Check is there any vegetable inside the pot)
Get this information:  pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is on oven_127. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that there are vegetables in pot_78 before proceeding with boiling.
##############################
From agent.py
Human Instruction: Ensure that there are vegetables in pot_78 before proceeding with boiling.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to pot_78.
Action 5: Observe around pot_78 with the question of Check is there any vegetable inside the pot.
Action 6: Grab pot_78.
Action 7: Walk to stove_2135.
Action 8: Put pot_78 on stove_2135.
Action 9: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_pot_2138(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable_in_pot(pot: item):
    # Function to check if there are vegetables in the specified pot
    symbol has_vegetable = exists v: item : (is_food_vegetable(v) and inside(v, pot))
    return has_vegetable

behavior observe_pot_vegetables(pot: item):
    body:
        if not visited(pot):
            observe(pot, "Check is there any vegetable inside the pot")

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Put the pot on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        if not has_vegetable_in_pot(pot):
            observe_pot_vegetables(pot)
        
        if has_vegetable_in_pot(pot):
            boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables inside a specified pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        if not has_vegetables_in_pot(pot):
            observe(pot,"Check is there any vegetable inside the pot")
        
        if has_vegetables_in_pot(pot):
            boil_vegetables_on_stove(pot, stove) # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables inside a specified pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        if not has_vegetables_in_pot(pot):
            observe(pot,"Check is there any vegetable inside the pot")
        
        if has_vegetables_in_pot(pot):
            boil_vegetables_on_stove(pot, stove) # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
obs(pot_78, Check is there any vegetable inside the pot)
##############################
From agent.py
obs(pot_78, Check is there any vegetable inside the pot)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there are vegetables in pot_78 before boiling. The robot needs to confirm the presence of vegetables in the pot or add them if necessary before considering the sub-task complete.
##############################
From agent.py
Human Instruction: Ensure there are vegetables in pot_78 before boiling. The robot needs to confirm the presence of vegetables in the pot or add them if necessary before considering the sub-task complete.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to pot_78.
Action 5: Observe around pot_78 with the question of Check is there any vegetable inside the pot.
Action 6: Grab pot_78.
Action 7: Walk to stove_2135.
Action 8: Put pot_78 on stove_2135.
Action 9: Switch on stove_2135.
Action 10: Observe around pot_78 with the question of Check is there any vegetable inside the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot: item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        if has_vegetables_in_pot(pot):
            boil_vegetables(pot, stove)
        else:
            observe(pot, "Ensure there are vegetables in the pot before boiling")
            # If no vegetables, observe the pot to check whats inside

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables_in_pot(pot: item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables(pot: item, stove: item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        if has_vegetables_in_pot(pot):
            boil_vegetables(pot, stove)
        else:
            observe(pot, "Ensure there are vegetables in the pot before boiling")
            # If no vegetables, observe the pot to check whats inside

##############################
From agent.py-> find a plan in act()
obs(pot_78, Ensure there are vegetables in the pot before boiling)
##############################
From agent.py
obs(pot_78, Ensure there are vegetables in the pot before boiling)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that there are vegetables in pot_78 before boiling. Currently, there is no confirmation that vegetables are present in the pot. You should add the vegetables into pot_78 if they are not already there and then switch on the stove to boil them.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_curtain_22(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==22
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(pot,curtain_instance)
        else:
            exp(pot,curtain_instance)
    eff:
        unknown[pot]=False
        close[pot,curtain_instance]=True
        close[curtain_instance,pot]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        if not inside(pot, fridge):
            put_inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        if open(fridge):
            closes(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        bind fridge: item where:
            is_fridge(fridge)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        if not inside(pot, fridge):
            put_inside(pot, fridge)

behavior close_the_fridge_door(fridge:item):
    body:
        if open(fridge):
            closes(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        bind fridge: item where:
            is_fridge(fridge)
        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)walk_executor(pot_78)grab_executor(pot_78)walk_executor(fridge_126)putin_executor(pot_78, fridge_126)close_executor(fridge_126)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
putin_executor(pot_78, fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close fridge_126. fridge_126 is close pot_78. pot_78 is inside fridge_126. pot_78 released by right hand. 
##############################
From agent.py
close_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(fridge_126)', 'putin_executor(pot_78, fridge_126)', 'close_executor(fridge_126)']
Time info:
Time consume: 157 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 14 steps
Keystate: k3 - Requires: 5 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
