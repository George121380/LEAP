From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and prepare the vegetables and lemon.', '3. Mix the boiled egg, vegetables, and lemon in a bowl to make the egg salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_cupboard_117(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_instrument_guitar_2028_around_bookshelf_275(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(instrument_guitar,bookshelf_instance)
        else:
            exp(instrument_guitar,bookshelf_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,bookshelf_instance]=True
        close[bookshelf_instance,instrument_guitar]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg: item, water_source: item, stove: item, pot: item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water from the water source
        if not inside(egg, pot):
            put_inside(egg, pot)
            # Place the egg into the pot
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove for boiling

behavior check_water(pot: item, stove: item):
    body:
        observe(pot, "Check if the pot has water")
        # Verify if theres water in the pot before boiling
        if not has_water(pot):
            get_water(pot)
            # Refill the pot if it doesnt have water
        if not is_on(stove):
            switch_on(stove)
            # Ensure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item
        bind water_source: item where:
            is_sink(water_source)
        # Select a sink as the water source
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        
        check_water(pot, stove)
        boil_egg(egg, water_source, stove, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_egg(egg: item, water_source: item, stove: item, pot: item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water from the water source
        if not inside(egg, pot):
            put_inside(egg, pot)
            # Place the egg into the pot
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove for boiling

behavior check_water(pot: item, stove: item):
    body:
        observe(pot, "Check if the pot has water")
        # Verify if theres water in the pot before boiling
        if not has_water(pot):
            get_water(pot)
            # Refill the pot if it doesnt have water
        if not is_on(stove):
            switch_on(stove)
            # Ensure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item
        bind water_source: item where:
            is_sink(water_source)
        # Select a sink as the water source
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        
        check_water(pot, stove)
        boil_egg(egg, water_source, stove, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if the pot has water)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(food_egg_2092, cupboard_117)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)obs(pot_78, Check if the pot has water)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
obs(pot_78, Check if the pot has water)
Get this information:  pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is on oven_127. pot_78 is inside dining_room_41. pot_78 is CLEAN. pot_78 is OPEN.
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
obs(pot_78, Check if the pot has water)grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
obs(pot_78, Check if the pot has water)
Get this information:  pot_78 is close to character_240. pot_78 is inside dining_room_41. pot_78 is CLEAN. pot_78 is OPEN.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there is water in the pot to boil the egg. Refill the pot with water by turning on the faucet and using it to fill the pot, then proceed to boil the egg.
##############################
From agent.py
Human Instruction: You need to ensure there is water in the pot to boil the egg. Refill the pot with water by turning on the faucet and using it to fill the pot, then proceed to boil the egg.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to pot_78.
Action 4: Observe around pot_78 with the question of Check if the pot has water.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Switch on stove_2135.
Action 11: Walk to fridge_126.
Action 12: Switch off fridge_126.
Action 13: Open fridge_126.
Action 14: look for food_egg_2092 around fridge_126.
Action 15: Observe around pot_78 with the question of Check if the pot has water.
Action 16: Grab food_egg_2092.
Action 17: Put food_egg_2092 into pot_78.
Action 18: Walk to stove_2135.
Action 19: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_plate_2152(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_peanut_butter,plate_instance)
        else:
            exp(food_peanut_butter,plate_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,plate_instance]=True
        close[plate_instance,food_peanut_butter]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, stove:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        boil_egg(egg, stove, pot)
        switch_on(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_egg(egg:item, stove:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        boil_egg(egg, stove, pot)
        switch_on(stove)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_stamp_2043_around_photoframe_219(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(stamp,photoframe_instance)
        else:
            exp(stamp,photoframe_instance)
    eff:
        unknown[stamp]=False
        close[stamp,photoframe_instance]=True
        close[photoframe_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            get_water(pot)
            empty_a_hand()

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
        put_on(egg, pot)
        put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)

        bind egg: item where:
            is_food_egg(egg) and not inhand(egg)
        bind stove: item where:
            is_stove(stove)
        boil_egg(pot, egg, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_usable_stove():
    # Check if there is a usable stove that can be turned on
    symbol usable=exists stove: item : (is_stove(stove) and has_switch(stove) and is_off(stove))
    return usable

def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water_status=has_water(pot)
    return has_water_status

behavior fill_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water using the faucet if it doesnt have water

behavior boil_egg(stove:item, pot:item, egg:item):
    body:
        if not is_on(stove):
            switch_on(stove) # Turn on the stove if its not on yet
        put_inside(egg, pot)
        put_on(pot, stove)
        # Put the egg inside the pot and the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot)
        # Find a pot that can be grabbed

        bind faucet: item where:
            is_faucet(faucet)
        # Find a faucet in the scene

        fill_pot(pot, faucet) # Ensure the pot is filled with water

        bind stove: item where:
            is_stove(stove) and has_usable_stove()
        # Find a stove that can be used and turned on

        bind egg: item where:
            is_food_egg(egg) and grabbable(egg)
        # Find an egg that can be grabbed

        boil_egg(stove, pot, egg) # Proceed to boil the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            get_water(pot)
            empty_a_hand() # Release the pot after filling it with water

behavior start_boiling(pot:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
        put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select faucet with ID 20
        
        get_water_in_pot(pot, faucet)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior get_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            get_water(pot)
            empty_a_hand() # Release the pot after filling it with water

behavior start_boiling(pot:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
        put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select faucet with ID 20
        
        get_water_in_pot(pot, faucet)
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_78)put_executor(pot_78, stove_2135)
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in pot_78 and that it is on the stove_2135 with the stove switched on to start boiling the egg.
##############################
From agent.py
Human Instruction: Ensure there is water in pot_78 and that it is on the stove_2135 with the stove switched on to start boiling the egg.

Trial and Error: You can not switchon stove_2135
The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to pot_78.
Action 4: Observe around pot_78 with the question of Check if the pot has water.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Switch on stove_2135.
Action 11: Walk to fridge_126.
Action 12: Switch off fridge_126.
Action 13: Open fridge_126.
Action 14: look for food_egg_2092 around fridge_126.
Action 15: Observe around pot_78 with the question of Check if the pot has water.
Action 16: Grab food_egg_2092.
Action 17: Put food_egg_2092 into pot_78.
Action 18: Walk to stove_2135.
Action 19: Put pot_78 on stove_2135.
Action 20: Grab pot_78.
Action 21: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_lighter_2004_around_knifeblock_76(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(lighter,knifeblock_instance)
        else:
            exp(lighter,knifeblock_instance)
    eff:
        unknown[lighter]=False
        close[lighter,knifeblock_instance]=True
        close[knifeblock_instance,lighter]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot:item, stove:item):
    # Function to check if a pot is on a stove
    return on(pot, stove)

def has_boiling_egg(pot:item):
    # Function to check if there is an egg in the pot for boiling
    symbol has_egg=exists o: item : (is_food_egg(o) and inside(o, pot))
    return has_egg

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            walk_to(pot)
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not is_pot_on_stove(pot, stove):
            walk_to(stove)
            put_on(pot, stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        if not has_boiling_egg(pot):
            walk_to(egg)
            grab(egg)
            walk_to(pot)
            put_inside(egg, pot)
            empty_a_hand()

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            walk_to(stove)
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092

        fill_pot_with_water(pot)
        place_egg_in_pot(egg, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2022_around_photoframe_219(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(stamp,photoframe_instance)
        else:
            exp(stamp,photoframe_instance)
    eff:
        unknown[stamp]=False
        close[stamp,photoframe_instance]=True
        close[photoframe_instance,stamp]=True
    

behavior find_scrabble_2031_around_bookshelf_275(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_novel_2060_around_bookshelf_275(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation

behavior fetch_pot():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        walk_to(pot)
        if not has_water(pot):
            grab(pot)
            walk_to_faucet()
            get_water(pot)
            empty_a_hand()
            walk_to_stove()

behavior fetch_egg():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        walk_to(fridge)
        if not open(fridge):
            opens(fridge)
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        grab(egg)
        walk_to_stove()
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        put_inside(egg, pot)
        empty_a_hand()

behavior prepare_stove():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        fetch_pot()
        fetch_egg()
        prepare_stove()
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        if not on(pot, stove):
            put_on(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_scrabble_2031_around_bookshelf_275(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

def is_filled_with_water(pot:item):
    # Function to check if the pot is filled with water
    symbol filled=has_water(pot)
    return filled

def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_status=is_on(stove)
    return stove_status

behavior fill_with_water(pot:item):
    body:
        if not is_filled_with_water(pot):
            walk_to(faucet_20)
            get_water(pot)

behavior boil_egg(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if not is_stove_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        fill_with_water(pot)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if a pot has water
    return has_water(pot)

def stove_is_on(stove:item):
    # Function to check if the stove is switched on
    return is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            grab(pot)
            walk_to(faucet)
            get_water(pot)
            empty_a_hand()

behavior boil_egg_in_pot(pot:item, stove:item, egg:item):
    body:
        grab(egg)
        if not on(pot, stove):
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)
            empty_a_hand()
        put_inside(egg, pot)
        if not stove_is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind egg: item where:
            is_food_egg(egg)
        
        fill_pot_with_water(pot, faucet)
        boil_egg_in_pot(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_pot(pot:item):
    # Function to check if a pot has water
    return has_water(pot)

def stove_is_on(stove:item):
    # Function to check if the stove is switched on
    return is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            grab(pot)
            walk_to(faucet)
            get_water(pot)
            empty_a_hand()

behavior boil_egg_in_pot(pot:item, stove:item, egg:item):
    body:
        grab(egg)
        if not on(pot, stove):
            grab(pot)
            walk_to(stove)
            put_on(pot, stove)
            empty_a_hand()
        put_inside(egg, pot)
        if not stove_is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind egg: item where:
            is_food_egg(egg)
        
        fill_pot_with_water(pot, faucet)
        boil_egg_in_pot(pot, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_egg_2092. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the pot (pot_78) contains water before placing it on the stove (stove_2135) with the egg (food_egg_2092) inside and turning on the stove to boil the egg. Currently, there's no indication that the pot has water, which is necessary for boiling the egg.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_plate_2152(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_kiwi,plate_instance)
        else:
            exp(food_kiwi,plate_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,plate_instance]=True
        close[plate_instance,food_kiwi]=True
    

behavior find_food_carrot_2086_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def process_vegetable_and_lemon(veggie:item, lemon:item):
    body:
        # wash the vegetable if it is not already clean
        if not clean(veggie):
            wash(veggie)

        # wash the lemon if it is not already clean
        if not clean(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind veggie: item where:
            is_food_vegetable(veggie)
        # Select a vegetable item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon item

        process_vegetable_and_lemon(veggie, lemon)
        # Wash and prepare both the vegetable and the lemon

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare(item: item):
    body:
        if dirty(item):
            wash(item)
        if not clean(item):
            rinse(item)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        wash_and_prepare(lemon)
        wash_and_prepare(vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_prepare(item: item):
    body:
        if dirty(item):
            wash(item)
        if not clean(item):
            rinse(item)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        wash_and_prepare(lemon)
        wash_and_prepare(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot still needs to wash and prepare the lemon. Ensure you wash or rinse the food_lemon_2100 to complete the task.
##############################
From agent.py
Human Instruction: The robot still needs to wash and prepare the lemon. Ensure you wash or rinse the food_lemon_2100 to complete the task.

Trial and Error: You can not switchon stove_2135
The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to pot_78.
Action 4: Observe around pot_78 with the question of Check if the pot has water.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Switch on stove_2135.
Action 11: Walk to fridge_126.
Action 12: Switch off fridge_126.
Action 13: Open fridge_126.
Action 14: look for food_egg_2092 around fridge_126.
Action 15: Observe around pot_78 with the question of Check if the pot has water.
Action 16: Grab food_egg_2092.
Action 17: Put food_egg_2092 into pot_78.
Action 18: Walk to stove_2135.
Action 19: Put pot_78 on stove_2135.
Action 20: Grab pot_78.
Action 21: Put pot_78 on stove_2135.
Action 22: Walk to food_egg_2092.
Action 23: Grab food_egg_2092.
Action 24: Put food_egg_2092 into pot_78.
Action 25: Walk to food_vegetable_2113.
Action 26: Grab food_vegetable_2113.
Action 27: Walk to faucet_20.
Action 28: Switch on faucet_20.
Action 29: Wash food_vegetable_2113.
Action 30: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_prepare_vegetables(vegetable:item):
    body:
        if dirty(vegetable):
            wash(vegetable)

behavior wash_prepare_lemon(lemon:item):
    body:
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind lemon: item where:
            is_food_lemon(lemon)

        wash_prepare_vegetables(vegetable)
        wash_prepare_lemon(lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_plate_2152(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_onion,plate_instance)
        else:
            exp(food_onion,plate_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,plate_instance]=True
        close[plate_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vegetables(vegetables: item, faucet: item):
    body:
        if dirty(vegetables):
            wash(vegetables) # Wash the vegetables until clean

behavior prepare_lemon(lemon: item, faucet: item):
    body:
        if dirty(lemon):
            rinse(lemon) # Rinse the lemon until it is clean

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        prepare_vegetables(vegetables, faucet)
        prepare_lemon(lemon, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_faucet(faucet:item):
    symbol water_running=exists o: item : (is_faucet(faucet) and is_on(faucet))
    return water_running

behavior prepare_vegetable(vegetable: item, faucet: item):
    body:
        if not clean(vegetable):
            walk_to(faucet)
            if not has_water(vegetable):
                switch_on(faucet)
                wash(vegetable)
                switch_off(faucet)

behavior prepare_lemon(lemon: item, faucet: item):
    body:
        if not clean(lemon):
            walk_to(faucet)
            if not has_water(lemon):
                switch_on(faucet)
                wash(lemon)
                switch_off(faucet)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        prepare_vegetable(vegetable, faucet)
        prepare_lemon(lemon, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_plate_2152(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_kiwi,plate_instance)
        else:
            exp(food_kiwi,plate_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,plate_instance]=True
        close[plate_instance,food_kiwi]=True
    

behavior find_food_carrot_2086_around_food_food_1000(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_lemon(lemon:item, faucet:item):
    body:
        if dirty(lemon):
            wash(lemon)
            # Wash the lemon under running water
        
behavior prepare_vegetables(vegetable:item, faucet:item):
    body:
        if dirty(vegetable):
            wash(vegetable)
            # Wash the vegetables under running water

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        walk_to(faucet)
        wash_and_prepare_lemon(lemon, faucet)
        wash_and_prepare_vegetables(vegetable, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_plate_2152(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_onion,plate_instance)
        else:
            exp(food_onion,plate_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,plate_instance]=True
        close[plate_instance,food_onion]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetable_and_lemon(vegetable:item, lemon:item, faucet:item):
    body:
        if not clean(vegetable):
            wash(vegetable)
        if not clean(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        wash_vegetable_and_lemon(vegetable, lemon, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def clean_and_ready_for_use(obj:item):
    symbol clean_ready = (clean(obj) and not dirty(obj))
    return clean_ready

behavior wash_and_rinse_vegetables(vegetable:item, faucet:item):
    body:
        if not clean_and_ready_for_use(vegetable):
            walk_to(faucet)
            switch_on(faucet)
            wash(vegetable)
            rinse(vegetable)
            switch_off(faucet)

behavior prepare_lemon(lemon:item, faucet:item):
    body:
        if not clean_and_ready_for_use(lemon):
            walk_to(faucet)
            switch_on(faucet)
            wash(lemon)
            rinse(lemon)
            switch_off(faucet)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        wash_and_rinse_vegetables(vegetable, faucet)
        prepare_lemon(lemon, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_plate_2152(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_onion,plate_instance)
        else:
            exp(food_onion,plate_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,plate_instance]=True
        close[plate_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_or_wash(obj:item):
    body:
        if dirty(obj):
            if is_food_lemon(obj):
                rinse(obj)
            else:
                wash(obj)

behavior wash_vegetables_and_lemon(vegetable:item, lemon:item):
    body:
        rinse_or_wash(vegetable)
        rinse_or_wash(lemon)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        
        walk_to(faucet_20)
        wash_vegetables_and_lemon(vegetable, lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

behavior find_food_carrot_2015_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_vegetables(vegetables:item):
    body:
        if dirty(vegetables):
            wash(vegetables)

behavior wash_and_prepare_lemon(lemon:item):
    body:
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        wash_and_prepare_vegetables(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon]==2100
        wash_and_prepare_lemon(lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_plate_2152(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_kiwi,plate_instance)
        else:
            exp(food_kiwi,plate_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,plate_instance]=True
        close[plate_instance,food_kiwi]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior process_vegetable(vegetable:item):
    body:
        if dirty(vegetable):
            walk_to(vegetable)
            grab(vegetable)
            walk_to(faucet)
            switch_on(faucet)
            wash(vegetable)
            switch_off(faucet)
            empty_a_hand()

behavior process_lemon(lemon:item):
    body:
        if dirty(lemon):
            walk_to(lemon)
            grab(lemon)
            walk_to(faucet)
            switch_on(faucet)
            rinse(lemon)
            switch_off(faucet)
            empty_a_hand()

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable from the scene
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon from the scene
        
        process_vegetable(vegetable)
        process_lemon(lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_plate_2152(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_kiwi,plate_instance)
        else:
            exp(food_kiwi,plate_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,plate_instance]=True
        close[plate_instance,food_kiwi]=True
    

behavior find_food_carrot_2015_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetable(vegetable:item, sink:item):
    body:
        if dirty(vegetable):
            wash(vegetable)
            # Wash the vegetable to make it clean

behavior prepare_lemon(lemon:item, sink:item):
    body:
        if dirty(lemon):
            wash(lemon)
            # Wash the lemon to make it clean

behavior __goal__():
    body:
        bind sink: item where:
            is_faucet(sink) and id[sink]==20
        # Bind the sink with ID 20 (faucet 20)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and dirty(vegetable)
        # Bind dirty vegetable

        bind lemon: item where:
            is_food_lemon(lemon) and dirty(lemon)
        # Bind dirty lemon

        walk_to(sink)
        # Move to the sink to wash items

        grab(vegetable)
        wash_vegetable(vegetable, sink)
        empty_a_hand()

        grab(lemon)
        prepare_lemon(lemon, sink)
        empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def is_lemon(obj:item):
    symbol is_lemon=is_food_lemon(obj)
    return is_lemon

behavior __goal__():
    body:
        bind lemon: item where:
            is_lemon(lemon)
        # Bind and identify the lemon for washing
        
        walk_to(faucet_20) 
        # Proceed to the faucet for washing
        
        switch_on(faucet_20) 
        # Activate the faucet before washing
        
        rinse(lemon)
        # Rinse the lemon to complete the washing task
        
        switch_off(faucet_20)
        # Ensure to turn off the faucet post washing

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_plate_2152(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_onion,plate_instance)
        else:
            exp(food_onion,plate_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,plate_instance]=True
        close[plate_instance,food_onion]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_vegetables(vegetable:item, faucet:item):
    body:
        if dirty(vegetable):
            if is_off(faucet):
                switch_on(faucet)
            wash(vegetable)
            if is_on(faucet):
                switch_off(faucet)

behavior wash_and_prepare_lemon(lemon:item, faucet:item):
    body:
        if dirty(lemon):
            if is_off(faucet):
                switch_on(faucet)
            wash(lemon)
            if is_on(faucet):
                switch_off(faucet)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        wash_and_prepare_vegetables(vegetable, faucet)
        wash_and_prepare_lemon(lemon, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare(item: item):
    body:
        if dirty(item):
            wash(item) # Wash the dirty item to make it clean

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        walk_to(lemon) # Approach the lemon
        wash_and_prepare(lemon) # Wash and prepare the lemon

        walk_to(vegetable) # Approach the vegetables
        wash_and_prepare(vegetable) # Wash and prepare the vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_prepare(item: item):
    body:
        if dirty(item):
            wash(item) # Wash the dirty item to make it clean

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        walk_to(lemon) # Approach the lemon
        wash_and_prepare(lemon) # Wash and prepare the lemon

        walk_to(vegetable) # Approach the vegetables
        wash_and_prepare(vegetable) # Wash and prepare the vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2100)walk_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash and prepare the lemon to complete this sub-task. Ensure you approach the food_lemon_2100 and wash it under the faucet.
##############################
From agent.py
Human Instruction: You need to wash and prepare the lemon to complete this sub-task. Ensure you approach the food_lemon_2100 and wash it under the faucet.

Trial and Error: You can not switchon stove_2135
The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to pot_78.
Action 4: Observe around pot_78 with the question of Check if the pot has water.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Switch on stove_2135.
Action 11: Walk to fridge_126.
Action 12: Switch off fridge_126.
Action 13: Open fridge_126.
Action 14: look for food_egg_2092 around fridge_126.
Action 15: Observe around pot_78 with the question of Check if the pot has water.
Action 16: Grab food_egg_2092.
Action 17: Put food_egg_2092 into pot_78.
Action 18: Walk to stove_2135.
Action 19: Put pot_78 on stove_2135.
Action 20: Grab pot_78.
Action 21: Put pot_78 on stove_2135.
Action 22: Walk to food_egg_2092.
Action 23: Grab food_egg_2092.
Action 24: Put food_egg_2092 into pot_78.
Action 25: Walk to food_vegetable_2113.
Action 26: Grab food_vegetable_2113.
Action 27: Walk to faucet_20.
Action 28: Switch on faucet_20.
Action 29: Wash food_vegetable_2113.
Action 30: Switch off faucet_20.
Action 31: Walk to food_lemon_2100.
Action 32: Walk to food_vegetable_2113.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_washing_machine_2079(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind faucet: item where:
            is_faucet(faucet)

        # Go to the faucet
        walk_to(faucet)

        # Turn on the faucet if it is off
        if is_off(faucet):
            switch_on(faucet)

        # Wash the vegetables
        if not clean(vegetable):
            wash_item(vegetable)

        # Wash the lemon
        if not clean(lemon):
            wash_item(lemon)

        # Turn off the faucet if it is on
        if is_on(faucet):
            switch_off(faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind faucet: item where:
            is_faucet(faucet)

        # Go to the faucet
        walk_to(faucet)

        # Turn on the faucet if it is off
        if is_off(faucet):
            switch_on(faucet)

        # Wash the vegetables
        if not clean(vegetable):
            wash_item(vegetable)

        # Wash the lemon
        if not clean(lemon):
            wash_item(lemon)

        # Turn off the faucet if it is on
        if is_on(faucet):
            switch_off(faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate and wash the lemon (food_lemon_2100) under the faucet. This action is necessary to complete the task of washing and preparing the vegetables and lemon.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_knifeblock_76(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(pot,knifeblock_instance)
        else:
            exp(pot,knifeblock_instance)
    eff:
        unknown[pot]=False
        close[pot,knifeblock_instance]=True
        close[knifeblock_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_bowl_2142(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(wooden_spoon,bowl_instance)
        else:
            exp(wooden_spoon,bowl_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,bowl_instance]=True
        close[bowl_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg: item, veggies: item, lemon: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(veggies, bowl):
            put_inside(veggies, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind veggies: item where:
            is_food_vegetable(veggies)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        
        mix_ingredients(egg, veggies, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_wooden_spoon_2000_around_bowl_2142(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(wooden_spoon,bowl_instance)
        else:
            exp(wooden_spoon,bowl_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,bowl_instance]=True
        close[bowl_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        mix_ingredients(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_salad(egg:item, veggies:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(veggies, bowl):
            put_inside(veggies, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind veggies: item where:
            is_food_vegetable(veggies)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        mix_salad(egg, veggies, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_if_not_inhand(obj:item):
    body:
        if not inhand(obj):
            grab(obj)

behavior mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        put_inside(boiled_egg, bowl) if not inside(boiled_egg, bowl) else None
        put_inside(vegetables, bowl) if not inside(vegetables, bowl) else None
        grab_if_not_inhand(lemon)
        squeeze(lemon)
        put_inside(lemon, bowl) if not inside(lemon, bowl) else None

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and clean(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        mix_ingredients(boiled_egg, vegetables, lemon, bowl)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_wooden_spoon_2000_around_bowl_2142(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(wooden_spoon,bowl_instance)
        else:
            exp(wooden_spoon,bowl_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,bowl_instance]=True
        close[bowl_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_items(egg:item, vegetables:item, lemon:item):
    body:
        grab(egg)
        grab(vegetables)
        grab(lemon)

behavior mix_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        grab_items(egg, vegetables, lemon)
        mix_in_bowl(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients(bowl:item, egg:item, vegetable:item, lemon:item):
    # Function to check if the bowl has all necessary ingredients
    symbol has_all=exists o: item : ((is_food_egg(o) and inside(o, bowl)) and 
                                     (is_food_vegetable(o) and inside(o, bowl)) and 
                                     (is_food_lemon(o) and inside(o, bowl)))
    return has_all

behavior mix_ingredients(bowl:item, egg:item, vegetable:item, lemon:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Place the egg into the bowl
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl) # Place the vegetables into the bowl
        if not inside(lemon, bowl):
            put_inside(lemon, bowl) # Place the lemon into the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind egg: item where:
            is_food_egg(egg)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        if not has_ingredients(bowl, egg, vegetable, lemon):
            mix_ingredients(bowl, egg, vegetable, lemon)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2141)putin_executor(food_egg_2092, bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(bowl_2141)putin_executor(food_lemon_2100, bowl_2141)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_egg_2092. Robot is close to the pot_78. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_117)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135) (Failed)', 'grab_executor(pot_78)', 'put_executor(pot_78, stove_2135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(food_lemon_2100)', 'walk_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_egg_2092)']
Time info:
Time consume: 730 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 31
goal correct times: 0
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 24 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
