From agent.py
Reset goals: The sub-goals are: 
['Make sure there is at least one light on in every room.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if is_ceilinglamp(light) or is_walllamp(light) or is_tablelamp(light):
                bind light: item where:
                    is_light(light) and has_switch(light) and inside(light, room)
                # Ensure each room has at least one light turned on
                achieve_once is_on(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_light_on(room:item):
    # Function to check if there is at least one light on in the specified room
    symbol light_on=exists o: item : (is_light(o) and inside(o, room) and is_on(o))
    return light_on

behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through each room
            if exists light: item : (is_light(light) and inside(light, room) and not is_on(light)):
                # Check if there is a light in this room which is off
                bind light: item where:
                    is_light(light) and inside(light, room) and not is_on(light)
                # Select an off light in the room
                turn_on_light(light)
                # Turn on the light
            elif not has_light_on(room):
                # Check if there is no light on in the room
                foreach light: item:
                    if is_light(light) and inside(light, room) and not is_on(light):
                        observe(light, "Is the light plugged or has a switch")
                        # Observe unvisited lights if room has no light on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior ensure_light_on_in_room(room:item):
    body:
        if exists light: item : (is_light(light) and inside(light, room)):
            bind light: item where:
                is_light(light) and inside(light, room)
            achieve is_on(light)
        else:
            foreach light: item:
                if is_light(light) and inside(light, room) and not visited(light):
                    observe(light, "Verify if the light can be turned on")

behavior __goal__():
    body:
        foreach room: item:
            achievable inside(room) and is_light_available(room)
            ensure_light_on_in_room(room)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_room_lit(room:item):
    # Function to check if there is at least one light on in the specified room
    symbol is_lit = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return is_lit

behavior ensure_light_in_room(room:item):
    body:
        # Iterate over all items in the room to find a light
        foreach light: item:
            if is_light(light) and inside(light, room) and not is_on(light):
                achieve_once is_on(light)
                # Turn on the light if it is not already on

behavior __goal__():
    body:
        foreach room: item:
            if not is_room_lit(room):
                ensure_light_in_room(room)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_room_lit(room:item):
    # Function to check if there is at least one light on in the specified room
    symbol is_lit = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return is_lit

behavior ensure_light_in_room(room:item):
    body:
        # Iterate over all items in the room to find a light
        foreach light: item:
            if is_light(light) and inside(light, room) and not is_on(light):
                achieve_once is_on(light)
                # Turn on the light if it is not already on

behavior __goal__():
    body:
        foreach room: item:
            if not is_room_lit(room):
                ensure_light_in_room(room)

##############################
From agent.py-> find a plan in act()
walk_executor(light_39)switchon_executor(light_39)walk_executor(light_73)switchon_executor(light_73)walk_executor(light_212)switchon_executor(light_212)walk_executor(light_283)switchon_executor(light_283)
##############################
From agent.py
walk_executor(light_39)
Robot find: Robot is close to the light_39. 
##############################
From agent.py
switchon_executor(light_39)
Robot find: Robot is close to the light_39. light_39 is turned on. 
##############################
From agent.py
walk_executor(light_73)
Robot find: Robot is close to the light_73. 
##############################
From agent.py
switchon_executor(light_73)
Robot find: Robot is close to the light_73. light_73 is turned on. 
##############################
From agent.py
walk_executor(light_212)
Robot find: drawing_202, Robot is close to the light_212. 
##############################
From agent.py
switchon_executor(light_212)
Robot find: Robot is close to the light_212. light_212 is turned on. 
##############################
From agent.py
walk_executor(light_283)
Robot find: mat_284, Robot is close to the light_283. 
##############################
From agent.py
switchon_executor(light_283)
Robot find: Robot is close to the light_283. light_283 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make sure there is at least one light on in every room.
Action History:
['walk_executor(light_39)', 'switchon_executor(light_39)', 'walk_executor(light_73)', 'switchon_executor(light_73)', 'walk_executor(light_212)', 'switchon_executor(light_212)', 'walk_executor(light_283)', 'switchon_executor(light_283)']
Time info:
Time consume: 75 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 1
##############################
