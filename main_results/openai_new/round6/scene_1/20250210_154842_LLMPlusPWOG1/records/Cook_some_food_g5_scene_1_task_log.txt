From agent.py
Reset goals: The sub-goals are: 
['Make oil fried banana.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_envelope_2055_around_cupboard_117(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(envelope,cupboard_instance)
        else:
            exp(envelope,cupboard_instance)
    eff:
        unknown[envelope]=False
        close[envelope,cupboard_instance]=True
        close[cupboard_instance,envelope]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_banana(banana:item):
    body:
        achieve cut(banana)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior heat_pan(stove:item, pan:item):
    body:
        achieve plugged(stove)
        achieve is_on(stove)
        achieve_once on(pan, stove)

behavior cook_banana(banana:item, pan:item):
    body:
        achieve_once on(banana, pan)

def in_kitchen_counter(pan:item):
    symbol is_in_kitchen_counter = exists room: item : (is_kitchen(room) and on(pan, k))
    return is_in_kitchen_counter

behavior __goal__():
    body:
        bind banana:item where:
            is_food_banana(banana)
        bind oil:item where:
            is_oil(oil)
        bind pan:item where:
            is_fryingpan(pan)
        bind stove:item where:       
            is_stove(stove)        
        prepare_banana(banana)
        add_oil_to_pan(oil, pan)
        heat_pan(stove, pan)
        cook_banana(banana, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_cupboard_117(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_banana,cupboard_instance)
        else:
            exp(food_banana,cupboard_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,cupboard_instance]=True
        close[cupboard_instance,food_banana]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(banana:item, oil:item, fryingpan:item):
    body:
        achieve_once cut(banana)
        # Cut the banana

behavior heat_oil(fryingpan:item, stove:item, oil:item):
    body:
        achieve_once inside(oil, fryingpan) 
        # Add oil into the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve has_switch(stove)
        if has_switch(stove):
            achieve_once is_on(stove)
            # Turn on the stove

behavior fry_banana(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana inside the frying pan

behavior __goal__():
    body:
        bind banana:item where:
            is_food_banana(banana)
        # Select a banana
        
        bind oil:item where:
            is_oil(oil)
        # Select oil
        
        bind fryingpan:item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove:item where:
            is_stove(stove)
        # Select a stove
        
        prepare_ingredients(banana, oil, fryingpan)
        heat_oil(fryingpan, stove, oil)
        fry_banana(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2149_around_kitchen_counter_119(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior gather_ingredients(banana:item, oil:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan)
        achieve_once inside(banana, frying_pan)

behavior fry_banana(frying_pan:item):
    body:
        achieve_once is_on(frying_pan)
        achieve cut(banana)
        achieve on(banana, frying_pan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        gather_ingredients(banana, oil, frying_pan)
        fry_banana(frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana(banana:item, oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil into the pan
        achieve_once cut(banana)
        # Cut the banana
        achieve_once on(banana, pan)
        # Place the banana in the pan to fry

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        fry_banana(banana, oil, pan)
        # Fry the banana in the pan with oil

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fry_banana(banana:item, oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil into the pan
        achieve_once cut(banana)
        # Cut the banana
        achieve_once on(banana, pan)
        # Place the banana in the pan to fry

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        fry_banana(banana, oil, pan)
        # Fry the banana in the pan with oil

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)exp(oil_2149, cupboard_117)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(kitchen_counter_119)exp(oil_2149, kitchen_counter_119)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(kitchen_counter_119)exp(food_banana_2083, kitchen_counter_119)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)exp(oil_2149, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(bowl_2140)exp(food_banana_2083, bowl_2140)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)exp(knife_2122, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
exp(oil_2149, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(bowl_2140)exp(food_banana_2083, bowl_2140)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)exp(knife_2122, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
exp(oil_2149, kitchen_counter_122)
Fail to find oil_2149 around kitchen_counter_122. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_117)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)']
Time info:
Time consume: 210 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 4

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
