From agent.py
Reset goals: The sub-goals are: 
['Fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_frying_pan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_pan=exists o: item : (is_fryingpan(o) and on(o, stove))
    return has_pan

behavior __goal__():
    body:
        if exists stove: item : (is_stove(stove) and has_frying_pan_on_stove(stove)):
            # If there is already a frying pan on the stove, move the character closer to it
            bind stove: item where:
                is_stove(stove) and has_frying_pan_on_stove(stove)
            achieve close_char(char, stove)
        else:
            # Check all stoves that have not been visited and look for a frying pan
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove,"Check if there is a frying pan on the stove")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_frying_pan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_pan=exists o: item : (is_fryingpan(o) and on(o, stove))
    return has_pan

behavior __goal__():
    body:
        if exists stove: item : (is_stove(stove) and has_frying_pan_on_stove(stove)):
            # If there is already a frying pan on the stove, move the character closer to it
            bind stove: item where:
                is_stove(stove) and has_frying_pan_on_stove(stove)
            achieve close_char(char, stove)
        else:
            # Check all stoves that have not been visited and look for a frying pan
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove,"Check if there is a frying pan on the stove")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)obs(stove_2135, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
obs(stove_2135, Check if there is a frying pan on the stove)
Get this information:  stove_2135 is close to kitchen_counter_119. stove_2135 is close to character_240. stove_2135 is on kitchen_counter_119. stove_2135 is inside dining_room_41. stove_2135 is OFF. stove_2135 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find a frying pan on the stove. The current observations around the stove indicate that there is no frying pan identified. Continue searching for a frying pan on the stove to meet the goal conditions.
##############################
From agent.py
Human Instruction: You need to find a frying pan on the stove. The current observations around the stove indicate that there is no frying pan identified. Continue searching for a frying pan on the stove to meet the goal conditions.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: Observe around stove_2135 with the question of Check if there is a frying pan on the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation

def check_frying_pan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_frying_pan=exists pan: item : (is_fryingpan(pan) and on(pan, stove))
    return has_frying_pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        if check_frying_pan_on_stove(stove):
            # If a frying pan is found on the stove
            achieve close_char(char, stove)
        else:
            # Continue searching if frying pan is not found using available information
            observe(stove, "Check if there is a frying pan on the stove")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def check_frying_pan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_frying_pan=exists pan: item : (is_fryingpan(pan) and on(pan, stove))
    return has_frying_pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        if check_frying_pan_on_stove(stove):
            # If a frying pan is found on the stove
            achieve close_char(char, stove)
        else:
            # Continue searching if frying pan is not found using available information
            observe(stove, "Check if there is a frying pan on the stove")

##############################
From agent.py-> find a plan in act()
obs(stove_2135, Check if there is a frying pan on the stove)
##############################
From agent.py
obs(stove_2135, Check if there is a frying pan on the stove)
Get this information:  stove_2135 is close to kitchen_counter_119. stove_2135 is close to character_240. stove_2135 is on kitchen_counter_119. stove_2135 is inside dining_room_41. stove_2135 is OFF. stove_2135 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for a frying pan on the stove as it has not yet been identified.
##############################
From agent.py
Human Instruction: You need to continue searching for a frying pan on the stove as it has not yet been identified.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: Observe around stove_2135 with the question of Check if there is a frying pan on the stove.
Action 4: Observe around stove_2135 with the question of Check if there is a frying pan on the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_fryingpan(stove: item):
    body:
        if not visited(stove):
            observe(stove, "Check if there is a frying pan on the stove")
        else:
            # If the stove has already been visited, further actions can be planned after finding the frying pan
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        find_fryingpan(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior find_frying_pan(stove:item):
    body:
        foreach frying_pan: item:
            if is_fryingpan(frying_pan) and not visited(frying_pan):
                observe(frying_pan, "Check if there is a frying pan on the stove")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        find_frying_pan(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_frying_pan(stove:item):
    body:
        foreach frying_pan: item:
            if is_fryingpan(frying_pan) and not visited(frying_pan):
                observe(frying_pan, "Check if there is a frying pan on the stove")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        find_frying_pan(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there is a frying pan on the stove)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, Check if there is a frying pan on the stove)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)']
Time info:
Time consume: 167 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 8

Task complete rate:
Keystate: k1 - Requires: 15 steps
Keystate: k2 - Requires: 19 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
