From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the potatoes.', '2. Cut the potatoes into fries.', '3. Fry the potato fries until crispy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_119(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def identify_potato(potato:item):
    # Function to identify if an item is a potato
    return is_food_potato(potato)

behavior clean_potato(potato:item):
    body:
        if dirty(potato):
            scrub(potato) # Scrub the potato to clean it
        if not clean(potato):
            rinse(potato) # Rinse to ensure the potato is clean

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        clean_potato(potato) # Clean the selected potato

#goal_representation_end

##############################
From agent.py->reset_goal
 
def identify_potato(potato:item):
    # Function to identify if an item is a potato
    return is_food_potato(potato)

behavior clean_potato(potato:item):
    body:
        if dirty(potato):
            scrub(potato) # Scrub the potato to clean it
        if not clean(potato):
            rinse(potato) # Rinse to ensure the potato is clean

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        clean_potato(potato) # Clean the selected potato

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_potato_2107, kitchen_counter_119)walk_executor(food_potato_2107)rinse_executor(food_potato_2107)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_119)
Fail to find food_potato_2107 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_potato_2107, cupboard_118)walk_executor(food_potato_2107)rinse_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_potato_2107, cupboard_118)
Fail to find food_potato_2107 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)rinse_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and peel the potatoes.', '2. Cut the potatoes into fries.', '3. Fry the potatoes until they are golden brown.', '4. Drain and serve the fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_potatoes():
    # Function to check for potatoes in various locations
    symbol found_potato = exists o: item : (is_food_potato(o) and (close(o, kitchen_counter_119) or close(o, cupboard_118) or close(o, fridge_126)))
    return found_potato

behavior __goal__():
    body:
        if find_potatoes():
            # If potatoes are found based on the available information, no further action is required here
            pass
        else:
            # If potatoes have not been identified, explore different locations to find them
            bind potato: item where:
                is_food_potato(potato)
            # Prioritize visiting and checking locations not yet visited
            if not visited(kitchen_counter_119):
                walk_to(kitchen_counter_119)
                observe(kitchen_counter_119, "Check for potatoes around")
            if not visited(cupboard_118):
                walk_to(cupboard_118)
                opens(cupboard_118)
                observe(cupboard_118, "Check for potatoes inside")
            if not visited(fridge_126):
                walk_to(fridge_126)
                switch_off(fridge_126)
                opens(fridge_126)
                observe(fridge_126, "Check for potatoes inside")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_food(item: item):
    # Function to check if an item is a potato
    return is_food_potato(item)

def locate_potato():
    # Function to find potatoes
    foreach location: item:
        if is_cupboard(location) or is_kitchen_counter(location) or is_fridge(location):
            if not visited(location):
                observe(location, "Check if there are any potatoes")

behavior peel_potato(potato: item):
    body:
        if is_food_potato(potato):
            grab(potato)

behavior __goal__():
    body:
        symbol have_potato=exists p: item: (is_food_potato(p) and inhand(p))
        if not have_potato:
            locate_potato()
            foreach p: item:
                if is_potato_food(p) and not inhand(p):
                    grab(p)
        # Assuming that the potato is now in hand after grabbing or inspecting
        peel_potato(symbol p)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato(o: item):
    symbol is_a_potato=exists p: item : is_food_potato(p) and o == p
    return is_a_potato

def has_peelable_potato(location: item):
    symbol has_potato=exists p: item : (is_potato(p) and close_char(char, location))
    return has_potato

behavior find_and_peel_potatoes(location: item):
    body:
        if not visited(location):
            observe(location, "Check if there are potatoes present")

        if has_peelable_potato(location):
            bind potato: item where:
                is_potato(potato) and close_char(char, location)
            grab(potato)
            empty_a_hand()

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        find_and_peel_potatoes(kitchen_counter)

        bind cupboard: item where:
            is_cupboard(cupboard)
        find_and_peel_potatoes(cupboard)

        bind fridge: item where:
            is_fridge(fridge)
        if is_on(fridge):
            switch_off(fridge)
        find_and_peel_potatoes(fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_potato(o: item):
    symbol is_a_potato=exists p: item : is_food_potato(p) and o == p
    return is_a_potato

def has_peelable_potato(location: item):
    symbol has_potato=exists p: item : (is_potato(p) and close_char(char, location))
    return has_potato

behavior find_and_peel_potatoes(location: item):
    body:
        if not visited(location):
            observe(location, "Check if there are potatoes present")

        if has_peelable_potato(location):
            bind potato: item where:
                is_potato(potato) and close_char(char, location)
            grab(potato)
            empty_a_hand()

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        find_and_peel_potatoes(kitchen_counter)

        bind cupboard: item where:
            is_cupboard(cupboard)
        find_and_peel_potatoes(cupboard)

        bind fridge: item where:
            is_fridge(fridge)
        if is_on(fridge):
            switch_off(fridge)
        find_and_peel_potatoes(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Check if there are potatoes present)walk_executor(cupboard_117)obs(cupboard_117, Check if there are potatoes present)walk_executor(fridge_126)obs(fridge_126, Check if there are potatoes present)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the kitchen_counter_119. 
##############################
From agent.py
obs(kitchen_counter_119, Check if there are potatoes present)
Get this information:  kitchen_counter_119 is inside dining_room_41. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2142 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. stove_2135 is on kitchen_counter_119. pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
obs(cupboard_117, Check if there are potatoes present)
Get this information:  coffee_filter_2053 is inside cupboard_117. cupboard_117 is inside dining_room_41. cupboard_117 is close to wall_64. cupboard_117 is close to tray_128. cupboard_117 is close to wall_67. cupboard_117 is close to coffee_filter_2053. cupboard_117 is close to walllamp_140. cupboard_117 is close to knifeblock_76. cupboard_117 is close to pot_78. cupboard_117 is close to walllamp_141. cupboard_117 is close to ceiling_55. cupboard_117 is close to ceiling_54. cupboard_117 is close to kitchen_counter_119. cupboard_117 is close to sink_120. cupboard_117 is close to faucet_121. cupboard_117 is close to kitchen_counter_123. cupboard_117 is close to stovefan_125. cupboard_117 is close to oven_127. cupboard_117 is close to character_240. cupboard_117 is on wall_67. cupboard_117 is CLEAN. cupboard_117 is OPEN.
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
obs(fridge_126, Check if there are potatoes present)
Get this information:  sauce_2148 is inside fridge_126. food_snack_2110 is inside fridge_126. fridge_126 is on floor_44. food_steak_2080 is inside fridge_126. food_donut_2091 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_vegetable_2113 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. fridge_126 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. food_food_2046 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_hamburger_2096 is inside fridge_126. food_potato_2107 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. fridge_126 is OPEN. fridge_126 is PLUGGED_IN. fridge_126 is CLEAN. fridge_126 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato. Currently, you have only identified the location of the food_potato_2107 in the fridge but have not grabbed or peeled it. Proceed to grab the potato and perform the peeling action.
##############################
From agent.py
Human Instruction: You need to peel the potato. Currently, you have only identified the location of the food_potato_2107 in the fridge but have not grabbed or peeled it. Proceed to grab the potato and perform the peeling action.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_potato_2107 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_potato_2107 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: Observe around kitchen_counter_119 with the question of Check if there are potatoes present.
Action 12: Walk to cupboard_117.
Action 13: Observe around cupboard_117 with the question of Check if there are potatoes present.
Action 14: Walk to fridge_126.
Action 15: Observe around fridge_126 with the question of Check if there are potatoes present.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_potato(potato:item):
    body:
        if not dirty(potato):
            cuts(potato) # Assuming cuts is used for peeling in this context

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and inside(potato, fridge_126)
        # Binding to the potato we identified in the fridge

        walk_to(fridge_126)
        # Since we already know the potato is in the fridge, we walk to it

        grab(potato)
        # Grab the identified potato

        peel_potato(potato)
        # Peel the potato

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_peel_potato(potato:item):
    body:
        if not inhand(potato):
            grab(potato)
        if not cut(potato):
            cuts(potato) # Assuming cuts(potato) represents peeling the potato

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge that contains the potato
        bind potato: item where:
            is_food_potato(potato) and inside(potato, fridge)
        # Select the potato inside the fridge
        walk_to(fridge)
        # Approach the fridge
        if not open(fridge):
            opens(fridge)
        # Open the fridge if its not open
        grab_and_peel_potato(potato)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_and_peel_potato(potato:item):
    body:
        if not inhand(potato):
            grab(potato)
        if not cut(potato):
            cuts(potato) # Assuming cuts(potato) represents peeling the potato

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge that contains the potato
        bind potato: item where:
            is_food_potato(potato) and inside(potato, fridge)
        # Select the potato inside the fridge
        walk_to(fridge)
        # Approach the fridge
        if not open(fridge):
            opens(fridge)
        # Open the fridge if its not open
        grab_and_peel_potato(potato)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato. Currently, the potato is only cut. Proceed to peel the potato to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to peel the potato. Currently, the potato is only cut. Proceed to peel the potato to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_potato_2107 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_potato_2107 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: Observe around kitchen_counter_119 with the question of Check if there are potatoes present.
Action 12: Walk to cupboard_117.
Action 13: Observe around cupboard_117 with the question of Check if there are potatoes present.
Action 14: Walk to fridge_126.
Action 15: Observe around fridge_126 with the question of Check if there are potatoes present.
Action 16: Walk to fridge_126.
Action 17: Walk to food_potato_2107.
Action 18: Grab food_potato_2107.
Action 19: Walk to cutting_board_2123.
Action 20: Put food_potato_2107 on cutting_board_2123.
Action 21: Walk to knife_2037.
Action 22: Grab knife_2037.
Action 23: Walk to food_potato_2107.
Action 24: Cut food_potato_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_potato(potato:item):
    body:
        if cut(potato) and not clean(potato):
            grab(potato)
            # Grab the cut potato to start peeling
            rinse(potato)
            # Rinse the potato if dirty
            grab(knife)
            # Grab the knife to start peeling
            cuts(potato)
            # Peel the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato that needs to be peeled
        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling
        peel_potato(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_potato(potato:item, knife:item):
    body:
        if inhand(potato) and inhand(knife):
            if cut(potato):
                observe(potato, "Check if potato is peeled")
            else:
                cuts(potato)
                observe(potato, "Check if potato is peeled")

behavior get_free_hand_and_grab(obj:item):
    body:
        if not has_a_free_hand(char):
            empty_a_hand()
        grab(obj)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind knife: item where:
            is_knife(knife)

        if not inhand(potato):
            get_free_hand_and_grab(potato)

        if not inhand(knife):
            get_free_hand_and_grab(knife)

        peel_potato(potato, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior peel_potato(potato:item, knife:item):
    body:
        if inhand(potato) and inhand(knife):
            if cut(potato):
                observe(potato, "Check if potato is peeled")
            else:
                cuts(potato)
                observe(potato, "Check if potato is peeled")

behavior get_free_hand_and_grab(obj:item):
    body:
        if not has_a_free_hand(char):
            empty_a_hand()
        grab(obj)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind knife: item where:
            is_knife(knife)

        if not inhand(potato):
            get_free_hand_and_grab(potato)

        if not inhand(knife):
            get_free_hand_and_grab(knife)

        peel_potato(potato, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)put_executor(food_potato_2107, cutting_board_2123)cut_executor(food_potato_2107)obs(food_potato_2107, Check if potato is peeled)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by left hand. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
obs(food_potato_2107, Check if potato is peeled)
Get this information:  food_potato_2107 is close to character_240. food_potato_2107 is close to cutting_board_2123. food_potato_2107 is inside dining_room_41. food_potato_2107 is on cutting_board_2123. food_potato_2107 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the potato is peeled. The potato has been cut but is not peeled yet. Proceed with peeling the potato.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato: item):
    # Function to check if the potato is peeled
    symbol is_peeled = visited(potato) and not cut(potato)
    return is_peeled

behavior peel_potato(potato: item):
    body:
        if not is_potato_peeled(potato):
            # If the potato is not peeled, check it and then proceed
            observe(potato, "Check if potato is peeled")
            # Assuming that observing the potato will reveal its peeled state

behavior cut_potato_into_fries(potato: item):
    body:
        if is_potato_peeled(potato):
            if not cut(potato):
                cuts(potato)
                # If the potato is peeled and not cut, cut it into fries

behavior __goal__():
    body:
        # Identifying the potato in the scene
        bind potato: item where:
            is_food_potato(potato)

        peel_potato(potato)
        cut_potato_into_fries(potato)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_potato_peeled(potato: item):
    # Function to check if the potato is peeled
    symbol is_peeled = visited(potato) and not cut(potato)
    return is_peeled

behavior peel_potato(potato: item):
    body:
        if not is_potato_peeled(potato):
            # If the potato is not peeled, check it and then proceed
            observe(potato, "Check if potato is peeled")
            # Assuming that observing the potato will reveal its peeled state

behavior cut_potato_into_fries(potato: item):
    body:
        if is_potato_peeled(potato):
            if not cut(potato):
                cuts(potato)
                # If the potato is peeled and not cut, cut it into fries

behavior __goal__():
    body:
        # Identifying the potato in the scene
        bind potato: item where:
            is_food_potato(potato)

        peel_potato(potato)
        cut_potato_into_fries(potato)

##############################
From agent.py-> find a plan in act()
obs(food_potato_2107, Check if potato is peeled)cut_executor(food_potato_2107)
##############################
From agent.py
obs(food_potato_2107, Check if potato is peeled)
Get this information:  food_potato_2107 is close to character_240. food_potato_2107 is close to cutting_board_2123. food_potato_2107 is inside dining_room_41. food_potato_2107 is on cutting_board_2123. food_potato_2107 is CLEAN.
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato before you can complete the task of cutting it into fries. The potato is currently only cut. Proceed to peel the potato to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to peel the potato before you can complete the task of cutting it into fries. The potato is currently only cut. Proceed to peel the potato to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_potato_2107 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_potato_2107 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: Observe around kitchen_counter_119 with the question of Check if there are potatoes present.
Action 12: Walk to cupboard_117.
Action 13: Observe around cupboard_117 with the question of Check if there are potatoes present.
Action 14: Walk to fridge_126.
Action 15: Observe around fridge_126 with the question of Check if there are potatoes present.
Action 16: Walk to fridge_126.
Action 17: Walk to food_potato_2107.
Action 18: Grab food_potato_2107.
Action 19: Walk to cutting_board_2123.
Action 20: Put food_potato_2107 on cutting_board_2123.
Action 21: Walk to knife_2037.
Action 22: Grab knife_2037.
Action 23: Walk to food_potato_2107.
Action 24: Cut food_potato_2107.
Action 25: Grab food_potato_2107.
Action 26: Put food_potato_2107 on cutting_board_2123.
Action 27: Cut food_potato_2107.
Action 28: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 29: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 30: Cut food_potato_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato:item):
    # Function to check if a potato is peeled
    symbol peeled=not exists o: item : (not cut(o) and on(o, potato))
    return peeled

def ready_to_cut(potato:item):
    # Return True if potato is peeled and ready for cutting
    return is_potato_peeled(potato) 

behavior peel_potato(potato:item):
    body:
        if not is_potato_peeled(potato):
            grab(potato)
            # Start the peeling process 

behavior cut_potato_into_fries(potato:item):
    body:
        if ready_to_cut(potato):
            cuts(potato)
            # Cut the peeled potato into fries

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato for processing
        peel_potato(potato)
        cut_potato_into_fries(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior peel_potato(food_potato:item):
    body:
        if exists knife: item : is_knife(knife) and has_a_free_hand(char) and inhand(food_potato):
            cuts(food_potato)
            # Peel the potato using the knife
        else:
            empty_a_hand()
            # Make sure you have a free hand to grab the knife or potato

behavior cut_potato_into_fries(food_potato:item):
    body:
        if is_cut(food_potato):
            # Potato is already peeled, proceed to cut
            symbol has_cutlery=exists knife: item : is_knife(knife)
            if has_cutlery:
                bind knife: item where:
                    is_knife(knife)
                grab(knife)
                if not cut(food_potato):
                    cuts(food_potato)
                    # Cut potato into fries
                else:
                    empty_a_hand()
                    # Ensure we have a free hand for other tasks

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        # Grab the potato
        if not close_char(char, food_potato):
            walk_to(food_potato)
        grab(food_potato)
        # Ensure potato is peeled before cutting
        peel_potato(food_potato)
        cut_potato_into_fries(food_potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_cut(potato:item):
    symbol cut_status=exists o: item : (is_food_potato(o) and cut(o))
    return cut_status

def is_potato_peeled(potato:item):
    symbol peeled_status=not exists o: item : (is_food_potato(o) and clean(o))
    return peeled_status

behavior peel_potato(potato:item):
    body:
        if not is_potato_peeled(potato):
            scrub(potato)

behavior cut_potato_into_fries(potato:item):
    body:
        if not is_potato_cut(potato):
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        if not is_potato_peeled(potato):
            peel_potato(potato)
        cut_potato_into_fries(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def has_been_cut(potato: item):
    symbol is_cut=exists obj: item : (is_food_potato(obj) and cut(obj))
    return is_cut

behavior peel_potato(potato: item):
    body:
        if not has_a_free_hand(char):
            empty_a_hand()
        grab(potato)
        # Assuming peeling action, which is not explicitly defined in keywords
        # Follow the guidance: You need to peel the potato before you can complete the task of cutting it into fries
        # Full implementation of peeling would be needed if the peeling process was defined
        empty_a_hand()

behavior cut_into_fries(potato: item):
    body:
        if not has_been_cut(potato):
            walk_to(potato)
            grab(potato)
            put_on(potato, cutting_board_2123)
            empty_a_hand()
            bind knife: item where:
                is_knife(knife)
            grab(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        observe(potato, "Check if potato is peeled")
        peel_potato(potato)
        cut_into_fries(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_unpeeled_potato():
    # Function to find a potato that is not yet peeled and is available on the cutting board
    symbol needs_peeling=exists potato: item : (is_food_potato(potato) and on(potato, cutting_board) and not visited(potato))
    return needs_peeling

behavior peel_potato(potato:item):
    body:
        # Observing to check if the potato needs peeling
        observe(potato,"Check if potato is peeled")
        # Assuming the potato needs peeling since the action to cut was already performed and peeling was necessary before cutting
        wash(potato)
        # After peeling by washing, put the potato back on the cutting board if handling multiple steps
        if inhand(potato):
            put_on(potato, cutting_board)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        if find_unpeeled_potato():
            bind potato: item where:
                is_food_potato(potato) and on(potato, cutting_board)
            peel_potato(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato:item):
    # Function to check if the potato is peeled
    symbol peeled=exists peel: item : (not inside(peel, potato))
    return peeled

behavior peel_potato(potato: item):
    # Define behavior to peel a potato
    body:
        if not is_potato_peeled(potato):
            # Logic to peel the potato
            grab(potato)
            # Assuming peeling is done manually and requires further actions

behavior cut_into_fries(potato:item):
    # Define behavior to cut potato into fries
    body:
        if is_potato_peeled(potato):
            grab(potato)
            walk_to(cutting_board_2123)
            put_on(potato, cutting_board_2123)
            bind knife: item where:
                is_knife(knife)
            grab(knife)
            walk_to(cutting_board_2123)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        peel_potato(potato)
        cut_into_fries(potato)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. cut the potatoes into fries." ?
Answer: Cut the potatoes into pieces suitable for making fries.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_potato_on_board(cutting_board:item):
    # Function to check if there is a potato on a specified cutting board
    symbol has_potato=exists o: item : (is_food_potato(o) and on(o, cutting_board))
    return has_potato

def has_knife_near_board(knife:item, cutting_board:item):
    # Function to check if there is a knife close to the cutting board
    symbol close_knife=exists k: item : (is_knife(k) and close(k, cutting_board))
    return close_knife

behavior ensure_potato_is_peeled(potato:item):
    body:
        if not cut(potato):
            observe(potato, "Check if potato is peeled") 
            if not cut(potato):
                cuts(potato)

behavior cut_potato_into_fries(potato:item, cutting_board:item, knife:item):
    body:
        if not cut(potato):
            put_on(potato, cutting_board)
            if not inhand(knife):
                grab(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind potato: item where:
            is_food_potato(potato) and has_potato_on_board(cutting_board)
        # Select a potato that is on the cutting board

        bind knife: item where:
            is_knife(knife) and has_knife_near_board(knife, cutting_board)
        # Select a knife that is close to the cutting board

        ensure_potato_is_peeled(potato)
        cut_potato_into_fries(potato, cutting_board, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
symbol potato_cut = exists potato:item: (is_food_potato(potato) and cut(potato))

behavior ensure_potato_cut(potato:item):
    body:
        if not cut(potato):
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)

        # Ensure the potato is cut into fries
        ensure_potato_cut(potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2103_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato:item):
    # Function to check if the potato is peeled
    symbol peeled=exists o: item : ((is_food_potato(o)) and not dirty(o))
    return peeled

behavior cut_potato_into_fries(potato:item, board:item, knife:item):
    body:
        if not cut(potato):
            if is_potato_peeled(potato):
                walk_to(potato)
                grab(potato)
                put_on(potato, board)
                walk_to(knife)
                grab(knife)
                cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potato_into_fries(potato, board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_potato_peeled(potato:item):
    # Function to check if the potato is peeled
    symbol peeled=exists o: item : ((is_food_potato(o)) and not dirty(o))
    return peeled

behavior cut_potato_into_fries(potato:item, board:item, knife:item):
    body:
        if not cut(potato):
            if is_potato_peeled(potato):
                walk_to(potato)
                grab(potato)
                put_on(potato, board)
                walk_to(knife)
                grab(knife)
                cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potato_into_fries(potato, board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Robot is close to the kitchen_counter_119. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by left hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Grabbing knife_2037 by left hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The potato needs to be peeled before it can be cut into fries. Proceed to peel the potato.
##############################
From agent.py
Human Instruction: The potato needs to be peeled before it can be cut into fries. Proceed to peel the potato.

Human Guidance: Cut the potatoes into pieces suitable for making fries.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_potato_2107 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_potato_2107 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: Observe around kitchen_counter_119 with the question of Check if there are potatoes present.
Action 12: Walk to cupboard_117.
Action 13: Observe around cupboard_117 with the question of Check if there are potatoes present.
Action 14: Walk to fridge_126.
Action 15: Observe around fridge_126 with the question of Check if there are potatoes present.
Action 16: Walk to fridge_126.
Action 17: Walk to food_potato_2107.
Action 18: Grab food_potato_2107.
Action 19: Walk to cutting_board_2123.
Action 20: Put food_potato_2107 on cutting_board_2123.
Action 21: Walk to knife_2037.
Action 22: Grab knife_2037.
Action 23: Walk to food_potato_2107.
Action 24: Cut food_potato_2107.
Action 25: Grab food_potato_2107.
Action 26: Put food_potato_2107 on cutting_board_2123.
Action 27: Cut food_potato_2107.
Action 28: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 29: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 30: Cut food_potato_2107.
Action 31: Walk to food_potato_2107.
Action 32: Grab food_potato_2107.
Action 33: Walk to cutting_board_2123.
Action 34: Put food_potato_2107 on cutting_board_2123.
Action 35: Walk to knife_2037.
Action 36: Grab knife_2037.
Action 37: Walk to food_potato_2107.
Action 38: Cut food_potato_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato:item):
    # Function to check if a potato is peeled
    symbol peeled=not exists potato_piece: item : (is_food_potato(potato_piece) and cut(potato_piece))
    return peeled

behavior cut_potatoes_into_fries(potato:item, cutting_board:item, knife:item):
    body:
        if not cut(potato):
            if not on(potato, cutting_board):
                put_on(potato, cutting_board)
            if not inhand(knife):
                grab(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
            
        if is_potato_peeled(potato):
            cut_potatoes_into_fries(potato, cutting_board, knife)
        else:
            observe(potato, "Check if potato is peeled")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cuttable_potato(potato: item):
    # Function to check if an item is a potato and can be cut
    return is_food_potato(potato) and cuttable(potato)

behavior grab_knife(knife: item):
    body:
        if not inhand(knife):
            grab(knife)

behavior cut_into_fries(potato: item, knife: item):
    body:
        if not cut(potato):
            grab_knife(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_cuttable_potato(potato)
        # Select a cuttable potato
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_into_fries(potato, knife)  
        # Cut the potato into fries

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cuttable_potato(potato: item):
    # Function to check if an item is a potato and can be cut
    return is_food_potato(potato) and cuttable(potato)

behavior grab_knife(knife: item):
    body:
        if not inhand(knife):
            grab(knife)

behavior cut_into_fries(potato: item, knife: item):
    body:
        if not cut(potato):
            grab_knife(knife)
            cuts(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_cuttable_potato(potato)
        # Select a cuttable potato
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_into_fries(potato, knife)  
        # Cut the potato into fries

##############################
From agent.py-> find a plan in act()
cut_executor(food_potato_2107)
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_frypan_on_stove(frypan:item, stove:item):
    # Function to check if a frypan is on the stove
    symbol on_stove=on(frypan, stove)
    return on_stove

behavior heat_oil(stove:item, oil:item):
    body:
        # Ensure the stove is turned on with oil ready for heating
        if is_off(stove):
            switch_on(stove)
        if not close_char(char, oil):
            walk_to(oil)
        if not inhand(oil):
            grab(oil)
        # Assume oil is in a container This action is to ensure it is placed in the frying pan
        # before heating starts
        bind frypan: item where:
            is_fryingpan(frypan) and is_frypan_on_stove(frypan, stove)
        if not inside(oil, frypan):
            put_inside(oil, frypan)
        empty_a_hand()

behavior fry_potatoes(frypan:item, potatoes:item):
    body:
        # Adding potatoes to the heated frying pan with oil
        if not inside(potatoes, frypan):
            put_inside(potatoes, frypan)

behavior check_golden_brown(potatoes:item):
    body:
        # Check if the potatoes are reaching the golden brown state
        observe(potatoes, "Check if potatoes are golden brown")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind frypan: item where:
            is_fryingpan(frypan) and is_frypan_on_stove(frypan, stove)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        
        heat_oil(stove, oil)
        fry_potatoes(frypan, potatoes)
        foreach potato: item:
            if is_food_potato(potato) and cut(potato) and inside(potato, frypan):
                check_golden_brown(potato)
                
        # After checking for golden brown, assume complete the task
        if is_on(stove):
            switch_off(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_light_283(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==283
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def find_heating_oil(oil:item):
    # Function to find oil suitable for frying
    symbol has_oil= exists o: item : (is_oil(o))
    return has_oil

behavior heat_oil(stove:item, pan:item, oil:item):
    body:
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove to heat the oil
        if not on(oil, pan):
            put_on(oil, pan)
            # Place the oil in the pan to heat it

behavior fry_potatoes(pan:item, stove:item, potatoes:item):
    body:
        if not is_on(stove):
            switch_on(stove)
            # Turn on the stove to fry potatoes
        if not inside(potatoes, pan):
            put_inside(potatoes, pan)
            # Place the potatoes in the pan to fry

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes ready for frying
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        if find_heating_oil(pan):
            # Find oil suitable for frying
            bind oil: item where:
                is_oil(oil)
            heat_oil(stove, pan, oil)
        fry_potatoes(pan, stove, potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potato:item, oil:item, frying_pan:item):
    body:
        if clean(frying_pan) and cut(potato) and inhand(oil):
            put_on(potato, frying_pan) # Place the cut potatoes in the frying pan
            switch_on(frying_pan) # Switch on the frying pan to start frying
            observe(potato, "Check if the potatoes are golden brown") # Observes when the potatoes turn golden brown

behavior prepare_frying(oil:item, frying_pan:item):
    body:
        if is_oil(oil) and is_fryingpan(frying_pan) and clean(frying_pan):
            walk_to(oil)
            grab(oil)
            walk_to(frying_pan)
            put_on(oil, frying_pan) # Put oil in the frying pan for frying

behavior ensure_frying_pan_clean_and_ready(frying_pan:item):
    body:
        if is_fryingpan(frying_pan) and dirty(frying_pan):
            scrub(frying_pan) # Clean the frying pan if its dirty

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)
        bind potato: item where:
            is_food_potato(potato) and cut(potato)

        ensure_frying_pan_clean_and_ready(frying_pan)
        prepare_frying(oil, frying_pan)
        fry_potatoes(potato, oil, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_gold_brown_potato(potato:item):
    # Function to check if the potato is golden brown
    symbol is_gold_brown=exists o: item : (is_food_potato(o) and is_food_food(o) and id[o] == id[potato] and close_char(char,o))
    return is_gold_brown

behavior fry_until_golden_brown(potato:item, frypan:item, stove:item):
    body:
        if not on(potato, frypan):
            put_on(potato, frypan) # Place the potatoes into the frying pan
        if is_food_food(potato) and not is_gold_brown_potato(potato):
            if is_off(stove):
                switch_on(stove) # Turn on the stove
            # Engage in logic or delay if needed for cooking until brown
            observe(potato, "Are the potatoes golden brown")
        else:
            if is_on(stove):
                switch_off(stove) # Switch off the stove after frying

behavior __goal__():
    body:
        bind frypan: item where:
            is_fryingpan(frypan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind potato: item where:
            is_food_potato(potato) and cut(potato) # Ensure the potato has been cut
        # Select cut potatoes
        fry_until_golden_brown(potato, frypan, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
# Define behavior to fry potatoes in a frying pan
behavior fry_potatoes_in_pan(potato_piece: item, frying_pan: item):
    body:
        if not cut(potato_piece):
            cuts(potato_piece) # Ensure potato pieces are cut before placing in the pan
        put_inside(potato_piece, frying_pan) # Place potato pieces inside the frying pan

# Define behavior to turn on the stove
behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

# Implement behavior to fry potatoes until golden brown
behavior fry_until_golden(stove: item, frying_pan: item):
    body:
        if not plugged(stove):
            plugin(stove) # Plug in the stove if not already plugged
        turn_on_stove(stove) # Make sure the stove is on
        watch(frying_pan) # Visual indicator to monitor the frying process until golden brown

# Main behavior to achieve the goal
behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) 
        # Select the potato, food_potato_2107
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        fry_potatoes_in_pan(potato, frying_pan) # Call behavior to fry potato pieces
        fry_until_golden(stove, frying_pan) # Call behavior to control frying process

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_cut_and_ready(potato:item):
    symbol is_cut_and_ready = cut(potato)
    return is_cut_and_ready

def is_fryingpan_on_stove(fryingpan:item):
    symbol is_on_stove = exists stove: item : (is_stove(stove) and on(fryingpan, stove))
    return is_on_stove

behavior prepare_frying_pan(fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior fry_potatoes(potato:item, fryingpan:item):
    body:
        if grabbable(fryingpan):
            grab(fryingpan)
            # Ensure we have the frying pan in hand
        if not on(potato, fryingpan):
            put_on(potato, fryingpan)
        # Allow the potatoes to fry can add logic for time delay if needed
        observe(potato, "Check if potatoes are golden brown")
        # Assumption: Observation determines when potatoes are golden brown
        
behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and is_potato_cut_and_ready(potato)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and grabbable(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        prepare_frying_pan(fryingpan, stove)
        fry_potatoes(potato, fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the potatoes until they are golden brown." ?
Answer: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a frying pan, put it on the stove, turn on the stove, add some oil, and put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_peeled(food_potato: item):
    # Function to check if the potato is peeled
    symbol peeled=not exists o: item : (is_knife(o) and close(o, food_potato)) and not cut(food_potato)
    return peeled

behavior find_and_prepare_fryingpan():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        walk_to(fryingpan)
        # Move the character closer to the frying pan
        if not close_char(char, fryingpan):
            grab(fryingpan)
            # Grab the frying pan
            walk_to(stove)
            # Move the frying pan close to the stove
            put_on(fryingpan, stove)

behavior prepare_oil_and_potatoes(fryingpan:item, stove: item):
    body:
        bind oil: item where:
            is_oil(oil)
        walk_to(oil)
        grab(oil)
        walk_to(fryingpan)
        put_close(oil, fryingpan)
        # Pour some oil into the frying pan
        if exists potato: item : (is_food_potato(potato) and close(potato, cutting_board)):
            grab(potato)
            put_on(potato, fryingpan)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind food_potato: item where:
            is_food_potato(food_potato)
        walk_to(food_potato)
        if not is_peeled(food_potato):
            grab(food_potato)
            walk_to(cutting_board)
            put_on(food_potato, cutting_board)
            grab(food_potato)
            cut(food_potato)
            put_on(food_potato, cutting_board)

        find_and_prepare_fryingpan()
        prepare_oil_and_potatoes(fryingpan, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_bread_2084_around_food_food_1000(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_bread,food_food_instance)
        else:
            exp(food_bread,food_food_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,food_food_instance]=True
        close[food_food_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_peeled(potato:item):
    symbol peeled=exists cut_item: item : (is_food_potato(cut_item) and cut(cut_item))
    return peeled

behavior find_and_place_frying_pan():
    body:
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        walk_to(frying_pan)
        grab(frying_pan)
        walk_to(stove)
        put_on(frying_pan, stove)

behavior add_oil_to_pan(frying_pan:item):
    body:
        bind oil: item where:
            is_oil(oil)
        if not inside(oil, frying_pan):
            walk_to(oil)
            grab(oil)
            walk_to(frying_pan)
            put_on(oil, frying_pan)

behavior switch_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_potato_to_pan(frying_pan:item):
    body:
        bind potato_pieces: item where:
            is_food_potato(potato_pieces) and cut(potato_pieces)
        if not inside(potato_pieces, frying_pan):
            walk_to(potato_pieces)
            grab(potato_pieces)
            walk_to(frying_pan)
            put_on(potato_pieces, frying_pan)

behavior __goal__():
    body:
        if not is_potato_peeled(food_potato_2107):
            walk_to(food_potato_2107)
            cuts(food_potato_2107)

        find_and_place_frying_pan()

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        add_oil_to_pan(frying_pan)

        bind stove: item where:
            is_stove(stove)
        switch_on_stove(stove)

        add_potato_to_pan(frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(fryingpan:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)

behavior prepare_stove(fryingpan:item, stove:item, oil:item, cut_potato:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)
        if not inside(oil, fryingpan):
            put_inside(oil, fryingpan)
        if not inside(cut_potato, fryingpan):
            put_inside(cut_potato, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind cut_potato: item where:
            is_food_potato(cut_potato) and cut(cut_potato)

        find_frying_pan(fryingpan)
        prepare_stove(fryingpan, stove, oil, cut_potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_stove(fryingpan:item, stove:item, oil:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove) # Place the frying pan on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if not has_water(oil): 
            get_water(oil) # Add oil to the pan

behavior put_potatoes_in_pan(potatoes:item, fryingpan:item):
    body:
        if not inside(potatoes, fryingpan):
            put_inside(potatoes, fryingpan) # Put potatoes in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        prepare_stove(fryingpan, stove, oil)
        put_potatoes_in_pan(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_lighter_2004_around_bathroom_cabinet_17(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(lighter,bathroom_cabinet_instance)
        else:
            exp(lighter,bathroom_cabinet_instance)
    eff:
        unknown[lighter]=False
        close[lighter,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,lighter]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_and_place_on_stove(frying_pan:item, stove:item):
    body:
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        grab(frying_pan)
        if not close_char(char, stove):
            walk_to(stove)
        put_on(frying_pan, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_oil_to_frying_pan(oil:item, frying_pan:item):
    body:
        if not close_char(char, oil):
            walk_to(oil)
        grab(oil)
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        put_close(oil, frying_pan)
        empty_a_hand()

behavior put_potato_pieces_in_frying_pan(potato_pieces:item, frying_pan:item):
    body:
        if not close_char(char, potato_pieces):
            walk_to(potato_pieces)
        grab(potato_pieces)
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        put_close(potato_pieces, frying_pan)

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind stove: item where:
            is_stove(stove)
        find_frying_pan_and_place_on_stove(frying_pan, stove)
        
        turn_on_stove(stove)
        
        bind oil: item where:
            is_oil(oil)
        add_oil_to_frying_pan(oil, frying_pan)
        
        bind potato_pieces: item where:
            is_food_potato(potato_pieces) and cut(potato_pieces)
        put_potato_pieces_in_frying_pan(potato_pieces, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_and_turn_on_stove(fryingpan: item, stove: item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if inhand(fryingpan):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior add_oil_and_put_potato_in_fryingpan(oil: item, potato: item, fryingpan: item):
    body:
        if not inhand(oil):
            grab(oil)
        if not on(oil, fryingpan):
            put_on(oil, fryingpan)
        if cut(potato) and not on(potato, fryingpan):
            if not inhand(potato):
                grab(potato)
            put_on(potato, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potato: item where:
            is_food_potato(potato)

        find_frying_pan_and_turn_on_stove(fryingpan, stove)
        add_oil_and_put_potato_in_fryingpan(oil, potato, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan_and_turn_on_stove(fryingpan: item, stove: item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if inhand(fryingpan):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior add_oil_and_put_potato_in_fryingpan(oil: item, potato: item, fryingpan: item):
    body:
        if not inhand(oil):
            grab(oil)
        if not on(oil, fryingpan):
            put_on(oil, fryingpan)
        if cut(potato) and not on(potato, fryingpan):
            if not inhand(potato):
                grab(potato)
            put_on(potato, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potato: item where:
            is_food_potato(potato)

        find_frying_pan_and_turn_on_stove(fryingpan, stove)
        add_oil_and_put_potato_in_fryingpan(oil, potato, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)walk_executor(kitchen_counter_119)put_executor(knife_2037, kitchen_counter_119)switchon_executor(stove_2135)walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the knife_2037. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)walk_executor(kitchen_counter_119)put_executor(knife_2037, kitchen_counter_119)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(knife_2037, kitchen_counter_119)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close knife_2037. knife_2037 is close kitchen_counter_119. knife_2037 is on kitchen_counter_119. knife_2037 released by left hand. knife_2037 released by right hand. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)put_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 is on fryingpan_2154. oil_2149 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the potato pieces in the frying pan.
##############################
From agent.py
Human Instruction: You need to place the potato pieces in the frying pan.

Human Guidance: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_potato_2107 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_potato_2107 around cupboard_118.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_potato_2107 around fridge_126.
Action 10: Walk to kitchen_counter_119.
Action 11: Observe around kitchen_counter_119 with the question of Check if there are potatoes present.
Action 12: Walk to cupboard_117.
Action 13: Observe around cupboard_117 with the question of Check if there are potatoes present.
Action 14: Walk to fridge_126.
Action 15: Observe around fridge_126 with the question of Check if there are potatoes present.
Action 16: Walk to fridge_126.
Action 17: Walk to food_potato_2107.
Action 18: Grab food_potato_2107.
Action 19: Walk to cutting_board_2123.
Action 20: Put food_potato_2107 on cutting_board_2123.
Action 21: Walk to knife_2037.
Action 22: Grab knife_2037.
Action 23: Walk to food_potato_2107.
Action 24: Cut food_potato_2107.
Action 25: Grab food_potato_2107.
Action 26: Put food_potato_2107 on cutting_board_2123.
Action 27: Cut food_potato_2107.
Action 28: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 29: Observe around food_potato_2107 with the question of Check if potato is peeled.
Action 30: Cut food_potato_2107.
Action 31: Walk to food_potato_2107.
Action 32: Grab food_potato_2107.
Action 33: Walk to cutting_board_2123.
Action 34: Put food_potato_2107 on cutting_board_2123.
Action 35: Walk to knife_2037.
Action 36: Grab knife_2037.
Action 37: Walk to food_potato_2107.
Action 38: Cut food_potato_2107.
Action 39: Cut food_potato_2107.
Action 40: Walk to kitchen_counter_123.
Action 41: look for fryingpan_2154 around kitchen_counter_123.
Action 42: Walk to stove_2135.
Action 43: Walk to kitchen_counter_119.
Action 44: Put knife_2037 on kitchen_counter_119.
Action 45: Open stove_2135.
Action 46: look for fryingpan_2154 around stove_2135.
Action 47: Walk to kitchen_counter_122.
Action 48: look for fryingpan_2154 around kitchen_counter_122.
Action 49: Walk to fryingpan_2154.
Action 50: Walk to stove_2135.
Action 51: Switch on stove_2135.
Action 52: Walk to oil_2149.
Action 53: Grab oil_2149.
Action 54: Walk to fryingpan_2154.
Action 55: Put oil_2149 on fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_near_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is near the stove
    symbol is_near_stove= close(fryingpan, stove)
    return is_near_stove

def can_continue_frying():
    # Function to check if the stove is on, oil is in the pan and has free hand (assuming some cookware is in the hand now)
    return is_on(stove_2135)

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        if not on(oil, pan):
            put_on(oil, pan)

behavior fry_potatoes(potato:item, pan:item):
    body:
        if not on(potato, pan):
            put_on(potato, pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        # Move the frying pan close to the stove only if its not already there
        if not is_fryingpan_near_stove(fryingpan, stove):
            walk_to(fryingpan)
            walk_to(stove)
            put_close(fryingpan, stove)
        
        # Turn on the stove if its not already on
        if is_off(stove):
            switch_on(stove)
        
        # Grab oil and put it in the pan
        bind oil: item where:
            is_oil(oil)
        walk_to(oil)
        grab(oil)
        walk_to(fryingpan)
        put_oil_in_pan(oil, fryingpan)
        empty_a_hand()

        # Fry potato pieces if the stove is on and frying pan is ready with oil
        if can_continue_frying():
            bind potato: item where:
                is_food_potato(potato) and cut(potato)
            walk_to(potato)
            grab(potato)
            walk_to(fryingpan)
            fry_potatoes(potato, fryingpan)
            empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_food_butter_2007_around_dishwasher_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_butter,dishwasher_instance)
        else:
            exp(food_butter,dishwasher_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,dishwasher_instance]=True
        close[dishwasher_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_fryingpan_and_put_on_stove(fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            grab(fryingpan)
            put_on(fryingpan, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_oil_to_fryingpan(oil:item, fryingpan:item):
    body:
        if not inside(oil, fryingpan):
            grab(oil)
            put_on(oil, fryingpan)

behavior put_potatoes_in_fryingpan(potatoes:item, fryingpan:item):
    body:
        if not inside(potatoes, fryingpan):
            grab(potatoes)
            put_on(potatoes, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        
        find_fryingpan_and_put_on_stove(fryingpan, stove)
        turn_on_stove(stove)
        add_oil_to_fryingpan(oil, fryingpan)
        put_potatoes_in_fryingpan(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_bowl_2140(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(knife,bowl_instance)
        else:
            exp(knife,bowl_instance)
    eff:
        unknown[knife]=False
        close[knife,bowl_instance]=True
        close[bowl_instance,knife]=True
    

behavior find_oil_2013_around_food_salt_2041(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(oil,food_salt_instance)
        else:
            exp(oil,food_salt_instance)
    eff:
        unknown[oil]=False
        close[oil,food_salt_instance]=True
        close[food_salt_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_fryingpan_and_put_on_stove(fryingpan:item, stove:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not close_char(char, stove):
            move(fryingpan)
            put_on(fryingpan, stove)

behavior add_oil_and_potatoes(fryingpan:item, oil:item, potatoes:item):
    body:
        if not inhand(oil):
            grab(oil)
        put_on(oil, fryingpan)
        empty_a_hand()
        if not inhand(potatoes):
            grab(potatoes)
        put_on(potatoes, fryingpan)
        empty_a_hand()

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        
        find_fryingpan_and_put_on_stove(fryingpan, stove)
        
        if is_off(stove):
            switch_on(stove)
        
        add_oil_and_potatoes(fryingpan, oil, potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(frying_pan: item, stove: item):
    body:
        if not close(frying_pan, stove):
            walk_to(frying_pan)

behavior place_on_stove(frying_pan: item, stove: item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior add_oil_to_pan(frying_pan: item, oil: item):
    body:
        if not on(oil, frying_pan):
            put_on(oil, frying_pan)

behavior cook_potatoes(potato: item, frying_pan: item):
    body:
        if not on(potato, frying_pan):
            put_on(potato, frying_pan)

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
            
        bind stove: item where:
            is_stove(stove)
        
        bind oil: item where:
            is_oil(oil)
        
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        
        find_frying_pan(frying_pan, stove)
        place_on_stove(frying_pan, stove)
        switch_on(stove)
        add_oil_to_pan(frying_pan, oil)
        cook_potatoes(potato, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_bench_115(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(knife,bench_instance)
        else:
            exp(knife,bench_instance)
    eff:
        unknown[knife]=False
        close[knife,bench_instance]=True
        close[bench_instance,knife]=True
    

behavior find_oil_2013_around_pot_78(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior find_frying_pan():
    body:
        if not exists fryingpan: item: (is_fryingpan(fryingpan) and visited(fryingpan)):
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if its a frying pan and its location")

behavior put_frying_pan_on_stove(fryingpan: item, stove: item):
    body:
        if not on(fryingpan, stove):
            walk_to(fryingpan)
            grab(fryingpan)
            walk_to(stove)
            put_on(fryingpan, stove)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_oil_to_pan(oil: item, fryingpan: item):
    body:
        if not on(oil, fryingpan):
            grab(oil)
            walk_to(fryingpan)
            put_on(oil, fryingpan)

behavior put_potato_pieces_in_pan(potato: item, fryingpan: item):
    body:
        if not on(potato, fryingpan):
            grab(potato)
            walk_to(fryingpan)
            put_on(potato, fryingpan)

behavior __goal__():
    body:
        symbol has_frying_pan_visited=exists fryingpan: item: (is_fryingpan(fryingpan) and visited(fryingpan))
        if not has_frying_pan_visited:
            find_frying_pan()
            
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
            
        bind oil: item where:
            is_oil(oil)
            
        bind potato: item where:
            is_food_potato(potato) and cut(potato)

        put_frying_pan_on_stove(fryingpan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, fryingpan)
        put_potato_pieces_in_pan(potato, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_place_pan_on_stove(fryingpan:item, stove:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan) # Walk to the frying pan
        if not close(fryingpan, stove):
            walk_to(stove) # Walk to the stove to place the frying pan close to it
            put_close(fryingpan, stove) 

behavior turn_on_stove(stove:item):
    body:
        if not is_on(stove):
            switch_on(stove) # Turn on the stove

behavior add_oil_and_place_potatoes(fryingpan:item, oil:item, potatoes:item):
    body:
        if not inhand(oil):
            grab(oil) # Grab the oil to add it into the frying pan
        if not on(oil, fryingpan):
            put_on(oil, fryingpan) # Add oil into the frying pan
        if not inhand(potatoes):
            grab(potatoes) # Grab the potatoes to put them in the frying pan
        if not on(potatoes, fryingpan):
            put_on(potatoes, fryingpan) # Place the potato pieces in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)
            
        find_and_place_pan_on_stove(fryingpan, stove)
        turn_on_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        add_oil_and_place_potatoes(fryingpan, oil, potatoes)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find a frying pan, put it on the stove, turn on the stove, add some oil, and put the potato pieces in the frying pan." ?
Answer: Find a frying pan and put it on the stove. Turn on the stove, add some oil, and put the potato pieces in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        walk_to(frying_pan)

behavior place_frying_pan_on_stove(frying_pan:item, stove:item):
    body:
        if not on(frying_pan, stove):
            if not close_char(char, stove):
                walk_to(stove)
            put_on(frying_pan, stove)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_oil_to_pan(oil:item, frying_pan:item):
    body:
        if not inhand(oil):
            grab(oil)
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        put_on(oil, frying_pan)
        empty_a_hand()

behavior place_potatoes_in_pan(potatoes:item, frying_pan:item):
    body:
        if not inhand(potatoes):
            grab(potatoes)
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        put_on(potatoes, frying_pan)
        empty_a_hand()

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        
        find_frying_pan()
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and not visited(frying_pan)
        
        place_frying_pan_on_stove(frying_pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, frying_pan)
        place_potatoes_in_pan(potatoes, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_bowl_2142(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_fryingpan_and_place_on_stove():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if not on(fryingpan, stove):
            walk_to(fryingpan)
            grab(fryingpan)
            walk_to(stove)
            put_on(fryingpan, stove)

behavior add_oil_to_fryingpan(oil:item, fryingpan:item):
    body:
        if not on(oil, fryingpan):
            walk_to(oil)
            grab(oil)
            walk_to(fryingpan)
            put_on(oil, fryingpan)

behavior place_potato_in_fryingpan(potato:item, fryingpan:item):
    body:
        if not on(potato, fryingpan):
            walk_to(potato)
            grab(potato)
            walk_to(fryingpan)
            put_on(potato, fryingpan)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        find_fryingpan_and_place_on_stove()
        switch_on(stove)
        add_oil_to_fryingpan(oil, fryingpan)
        
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        # Select the potato pieces
        place_potato_in_fryingpan(potato, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_then_fry_potatoes(frying_pan:item, stove:item, oil:item, potatoes:item):
    body:
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        if not close_char(char, stove):
            put_on(frying_pan, stove)
        if not is_on(stove):
            switch_on(stove)
        if not inhand(oil):
            grab(oil)
        put_on(oil, frying_pan) # Pour oil into the frying pan
        empty_a_hand()
        if not inhand(potatoes):
            walk_to(potatoes)
            grab(potatoes)
        put_on(potatoes, frying_pan) # Put potato pieces in the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        
        bind stove: item where:
            is_stove(stove)
        
        bind oil: item where:
            is_oil(oil)
        
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        find_frying_pan_then_fry_potatoes(frying_pan, stove, oil, potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_and_prep_stove(stove:item, frying_pan:item):
    body:
        if not close_char(char, frying_pan):
            walk_to(frying_pan)
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior turn_on_stove(stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior add_oil_and_potatoes(frying_pan:item, oil:item, potatoes:item):
    body:
        if not inhand(oil):
            grab(oil) 
        if not close(oil, frying_pan):
            put_on(oil, frying_pan)
        empty_a_hand() # Ensure hand is free for potatoes
        if not inhand(potatoes):
            grab(potatoes)
        put_on(potatoes, frying_pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind frying_pan: item where:
            is_fryingpan(frying_pan)

        bind oil: item where:
            is_oil(oil)
        
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        find_frying_pan_and_prep_stove(stove, frying_pan)
        turn_on_stove(stove)
        add_oil_and_potatoes(frying_pan, oil, potatoes)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

behavior find_oil_2013_around_food_salt_2041(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(oil,food_salt_instance)
        else:
            exp(oil,food_salt_instance)
    eff:
        unknown[oil]=False
        close[oil,food_salt_instance]=True
        close[food_salt_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_frying_pan():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        walk_to(fryingpan) # Move towards the frying pan

behavior place_on_stove(inhand_obj: item, stove: item):
    body:
        if not on(inhand_obj, stove):
            put_on(inhand_obj, stove) # Place the frying pan on the stove

behavior add_oil_stir_fry(oil:item, fryingpan:item):
    body:
        if pourable(oil):
            put_on(oil, fryingpan) # Pour oil into the frying pan

behavior fry_potato(potato_pieces: item, fryingpan: item):
    body:
        if not inside(potato_pieces, fryingpan):
            put_on(potato_pieces, fryingpan) # Place the potato pieces into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        locate_frying_pan() # Locate the frying pan
        bind oil: item where:
            is_oil(oil)
        walk_to(stove) # Move to the stove
        switch_on(stove) # Turn on the stove
        add_oil_stir_fry(oil, fryingpan) # Pour oil into frying pan
        bind potato_pieces: item where:
            is_food_potato(potato_pieces) and cut(potato_pieces)
        fry_potato(potato_pieces, fryingpan) # Add potato pieces to frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_and_prepare_potatoes():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        if not close_char(char, stove):
            walk_to(stove)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior add_oil_and_potatoes(oil: item, potatoes: item, fryingpan: item):
    body:
        if not inhand(oil):
            grab(oil)
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        put_on(oil, fryingpan)
        empty_a_hand()
        grab(potatoes)
        put_on(potatoes, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind oil: item where:
            is_oil(oil)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        find_frying_pan_and_prepare_potatoes()
        add_oil_and_potatoes(oil, potatoes, fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(fridge_126)', 'walk_executor(fridge_126)', 'walk_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'put_executor(food_potato_2107, cutting_board_2123)', 'cut_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(kitchen_counter_123)', 'walk_executor(stove_2135)', 'walk_executor(kitchen_counter_119)', 'put_executor(knife_2037, kitchen_counter_119)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'put_executor(oil_2149, fryingpan_2154)']
Time info:
Time consume: 873 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 44
goal correct times: 0
action_num: 44

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
