From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and fresh onion in the kitchen.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_kitchen(obj:item):
    # Determine if an object is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(obj, room))
    return in_kitchen

behavior __goal__():
    body:
        # Check if the kitchen contains a chicken
        if not exists chicken: item : (is_food_chicken(chicken) and is_in_kitchen(chicken)):
            foreach kitchen_obj: item:
                if is_in_kitchen(kitchen_obj) and not visited(kitchen_obj):
                    observe(kitchen_obj, "Check is there any chicken")

        # Check if the kitchen contains an onion
        if not exists onion: item : (is_food_onion(onion) and is_in_kitchen(onion)):
            foreach kitchen_obj: item:
                if is_in_kitchen(kitchen_obj) and not visited(kitchen_obj):
                    observe(kitchen_obj, "Check is there any onion")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def find_chicken_in_kitchen():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Ensure the chicken is observed
        if not visited(chicken):
            observe(chicken, "Observe the chicken to find it and check its location")

def find_onion_in_kitchen():
    body:
        # Locate the onion in the kitchen and ensure it is observed
        bind onion: item where:
            is_food_onion(onion)
        if not visited(onion):
            observe(onion, "Observe the onion to find it and check its location")

behavior __goal__():
    body:
        find_chicken_in_kitchen()
        find_onion_in_kitchen()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(item: item):
    # Function to check if an item is on the kitchen counter
    symbol on_kitchen_counter=exists counter: item : (is_kitchen_counter(counter) and on(item, counter))
    return on_kitchen_counter

behavior inspect_kitchen_for_items():
    body:
        foreach item: item:
            if is_food_chicken(item) or is_food_onion(item) and not visited(item):
                observe(item,"Check if the item is a chicken or onion and is fresh")

behavior __goal__():
    body:
        if exists chicken: item : is_food_chicken(chicken) and in_kitchen_counter(chicken):
            walk_to(chicken)
        else:
            inspect_kitchen_for_items()

        if exists onion: item : is_food_onion(onion) and in_kitchen_counter(onion):
            walk_to(onion)
        else:
            inspect_kitchen_for_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior find_chicken():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Ensure that the search is focused around the kitchen area

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                observe(chicken, "Determine location in the kitchen")

behavior find_onion():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Ensure that the search is focused around the kitchen area

        foreach onion: item:
            if is_food_onion(onion) and not visited(onion):
                observe(onion, "Determine location in the kitchen")

behavior __goal__():
    body:
        find_chicken()
        find_onion()

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_chicken():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Ensure that the search is focused around the kitchen area

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                observe(chicken, "Determine location in the kitchen")

behavior find_onion():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Ensure that the search is focused around the kitchen area

        foreach onion: item:
            if is_food_onion(onion) and not visited(onion):
                observe(onion, "Determine location in the kitchen")

behavior __goal__():
    body:
        find_chicken()
        find_onion()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_chicken_2089, kitchen_counter_119)walk_executor(food_chicken_2089)obs(food_chicken_2089, Determine location in the kitchen)walk_executor(kitchen_counter_119)exp(food_onion_2104, kitchen_counter_119)walk_executor(food_onion_2104)obs(food_onion_2104, Determine location in the kitchen)walk_executor(kitchen_counter_119)exp(food_onion_2009, kitchen_counter_119)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(kitchen_counter_119)exp(food_onion_2048, kitchen_counter_119)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_chicken_2089, kitchen_counter_119)
Fail to find food_chicken_2089 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, Determine location in the kitchen)walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_onion_2104, cupboard_118)walk_executor(food_onion_2104)obs(food_onion_2104, Determine location in the kitchen)walk_executor(cupboard_118)exp(food_onion_2009, cupboard_118)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(cupboard_118)exp(food_onion_2048, cupboard_118)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Determine location in the kitchen)obs(food_onion_2104, Determine location in the kitchen)walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_onion_2009, cupboard_118)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
obs(food_chicken_2089, Determine location in the kitchen)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
obs(food_onion_2104, Determine location in the kitchen)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_onion_2009, cupboard_118)
Fail to find food_onion_2009 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_onion_2009, cupboard_117)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_onion_2009, cupboard_117)
Fail to find food_onion_2009 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_121)exp(food_onion_2009, faucet_121)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_onion_2009, faucet_121)
Fail to find food_onion_2009 around faucet_121. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(food_onion_2009, couch_198)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(couch_198)
Robot find: chair_2003, instrument_guitar_2028, rag_2052, mat_203, phone_2016, clothes_jacket_2119, Robot is close to the couch_198. 
##############################
From agent.py
exp(food_onion_2009, couch_198)
Fail to find food_onion_2009 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_onion_2009, kitchen_counter_123)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_onion_2009 ?
Answer: The target item, food_onion_2009, is inside trashcan_99, which is located in dining_room_41. Please proceed to dining_room_41 and search inside trashcan_99 to find the target item.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, food_onion_2009, is inside trashcan_99, which is located in dining_room_41. Please proceed to dining_room_41 and search inside trashcan_99 to find the target item.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_chicken_2089 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_chicken_2089 around fridge_126.
Action 7: Observe around food_chicken_2089 with the question of Determine location in the kitchen.
Action 8: Observe around food_onion_2104 with the question of Determine location in the kitchen.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for food_onion_2009 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for food_onion_2009 around cupboard_117.
Action 14: Walk to faucet_121.
Action 15: look for food_onion_2009 around faucet_121.
Action 16: Walk to couch_198.
Action 17: look for food_onion_2009 around couch_198.
Action 18: Walk to kitchen_counter_123.

##############################
From agent.py
exp(food_onion_2009, kitchen_counter_123)
Fail to find food_onion_2009 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(food_onion_2009, trashcan_99)walk_executor(food_onion_2009)obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: food_orange_2061, food_onion_2009, glue_2045, vacuum_cleaner_2139, Robot is close to the trashcan_99. Robot is close to the food_orange_2061. Robot is close to the food_onion_2009. Robot is close to the glue_2045. 
##############################
From agent.py
exp(food_onion_2009, trashcan_99)
Find food_onion_2009. 
##############################
From agent.py-> find a plan in act()
obs(food_onion_2009, Determine location in the kitchen)walk_executor(food_onion_2048)obs(food_onion_2048, Determine location in the kitchen)
##############################
From agent.py
obs(food_onion_2009, Determine location in the kitchen)
Get this information:  food_onion_2009 is close to trashcan_99. food_onion_2009 is close to character_240. food_onion_2009 is inside dining_room_41. food_onion_2009 is inside trashcan_99. food_onion_2009 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2048)
Robot find: Robot is close to the food_onion_2048. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_onion_2048, Determine location in the kitchen)
Get this information:  food_onion_2048 is inside dining_room_41. food_onion_2048 is inside fridge_126. food_onion_2048 is close to fridge_126. food_onion_2048 is close to character_240. food_onion_2048 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(item_chicken:item, item_onion:item, oven:item):
    body:
        if not inside(item_chicken, oven):
            put_inside(item_chicken, oven)
        if not inside(item_onion, oven):
            put_inside(item_onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select onion
        bind oven: item where:
            is_oven(oven)
        # Select oven
        place_in_oven(chicken, onion, oven)
        # Place chicken and onion in the oven

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(item_chicken:item, item_onion:item, oven:item):
    body:
        if not inside(item_chicken, oven):
            put_inside(item_chicken, oven)
        if not inside(item_onion, oven):
            put_inside(item_onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select onion
        bind oven: item where:
            is_oven(oven)
        # Select oven
        place_in_oven(chicken, onion, oven)
        # Place chicken and onion in the oven

##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(oven_127)putin_executor(food_chicken_2089, oven_127)walk_executor(food_onion_2104)grab_executor(food_onion_2104)walk_executor(oven_127)putin_executor(food_onion_2104, oven_127)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. 
##############################
From agent.py
putin_executor(food_chicken_2089, oven_127)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is close food_chicken_2089. food_chicken_2089 is inside oven_127. food_chicken_2089 is close oven_127. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the food_onion_2104. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_onion_2104)
Robot find: Robot is close to the food_onion_2104. Robot is close to the fridge_126. Grabbing food_onion_2104 by right hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the food_onion_2104. Robot is close to the tray_128. Robot is close to the food_chicken_2089. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. 
##############################
From agent.py
putin_executor(food_onion_2104, oven_127)
Robot find: Robot is close to the food_onion_2104. Robot is close to the tray_128. Robot is close to the food_chicken_2089. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. food_onion_2104 is close oven_127. oven_127 is close food_onion_2104. food_onion_2104 is inside oven_127. food_onion_2104 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(faucet_121)', 'walk_executor(couch_198)', 'walk_executor(kitchen_counter_123)', 'walk_executor(trashcan_99)', 'walk_executor(food_onion_2048)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(oven_127)', 'putin_executor(food_chicken_2089, oven_127)', 'walk_executor(food_onion_2104)', 'grab_executor(food_onion_2104)', 'walk_executor(oven_127)', 'putin_executor(food_onion_2104, oven_127)']
Time info:
Time consume: 159 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
