[
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and pour milk into it.",
        "cdl": " \nbehavior find_cup_and_milk(cup:item, milk:item):\n    body:\n        achieve_once close_char(char, cup)\n        achieve_once inhand(cup) \n        # Pick the cup up to pour milk\n\nbehavior pour_milk(cup:item, milk:item):\n    body:\n        achieve_once inside(milk, cup)\n        # Pour milk into the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        find_cup_and_milk(cup, milk)\n        pour_milk(cup, milk)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \ndef is_milk(x: item):\n    return True # Assume it is milk when is_milk(x) is called, indicating the item is milk\n\ndef is_cup(x: item):\n    return True # Assume it is a cup when is_cup(x) is called, indicating the item is a cup\n\ndef has_milk(x: item):\n    # Function to check if a cup has milk\n    symbol contains_milk= exists o: item: (is_milk(o) and inside(o, x))\n    return contains_milk\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave) # Place the cup inside the microwave\n        achieve_once closed(microwave) # Close the microwave door\n        achieve_once is_on(microwave) # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_milk(cup)\n        # Select the cup with milk\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n        heat_milk_in_microwave(cup, microwave) # Heat the milk in the microwave\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve_once cut(chicken) # Cut the chicken\n\nbehavior put_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge) # Place the chicken inside the fridge\n        achieve_once closed(fridge) # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n        cut_chicken(chicken, cutting_board)\n        put_in_fridge(chicken, fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge with items inside.",
        "cdl": "\ndef has_items_inside(fridge: item):\n    # Check if the fridge has any items inside\n    symbol has_items= exists o: item : (inside(o, fridge))\n    return has_items\n\nbehavior __goal__():\n    body:\n        if exists fridge: item : (is_fridge(fridge) and has_items_inside(fridge)):\n            # If theres a known fridge with items, approach it\n            bind fridge: item where:\n                is_fridge(fridge) and has_items_inside(fridge)\n            achieve close_char(char, fridge)\n        \n        else:\n            # Explore unvisited items to locate a fridge with items\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge, \"Check if there are items inside the fridge\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Move all items from the fridge to the trashcan.",
        "cdl": " \ndef is_item_in_fridge(item: item, fridge: item):\n    # Function to check if an item is inside the specified fridge\n    symbol in_fridge = exists i: item : (inside(i, fridge) and i == item)\n    return in_fridge\n\nbehavior move_item_to_trash(item: item, trashcan: item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Place the specified item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge, assumed to be fridge_289\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach item: item:\n            if not inhand(item) and inside(item, fridge):\n                # Get items from fridge and move them to the trashcan\n                move_item_to_trash(item, trashcan)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play the music.",
        "cdl": " \nbehavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player)\n        # Insert the CD into the CD player\n        achieve_once closed(cd_player)\n        # Ensure the CD player is closed\n        achieve_once is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n        \n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n        \n        insert_cd_and_play(cd, cd_player)\n        # Insert the CD into the CD player and play the music\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Gently wet the cat with lukewarm water, using a cup or a gentle stream.",
        "cdl": " \ndef is_lukewarm_water(water: item):\n    # Check if the water is lukewarm\n    return True  # Assume the water is lukewarm for the purpose of this task\n\nbehavior gently_wet_cat(cat: item, water_source: item, cup: item):\n    body:\n        if has_water(cup) and is_lukewarm_water(cup):\n            # Use the cup with lukewarm water to wet the cat gently\n            achieve_once has_water(cat)\n        else:\n            # If the cup doesnt have lukewarm water, switch on faucet for a gentle stream\n            achieve_once is_on(water_source)\n            achieve_once has_water(cat)\n\nbehavior __goal__():\n    body:\n        bind water_source: item where:\n            is_faucet(water_source) and id[water_source] == 43\n        # Select the water source, the faucet with ID 43\n\n        bind cat: item where:\n            is_cat(cat) and close(cat, water_source)\n        # Select the cat, assuming its close to the specified water source\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        gently_wet_cat(cat, water_source, cup)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "4. Rinse off the shampoo completely with lukewarm water.",
        "cdl": " \nbehavior rinse_cat(cat:item, faucet:item):\n    body:\n        achieve is_on(faucet) # Ensure the faucet is on\n        achieve has_water(cat) # Ensure water rinses the cat to remove shampoo\n        achieve clean(cat) # Ensure the shampoo is fully rinsed off and the cat is clean\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2055\n        # Select the cat with ID 2055\n        \n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet] == 43\n        # Select the faucet with ID 43\n        \n        rinse_cat(cat, faucet) # Rinse the cat with the faucet\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_bedroom_light(bedroom_light:item):\n    body:\n        achieve is_on(bedroom_light)\n\nbehavior turn_on_bathroom_light(bathroom_light:item):\n    body:\n        achieve is_on(bathroom_light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Define bedroom\n\n        bind bedroom_light: item where:\n            is_light(bedroom_light) and inside(bedroom_light, bedroom)\n        # Select the light in the bedroom\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Define bathroom\n\n        bind bathroom_light: item where:\n            is_light(bathroom_light) and inside(bathroom_light, bathroom)\n        # Select the light in the bathroom\n\n        turn_on_bedroom_light(bedroom_light)\n        turn_on_bathroom_light(bathroom_light)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes.",
        "cdl": " \ndef is_basket_for_clothes_with_clothes(basket: item):\n    # Function to check if the basket contains clothes\n    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)):\n            # Check if there is a basket for clothes containing clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)\n            # Select the basket with clothes\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else:\n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are clothes inside this basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add clothes from the basket into the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in the specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Place the clothes inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n        # Select the basket for clothes that contains clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n        \n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n        # Load all clothes from the basket into the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_machine(soap:item, washing_machine:item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Place the soap inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap)\n        # Select the soap\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        # Select the washing machine with ID 2007\n\n        add_soap_to_machine(soap, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior run_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Close the washing machine door before starting it\n        achieve is_on(washing_machine)\n        # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        run_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water.",
        "cdl": " \nbehavior prepare_bowl_of_water(bowl:item):\n    body:\n        achieve has_water(bowl)\n        # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl\n        prepare_bowl_of_water(bowl)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl on the table in the home office.",
        "cdl": " \nbehavior put_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve_once on(bowl, table)\n        # Place the bowl of water on the designated table in the home office\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and has_water(bowl)\n        # Select the bowl with water\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table located in the home office\n\n        put_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat.",
        "cdl": " \ndef is_cat_nearby(cat:item):\n    # Function to check if the cat is near\n    symbol cat_near=exists room: item : (inside(cat, room))\n    return cat_near\n\nbehavior __goal__():\n    body:\n        # Check if the cat has already been observed in any known room\n        if exists cat: item : (is_cat(cat) and is_cat_nearby(cat)):\n            bind cat: item where:\n                is_cat(cat) and is_cat_nearby(cat)\n            # Approach the location of the cat\n            achieve close_char(char, cat)\n\n        else:\n            # If the cat has not been found yet, inspect all unvisited rooms\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the location of the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "4. Put the cat on the table in the home office.",
        "cdl": "behavior put_cat_on_table(cat: item, table: item):\n    body:\n        achieve_once on(cat, table)  # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat to be placed on the table\n\n        bind table: item where:\n            is_table(table) and id[table] == 355\n        # Select the table in the home office with ID 355\n\n        put_cat_on_table(cat, table)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.",
        "cdl": " \ndef is_home_office_table(table: item):\n    # Function to check if a table is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))\n    return in_home_office\n\nbehavior find_book_and_place_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table) # Place the book on the table\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind table: item where:\n            is_table(table) and is_home_office_table(table)\n        # Select the table located in the home office\n\n        find_book_and_place_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior turn_on_office_light(office_light:item):\n    body:\n        achieve is_on(office_light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind office_light: item where:\n            is_light(office_light) and inside(office_light, home_office)\n        # Select the light in the home office\n\n        turn_on_office_light(office_light)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Locate the bathroom sink.",
        "cdl": " \nbehavior locate_bathroom_sink(sink:item, bathroom:item):\n    body:\n        achieve close_char(char, sink) \n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        bind sink: item where:\n            is_sink(sink) and inside(sink, bathroom)\n        \n        locate_bathroom_sink(sink, bathroom)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to create soapy water.",
        "cdl": " \nbehavior fill_sink_and_add_soap(sink:item, soap:item, faucet:item):\n    body:\n        achieve_once has_water(sink) # Fill the sink with water\n        achieve_once inside(soap, sink) # Add soap to the sink to create soapy water\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select sink with ID 42\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select the soap\n\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet] == 43\n        # Select the faucet with ID 43\n\n        fill_sink_and_add_soap(sink, soap, faucet)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution(dishwasher:item, cleaning_solution:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n        # Place the cleaning solution inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select cleaning solution\n\n        add_cleaning_solution(dishwasher, cleaning_solution)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Place the bowls and plates in the dishwasher and start the wash cycle.",
        "cdl": " \nbehavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 1001\n        # Select the dishwasher with ID 1001\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                # Load all bowls and plates into the dishwasher\n                load_dishwasher(item, dishwasher)\n        \n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes in it.",
        "cdl": " \ndef is_basket_for_clothes_with_clothes(basket: item):\n    # Function to check if the basket contains clothes\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)):\n            # Check if there is a basket for clothes containing clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and is_basket_for_clothes_with_clothes(basket)\n            # Select the basket with clothes\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else:\n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are clothes inside this basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put all the clothes in the washing machine and start the wash cycle.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Place the clothes inside the washing machine\n\nbehavior start_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve_once is_on(washing_machine)\n        # Start the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket containing clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n        # Load all clothes from the basket into the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger and place them on a plate.",
        "cdl": " \nbehavior find_food_items_and_place_on_plate(pizza:item, hamburger:item, plate:item):\n    body:\n        achieve_once on(pizza, plate)\n        # Place the pizza on the plate\n        achieve_once on(hamburger, plate)\n        # Place the hamburger on the plate\n\nbehavior __goal__():\n    body:\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger\n\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n        \n        find_food_items_and_place_on_plate(pizza, hamburger, plate)\n        # Place the pizza and hamburger on the plate\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Heat the plate with pizza and hamburger in the microwave.",
        "cdl": " \nbehavior heat_plate_in_microwave(plate:item, microwave:item):\n    body:\n        achieve_once inside(plate, microwave) # Place the plate inside the microwave\n        achieve_once closed(microwave) # Close the microwave door\n        achieve_once is_on(microwave) # Turn on the microwave to heat the food\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Select the plate containing the food\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_plate_in_microwave(plate, microwave) # Heat the food in the microwave\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Put the plate on the table in the dining room.",
        "cdl": "\ndef in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior put_plate_on_table(plate: item, table: item):\n    body:\n        achieve_once on(plate, table)  # Place the plate on the table\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 1000\n        # Select the plate with ID 1000 containing the pizza and hamburger\n\n        bind table: item where:\n            is_table(table) and in_dining_room(table)\n        # Select a table located in the dining room\n\n        put_plate_on_table(plate, table)\n        # Put plate_1000 on the selected table in the dining room\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Identify the coffee table in the home office.",
        "cdl": " \ndef is_home_office_table(table: item):\n    # Function to check if a table is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))\n    return in_home_office\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and is_home_office_table(table)\n        # Select the table located in the home office\n\n        achieve visited(table)\n        # Identify the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and place it on the coffee table.",
        "cdl": " \ndef is_home_office_table(table: item):\n    # Function to check if a table is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))\n    return in_home_office\n\nbehavior find_book_and_place_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table) # Place the book on the table\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind table: item where:\n            is_table(table) and is_home_office_table(table)\n        # Select the table located in the home office\n\n        find_book_and_place_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Open the window in the home office.",
        "cdl": " \nbehavior open_window(window:item):\n    body:\n        achieve open(window) # Open the window in the home office\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        # Select the window in the home office\n\n        open_window(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "\nbehavior turn_on_bathroom_light(bathroom_light:item):\n    body:\n        achieve is_on(bathroom_light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Define bathroom\n\n        bind bathroom_light: item where:\n            is_light(bathroom_light) and inside(bathroom_light, bathroom)\n        # Select the light in the bathroom\n\n        turn_on_bathroom_light(bathroom_light)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room and put the milk and egg on it.",
        "cdl": " \nbehavior place_milk_and_egg(table: item, milk: item, egg: item):\n    body:\n        achieve_once on(milk, table)\n        # Place the milk on the table\n        achieve_once on(egg, table)\n        # Place the egg on the table\n\ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        place_milk_and_egg(table, milk, egg)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Remove all the items from the fridge and throw them into the trashcan.",
        "cdl": "behavior move_items_to_trash(item: item, trashcan: item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Move items to the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Select the fridge with ID 289\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                move_items_to_trash(item, trashcan)\n        # Move all items from the fridge to the trashcan"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior put_milk_and_egg_in_fridge(milk: item, egg: item, fridge: item):\n    body:\n        achieve_once inside(milk, fridge) \n        # Place the milk inside the fridge\n        achieve_once inside(egg, fridge)\n        # Place the egg inside the fridge\n\nbehavior close_the_fridge(fridge: item):\n    body:\n        achieve_once closed(fridge)\n        # Close the fridge\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n        \n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        put_milk_and_egg_in_fridge(milk, egg, fridge)\n        close_the_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": "behavior slice_and_toast_bread(bread:item, toaster:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(bread, cutting_board)  # Place the bread on the cutting board\n        achieve_once cut(bread)  # Slice the bread using the knife\n        achieve_once inside(bread, toaster)  # Put sliced bread in the toaster\n        achieve_once closed(toaster)  # Close the toaster\n        achieve_once is_on(toaster)  # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select the bread\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        slice_and_toast_bread(bread, toaster, cutting_board, knife)  # Slice and toast the bread"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a lemon, sugar, and a glass or cup.",
        "cdl": "behavior find_lemon_sugar_glass(lemon:item, sugar:item, glass:item):\n    body:\n        achieve_once visited(lemon) # Find a lemon\n        achieve_once visited(sugar) # Find sugar\n        achieve_once visited(glass) # Find a glass or cup\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select a lemon\n\n        bind sugar: item where:\n            is_food_sugar(sugar)\n        # Select sugar\n\n        bind glass: item where:\n            is_cup(glass)\n        # Select a glass or cup\n\n        find_lemon_sugar_glass(lemon, sugar, glass)\n        # Find the lemon, sugar, and glass or cup"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Cut the lemon and squeeze its juice into the cup.",
        "cdl": "behavior cut_lemon_and_squeeze(lemon:item, cutting_board:item, cup:item):\n    body:\n        achieve_once on(lemon, cutting_board) # Place the lemon on the cutting board\n        achieve_once cut(lemon) # Cut the lemon\n        achieve_once inside(lemon, cup) # Squeeze the lemon juice into the cup\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select a lemon\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        cut_lemon_and_squeeze(lemon, cutting_board, cup) # Cut the lemon and squeeze its juice into the cup"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Add sugar to the lemon juice.",
        "cdl": " \nbehavior add_sugar_to_lemon_juice(sugar:item, cup:item):\n    body:\n        achieve_once inside(sugar, cup)\n        # Add sugar to the lemon juice in the cup\n\nbehavior __goal__():\n    body:\n        bind sugar: item where:\n            is_food_sugar(sugar)\n        # Select the sugar\n        \n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup, ensuring its the one with lemon juice\n\n        add_sugar_to_lemon_juice(sugar, cup)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify all the bowls and plates needing washing.",
        "cdl": " \ndef has_bowls_and_plates_dirty():\n    # Checks if there are any bowls or plates that are dirty\n    symbol has_dirty = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))\n    return has_dirty\n\nbehavior __goal__():\n    body:\n        if exists item: item : ((is_bowl(item) or is_plate(item)) and dirty(item)):\n            # If there are known dirty bowls or plates, no need to search further\n            foreach item: item:\n                if (is_bowl(item) or is_plate(item)) and dirty(item):\n                    achieve visited(item)\n            # Mark each dirty bowl or plate as visited\n\n        else:\n            # Search for dirty bowls and plates that have not been visited\n            foreach item: item:\n                if (is_bowl(item) or is_plate(item)) and not visited(item):\n                    observe(item, \"Check if this item is a dirty bowl or plate\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the identified bowls and plates into the dishwasher.",
        "cdl": "\nbehavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                # Load all identified bowls and plates into the dishwasher\n                load_dishwasher(item, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Start the dishwasher to clean the bowls and plates.",
        "cdl": " \nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher to start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 1001\n        # Select the dishwasher with ID 1001\n\n        start_dishwasher(dishwasher) # Start the dishwasher to clean the bowls and plates\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior turn_on_dvd_player(dvd_player:item):\n    body:\n        achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select a DVD player\n\n        turn_on_dvd_player(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Identify the bathroom\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        # Select the window inside the bathroom\n\n        open_bathroom_window(window)\n        # Open the window in the bathroom"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": "behavior turn_on_tv_with_remote(tv: item, remote_control: item):\n    body:\n        achieve_once close_char(char, remote_control) # Move close to the remote control\n        achieve_once close(remote_control, tv) # Ensure the remote control is close to the TV\n        touch(remote_control) # Touch the remote control to turn on the TV\n\nbehavior __goal__():\n    body:\n        bind tv: item where:\n            is_television(tv)\n        # Select the television\n\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control\n\n        turn_on_tv_with_remote(tv, remote_control)"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw it into the toilet.",
        "cdl": " \nbehavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inhand(toilet_paper) # Hold the toilet paper\n        wipe(toilet) # Wipe the toilet with the toilet paper\n\nbehavior throw_into_toilet(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inside(toilet_paper, toilet) # Dispose of the toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 37\n        # Select toilet with ID 37\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090\n        # Select toilet paper with ID 2090\n\n        wipe_toilet_with_paper(toilet, toilet_paper)\n        throw_into_toilet(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water and freeze it.",
        "cdl": " \nbehavior get_water_and_freeze(cup: item, fridge: item, water_source: item):\n    body:\n        achieve_once has_water(cup) # Fill the cup with water from the water source\n        achieve_once inside(cup, fridge) # Place the cup of water inside the fridge\n        \nbehavior close_the_fridge_door(fridge: item):\n    body:\n        achieve_once closed(fridge) # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        bind water_source: item where:\n            is_faucet(water_source)\n        # Select a water source\n\n        get_water_and_freeze(cup, fridge, water_source)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find your cat.",
        "cdl": " \ndef is_cat_nearby(cat:item):\n    # Function to check if the cat is near\n    symbol cat_near=exists room: item : (inside(cat, room))\n    return cat_near\n\nbehavior __goal__():\n    body:\n        # Check if the cat has already been observed in any known room\n        if exists cat: item : (is_cat(cat) and is_cat_nearby(cat)):\n            bind cat: item where:\n                is_cat(cat) and is_cat_nearby(cat)\n            # Approach the location of the cat\n            achieve close_char(char, cat)\n\n        else:\n            # If the cat has not been found yet, inspect all unvisited rooms\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the location of the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Touch your cat.",
        "cdl": " \nbehavior touch_cat(cat: item):\n    body:\n        achieve_once close_char(char, cat) # Ensure char is close to the cat to touch it\n        touch(cat) # Touch the cat\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2055\n        # Select the cat with ID 2055\n\n        touch_cat(cat) # Touch the selected cat\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior observe_jacket(jacket: item):\n    body:\n        observe(jacket, \"Check if it is the clothes jacket we are looking for\")\n\nbehavior hand_wash_jacket(jacket: item):\n    body:\n        wash(jacket) # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        observe_jacket(jacket)\n        hand_wash_jacket(jacket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket by washing machine.",
        "cdl": " \nbehavior load_jacket_into_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Close the washing machine door\n        achieve_once is_on(washing_machine) \n        # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2047 \n        # Select the jacket with ID 2047\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_jacket_into_washing_machine(jacket, washing_machine)\n        start_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \ndef is_window_unvisited(window: item):\n    # Function to check if the window has not been visited\n    symbol unvisited= not visited(window)\n    return unvisited\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and is_window_unvisited(window):\n                observe(window, \"Identify the window\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window clean.",
        "cdl": " \nbehavior wipe_window_with_towel(window:item, towel:item):\n    body:\n        achieve_once inhand(towel) # Hold the towel\n        wipe(window) # Wipe the window with the towel\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not clean(window):\n                # For each window that is not clean\n                bind towel: item where:\n                    is_towel(towel)\n                # Select a towel\n                wipe_window_with_towel(window, towel)\n                # Wipe the window with the towel\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Locate the dining room and identify a table within it.",
        "cdl": " \ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior locate_dining_room_table(table: item):\n    body:\n        achieve visited(table)\n        # Locate and mark the table in the dining room as visited\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table located in the dining room\n\n        locate_dining_room_table(table)\n        # Locate the table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the identified table.",
        "cdl": " \nbehavior place_items_on_table(table: item, milk: item, turkey: item, egg: item, fish: item, chicken: item):\n    body:\n        achieve_once on(milk, table)\n        # Place the milk on the table\n        achieve_once on(turkey, table)\n        # Place the turkey on the table\n        achieve_once on(egg, table)\n        # Place the egg on the table\n        achieve_once on(fish, table)\n        # Place the fish on the table\n        achieve_once on(chicken, table)\n        # Place the chicken on the table\n\ndef is_table_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind table: item where:\n            is_table(table) and is_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        place_items_on_table(table, milk, turkey, egg, fish, chicken)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to your cat.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve_once cut(chicken) # Slice the chicken\n\nbehavior give_chicken_to_cat(chicken:item, cat:item):\n    body:\n        achieve_once close_char(char, cat) # Move close to the cat\n        achieve_once on(chicken, cat) # Give the chicken to the cat\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        slice_chicken(chicken, cutting_board)\n        give_chicken_to_cat(chicken, cat)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the household.",
        "cdl": " \ndef is_room_unvisited(room: item):\n    # Function to check if the room has not been visited\n    symbol unvisited= not visited(room)\n    return unvisited\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_room(room) and is_room_unvisited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on at least one light in each room.",
        "cdl": " \nbehavior turn_on_light(room_light:item):\n    body:\n        achieve is_on(room_light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):\n                foreach light: item:\n                    if is_light(light) and inside(light, room):\n                        turn_on_light(light)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "\nbehavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve_once cut(chicken) # Slice the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_chicken(chicken, cutting_board)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_bowls_and_plates(dishwasher: item, item: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n        \nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher to start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_bowls_and_plates(dishwasher, item)\n                # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand in the sink.",
        "cdl": "\nbehavior wash_forks_by_hand(fork:item, sink:item):\n    body:\n        achieve_once inside(fork, sink) # Place the fork in the sink\n        wash(fork) # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind fork: item where:\n            is_fork(fork)\n        # Select a fork\n\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 231\n        # Select sink with ID 231 in the kitchen\n\n        wash_forks_by_hand(fork, sink)\n"
    }
]