From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and put it on the stove.', '2. Add water and vegetables to the pot.', '3. Boil the vegetables on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        find_and_place_pot_on_stove(pot, stove)
        # Place the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_and_place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        find_and_place_pot_on_stove(pot, stove)
        # Place the pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_cupboard_229(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_cupboard_229(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables_to_pot(vegetables: item, sink: item, pot: item):
    body:
        achieve_once has_water(pot) # Add water to the pot
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inside(vegetable, sink):
                achieve_once inside(vegetable, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        foreach vegetables: item:
            if is_food_vegetable(vegetables) and inside(vegetables, sink):
                add_water_and_vegetables_to_pot(vegetables, sink, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables_to_pot(pot:item, water_source:item, vegetables:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water from the water source
        achieve_once inside(vegetables, pot) # Add the vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on the stove

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        add_water_and_vegetables_to_pot(pot, water_source, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_food_carrot_2014_around_cupboard_229(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#goal_representation
 
behavior add_water_and_vegetables_to_pot(pot:item, water_source:item, vegetables:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water from the water source
        achieve_once inside(vegetables, pot) # Add the vegetables into the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Define the stove with ID 2065

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is on the stove

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        add_water_and_vegetables_to_pot(pot, water_source, vegetables)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
behavior add_water_and_vegetables_to_pot(water_source:item, pot:item, vegetables:item):
    body:
        achieve_once has_water(pot) # Add water to the pot
        achieve_once inside(vegetables, pot) # Put the vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot already on the stove

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source

        foreach vegetables: item:
            if is_food_vegetable(vegetables):
                add_water_and_vegetables_to_pot(water_source, pot, vegetables)
                # Add water and vegetables to the pot
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_water_and_vegetables_to_pot(water_source:item, pot:item, vegetables:item):
    body:
        achieve_once has_water(pot) # Add water to the pot
        achieve_once inside(vegetables, pot) # Put the vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot already on the stove

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source

        foreach vegetables: item:
            if is_food_vegetable(vegetables):
                add_water_and_vegetables_to_pot(water_source, pot, vegetables)
                # Add water and vegetables to the pot
##############################
From agent.py-> find a plan in act()
open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)putin_executor(food_vegetable_2041, pot_2069)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the pot. The robot turned the faucet on and off, but there was no action of putting water into the pot. Ensure water is added before considering the sub-task complete.
##############################
From agent.py
Human Instruction: You need to add water to the pot. The robot turned the faucet on and off, but there was no action of putting water into the pot. Ensure water is added before considering the sub-task complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Grab pot_2069.
Action 5: Walk to stove_2065.
Action 6: Put pot_2069 on stove_2065.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for food_vegetable_2041 around fridge_289.
Action 16: Grab food_vegetable_2041.
Action 17: Put food_vegetable_2041 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_cupboard_229(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(spectacles,cupboard_instance)
        else:
            exp(spectacles,cupboard_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cupboard_instance]=True
        close[cupboard_instance,spectacles]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_added(pot: item):
    # Function to check if water is added to the pot
    symbol water_added = has_water(pot)
    return water_added

def is_food_vegetable(x: item):
    # Check if the item is a vegetable
    return True

behavior add_water_to_pot(pot: item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        if not has_water_added(pot):
            add_water_to_pot(pot)
            # If the pot does not have water, add water to it
        else:
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            # Bind a vegetable item

            achieve_once inside(vegetable, pot)
            # Add vegetables to the pot


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables(pot:item, vegetable:item, water_source:item):
    body:
        achieve_once close_char(char, water_source)
        # Move close to the water source to fill the pot with water
        achieve_once has_water(pot)
        # Add water to the pot
        achieve_once inside(vegetable, pot)
        # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot on the stove

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 43
        # Select the water source, the faucet with ID 43

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        add_water_and_vegetables(pot, vegetable, water_source)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_and_vegetables(pot:item, vegetable:item, water_source:item):
    body:
        achieve_once close_char(char, water_source)
        # Move close to the water source to fill the pot with water
        achieve_once has_water(pot)
        # Add water to the pot
        achieve_once inside(vegetable, pot)
        # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot on the stove

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 43
        # Select the water source, the faucet with ID 43

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        add_water_and_vegetables(pot, vegetable, water_source)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the pot. While the faucet was turned on and off, there was no action indicating water was put into the pot. Make sure the pot has water added before proceeding.
##############################
From agent.py
Human Instruction: You need to add water to the pot. While the faucet was turned on and off, there was no action indicating water was put into the pot. Make sure the pot has water added before proceeding.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Grab pot_2069.
Action 5: Walk to stove_2065.
Action 6: Put pot_2069 on stove_2065.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for food_vegetable_2041 around fridge_289.
Action 16: Grab food_vegetable_2041.
Action 17: Put food_vegetable_2041 into pot_2069.
Action 18: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_fryingpan_2083(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(spectacles,fryingpan_instance)
        else:
            exp(spectacles,fryingpan_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,fryingpan_instance]=True
        close[fryingpan_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
behavior add_water_and_vegetables(pot: item, faucet: item, vegetables: item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water using the faucet
        achieve_once inside(vegetables, pot)
        # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        add_water_and_vegetables(pot, faucet, vegetables)
        # Add water and vegetables to the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_bookshelf_101(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def should_add_water_to_pot(pot: item):
    # Function to determine if water needs to be added to the pot
    symbol no_water_in_pot = not has_water(pot)
    return no_water_in_pot

behavior add_water_to_pot(pot: item, faucet: item):
    body:
        if should_add_water_to_pot(pot):
            achieve has_water(pot)
            # Ensure the pot is filled with water

behavior add_vegetables_to_pot(vegetable: item, pot: item):
    body:
        achieve_once inside(vegetable, pot)
        # Add vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot on the stove

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the vegetables

        add_water_to_pot(pot, faucet)
        add_vegetables_to_pot(food_vegetable, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables(pot: item, faucet: item, vegetables: item):
    body:
        achieve has_water(pot) # Add water to the pot
        achieve_once inside(vegetables, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        add_water_and_vegetables(pot, faucet, vegetables)
        # Add water and vegetables to the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_150(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water= has_water(pot)
    return has_water

behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water

behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        # Add vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        if not has_water_in_pot(pot):
            add_water_to_pot(faucet, pot)
        
        add_vegetables_to_pot(vegetable, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables_to_pot(water_source: item, pot: item, vegetables: item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once inside(vegetables, pot) # Add vegetables to the pot

behavior __goal__():
    body:
        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 43
        # Select the water source, the faucet with ID 43

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables, assuming vegetables contained in food_vegetable_2041

        add_water_and_vegetables_to_pot(water_source, pot, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_curtain_25(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==25
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(spectacles,curtain_instance)
        else:
            exp(spectacles,curtain_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,curtain_instance]=True
        close[curtain_instance,spectacles]=True
    

behavior find_towel_2059_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_vegetables_to_pot(faucet:item, pot:item, vegetables:item):
    body:
        achieve_once has_water(pot) # Ensures that water is added to the pot
        achieve_once inside(vegetables, pot) # Ensures that vegetables are inside the pot

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        add_water_and_vegetables_to_pot(faucet, pot, vegetables) # Add water and vegetables to the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_150(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_spectacles_2082_around_closetdrawer_150(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot) # Ensure you are close enough to the pot
        achieve_once close_char(char, faucet) # Ensure you are close enough to the faucet
        achieve has_water(pot) # Fill the pot with water

behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot) # Add vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2041
        # Select the vegetables with ID 2041

        add_vegetables_to_pot(vegetable, pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior add_water_and_vegetables_to_pot(pot: item, faucet: item, vegetables: item):
    body:
        achieve_once close_char(char, faucet) # Ensure char is close to the faucet
        achieve has_water(pot) # Add water to the pot
        achieve inside(vegetables, pot) # Add vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        add_water_and_vegetables_to_pot(pot, faucet, vegetables)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior add_water_and_vegetables_to_pot(pot: item, water_source: item, vegetables: item):
    body:
        achieve has_water(pot)
        # Add water to the pot
        achieve_once inside(vegetables, pot)
        # Add the vegetables to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on stove_2065

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind water_source: item where:
            is_faucet(water_source) and id[water_source] == 43
        # Select the water source, the faucet with ID 43

        add_water_and_vegetables_to_pot(pot, water_source, vegetables)
        # Add water and vegetables to the pot
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_vegetable_2041)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(faucet_43)']
Time info:
Time consume: 246 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 61
goal generate times: 15
goal correct times: 0
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
