From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the potatoes.', '2. Cut the potatoes into fry shapes.', '3. Deep fry the cut potatoes.', '4. Drain and season the French fries as desired.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_soap_2053_around_shower_36(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once close_char(char, potato)
        observe(potato, "Check if the potato is clean or dirty")
        if dirty(potato):
            achieve_once close_char(char, sink)
            wash(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_wash_potatoes(potato, sink)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_potatoes(potato:item, sink:item):
    body:
        achieve_once close_char(char, potato)
        observe(potato, "Check if the potato is clean or dirty")
        if dirty(potato):
            achieve_once close_char(char, sink)
            wash(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_wash_potatoes(potato, sink)


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)obs(food_potato_2035, Check if the potato is clean or dirty)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)obs(food_potato_2035, Check if the potato is clean or dirty)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2035, Check if the potato is clean or dirty)
##############################
From agent.py
obs(food_potato_2035, Check if the potato is clean or dirty)
Get this information:  food_potato_2035 is inside fridge_289. food_potato_2035 is inside dining_room_201. food_potato_2035 is close to fridge_289. food_potato_2035 is close to character_65. food_potato_2035 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_cutting_board_2051(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(mat,cutting_board_instance)
        else:
            exp(mat,cutting_board_instance)
    eff:
        unknown[mat]=False
        close[mat,cutting_board_instance]=True
        close[cutting_board_instance,mat]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve_once inhand(knife) # Hold the knife
        achieve_once cut(potato) # Cut the potato into fry shapes

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        cut_potatoes(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_potatoes(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve_once inhand(knife) # Hold the knife
        achieve_once cut(potato) # Cut the potato into fry shapes

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        cut_potatoes(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_150(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_keyboard_415_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_chair_103_around_nightstand_102(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior deep_fry_potatoes(potatoes:item, oil:item, stove:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Put oil inside the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve_once is_on(stove) # Turn on the stove
        achieve inside(potatoes, fryingpan) # Fries are in frying pan
        achieve cut(potatoes) # Ensure the potatoes are cut

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        deep_fry_potatoes(potatoes, oil, stove, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior deep_fry_potatoes(potatoes:item, oil:item, stove:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Put oil inside the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve_once is_on(stove) # Turn on the stove
        achieve inside(potatoes, fryingpan) # Fries are in frying pan
        achieve cut(potatoes) # Ensure the potatoes are cut

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        deep_fry_potatoes(potatoes, oil, stove, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_keyboard_415_around_cpuscreen_416(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(keyboard,cpuscreen_instance)
        else:
            exp(keyboard,cpuscreen_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,cpuscreen_instance]=True
        close[cpuscreen_instance,keyboard]=True
    

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_and_season_fries(fries:item, oil:item):
    body:
        achieve_once not inside(fries, oil) 
        # Drain the fries to remove excess oil
        achieve cut(fries)
        # Assume cut state represents seasoning the fries as they can be flavored after draining

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries that are ready to be seasoned
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(fries, fryingpan)
        # Select the frying pan with fries inside
        drain_and_season_fries(fries, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_143(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_and_season_fries(fries:item, container:item):
    body:
        achieve_once inside(fries, container)
        # Drain fries into a container

behavior add_seasoning(fries:item, seasoning:item):
    body:
        achieve_once on(seasoning, fries)
        # Add seasoning onto the fries

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries) and cut(fries)
        # Select the cut fries
        
        bind container: item where:
            is_pot(container) or is_bowl(container)
        # Select either a pot or bowl for draining

        bind seasoning: item where:
            is_food_salt(seasoning) or is_food_food(seasoning) 
        # Select seasoning, such as salt

        drain_and_season_fries(fries, container)
        add_seasoning(fries, seasoning)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_154(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_and_season(fries:item, surface:item):
    body:
        achieve_once on(fries, surface)
        # Place the fries on a surface to drain

        achieve cut(fries)
        # Drain the fries and prepare them for seasoning

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries that have been fried and are ready for draining and seasoning

        bind surface: item where:
            surfaces(surface)
        # Select a surface for draining

        drain_and_season(fries, surface)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior drain_and_season(fries:item, surface:item):
    body:
        achieve_once on(fries, surface)
        # Place the fries on a surface to drain

        achieve cut(fries)
        # Drain the fries and prepare them for seasoning

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries that have been fried and are ready for draining and seasoning

        bind surface: item where:
            surfaces(surface)
        # Select a surface for draining

        drain_and_season(fries, surface)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)put_executor(food_potato_2035, stove_2065)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
put_executor(food_potato_2035, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is close stove_2065. stove_2065 is close food_potato_2035. food_potato_2035 is on stove_2065. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to season the French fries. The current actions have not demonstrated any step where the fries were seasoned after cutting.
##############################
From agent.py
Human Instruction: The robot needs to season the French fries. The current actions have not demonstrated any step where the fries were seasoned after cutting.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_potato_2035 around fridge_289.
Action 7: Observe around food_potato_2035 with the question of Check if the potato is clean or dirty.
Action 8: Grab food_potato_2035.
Action 9: Walk to cutting_board_2051.
Action 10: Put food_potato_2035 on cutting_board_2051.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_potato_2035.
Action 14: Cut food_potato_2035.
Action 15: Walk to oil_2079.
Action 16: Grab oil_2079.
Action 17: Walk to fryingpan_2083.
Action 18: Put oil_2079 into fryingpan_2083.
Action 19: Grab fryingpan_2083.
Action 20: Walk to stove_2065.
Action 21: Put fryingpan_2083 on stove_2065.
Action 22: Switch on stove_2065.
Action 23: Walk to food_potato_2035.
Action 24: Grab food_potato_2035.
Action 25: Walk to fryingpan_2083.
Action 26: Put food_potato_2035 into fryingpan_2083.
Action 27: Grab food_potato_2035.
Action 28: Put food_potato_2035 on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_fries(fries:item, container:item):
    body:
        achieve_once inside(fries, container)
        # Drain the fries into a container

behavior season_fries(fries:item, seasoning:item):
    body:
        achieve_once on(seasoning, fries)
        # Season the fries with the desired seasoning

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the cut fries
        bind container: item where:
            is_bowl(container) or is_plate(container)
        # Select a container to drain the fries
        bind seasoning: item where:
            is_food_salt(seasoning) or is_sauce(seasoning)
        # Select desired seasoning
        drain_fries(fries, container)
        season_fries(fries, seasoning)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior drain_fries(fries:item, container:item):
    body:
        achieve_once inside(fries, container)
        # Drain the fries into a container

behavior season_fries(fries:item, seasoning:item):
    body:
        achieve_once on(seasoning, fries)
        # Season the fries with the desired seasoning

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the cut fries
        bind container: item where:
            is_bowl(container) or is_plate(container)
        # Select a container to drain the fries
        bind seasoning: item where:
            is_food_salt(seasoning) or is_sauce(seasoning)
        # Select desired seasoning
        drain_fries(fries, container)
        season_fries(fries, seasoning)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(bowl_2071)putin_executor(food_potato_2035, bowl_2071)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(food_potato_2035)put_executor(food_salt_2037, food_potato_2035)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(bowl_2071, sink_231)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(bowl_2071)putin_executor(food_potato_2035, bowl_2071)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(food_potato_2035)put_executor(food_salt_2037, food_potato_2035)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(bowl_2071, sink_231)
Fail to find bowl_2071 around sink_231. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(plate_1000)putin_executor(food_potato_2035, plate_1000)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(food_potato_2035)put_executor(food_salt_2037, food_potato_2035)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
putin_executor(food_potato_2035, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the plate_1000. Robot is close to the sink_231. food_potato_2035 is inside plate_1000. plate_1000 is close food_potato_2035. food_potato_2035 is close plate_1000. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(food_salt_2037)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_salt_2037. 
##############################
From agent.py
grab_executor(food_salt_2037)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_salt_2037. Grabbing food_salt_2037 by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_salt_2037. Robot is close to the plate_1000. Robot is close to the food_potato_2035. 
##############################
From agent.py
put_executor(food_salt_2037, food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_salt_2037. Robot is close to the plate_1000. Robot is close to the food_potato_2035. food_salt_2037 is close food_potato_2035. food_potato_2035 is close food_salt_2037. food_salt_2037 is on food_potato_2035. food_salt_2037 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(food_potato_2035)', 'put_executor(food_potato_2035, stove_2065)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(sink_231)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(plate_1000)', 'putin_executor(food_potato_2035, plate_1000)', 'walk_executor(food_salt_2037)', 'grab_executor(food_salt_2037)', 'walk_executor(food_potato_2035)', 'put_executor(food_salt_2037, food_potato_2035)']
Time info:
Time consume: 190 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 3
goal generate times: 7
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
