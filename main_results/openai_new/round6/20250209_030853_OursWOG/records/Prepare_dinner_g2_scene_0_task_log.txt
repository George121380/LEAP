From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and the onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken: item):
    body:
        achieve clean(chicken)
        # Clean the chicken

behavior clean_onion(onion: item):
    body:
        achieve clean(onion)
        # Clean the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_chicken(chicken: item):
    body:
        achieve clean(chicken)
        # Clean the chicken

behavior clean_onion(onion: item):
    body:
        achieve clean(onion)
        # Clean the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_chicken(chicken)
        clean_onion(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_chicken_2017, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_chicken_2017)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_chicken_2017, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_onion_2032)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_chicken_2017, kitchen_counter_230)
Fail to find food_chicken_2017 around kitchen_counter_230. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Prepare the chicken and onion for roasting.', '3. Roast the chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_wallshelf_234(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd_player,wallshelf_instance)
        else:
            exp(cd_player,wallshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,wallshelf_instance]=True
        close[wallshelf_instance,cd_player]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

def has_chicken_and_onion_nearby():
    # Function to check if both chicken and onion are near the kitchen counter
    symbol has_items = exists o_chicken: item : (close(o_chicken, kitchen_counter_230) and is_food_chicken(o_chicken)) and exists o_onion: item : (close(o_onion, kitchen_counter_230) and is_food_onion(o_onion))
    return has_items

behavior __goal__():
    body:
        if has_chicken_and_onion_nearby():
            # If both chicken and onion are near the kitchen counter
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and close(item, kitchen_counter_230):
                    achieve visited(item)

        else:
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not visited(item):
                    observe(item, "Check if this is chicken or onion near the kitchen counter")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o_onion') at line 5696, column 131.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def has_chicken_and_onion_nearby():
    # Function to check if both chicken and onion are near the kitchen counter
    symbol has_items = exists o_chicken: item : (close(o_chicken, kitchen_counter_230) and is_food_chicken(o_chicken)) and exists o_onion: item : (close(o_onion, kitchen_counter_230) and is_food_onion(o_onion))
    return has_items

behavior __goal__():
    body:
        if has_chicken_and_onion_nearby():
            # If both chicken and onion are near the kitchen counter
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and close(item, kitchen_counter_230):
                    achieve visited(item)

        else:
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not visited(item):
                    observe(item, "Check if this is chicken or onion near the kitchen counter")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o_onion') at line 5696, column 131.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

#goal_representation
 
def has_chicken_and_onion_nearby():
    # Function to check if both chicken and onion are near the kitchen counter
    symbol has_items = (exists o_chicken: item : (close(o_chicken, kitchen_counter_230) and is_food_chicken(o_chicken))) and (exists o_onion: item : (close(o_onion, kitchen_counter_230) and is_food_onion(o_onion)))
    return has_items

behavior __goal__():
    body:
        if has_chicken_and_onion_nearby():
            # If both chicken and onion are near the kitchen counter
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and close(item, kitchen_counter_230):
                    achieve visited(item)

        else:
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not visited(item):
                    observe(item, "Check if this is chicken or onion near the kitchen counter")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_onion(counter:item):
    # Function to check if there are chickens or onions around the specified kitchen counter
    symbol has_chicken_or_onion = exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and close(o, counter))
    return has_chicken_or_onion

behavior __goal__():
    body:
        # Check if there is a known kitchen counter with chicken or onion around it
        if exists kitchen_counter: item : (is_kitchen_counter(kitchen_counter) and has_chicken_or_onion(kitchen_counter)):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_chicken_or_onion(kitchen_counter)
            # Move close to the kitchen counter with chicken or onion around it
            achieve close_char(char, kitchen_counter)
            
        else:
            # If no such kitchen counter is present, initiate exploration by observing unvisited kitchen counters
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check for chicken or onion around the kitchen counter")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_chicken_or_onion(counter:item):
    # Function to check if there are chickens or onions around the specified kitchen counter
    symbol has_chicken_or_onion = exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and close(o, counter))
    return has_chicken_or_onion

behavior __goal__():
    body:
        # Check if there is a known kitchen counter with chicken or onion around it
        if exists kitchen_counter: item : (is_kitchen_counter(kitchen_counter) and has_chicken_or_onion(kitchen_counter)):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_chicken_or_onion(kitchen_counter)
            # Move close to the kitchen counter with chicken or onion around it
            achieve close_char(char, kitchen_counter)
            
        else:
            # If no such kitchen counter is present, initiate exploration by observing unvisited kitchen counters
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check for chicken or onion around the kitchen counter")

##############################
From agent.py-> find a plan in act()
obs(kitchen_counter_230, Check for chicken or onion around the kitchen counter)
##############################
From agent.py
obs(kitchen_counter_230, Check for chicken or onion around the kitchen counter)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate either the chicken or the onion around the kitchen counter. Neither was found in the actions listed; continue searching or visiting other areas if necessary.
##############################
From agent.py
Human Instruction: You need to locate either the chicken or the onion around the kitchen counter. Neither was found in the actions listed; continue searching or visiting other areas if necessary.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_chicken_2017 around kitchen_counter_230.
Action 3: Observe around kitchen_counter_230 with the question of Check for chicken or onion around the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_sink_231(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_onion_near_kitchen_counter():
    # Function to check if there is chicken or onion near the kitchen counter
    symbol has_food=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and close(o, kitchen_counter))
    return has_food

behavior __goal__():
    body:
        if exists kitchen_counter: item : (is_kitchen_counter(kitchen_counter) and has_chicken_or_onion_near_kitchen_counter()):
            # If there is chicken or onion near the kitchen counter, approach it
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_chicken_or_onion_near_kitchen_counter()
            achieve close_char(char, kitchen_counter)

        else:
            # If no chicken or onion is found near the kitchen counter, initiate exploration
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter,"Check for chicken or onion around the kitchen counter")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_sink_231(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def has_chicken_or_onion_near_kitchen_counter(kitchen_counter: item):
    # Function to check if there is chicken or onion near the kitchen counter
    symbol has_food=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and close(o, kitchen_counter))
    return has_food

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        if has_chicken_or_onion_near_kitchen_counter(kitchen_counter):
            # If there is chicken or onion near the kitchen counter, approach it
            achieve close_char(char, kitchen_counter)
        else:
            # If no chicken or onion is found near the kitchen counter, initiate exploration
            observe(kitchen_counter, "Check for chicken or onion around the kitchen counter")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_chicken_or_onion_near_kitchen_counter(kitchen_counter: item):
    # Function to check if there is chicken or onion near the kitchen counter
    symbol has_food=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and close(o, kitchen_counter))
    return has_food

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        if has_chicken_or_onion_near_kitchen_counter(kitchen_counter):
            # If there is chicken or onion near the kitchen counter, approach it
            achieve close_char(char, kitchen_counter)
        else:
            # If no chicken or onion is found near the kitchen counter, initiate exploration
            observe(kitchen_counter, "Check for chicken or onion around the kitchen counter")

##############################
From agent.py-> find a plan in act()
obs(kitchen_counter_230, Check for chicken or onion around the kitchen counter)
##############################
From agent.py
obs(kitchen_counter_230, Check for chicken or onion around the kitchen counter)
Get this information:  cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. cup_2063 is on kitchen_counter_230. pot_2069 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue searching for the chicken or onion either by further explorations around the kitchen counter or by visiting other areas, as neither the chicken nor the onion was found at the kitchen counter.
##############################
From agent.py
Human Instruction: You need to continue searching for the chicken or onion either by further explorations around the kitchen counter or by visiting other areas, as neither the chicken nor the onion was found at the kitchen counter.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_chicken_2017 around kitchen_counter_230.
Action 3: Observe around kitchen_counter_230 with the question of Check for chicken or onion around the kitchen counter.
Action 4: Observe around kitchen_counter_230 with the question of Check for chicken or onion around the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior find_chicken_and_onion():
    body:
        foreach location: item:
            if (is_kitchen_counter(location) or is_room(location)) and not visited(location):
                observe(location, "Check for chicken or onion")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and visited(kitchen_counter)

        if not exists chicken: item : (is_food_chicken(chicken) and close(chicken, kitchen_counter)):
            if not exists onion: item : (is_food_onion(onion) and close(onion, kitchen_counter)):
                find_chicken_and_onion()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chicken') at line 5705, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

#goal_representation

def is_chicken_or_onion(location: item):
    symbol has_chicken_or_onion = exists item: item : ((is_food_chicken(item) or is_food_onion(item)) and close(item, location))
    return has_chicken_or_onion

behavior find_chicken_and_onion():
    body:
        foreach location: item:
            if (is_kitchen_counter(location) or is_room(location)) and not visited(location):
                observe(location, "Check for chicken or onion")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and visited(kitchen_counter)

        if not exists chicken_or_onion: item : (is_food_chicken(chicken_or_onion) or is_food_onion(chicken_or_onion)) and close(chicken_or_onion, kitchen_counter):
            find_chicken_and_onion()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chicken_or_onion') at line 5710, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def is_chicken_or_onion(location: item):
    symbol has_chicken_or_onion = exists item1: item : ((is_food_chicken(item1) or is_food_onion(item1)) and close(item1, location))
    return has_chicken_or_onion

behavior find_chicken_and_onion():
    body:
        foreach location: item:
            if (is_kitchen_counter(location) or is_room(location)) and not visited(location):
                observe(location, "Check for chicken or onion")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and visited(kitchen_counter)

        if not exists chicken_or_onion: item : ((is_food_chicken(chicken_or_onion) or is_food_onion(chicken_or_onion)) and close(chicken_or_onion, kitchen_counter)):
            find_chicken_and_onion()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def find_chicken_or_onion():
    # Function to observe the areas for finding chicken or onion
    foreach area: item:
        if is_kitchen_counter(area) and not visited(area):
            observe(area, "Check for chicken or onion around the kitchen counter")
        elif not visited(area):
            observe(area, "Continue searching for chicken or onion")

behavior __goal__():
    body:
        find_chicken_or_onion()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('NOT', 'not') at line 5700, column 14.
Expected one of: 
	* __ANON_1
	* DOUBLE_EQUAL
	* OR
	* PLUS
	* NOT_EQ
	* RSHIFT
	* SEMICOLON
	* __ANON_8
	* MINUS
	* FLOORDIV
	* __ANON_2
	* EQUAL
	* STAR
	* COMMA
	* AND
	* __ANON_5
	* IF
	* PERCENT
	* _NEWLINE
	* LESS_EQ
	* MORETHAN
	* __ANON_0
	* __ANON_4
	* __ANON_7
	* AMPERSAND
	* VBAR
	* LSHIFT
	* CIRCUMFLEX
	* __ANON_6
	* GREATER_EQ
	* AT
	* LESSTHAN
	* SLASH
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def find_chicken_or_onion():
    # Function to observe the areas for finding chicken or onion
    foreach area: item:
        if is_kitchen_counter(area) and not visited(area):
            observe(area, "Check for chicken or onion around the kitchen counter")
        elif not visited(area):
            observe(area, "Continue searching for chicken or onion")

behavior __goal__():
    body:
        find_chicken_or_onion()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('NOT', 'not') at line 5700, column 14.
Expected one of: 
	* __ANON_1
	* DOUBLE_EQUAL
	* OR
	* PLUS
	* NOT_EQ
	* RSHIFT
	* SEMICOLON
	* __ANON_8
	* MINUS
	* FLOORDIV
	* __ANON_2
	* EQUAL
	* STAR
	* COMMA
	* AND
	* __ANON_5
	* IF
	* PERCENT
	* _NEWLINE
	* LESS_EQ
	* MORETHAN
	* __ANON_0
	* __ANON_4
	* __ANON_7
	* AMPERSAND
	* VBAR
	* LSHIFT
	* CIRCUMFLEX
	* __ANON_6
	* GREATER_EQ
	* AT
	* LESSTHAN
	* SLASH
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def observe_kitchen_counter():
    # Observe the kitchen counter for chicken or onion
    foreach area: item:
        if is_kitchen_counter(area) and not visited(area):
            observe(area, "Check for chicken or onion around the kitchen counter")

def explore_other_areas():
    # Explore other areas for chicken or onion
    foreach area: item:
        if not is_kitchen_counter(area) and not visited(area):
            observe(area, "Continue searching for chicken or onion")

behavior __goal__():
    body:
        observe_kitchen_counter()
        explore_other_areas()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_chicken_or_onion(o: item):
    # Function to check if the item is either a chicken or an onion
    return is_food_chicken(o) or is_food_onion(o)

behavior find_chicken_and_onion(chicken: item, onion: item):
    body:
        achieve visited(chicken)
        achieve visited(onion)

behavior search_for_items():
    body:
        foreach o: item:
            if (is_food_chicken(o) or is_food_onion(o)) and not visited(o):
                observe(o, "Check if this is a chicken or onion")

behavior __goal__():
    body:
        if exists chicken: item : (is_food_chicken(chicken) and visited(chicken)) and exists onion: item : (is_food_onion(onion) and visited(onion)):
            # If both chicken and onion are already identified and marked as visited
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            bind onion: item where:
                is_food_onion(onion) and visited(onion)
            find_chicken_and_onion(chicken, onion)
        else:
            search_for_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'onion') at line 5712, column 94.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_fryingpan_2083(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
behavior __goal__():
    body:
        if exists chicken: item : (is_food_chicken(chicken) and visited(chicken)) and exists onion: item : (is_food_onion(onion) and visited(onion)):
            # If both chicken and onion are already identified and marked as visited
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            bind onion: item where:
                is_food_onion(onion) and visited(onion)
            find_chicken_and_onion(chicken, onion)
        else:
            search_for_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'onion') at line 5697, column 94.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_stove_2065(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def find_chicken_and_onion():
    # Check for chicken and onion at unvisited locations
    foreach location: item:
        if not visited(location):
            observe(location, "Look for chicken or onion")

behavior __goal__():
    body:
        if exists chicken: item : (is_food_chicken(chicken) and visited(chicken)) and exists onion: item : (is_food_onion(onion) and visited(onion)):
            # If both chicken and onion are already identified and marked as visited
            bind chicken: item where:
                is_food_chicken(chicken) and visited(chicken)
            bind onion: item where:
                is_food_onion(onion) and visited(onion)
            find_chicken_and_onion()
        else:
            find_chicken_and_onion()

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)']
Time info:
Time consume: 231 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 61
goal generate times: 7
goal correct times: 3
action_num: 1

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
