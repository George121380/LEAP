From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_kitchen_counter_230(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)  # Place the banana on the cutting board
        achieve_once cut(banana)  # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)  # Place the banana on the cutting board
        achieve_once cut(banana)  # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_banana_2011, kitchen_counter_230)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_banana_2011, kitchen_counter_230)
Fail to find food_banana_2011 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour oil into the pan
        achieve is_on(pan) # Turn on the stove to heat the oil in the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind pan: item where:
            is_stove(pan)
        # Select a stove

        heat_oil_in_pan(oil, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Pour oil into the pan
        achieve is_on(pan) # Turn on the stove to heat the oil in the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind pan: item where:
            is_stove(pan)
        # Select a stove

        heat_oil_in_pan(oil, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(stove_2065)putin_executor(oil_2079, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the stove_2065. 
##############################
From agent.py
putin_executor(oil_2079, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the stove_2065. oil_2079 is close stove_2065. oil_2079 is inside stove_2065. stove_2065 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices(banana:item, stove:item):
    body:
        achieve cut(banana) # Ensure the banana is sliced
        achieve inside(oil_2079, stove) # Ensure the oil is already in the stove
        achieve is_on(stove) # Ensure the stove is on for frying
        achieve_once close_char(char, stove) # Approach the stove where frying occurs

behavior observe_bananas_fried(banana:item, stove:item):
    body:
        observe(banana, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the sliced banana

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the same stove that is used for frying

        fry_banana_slices(banana, stove)
        observe_bananas_fried(banana, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil_2079; available variables: [Variable<banana: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_dress_2044_around_basket_for_clothes_2006(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_keyboard_415_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#goal_representation
behavior fry_banana_slices(banana:item, stove:item, oil:item):
    body:
        achieve cut(banana) # Ensure the banana is sliced
        achieve inside(oil, stove) # Ensure the oil is already in the stove
        achieve is_on(stove) # Ensure the stove is on for frying
        achieve_once close_char(char, stove) # Approach the stove where frying occurs

behavior observe_bananas_fried(banana:item, stove:item):
    body:
        observe(banana, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the sliced banana

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the same stove that is used for frying

        bind oil: item where:
            is_oil(oil) and id[oil] == 2079
        # Select the oil that is used in the frying process

        fry_banana_slices(banana, stove, oil)
        observe_bananas_fried(banana, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_banana_slices(banana:item, stove:item, oil:item):
    body:
        achieve cut(banana) # Ensure the banana is sliced
        achieve inside(oil, stove) # Ensure the oil is already in the stove
        achieve is_on(stove) # Ensure the stove is on for frying
        achieve_once close_char(char, stove) # Approach the stove where frying occurs

behavior observe_bananas_fried(banana:item, stove:item):
    body:
        observe(banana, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the sliced banana

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the same stove that is used for frying

        bind oil: item where:
            is_oil(oil) and id[oil] == 2079
        # Select the oil that is used in the frying process

        fry_banana_slices(banana, stove, oil)
        observe_bananas_fried(banana, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)obs(food_banana_2011, Check if the banana slices are golden brown)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
obs(food_banana_2011, Check if the banana slices are golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is close to cutting_board_2051. food_banana_2011 is close to character_65. food_banana_2011 is on cutting_board_2051. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fry the banana slices in the oil on the stove until they are golden brown. Currently, the bananas remain on the cutting board and have not been fried.
##############################
From agent.py
Human Instruction: The robot needs to fry the banana slices in the oil on the stove until they are golden brown. Currently, the bananas remain on the cutting board and have not been fried.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to stove_2065.
Action 15: Open stove_2065.
Action 16: Walk to oil_2079.
Action 17: Grab oil_2079.
Action 18: Walk to stove_2065.
Action 19: Put oil_2079 into stove_2065.
Action 20: Switch on stove_2065.
Action 21: Walk to food_banana_2011.
Action 22: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(slices:item, stove:item):
    body:
        achieve_once on(slices, stove)
        # Place banana slices on the stove

behavior monitor_frying(slices:item):
    body:
        observe(slices, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind slices: item where:
            is_food_banana(slices) and cut(slices)
        # Select the banana slices that have been cut

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_banana_slices(slices, stove)
        monitor_frying(slices)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices(slices:item, stove:item):
    body:
        achieve_once on(slices, stove)
        # Place banana slices on the stove

behavior monitor_frying(slices:item):
    body:
        observe(slices, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind slices: item where:
            is_food_banana(slices) and cut(slices)
        # Select the banana slices that have been cut

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_banana_slices(slices, stove)
        monitor_frying(slices)

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(stove_2065)put_executor(food_banana_2011, stove_2065)walk_executor(food_banana_2011)obs(food_banana_2011, Check if the banana slices are golden brown)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
put_executor(food_banana_2011, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. food_banana_2011 is close stove_2065. stove_2065 is close food_banana_2011. food_banana_2011 is on stove_2065. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. 
##############################
From agent.py
obs(food_banana_2011, Check if the banana slices are golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is close to character_65. food_banana_2011 is close to stove_2065. food_banana_2011 is on stove_2065. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue frying the banana slices until they turn golden brown. The observations do not confirm the required golden brown state, which indicates the frying process is incomplete.
##############################
From agent.py
Human Instruction: You need to continue frying the banana slices until they turn golden brown. The observations do not confirm the required golden brown state, which indicates the frying process is incomplete.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to stove_2065.
Action 15: Open stove_2065.
Action 16: Walk to oil_2079.
Action 17: Grab oil_2079.
Action 18: Walk to stove_2065.
Action 19: Put oil_2079 into stove_2065.
Action 20: Switch on stove_2065.
Action 21: Walk to food_banana_2011.
Action 22: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.
Action 23: Grab food_banana_2011.
Action 24: Walk to stove_2065.
Action 25: Put food_banana_2011 on stove_2065.
Action 26: Walk to food_banana_2011.
Action 27: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_banana_sliced_golden_brown(banana_slices: item):
    # Function to check if banana slices are golden brown
    symbol golden_brown = exists o: item : (is_food_banana(o) and cut(o) and on(o, banana_slices))
    return golden_brown

behavior fry_banana_slices(banana_slices: item, stove: item):
    body:
        achieve_once inside(banana_slices, stove) # Place the banana slices on the stove for frying
        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                observe(slice, "Check if the banana slice is golden brown") # Observe if the banana slice is golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced bananas

        bind stove: item where:
            is_stove(stove) and inside(oil_2079, stove)
        # Select the stove with oil in it

        if not is_banana_sliced_golden_brown(banana_slices):
            fry_banana_slices(banana_slices, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_banana_sliced_golden_brown(banana_slices: item):
    # Function to check if banana slices are golden brown
    symbol golden_brown = exists o: item : (is_food_banana(o) and cut(o) and on(o, banana_slices))
    return golden_brown

behavior fry_banana_slices(banana_slices: item, stove: item):
    body:
        achieve_once inside(banana_slices, stove) # Place the banana slices on the stove for frying
        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                observe(slice, "Check if the banana slice is golden brown") # Observe if the banana slice is golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced bananas

        bind stove: item where:
            is_stove(stove) and inside(oil_2079, stove)
        # Select the stove with oil in it

        if not is_banana_sliced_golden_brown(banana_slices):
            fry_banana_slices(banana_slices, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)putin_executor(food_banana_2011, stove_2065)obs(food_banana_2011, Check if the banana slice is golden brown)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
putin_executor(food_banana_2011, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. food_banana_2011 is inside stove_2065. food_banana_2011 is close stove_2065. food_banana_2011 released by left hand. 
##############################
From agent.py
obs(food_banana_2011, Check if the banana slice is golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is inside stove_2065. food_banana_2011 is close to character_65. food_banana_2011 is close to stove_2065. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to continue frying the banana slices until they turn golden brown. The observations so far do not confirm that the banana slices have reached the golden brown state, indicating that the frying process is not yet complete.
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(stove_2065)', 'putin_executor(oil_2079, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(stove_2065)', 'put_executor(food_banana_2011, stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'putin_executor(food_banana_2011, stove_2065)']
Time info:
Time consume: 134 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 47
goal generate times: 5
goal correct times: 1
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
